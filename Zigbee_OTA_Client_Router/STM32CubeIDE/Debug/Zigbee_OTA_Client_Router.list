
Zigbee_OTA_Client_Router.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ef8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .RamFunc      0000007c  08019038  08019038  00029038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001d28  080190b8  080190b8  000290b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0801ade0  0801ade0  0002ade0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0801ade8  0801ade8  0002ade8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0801adec  0801adec  0002adec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000012c  20000008  0801adf0  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000134  0801af1c  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bac  20000148  0801af2d  00030148  2**2
                  ALLOC
 10 .noinit       00001f50  20001cf4  0801af2d  00031cf4  2**2
                  ALLOC
 11 ._user_heap_stack 0001a004  20003c44  0801af2d  00033c44  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  00030145  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000000bc  20030028  20030028  00040000  2**2
                  ALLOC
 15 MB_MEM2       00000a76  200300e4  200300e4  00040000  2**2
                  ALLOC
 16 .debug_info   000484eb  00000000  00000000  00030179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007723  00000000  00000000  00078664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003d2c  00000000  00000000  0007fd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000027c8  00000000  00000000  00083ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002cc9a  00000000  00000000  00086280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000389cd  00000000  00000000  000b2f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00100af2  00000000  00000000  000eb8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00006a95  00000000  00000000  001ec3d9  2**0
                  CONTENTS, READONLY
 24 .iar.rtmodel  000002a5  00000000  00000000  001f2e6e  2**0
                  CONTENTS, READONLY
 25 .iar_vfe_header 00000030  00000000  00000000  001f3114  2**2
                  CONTENTS, READONLY
 26 .debug_frame  0000d434  00000000  00000000  001f3144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_types  00002d84  00000000  00000000  00200578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macinfo 0000067a  00000000  00000000  002032fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_loc    00008711  00000000  00000000  00203976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_pubnames 00001fd3  00000000  00000000  0020c087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000148 	.word	0x20000148
 800015c:	00000000 	.word	0x00000000
 8000160:	08019020 	.word	0x08019020

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000014c 	.word	0x2000014c
 800017c:	08019020 	.word	0x08019020

08000180 <ZbZclAppendInteger>:
 8000180:	b4f0      	push	{r4, r5, r6, r7}
 8000182:	0004      	movs	r4, r0
 8000184:	000d      	movs	r5, r1
 8000186:	9904      	ldr	r1, [sp, #16]
 8000188:	2700      	movs	r7, #0
 800018a:	2600      	movs	r6, #0
 800018c:	0010      	movs	r0, r2
 800018e:	b2c0      	uxtb	r0, r0
 8000190:	2808      	cmp	r0, #8
 8000192:	f000 80b2 	beq.w	80002fa <??ZbZclAppendInteger_0>
 8000196:	2809      	cmp	r0, #9
 8000198:	f000 80a4 	beq.w	80002e4 <??ZbZclAppendInteger_1>
 800019c:	280a      	cmp	r0, #10
 800019e:	f000 8096 	beq.w	80002ce <??ZbZclAppendInteger_2>
 80001a2:	280b      	cmp	r0, #11
 80001a4:	f000 8088 	beq.w	80002b8 <??ZbZclAppendInteger_3>
 80001a8:	280c      	cmp	r0, #12
 80001aa:	d07a      	beq.n	80002a2 <??ZbZclAppendInteger_4>
 80001ac:	280d      	cmp	r0, #13
 80001ae:	d06d      	beq.n	800028c <??ZbZclAppendInteger_5>
 80001b0:	280e      	cmp	r0, #14
 80001b2:	d060      	beq.n	8000276 <??ZbZclAppendInteger_6>
 80001b4:	280f      	cmp	r0, #15
 80001b6:	d053      	beq.n	8000260 <??ZbZclAppendInteger_7>
 80001b8:	2810      	cmp	r0, #16
 80001ba:	d042      	beq.n	8000242 <??ZbZclAppendInteger_8>
 80001bc:	2818      	cmp	r0, #24
 80001be:	f000 809c 	beq.w	80002fa <??ZbZclAppendInteger_0>
 80001c2:	2819      	cmp	r0, #25
 80001c4:	f000 808e 	beq.w	80002e4 <??ZbZclAppendInteger_1>
 80001c8:	281a      	cmp	r0, #26
 80001ca:	f000 8080 	beq.w	80002ce <??ZbZclAppendInteger_2>
 80001ce:	281b      	cmp	r0, #27
 80001d0:	d072      	beq.n	80002b8 <??ZbZclAppendInteger_3>
 80001d2:	281c      	cmp	r0, #28
 80001d4:	d065      	beq.n	80002a2 <??ZbZclAppendInteger_4>
 80001d6:	281d      	cmp	r0, #29
 80001d8:	d058      	beq.n	800028c <??ZbZclAppendInteger_5>
 80001da:	281e      	cmp	r0, #30
 80001dc:	d04b      	beq.n	8000276 <??ZbZclAppendInteger_6>
 80001de:	281f      	cmp	r0, #31
 80001e0:	d03e      	beq.n	8000260 <??ZbZclAppendInteger_7>
 80001e2:	2820      	cmp	r0, #32
 80001e4:	f000 8089 	beq.w	80002fa <??ZbZclAppendInteger_0>
 80001e8:	2821      	cmp	r0, #33	; 0x21
 80001ea:	d07b      	beq.n	80002e4 <??ZbZclAppendInteger_1>
 80001ec:	2822      	cmp	r0, #34	; 0x22
 80001ee:	d06e      	beq.n	80002ce <??ZbZclAppendInteger_2>
 80001f0:	2823      	cmp	r0, #35	; 0x23
 80001f2:	d061      	beq.n	80002b8 <??ZbZclAppendInteger_3>
 80001f4:	2824      	cmp	r0, #36	; 0x24
 80001f6:	d054      	beq.n	80002a2 <??ZbZclAppendInteger_4>
 80001f8:	2825      	cmp	r0, #37	; 0x25
 80001fa:	d047      	beq.n	800028c <??ZbZclAppendInteger_5>
 80001fc:	2826      	cmp	r0, #38	; 0x26
 80001fe:	d03a      	beq.n	8000276 <??ZbZclAppendInteger_6>
 8000200:	2827      	cmp	r0, #39	; 0x27
 8000202:	d02d      	beq.n	8000260 <??ZbZclAppendInteger_7>
 8000204:	2828      	cmp	r0, #40	; 0x28
 8000206:	d078      	beq.n	80002fa <??ZbZclAppendInteger_0>
 8000208:	2829      	cmp	r0, #41	; 0x29
 800020a:	d06b      	beq.n	80002e4 <??ZbZclAppendInteger_1>
 800020c:	282a      	cmp	r0, #42	; 0x2a
 800020e:	d05e      	beq.n	80002ce <??ZbZclAppendInteger_2>
 8000210:	282b      	cmp	r0, #43	; 0x2b
 8000212:	d051      	beq.n	80002b8 <??ZbZclAppendInteger_3>
 8000214:	282c      	cmp	r0, #44	; 0x2c
 8000216:	d044      	beq.n	80002a2 <??ZbZclAppendInteger_4>
 8000218:	282d      	cmp	r0, #45	; 0x2d
 800021a:	d037      	beq.n	800028c <??ZbZclAppendInteger_5>
 800021c:	282e      	cmp	r0, #46	; 0x2e
 800021e:	d02a      	beq.n	8000276 <??ZbZclAppendInteger_6>
 8000220:	282f      	cmp	r0, #47	; 0x2f
 8000222:	d01d      	beq.n	8000260 <??ZbZclAppendInteger_7>
 8000224:	2830      	cmp	r0, #48	; 0x30
 8000226:	d068      	beq.n	80002fa <??ZbZclAppendInteger_0>
 8000228:	2831      	cmp	r0, #49	; 0x31
 800022a:	d05b      	beq.n	80002e4 <??ZbZclAppendInteger_1>
 800022c:	28e2      	cmp	r0, #226	; 0xe2
 800022e:	d043      	beq.n	80002b8 <??ZbZclAppendInteger_3>
 8000230:	28e8      	cmp	r0, #232	; 0xe8
 8000232:	d057      	beq.n	80002e4 <??ZbZclAppendInteger_1>
 8000234:	28e9      	cmp	r0, #233	; 0xe9
 8000236:	d055      	beq.n	80002e4 <??ZbZclAppendInteger_1>
 8000238:	28ea      	cmp	r0, #234	; 0xea
 800023a:	d03d      	beq.n	80002b8 <??ZbZclAppendInteger_3>
 800023c:	28f0      	cmp	r0, #240	; 0xf0
 800023e:	d00f      	beq.n	8000260 <??ZbZclAppendInteger_7>
 8000240:	e064      	b.n	800030c <??ZbZclAppendInteger_9>

08000242 <??ZbZclAppendInteger_8>:
 8000242:	2900      	cmp	r1, #0
 8000244:	d102      	bne.n	800024c <??ZbZclAppendInteger_10>
 8000246:	f05f 30ff 	movs.w	r0, #4294967295
 800024a:	e061      	b.n	8000310 <??ZbZclAppendInteger_11>

0800024c <??ZbZclAppendInteger_10>:
 800024c:	2d00      	cmp	r5, #0
 800024e:	d101      	bne.n	8000254 <??ZbZclAppendInteger_12>
 8000250:	2c00      	cmp	r4, #0
 8000252:	d001      	beq.n	8000258 <??ZbZclAppendInteger_13>

08000254 <??ZbZclAppendInteger_12>:
 8000254:	2001      	movs	r0, #1
 8000256:	e000      	b.n	800025a <??ZbZclAppendInteger_14>

08000258 <??ZbZclAppendInteger_13>:
 8000258:	2000      	movs	r0, #0

0800025a <??ZbZclAppendInteger_14>:
 800025a:	7018      	strb	r0, [r3, #0]
 800025c:	2001      	movs	r0, #1
 800025e:	e057      	b.n	8000310 <??ZbZclAppendInteger_11>

08000260 <??ZbZclAppendInteger_7>:
 8000260:	428f      	cmp	r7, r1
 8000262:	d302      	bcc.n	800026a <??ZbZclAppendInteger_15>
 8000264:	f05f 30ff 	movs.w	r0, #4294967295
 8000268:	e052      	b.n	8000310 <??ZbZclAppendInteger_11>

0800026a <??ZbZclAppendInteger_15>:
 800026a:	55dc      	strb	r4, [r3, r7]
 800026c:	1c7f      	adds	r7, r7, #1
 800026e:	0a24      	lsrs	r4, r4, #8
 8000270:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8000274:	0a2d      	lsrs	r5, r5, #8

08000276 <??ZbZclAppendInteger_6>:
 8000276:	428f      	cmp	r7, r1
 8000278:	d302      	bcc.n	8000280 <??ZbZclAppendInteger_16>
 800027a:	f05f 30ff 	movs.w	r0, #4294967295
 800027e:	e047      	b.n	8000310 <??ZbZclAppendInteger_11>

08000280 <??ZbZclAppendInteger_16>:
 8000280:	55dc      	strb	r4, [r3, r7]
 8000282:	1c7f      	adds	r7, r7, #1
 8000284:	0a24      	lsrs	r4, r4, #8
 8000286:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800028a:	0a2d      	lsrs	r5, r5, #8

0800028c <??ZbZclAppendInteger_5>:
 800028c:	428f      	cmp	r7, r1
 800028e:	d302      	bcc.n	8000296 <??ZbZclAppendInteger_17>
 8000290:	f05f 30ff 	movs.w	r0, #4294967295
 8000294:	e03c      	b.n	8000310 <??ZbZclAppendInteger_11>

08000296 <??ZbZclAppendInteger_17>:
 8000296:	55dc      	strb	r4, [r3, r7]
 8000298:	1c7f      	adds	r7, r7, #1
 800029a:	0a24      	lsrs	r4, r4, #8
 800029c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80002a0:	0a2d      	lsrs	r5, r5, #8

080002a2 <??ZbZclAppendInteger_4>:
 80002a2:	428f      	cmp	r7, r1
 80002a4:	d302      	bcc.n	80002ac <??ZbZclAppendInteger_18>
 80002a6:	f05f 30ff 	movs.w	r0, #4294967295
 80002aa:	e031      	b.n	8000310 <??ZbZclAppendInteger_11>

080002ac <??ZbZclAppendInteger_18>:
 80002ac:	55dc      	strb	r4, [r3, r7]
 80002ae:	1c7f      	adds	r7, r7, #1
 80002b0:	0a24      	lsrs	r4, r4, #8
 80002b2:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80002b6:	0a2d      	lsrs	r5, r5, #8

080002b8 <??ZbZclAppendInteger_3>:
 80002b8:	428f      	cmp	r7, r1
 80002ba:	d302      	bcc.n	80002c2 <??ZbZclAppendInteger_19>
 80002bc:	f05f 30ff 	movs.w	r0, #4294967295
 80002c0:	e026      	b.n	8000310 <??ZbZclAppendInteger_11>

080002c2 <??ZbZclAppendInteger_19>:
 80002c2:	55dc      	strb	r4, [r3, r7]
 80002c4:	1c7f      	adds	r7, r7, #1
 80002c6:	0a24      	lsrs	r4, r4, #8
 80002c8:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80002cc:	0a2d      	lsrs	r5, r5, #8

080002ce <??ZbZclAppendInteger_2>:
 80002ce:	428f      	cmp	r7, r1
 80002d0:	d302      	bcc.n	80002d8 <??ZbZclAppendInteger_20>
 80002d2:	f05f 30ff 	movs.w	r0, #4294967295
 80002d6:	e01b      	b.n	8000310 <??ZbZclAppendInteger_11>

080002d8 <??ZbZclAppendInteger_20>:
 80002d8:	55dc      	strb	r4, [r3, r7]
 80002da:	1c7f      	adds	r7, r7, #1
 80002dc:	0a24      	lsrs	r4, r4, #8
 80002de:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80002e2:	0a2d      	lsrs	r5, r5, #8

080002e4 <??ZbZclAppendInteger_1>:
 80002e4:	428f      	cmp	r7, r1
 80002e6:	d302      	bcc.n	80002ee <??ZbZclAppendInteger_21>
 80002e8:	f05f 30ff 	movs.w	r0, #4294967295
 80002ec:	e010      	b.n	8000310 <??ZbZclAppendInteger_11>

080002ee <??ZbZclAppendInteger_21>:
 80002ee:	55dc      	strb	r4, [r3, r7]
 80002f0:	1c7f      	adds	r7, r7, #1
 80002f2:	0a24      	lsrs	r4, r4, #8
 80002f4:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80002f8:	0a2d      	lsrs	r5, r5, #8

080002fa <??ZbZclAppendInteger_0>:
 80002fa:	428f      	cmp	r7, r1
 80002fc:	d302      	bcc.n	8000304 <??ZbZclAppendInteger_22>
 80002fe:	f05f 30ff 	movs.w	r0, #4294967295
 8000302:	e005      	b.n	8000310 <??ZbZclAppendInteger_11>

08000304 <??ZbZclAppendInteger_22>:
 8000304:	55dc      	strb	r4, [r3, r7]
 8000306:	1c7f      	adds	r7, r7, #1
 8000308:	0038      	movs	r0, r7
 800030a:	e001      	b.n	8000310 <??ZbZclAppendInteger_11>

0800030c <??ZbZclAppendInteger_9>:
 800030c:	f05f 30ff 	movs.w	r0, #4294967295

08000310 <??ZbZclAppendInteger_11>:
 8000310:	bcf0      	pop	{r4, r5, r6, r7}
 8000312:	4770      	bx	lr

08000314 <ZbZclParseInteger>:
 8000314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000318:	4683      	mov	fp, r0
 800031a:	000e      	movs	r6, r1
 800031c:	4692      	mov	sl, r2
 800031e:	2700      	movs	r7, #0
 8000320:	2400      	movs	r4, #0
 8000322:	2500      	movs	r5, #0
 8000324:	f05f 0800 	movs.w	r8, #0
 8000328:	f05f 0900 	movs.w	r9, #0
 800032c:	4658      	mov	r0, fp
 800032e:	b2c0      	uxtb	r0, r0
 8000330:	f000 f91e 	bl	8000570 <ZbZclAttrIsInteger>
 8000334:	2800      	cmp	r0, #0
 8000336:	d105      	bne.n	8000344 <??ZbZclParseInteger_0>
 8000338:	208d      	movs	r0, #141	; 0x8d
 800033a:	f88a 0000 	strb.w	r0, [sl]
 800033e:	2000      	movs	r0, #0
 8000340:	2100      	movs	r1, #0
 8000342:	e113      	b.n	800056c <??ZbZclParseInteger_1>

08000344 <??ZbZclParseInteger_0>:
 8000344:	2000      	movs	r0, #0
 8000346:	f88a 0000 	strb.w	r0, [sl]
 800034a:	4658      	mov	r0, fp
 800034c:	b2c0      	uxtb	r0, r0
 800034e:	2808      	cmp	r0, #8
 8000350:	f000 8097 	beq.w	8000482 <??ZbZclParseInteger_2>
 8000354:	2809      	cmp	r0, #9
 8000356:	f000 808a 	beq.w	800046e <??ZbZclParseInteger_3>
 800035a:	280a      	cmp	r0, #10
 800035c:	d07d      	beq.n	800045a <??ZbZclParseInteger_4>
 800035e:	280b      	cmp	r0, #11
 8000360:	d071      	beq.n	8000446 <??ZbZclParseInteger_5>
 8000362:	280c      	cmp	r0, #12
 8000364:	d065      	beq.n	8000432 <??ZbZclParseInteger_6>
 8000366:	280d      	cmp	r0, #13
 8000368:	d059      	beq.n	800041e <??ZbZclParseInteger_7>
 800036a:	280e      	cmp	r0, #14
 800036c:	d04d      	beq.n	800040a <??ZbZclParseInteger_8>
 800036e:	280f      	cmp	r0, #15
 8000370:	d046      	beq.n	8000400 <??ZbZclParseInteger_9>
 8000372:	2810      	cmp	r0, #16
 8000374:	f000 8085 	beq.w	8000482 <??ZbZclParseInteger_2>
 8000378:	2818      	cmp	r0, #24
 800037a:	f000 8082 	beq.w	8000482 <??ZbZclParseInteger_2>
 800037e:	2819      	cmp	r0, #25
 8000380:	d075      	beq.n	800046e <??ZbZclParseInteger_3>
 8000382:	281a      	cmp	r0, #26
 8000384:	d069      	beq.n	800045a <??ZbZclParseInteger_4>
 8000386:	281b      	cmp	r0, #27
 8000388:	d05d      	beq.n	8000446 <??ZbZclParseInteger_5>
 800038a:	281c      	cmp	r0, #28
 800038c:	d051      	beq.n	8000432 <??ZbZclParseInteger_6>
 800038e:	281d      	cmp	r0, #29
 8000390:	d045      	beq.n	800041e <??ZbZclParseInteger_7>
 8000392:	281e      	cmp	r0, #30
 8000394:	d039      	beq.n	800040a <??ZbZclParseInteger_8>
 8000396:	281f      	cmp	r0, #31
 8000398:	d032      	beq.n	8000400 <??ZbZclParseInteger_9>
 800039a:	2820      	cmp	r0, #32
 800039c:	d071      	beq.n	8000482 <??ZbZclParseInteger_2>
 800039e:	2821      	cmp	r0, #33	; 0x21
 80003a0:	d065      	beq.n	800046e <??ZbZclParseInteger_3>
 80003a2:	2822      	cmp	r0, #34	; 0x22
 80003a4:	d059      	beq.n	800045a <??ZbZclParseInteger_4>
 80003a6:	2823      	cmp	r0, #35	; 0x23
 80003a8:	d04d      	beq.n	8000446 <??ZbZclParseInteger_5>
 80003aa:	2824      	cmp	r0, #36	; 0x24
 80003ac:	d041      	beq.n	8000432 <??ZbZclParseInteger_6>
 80003ae:	2825      	cmp	r0, #37	; 0x25
 80003b0:	d035      	beq.n	800041e <??ZbZclParseInteger_7>
 80003b2:	2826      	cmp	r0, #38	; 0x26
 80003b4:	d029      	beq.n	800040a <??ZbZclParseInteger_8>
 80003b6:	2827      	cmp	r0, #39	; 0x27
 80003b8:	d022      	beq.n	8000400 <??ZbZclParseInteger_9>
 80003ba:	2828      	cmp	r0, #40	; 0x28
 80003bc:	f000 80ac 	beq.w	8000518 <??ZbZclParseInteger_10>
 80003c0:	2829      	cmp	r0, #41	; 0x29
 80003c2:	f000 809f 	beq.w	8000504 <??ZbZclParseInteger_11>
 80003c6:	282a      	cmp	r0, #42	; 0x2a
 80003c8:	f000 8092 	beq.w	80004f0 <??ZbZclParseInteger_12>
 80003cc:	282b      	cmp	r0, #43	; 0x2b
 80003ce:	f000 8085 	beq.w	80004dc <??ZbZclParseInteger_13>
 80003d2:	282c      	cmp	r0, #44	; 0x2c
 80003d4:	d078      	beq.n	80004c8 <??ZbZclParseInteger_14>
 80003d6:	282d      	cmp	r0, #45	; 0x2d
 80003d8:	d06c      	beq.n	80004b4 <??ZbZclParseInteger_15>
 80003da:	282e      	cmp	r0, #46	; 0x2e
 80003dc:	d060      	beq.n	80004a0 <??ZbZclParseInteger_16>
 80003de:	282f      	cmp	r0, #47	; 0x2f
 80003e0:	d059      	beq.n	8000496 <??ZbZclParseInteger_17>
 80003e2:	2830      	cmp	r0, #48	; 0x30
 80003e4:	d04d      	beq.n	8000482 <??ZbZclParseInteger_2>
 80003e6:	2831      	cmp	r0, #49	; 0x31
 80003e8:	d041      	beq.n	800046e <??ZbZclParseInteger_3>
 80003ea:	28e2      	cmp	r0, #226	; 0xe2
 80003ec:	d02b      	beq.n	8000446 <??ZbZclParseInteger_5>
 80003ee:	28e8      	cmp	r0, #232	; 0xe8
 80003f0:	d03d      	beq.n	800046e <??ZbZclParseInteger_3>
 80003f2:	28e9      	cmp	r0, #233	; 0xe9
 80003f4:	d03b      	beq.n	800046e <??ZbZclParseInteger_3>
 80003f6:	28ea      	cmp	r0, #234	; 0xea
 80003f8:	d025      	beq.n	8000446 <??ZbZclParseInteger_5>
 80003fa:	28f0      	cmp	r0, #240	; 0xf0
 80003fc:	f040 80b1 	bne.w	8000562 <??ZbZclParseInteger_18>

08000400 <??ZbZclParseInteger_9>:
 8000400:	5df0      	ldrb	r0, [r6, r7]
 8000402:	2100      	movs	r1, #0
 8000404:	4304      	orrs	r4, r0
 8000406:	430d      	orrs	r5, r1
 8000408:	1c7f      	adds	r7, r7, #1

0800040a <??ZbZclParseInteger_8>:
 800040a:	5df0      	ldrb	r0, [r6, r7]
 800040c:	2100      	movs	r1, #0
 800040e:	003a      	movs	r2, r7
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	00d2      	lsls	r2, r2, #3
 8000414:	f007 fb0c 	bl	8007a30 <__aeabi_llsl>
 8000418:	4304      	orrs	r4, r0
 800041a:	430d      	orrs	r5, r1
 800041c:	1c7f      	adds	r7, r7, #1

0800041e <??ZbZclParseInteger_7>:
 800041e:	5df0      	ldrb	r0, [r6, r7]
 8000420:	2100      	movs	r1, #0
 8000422:	003a      	movs	r2, r7
 8000424:	b2d2      	uxtb	r2, r2
 8000426:	00d2      	lsls	r2, r2, #3
 8000428:	f007 fb02 	bl	8007a30 <__aeabi_llsl>
 800042c:	4304      	orrs	r4, r0
 800042e:	430d      	orrs	r5, r1
 8000430:	1c7f      	adds	r7, r7, #1

08000432 <??ZbZclParseInteger_6>:
 8000432:	5df0      	ldrb	r0, [r6, r7]
 8000434:	2100      	movs	r1, #0
 8000436:	003a      	movs	r2, r7
 8000438:	b2d2      	uxtb	r2, r2
 800043a:	00d2      	lsls	r2, r2, #3
 800043c:	f007 faf8 	bl	8007a30 <__aeabi_llsl>
 8000440:	4304      	orrs	r4, r0
 8000442:	430d      	orrs	r5, r1
 8000444:	1c7f      	adds	r7, r7, #1

08000446 <??ZbZclParseInteger_5>:
 8000446:	5df0      	ldrb	r0, [r6, r7]
 8000448:	2100      	movs	r1, #0
 800044a:	003a      	movs	r2, r7
 800044c:	b2d2      	uxtb	r2, r2
 800044e:	00d2      	lsls	r2, r2, #3
 8000450:	f007 faee 	bl	8007a30 <__aeabi_llsl>
 8000454:	4304      	orrs	r4, r0
 8000456:	430d      	orrs	r5, r1
 8000458:	1c7f      	adds	r7, r7, #1

0800045a <??ZbZclParseInteger_4>:
 800045a:	5df0      	ldrb	r0, [r6, r7]
 800045c:	2100      	movs	r1, #0
 800045e:	003a      	movs	r2, r7
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	00d2      	lsls	r2, r2, #3
 8000464:	f007 fae4 	bl	8007a30 <__aeabi_llsl>
 8000468:	4304      	orrs	r4, r0
 800046a:	430d      	orrs	r5, r1
 800046c:	1c7f      	adds	r7, r7, #1

0800046e <??ZbZclParseInteger_3>:
 800046e:	5df0      	ldrb	r0, [r6, r7]
 8000470:	2100      	movs	r1, #0
 8000472:	003a      	movs	r2, r7
 8000474:	b2d2      	uxtb	r2, r2
 8000476:	00d2      	lsls	r2, r2, #3
 8000478:	f007 fada 	bl	8007a30 <__aeabi_llsl>
 800047c:	4304      	orrs	r4, r0
 800047e:	430d      	orrs	r5, r1
 8000480:	1c7f      	adds	r7, r7, #1

08000482 <??ZbZclParseInteger_2>:
 8000482:	5df0      	ldrb	r0, [r6, r7]
 8000484:	2100      	movs	r1, #0
 8000486:	003a      	movs	r2, r7
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	00d2      	lsls	r2, r2, #3
 800048c:	f007 fad0 	bl	8007a30 <__aeabi_llsl>
 8000490:	4320      	orrs	r0, r4
 8000492:	4329      	orrs	r1, r5
 8000494:	e06a      	b.n	800056c <??ZbZclParseInteger_1>

08000496 <??ZbZclParseInteger_17>:
 8000496:	5df0      	ldrb	r0, [r6, r7]
 8000498:	2100      	movs	r1, #0
 800049a:	4304      	orrs	r4, r0
 800049c:	430d      	orrs	r5, r1
 800049e:	1c7f      	adds	r7, r7, #1

080004a0 <??ZbZclParseInteger_16>:
 80004a0:	5df0      	ldrb	r0, [r6, r7]
 80004a2:	2100      	movs	r1, #0
 80004a4:	003a      	movs	r2, r7
 80004a6:	b2d2      	uxtb	r2, r2
 80004a8:	00d2      	lsls	r2, r2, #3
 80004aa:	f007 fac1 	bl	8007a30 <__aeabi_llsl>
 80004ae:	4304      	orrs	r4, r0
 80004b0:	430d      	orrs	r5, r1
 80004b2:	1c7f      	adds	r7, r7, #1

080004b4 <??ZbZclParseInteger_15>:
 80004b4:	5df0      	ldrb	r0, [r6, r7]
 80004b6:	2100      	movs	r1, #0
 80004b8:	003a      	movs	r2, r7
 80004ba:	b2d2      	uxtb	r2, r2
 80004bc:	00d2      	lsls	r2, r2, #3
 80004be:	f007 fab7 	bl	8007a30 <__aeabi_llsl>
 80004c2:	4304      	orrs	r4, r0
 80004c4:	430d      	orrs	r5, r1
 80004c6:	1c7f      	adds	r7, r7, #1

080004c8 <??ZbZclParseInteger_14>:
 80004c8:	5df0      	ldrb	r0, [r6, r7]
 80004ca:	2100      	movs	r1, #0
 80004cc:	003a      	movs	r2, r7
 80004ce:	b2d2      	uxtb	r2, r2
 80004d0:	00d2      	lsls	r2, r2, #3
 80004d2:	f007 faad 	bl	8007a30 <__aeabi_llsl>
 80004d6:	4304      	orrs	r4, r0
 80004d8:	430d      	orrs	r5, r1
 80004da:	1c7f      	adds	r7, r7, #1

080004dc <??ZbZclParseInteger_13>:
 80004dc:	5df0      	ldrb	r0, [r6, r7]
 80004de:	2100      	movs	r1, #0
 80004e0:	003a      	movs	r2, r7
 80004e2:	b2d2      	uxtb	r2, r2
 80004e4:	00d2      	lsls	r2, r2, #3
 80004e6:	f007 faa3 	bl	8007a30 <__aeabi_llsl>
 80004ea:	4304      	orrs	r4, r0
 80004ec:	430d      	orrs	r5, r1
 80004ee:	1c7f      	adds	r7, r7, #1

080004f0 <??ZbZclParseInteger_12>:
 80004f0:	5df0      	ldrb	r0, [r6, r7]
 80004f2:	2100      	movs	r1, #0
 80004f4:	003a      	movs	r2, r7
 80004f6:	b2d2      	uxtb	r2, r2
 80004f8:	00d2      	lsls	r2, r2, #3
 80004fa:	f007 fa99 	bl	8007a30 <__aeabi_llsl>
 80004fe:	4304      	orrs	r4, r0
 8000500:	430d      	orrs	r5, r1
 8000502:	1c7f      	adds	r7, r7, #1

08000504 <??ZbZclParseInteger_11>:
 8000504:	5df0      	ldrb	r0, [r6, r7]
 8000506:	2100      	movs	r1, #0
 8000508:	003a      	movs	r2, r7
 800050a:	b2d2      	uxtb	r2, r2
 800050c:	00d2      	lsls	r2, r2, #3
 800050e:	f007 fa8f 	bl	8007a30 <__aeabi_llsl>
 8000512:	4304      	orrs	r4, r0
 8000514:	430d      	orrs	r5, r1
 8000516:	1c7f      	adds	r7, r7, #1

08000518 <??ZbZclParseInteger_10>:
 8000518:	5df0      	ldrb	r0, [r6, r7]
 800051a:	2100      	movs	r1, #0
 800051c:	003a      	movs	r2, r7
 800051e:	b2d2      	uxtb	r2, r2
 8000520:	00d2      	lsls	r2, r2, #3
 8000522:	f007 fa85 	bl	8007a30 <__aeabi_llsl>
 8000526:	4320      	orrs	r0, r4
 8000528:	4329      	orrs	r1, r5
 800052a:	003a      	movs	r2, r7
 800052c:	1c57      	adds	r7, r2, #1
 800052e:	5cb2      	ldrb	r2, [r6, r2]
 8000530:	0612      	lsls	r2, r2, #24
 8000532:	d515      	bpl.n	8000560 <??ZbZclParseInteger_19>
 8000534:	2f08      	cmp	r7, #8
 8000536:	d213      	bcs.n	8000560 <??ZbZclParseInteger_19>
 8000538:	0004      	movs	r4, r0
 800053a:	000d      	movs	r5, r1
 800053c:	2001      	movs	r0, #1
 800053e:	2100      	movs	r1, #0
 8000540:	f1d7 0208 	rsbs	r2, r7, #8
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	00d2      	lsls	r2, r2, #3
 8000548:	f007 fa72 	bl	8007a30 <__aeabi_llsl>
 800054c:	1e40      	subs	r0, r0, #1
 800054e:	f171 0100 	sbcs.w	r1, r1, #0
 8000552:	003a      	movs	r2, r7
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	00d2      	lsls	r2, r2, #3
 8000558:	f007 fa6a 	bl	8007a30 <__aeabi_llsl>
 800055c:	4320      	orrs	r0, r4
 800055e:	4329      	orrs	r1, r5

08000560 <??ZbZclParseInteger_19>:
 8000560:	e004      	b.n	800056c <??ZbZclParseInteger_1>

08000562 <??ZbZclParseInteger_18>:
 8000562:	208d      	movs	r0, #141	; 0x8d
 8000564:	f88a 0000 	strb.w	r0, [sl]
 8000568:	2000      	movs	r0, #0
 800056a:	2100      	movs	r1, #0

0800056c <??ZbZclParseInteger_1>:
 800056c:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000570 <ZbZclAttrIsInteger>:
 8000570:	0001      	movs	r1, r0
 8000572:	2200      	movs	r2, #0
 8000574:	0008      	movs	r0, r1
 8000576:	b2c0      	uxtb	r0, r0
 8000578:	3808      	subs	r0, #8
 800057a:	2808      	cmp	r0, #8
 800057c:	d909      	bls.n	8000592 <??ZbZclAttrIsInteger_0>
 800057e:	3810      	subs	r0, #16
 8000580:	2819      	cmp	r0, #25
 8000582:	d906      	bls.n	8000592 <??ZbZclAttrIsInteger_0>
 8000584:	38ca      	subs	r0, #202	; 0xca
 8000586:	d004      	beq.n	8000592 <??ZbZclAttrIsInteger_0>
 8000588:	1f80      	subs	r0, r0, #6
 800058a:	2802      	cmp	r0, #2
 800058c:	d901      	bls.n	8000592 <??ZbZclAttrIsInteger_0>
 800058e:	3808      	subs	r0, #8
 8000590:	d101      	bne.n	8000596 <??ZbZclAttrIsInteger_1>

08000592 <??ZbZclAttrIsInteger_0>:
 8000592:	2001      	movs	r0, #1
 8000594:	e000      	b.n	8000598 <??ZbZclAttrIsInteger_2>

08000596 <??ZbZclAttrIsInteger_1>:
 8000596:	2000      	movs	r0, #0

08000598 <??ZbZclAttrIsInteger_2>:
 8000598:	b2c0      	uxtb	r0, r0
 800059a:	4770      	bx	lr

0800059c <ZbZclAttrIntegerRangeCheck>:
 800059c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80005a0:	0004      	movs	r4, r0
 80005a2:	000d      	movs	r5, r1
 80005a4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80005a8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80005ac:	0010      	movs	r0, r2
 80005ae:	b2c0      	uxtb	r0, r0
 80005b0:	2810      	cmp	r0, #16
 80005b2:	d045      	beq.n	8000640 <??ZbZclAttrIntegerRangeCheck_0>
 80005b4:	2818      	cmp	r0, #24
 80005b6:	d051      	beq.n	800065c <??ZbZclAttrIntegerRangeCheck_1>
 80005b8:	2819      	cmp	r0, #25
 80005ba:	d060      	beq.n	800067e <??ZbZclAttrIntegerRangeCheck_2>
 80005bc:	281a      	cmp	r0, #26
 80005be:	d072      	beq.n	80006a6 <??ZbZclAttrIntegerRangeCheck_3>
 80005c0:	281b      	cmp	r0, #27
 80005c2:	f000 8086 	beq.w	80006d2 <??ZbZclAttrIntegerRangeCheck_4>
 80005c6:	281c      	cmp	r0, #28
 80005c8:	f000 8098 	beq.w	80006fc <??ZbZclAttrIntegerRangeCheck_5>
 80005cc:	281d      	cmp	r0, #29
 80005ce:	f000 80a7 	beq.w	8000720 <??ZbZclAttrIntegerRangeCheck_6>
 80005d2:	281e      	cmp	r0, #30
 80005d4:	f000 80b9 	beq.w	800074a <??ZbZclAttrIntegerRangeCheck_7>
 80005d8:	281f      	cmp	r0, #31
 80005da:	f000 80cd 	beq.w	8000778 <??ZbZclAttrIntegerRangeCheck_8>
 80005de:	2820      	cmp	r0, #32
 80005e0:	d03c      	beq.n	800065c <??ZbZclAttrIntegerRangeCheck_1>
 80005e2:	2821      	cmp	r0, #33	; 0x21
 80005e4:	d04b      	beq.n	800067e <??ZbZclAttrIntegerRangeCheck_2>
 80005e6:	2822      	cmp	r0, #34	; 0x22
 80005e8:	d05d      	beq.n	80006a6 <??ZbZclAttrIntegerRangeCheck_3>
 80005ea:	2823      	cmp	r0, #35	; 0x23
 80005ec:	d071      	beq.n	80006d2 <??ZbZclAttrIntegerRangeCheck_4>
 80005ee:	2824      	cmp	r0, #36	; 0x24
 80005f0:	f000 8084 	beq.w	80006fc <??ZbZclAttrIntegerRangeCheck_5>
 80005f4:	2825      	cmp	r0, #37	; 0x25
 80005f6:	f000 8093 	beq.w	8000720 <??ZbZclAttrIntegerRangeCheck_6>
 80005fa:	2826      	cmp	r0, #38	; 0x26
 80005fc:	f000 80a5 	beq.w	800074a <??ZbZclAttrIntegerRangeCheck_7>
 8000600:	2827      	cmp	r0, #39	; 0x27
 8000602:	f000 80b9 	beq.w	8000778 <??ZbZclAttrIntegerRangeCheck_8>
 8000606:	2828      	cmp	r0, #40	; 0x28
 8000608:	f000 80c1 	beq.w	800078e <??ZbZclAttrIntegerRangeCheck_9>
 800060c:	2829      	cmp	r0, #41	; 0x29
 800060e:	f000 80d9 	beq.w	80007c4 <??ZbZclAttrIntegerRangeCheck_10>
 8000612:	282a      	cmp	r0, #42	; 0x2a
 8000614:	f000 80f0 	beq.w	80007f8 <??ZbZclAttrIntegerRangeCheck_11>
 8000618:	282b      	cmp	r0, #43	; 0x2b
 800061a:	f000 8107 	beq.w	800082c <??ZbZclAttrIntegerRangeCheck_12>
 800061e:	282c      	cmp	r0, #44	; 0x2c
 8000620:	f000 8120 	beq.w	8000864 <??ZbZclAttrIntegerRangeCheck_13>
 8000624:	282d      	cmp	r0, #45	; 0x2d
 8000626:	f000 8136 	beq.w	8000896 <??ZbZclAttrIntegerRangeCheck_14>
 800062a:	282e      	cmp	r0, #46	; 0x2e
 800062c:	f000 814b 	beq.w	80008c6 <??ZbZclAttrIntegerRangeCheck_15>
 8000630:	282f      	cmp	r0, #47	; 0x2f
 8000632:	f000 8160 	beq.w	80008f6 <??ZbZclAttrIntegerRangeCheck_16>
 8000636:	2830      	cmp	r0, #48	; 0x30
 8000638:	d010      	beq.n	800065c <??ZbZclAttrIntegerRangeCheck_1>
 800063a:	2831      	cmp	r0, #49	; 0x31
 800063c:	d01f      	beq.n	800067e <??ZbZclAttrIntegerRangeCheck_2>
 800063e:	e164      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

08000640 <??ZbZclAttrIntegerRangeCheck_0>:
 8000640:	2d00      	cmp	r5, #0
 8000642:	d103      	bne.n	800064c <??ZbZclAttrIntegerRangeCheck_18>
 8000644:	2cff      	cmp	r4, #255	; 0xff
 8000646:	d101      	bne.n	800064c <??ZbZclAttrIntegerRangeCheck_18>
 8000648:	2001      	movs	r0, #1
 800064a:	e176      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800064c <??ZbZclAttrIntegerRangeCheck_18>:
 800064c:	2d00      	cmp	r5, #0
 800064e:	db04      	blt.n	800065a <??ZbZclAttrIntegerRangeCheck_20>
 8000650:	dc01      	bgt.n	8000656 <??ZbZclAttrIntegerRangeCheck_21>
 8000652:	2c02      	cmp	r4, #2
 8000654:	d301      	bcc.n	800065a <??ZbZclAttrIntegerRangeCheck_20>

08000656 <??ZbZclAttrIntegerRangeCheck_21>:
 8000656:	2000      	movs	r0, #0
 8000658:	e16f      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800065a <??ZbZclAttrIntegerRangeCheck_20>:
 800065a:	e156      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800065c <??ZbZclAttrIntegerRangeCheck_1>:
 800065c:	2d00      	cmp	r5, #0
 800065e:	d103      	bne.n	8000668 <??ZbZclAttrIntegerRangeCheck_23>
 8000660:	2cff      	cmp	r4, #255	; 0xff
 8000662:	d101      	bne.n	8000668 <??ZbZclAttrIntegerRangeCheck_23>
 8000664:	2001      	movs	r0, #1
 8000666:	e168      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000668 <??ZbZclAttrIntegerRangeCheck_23>:
 8000668:	2d00      	cmp	r5, #0
 800066a:	d405      	bmi.n	8000678 <??ZbZclAttrIntegerRangeCheck_24>
 800066c:	2d00      	cmp	r5, #0
 800066e:	db05      	blt.n	800067c <??ZbZclAttrIntegerRangeCheck_25>
 8000670:	dc02      	bgt.n	8000678 <??ZbZclAttrIntegerRangeCheck_24>
 8000672:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8000676:	d301      	bcc.n	800067c <??ZbZclAttrIntegerRangeCheck_25>

08000678 <??ZbZclAttrIntegerRangeCheck_24>:
 8000678:	2000      	movs	r0, #0
 800067a:	e15e      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800067c <??ZbZclAttrIntegerRangeCheck_25>:
 800067c:	e145      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800067e <??ZbZclAttrIntegerRangeCheck_2>:
 800067e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000682:	2100      	movs	r1, #0
 8000684:	428d      	cmp	r5, r1
 8000686:	d103      	bne.n	8000690 <??ZbZclAttrIntegerRangeCheck_27>
 8000688:	4284      	cmp	r4, r0
 800068a:	d101      	bne.n	8000690 <??ZbZclAttrIntegerRangeCheck_27>
 800068c:	2001      	movs	r0, #1
 800068e:	e154      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000690 <??ZbZclAttrIntegerRangeCheck_27>:
 8000690:	2d00      	cmp	r5, #0
 8000692:	d405      	bmi.n	80006a0 <??ZbZclAttrIntegerRangeCheck_28>
 8000694:	2d00      	cmp	r5, #0
 8000696:	db05      	blt.n	80006a4 <??ZbZclAttrIntegerRangeCheck_29>
 8000698:	dc02      	bgt.n	80006a0 <??ZbZclAttrIntegerRangeCheck_28>
 800069a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800069e:	d301      	bcc.n	80006a4 <??ZbZclAttrIntegerRangeCheck_29>

080006a0 <??ZbZclAttrIntegerRangeCheck_28>:
 80006a0:	2000      	movs	r0, #0
 80006a2:	e14a      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080006a4 <??ZbZclAttrIntegerRangeCheck_29>:
 80006a4:	e131      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080006a6 <??ZbZclAttrIntegerRangeCheck_3>:
 80006a6:	f07f 407f 	mvns.w	r0, #4278190080	; 0xff000000
 80006aa:	2100      	movs	r1, #0
 80006ac:	428d      	cmp	r5, r1
 80006ae:	d103      	bne.n	80006b8 <??ZbZclAttrIntegerRangeCheck_31>
 80006b0:	4284      	cmp	r4, r0
 80006b2:	d101      	bne.n	80006b8 <??ZbZclAttrIntegerRangeCheck_31>
 80006b4:	2001      	movs	r0, #1
 80006b6:	e140      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080006b8 <??ZbZclAttrIntegerRangeCheck_31>:
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d407      	bmi.n	80006cc <??ZbZclAttrIntegerRangeCheck_32>
 80006bc:	f05f 7080 	movs.w	r0, #16777216	; 0x1000000
 80006c0:	2100      	movs	r1, #0
 80006c2:	428d      	cmp	r5, r1
 80006c4:	db04      	blt.n	80006d0 <??ZbZclAttrIntegerRangeCheck_33>
 80006c6:	dc01      	bgt.n	80006cc <??ZbZclAttrIntegerRangeCheck_32>
 80006c8:	4284      	cmp	r4, r0
 80006ca:	d301      	bcc.n	80006d0 <??ZbZclAttrIntegerRangeCheck_33>

080006cc <??ZbZclAttrIntegerRangeCheck_32>:
 80006cc:	2000      	movs	r0, #0
 80006ce:	e134      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080006d0 <??ZbZclAttrIntegerRangeCheck_33>:
 80006d0:	e11b      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080006d2 <??ZbZclAttrIntegerRangeCheck_4>:
 80006d2:	f05f 30ff 	movs.w	r0, #4294967295
 80006d6:	2100      	movs	r1, #0
 80006d8:	428d      	cmp	r5, r1
 80006da:	d103      	bne.n	80006e4 <??ZbZclAttrIntegerRangeCheck_35>
 80006dc:	4284      	cmp	r4, r0
 80006de:	d101      	bne.n	80006e4 <??ZbZclAttrIntegerRangeCheck_35>
 80006e0:	2001      	movs	r0, #1
 80006e2:	e12a      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080006e4 <??ZbZclAttrIntegerRangeCheck_35>:
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d406      	bmi.n	80006f6 <??ZbZclAttrIntegerRangeCheck_36>
 80006e8:	2000      	movs	r0, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	428d      	cmp	r5, r1
 80006ee:	db04      	blt.n	80006fa <??ZbZclAttrIntegerRangeCheck_37>
 80006f0:	dc01      	bgt.n	80006f6 <??ZbZclAttrIntegerRangeCheck_36>
 80006f2:	4284      	cmp	r4, r0
 80006f4:	d301      	bcc.n	80006fa <??ZbZclAttrIntegerRangeCheck_37>

080006f6 <??ZbZclAttrIntegerRangeCheck_36>:
 80006f6:	2000      	movs	r0, #0
 80006f8:	e11f      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080006fa <??ZbZclAttrIntegerRangeCheck_37>:
 80006fa:	e106      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080006fc <??ZbZclAttrIntegerRangeCheck_5>:
 80006fc:	2dff      	cmp	r5, #255	; 0xff
 80006fe:	d104      	bne.n	800070a <??ZbZclAttrIntegerRangeCheck_39>
 8000700:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000704:	d101      	bne.n	800070a <??ZbZclAttrIntegerRangeCheck_39>
 8000706:	2001      	movs	r0, #1
 8000708:	e117      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800070a <??ZbZclAttrIntegerRangeCheck_39>:
 800070a:	2d00      	cmp	r5, #0
 800070c:	d405      	bmi.n	800071a <??ZbZclAttrIntegerRangeCheck_40>
 800070e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000712:	db04      	blt.n	800071e <??ZbZclAttrIntegerRangeCheck_41>
 8000714:	dc01      	bgt.n	800071a <??ZbZclAttrIntegerRangeCheck_40>
 8000716:	2c00      	cmp	r4, #0
 8000718:	d301      	bcc.n	800071e <??ZbZclAttrIntegerRangeCheck_41>

0800071a <??ZbZclAttrIntegerRangeCheck_40>:
 800071a:	2000      	movs	r0, #0
 800071c:	e10d      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800071e <??ZbZclAttrIntegerRangeCheck_41>:
 800071e:	e0f4      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

08000720 <??ZbZclAttrIntegerRangeCheck_6>:
 8000720:	f05f 30ff 	movs.w	r0, #4294967295
 8000724:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000728:	428d      	cmp	r5, r1
 800072a:	d103      	bne.n	8000734 <??ZbZclAttrIntegerRangeCheck_43>
 800072c:	4284      	cmp	r4, r0
 800072e:	d101      	bne.n	8000734 <??ZbZclAttrIntegerRangeCheck_43>
 8000730:	2001      	movs	r0, #1
 8000732:	e102      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000734 <??ZbZclAttrIntegerRangeCheck_43>:
 8000734:	2d00      	cmp	r5, #0
 8000736:	d405      	bmi.n	8000744 <??ZbZclAttrIntegerRangeCheck_44>
 8000738:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800073c:	db04      	blt.n	8000748 <??ZbZclAttrIntegerRangeCheck_45>
 800073e:	dc01      	bgt.n	8000744 <??ZbZclAttrIntegerRangeCheck_44>
 8000740:	2c00      	cmp	r4, #0
 8000742:	d301      	bcc.n	8000748 <??ZbZclAttrIntegerRangeCheck_45>

08000744 <??ZbZclAttrIntegerRangeCheck_44>:
 8000744:	2000      	movs	r0, #0
 8000746:	e0f8      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000748 <??ZbZclAttrIntegerRangeCheck_45>:
 8000748:	e0df      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800074a <??ZbZclAttrIntegerRangeCheck_7>:
 800074a:	f05f 30ff 	movs.w	r0, #4294967295
 800074e:	f07f 417f 	mvns.w	r1, #4278190080	; 0xff000000
 8000752:	428d      	cmp	r5, r1
 8000754:	d103      	bne.n	800075e <??ZbZclAttrIntegerRangeCheck_47>
 8000756:	4284      	cmp	r4, r0
 8000758:	d101      	bne.n	800075e <??ZbZclAttrIntegerRangeCheck_47>
 800075a:	2001      	movs	r0, #1
 800075c:	e0ed      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800075e <??ZbZclAttrIntegerRangeCheck_47>:
 800075e:	2d00      	cmp	r5, #0
 8000760:	d407      	bmi.n	8000772 <??ZbZclAttrIntegerRangeCheck_48>
 8000762:	2000      	movs	r0, #0
 8000764:	f05f 7180 	movs.w	r1, #16777216	; 0x1000000
 8000768:	428d      	cmp	r5, r1
 800076a:	db04      	blt.n	8000776 <??ZbZclAttrIntegerRangeCheck_49>
 800076c:	dc01      	bgt.n	8000772 <??ZbZclAttrIntegerRangeCheck_48>
 800076e:	4284      	cmp	r4, r0
 8000770:	d301      	bcc.n	8000776 <??ZbZclAttrIntegerRangeCheck_49>

08000772 <??ZbZclAttrIntegerRangeCheck_48>:
 8000772:	2000      	movs	r0, #0
 8000774:	e0e1      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000776 <??ZbZclAttrIntegerRangeCheck_49>:
 8000776:	e0c8      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

08000778 <??ZbZclAttrIntegerRangeCheck_8>:
 8000778:	f05f 30ff 	movs.w	r0, #4294967295
 800077c:	f05f 31ff 	movs.w	r1, #4294967295
 8000780:	428d      	cmp	r5, r1
 8000782:	d103      	bne.n	800078c <??ZbZclAttrIntegerRangeCheck_51>
 8000784:	4284      	cmp	r4, r0
 8000786:	d101      	bne.n	800078c <??ZbZclAttrIntegerRangeCheck_51>
 8000788:	2001      	movs	r0, #1
 800078a:	e0d6      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800078c <??ZbZclAttrIntegerRangeCheck_51>:
 800078c:	e0bd      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800078e <??ZbZclAttrIntegerRangeCheck_9>:
 800078e:	f07f 007f 	mvns.w	r0, #127	; 0x7f
 8000792:	f05f 31ff 	movs.w	r1, #4294967295
 8000796:	428d      	cmp	r5, r1
 8000798:	d103      	bne.n	80007a2 <??ZbZclAttrIntegerRangeCheck_52>
 800079a:	4284      	cmp	r4, r0
 800079c:	d101      	bne.n	80007a2 <??ZbZclAttrIntegerRangeCheck_52>
 800079e:	2001      	movs	r0, #1
 80007a0:	e0cb      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080007a2 <??ZbZclAttrIntegerRangeCheck_52>:
 80007a2:	f07f 007f 	mvns.w	r0, #127	; 0x7f
 80007a6:	f05f 31ff 	movs.w	r1, #4294967295
 80007aa:	428d      	cmp	r5, r1
 80007ac:	db07      	blt.n	80007be <??ZbZclAttrIntegerRangeCheck_53>
 80007ae:	dc01      	bgt.n	80007b4 <??ZbZclAttrIntegerRangeCheck_54>
 80007b0:	4284      	cmp	r4, r0
 80007b2:	d304      	bcc.n	80007be <??ZbZclAttrIntegerRangeCheck_53>

080007b4 <??ZbZclAttrIntegerRangeCheck_54>:
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	db04      	blt.n	80007c2 <??ZbZclAttrIntegerRangeCheck_55>
 80007b8:	dc01      	bgt.n	80007be <??ZbZclAttrIntegerRangeCheck_53>
 80007ba:	2c80      	cmp	r4, #128	; 0x80
 80007bc:	d301      	bcc.n	80007c2 <??ZbZclAttrIntegerRangeCheck_55>

080007be <??ZbZclAttrIntegerRangeCheck_53>:
 80007be:	2000      	movs	r0, #0
 80007c0:	e0bb      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080007c2 <??ZbZclAttrIntegerRangeCheck_55>:
 80007c2:	e0a2      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080007c4 <??ZbZclAttrIntegerRangeCheck_10>:
 80007c4:	485e      	ldr	r0, [pc, #376]	; (8000940 <??DataTable1>)
 80007c6:	f05f 31ff 	movs.w	r1, #4294967295
 80007ca:	428d      	cmp	r5, r1
 80007cc:	d103      	bne.n	80007d6 <??ZbZclAttrIntegerRangeCheck_57>
 80007ce:	4284      	cmp	r4, r0
 80007d0:	d101      	bne.n	80007d6 <??ZbZclAttrIntegerRangeCheck_57>
 80007d2:	2001      	movs	r0, #1
 80007d4:	e0b1      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080007d6 <??ZbZclAttrIntegerRangeCheck_57>:
 80007d6:	485a      	ldr	r0, [pc, #360]	; (8000940 <??DataTable1>)
 80007d8:	f05f 31ff 	movs.w	r1, #4294967295
 80007dc:	428d      	cmp	r5, r1
 80007de:	db08      	blt.n	80007f2 <??ZbZclAttrIntegerRangeCheck_58>
 80007e0:	dc01      	bgt.n	80007e6 <??ZbZclAttrIntegerRangeCheck_59>
 80007e2:	4284      	cmp	r4, r0
 80007e4:	d305      	bcc.n	80007f2 <??ZbZclAttrIntegerRangeCheck_58>

080007e6 <??ZbZclAttrIntegerRangeCheck_59>:
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	db05      	blt.n	80007f6 <??ZbZclAttrIntegerRangeCheck_60>
 80007ea:	dc02      	bgt.n	80007f2 <??ZbZclAttrIntegerRangeCheck_58>
 80007ec:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80007f0:	d301      	bcc.n	80007f6 <??ZbZclAttrIntegerRangeCheck_60>

080007f2 <??ZbZclAttrIntegerRangeCheck_58>:
 80007f2:	2000      	movs	r0, #0
 80007f4:	e0a1      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080007f6 <??ZbZclAttrIntegerRangeCheck_60>:
 80007f6:	e088      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080007f8 <??ZbZclAttrIntegerRangeCheck_11>:
 80007f8:	4852      	ldr	r0, [pc, #328]	; (8000944 <??DataTable1_1>)
 80007fa:	f05f 31ff 	movs.w	r1, #4294967295
 80007fe:	428d      	cmp	r5, r1
 8000800:	d103      	bne.n	800080a <??ZbZclAttrIntegerRangeCheck_62>
 8000802:	4284      	cmp	r4, r0
 8000804:	d101      	bne.n	800080a <??ZbZclAttrIntegerRangeCheck_62>
 8000806:	2001      	movs	r0, #1
 8000808:	e097      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800080a <??ZbZclAttrIntegerRangeCheck_62>:
 800080a:	484e      	ldr	r0, [pc, #312]	; (8000944 <??DataTable1_1>)
 800080c:	f05f 31ff 	movs.w	r1, #4294967295
 8000810:	428d      	cmp	r5, r1
 8000812:	db08      	blt.n	8000826 <??ZbZclAttrIntegerRangeCheck_63>
 8000814:	dc01      	bgt.n	800081a <??ZbZclAttrIntegerRangeCheck_64>
 8000816:	4284      	cmp	r4, r0
 8000818:	d305      	bcc.n	8000826 <??ZbZclAttrIntegerRangeCheck_63>

0800081a <??ZbZclAttrIntegerRangeCheck_64>:
 800081a:	2d00      	cmp	r5, #0
 800081c:	db05      	blt.n	800082a <??ZbZclAttrIntegerRangeCheck_65>
 800081e:	dc02      	bgt.n	8000826 <??ZbZclAttrIntegerRangeCheck_63>
 8000820:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8000824:	d301      	bcc.n	800082a <??ZbZclAttrIntegerRangeCheck_65>

08000826 <??ZbZclAttrIntegerRangeCheck_63>:
 8000826:	2000      	movs	r0, #0
 8000828:	e087      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800082a <??ZbZclAttrIntegerRangeCheck_65>:
 800082a:	e06e      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800082c <??ZbZclAttrIntegerRangeCheck_12>:
 800082c:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 8000830:	f05f 31ff 	movs.w	r1, #4294967295
 8000834:	428d      	cmp	r5, r1
 8000836:	d103      	bne.n	8000840 <??ZbZclAttrIntegerRangeCheck_67>
 8000838:	4284      	cmp	r4, r0
 800083a:	d101      	bne.n	8000840 <??ZbZclAttrIntegerRangeCheck_67>
 800083c:	2001      	movs	r0, #1
 800083e:	e07c      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000840 <??ZbZclAttrIntegerRangeCheck_67>:
 8000840:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 8000844:	f05f 31ff 	movs.w	r1, #4294967295
 8000848:	428d      	cmp	r5, r1
 800084a:	db08      	blt.n	800085e <??ZbZclAttrIntegerRangeCheck_68>
 800084c:	dc01      	bgt.n	8000852 <??ZbZclAttrIntegerRangeCheck_69>
 800084e:	4284      	cmp	r4, r0
 8000850:	d305      	bcc.n	800085e <??ZbZclAttrIntegerRangeCheck_68>

08000852 <??ZbZclAttrIntegerRangeCheck_69>:
 8000852:	2d00      	cmp	r5, #0
 8000854:	db05      	blt.n	8000862 <??ZbZclAttrIntegerRangeCheck_70>
 8000856:	dc02      	bgt.n	800085e <??ZbZclAttrIntegerRangeCheck_68>
 8000858:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800085c:	d301      	bcc.n	8000862 <??ZbZclAttrIntegerRangeCheck_70>

0800085e <??ZbZclAttrIntegerRangeCheck_68>:
 800085e:	2000      	movs	r0, #0
 8000860:	e06b      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000862 <??ZbZclAttrIntegerRangeCheck_70>:
 8000862:	e052      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

08000864 <??ZbZclAttrIntegerRangeCheck_13>:
 8000864:	2000      	movs	r0, #0
 8000866:	f07f 017f 	mvns.w	r1, #127	; 0x7f
 800086a:	428d      	cmp	r5, r1
 800086c:	d103      	bne.n	8000876 <??ZbZclAttrIntegerRangeCheck_72>
 800086e:	4284      	cmp	r4, r0
 8000870:	d101      	bne.n	8000876 <??ZbZclAttrIntegerRangeCheck_72>
 8000872:	2001      	movs	r0, #1
 8000874:	e061      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000876 <??ZbZclAttrIntegerRangeCheck_72>:
 8000876:	2000      	movs	r0, #0
 8000878:	f07f 017f 	mvns.w	r1, #127	; 0x7f
 800087c:	428d      	cmp	r5, r1
 800087e:	db07      	blt.n	8000890 <??ZbZclAttrIntegerRangeCheck_73>
 8000880:	dc01      	bgt.n	8000886 <??ZbZclAttrIntegerRangeCheck_74>
 8000882:	4284      	cmp	r4, r0
 8000884:	d304      	bcc.n	8000890 <??ZbZclAttrIntegerRangeCheck_73>

08000886 <??ZbZclAttrIntegerRangeCheck_74>:
 8000886:	2d80      	cmp	r5, #128	; 0x80
 8000888:	db04      	blt.n	8000894 <??ZbZclAttrIntegerRangeCheck_75>
 800088a:	dc01      	bgt.n	8000890 <??ZbZclAttrIntegerRangeCheck_73>
 800088c:	2c00      	cmp	r4, #0
 800088e:	d301      	bcc.n	8000894 <??ZbZclAttrIntegerRangeCheck_75>

08000890 <??ZbZclAttrIntegerRangeCheck_73>:
 8000890:	2000      	movs	r0, #0
 8000892:	e052      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000894 <??ZbZclAttrIntegerRangeCheck_75>:
 8000894:	e039      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

08000896 <??ZbZclAttrIntegerRangeCheck_14>:
 8000896:	2000      	movs	r0, #0
 8000898:	4929      	ldr	r1, [pc, #164]	; (8000940 <??DataTable1>)
 800089a:	428d      	cmp	r5, r1
 800089c:	d103      	bne.n	80008a6 <??ZbZclAttrIntegerRangeCheck_77>
 800089e:	4284      	cmp	r4, r0
 80008a0:	d101      	bne.n	80008a6 <??ZbZclAttrIntegerRangeCheck_77>
 80008a2:	2001      	movs	r0, #1
 80008a4:	e049      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080008a6 <??ZbZclAttrIntegerRangeCheck_77>:
 80008a6:	2000      	movs	r0, #0
 80008a8:	4925      	ldr	r1, [pc, #148]	; (8000940 <??DataTable1>)
 80008aa:	428d      	cmp	r5, r1
 80008ac:	db08      	blt.n	80008c0 <??ZbZclAttrIntegerRangeCheck_78>
 80008ae:	dc01      	bgt.n	80008b4 <??ZbZclAttrIntegerRangeCheck_79>
 80008b0:	4284      	cmp	r4, r0
 80008b2:	d305      	bcc.n	80008c0 <??ZbZclAttrIntegerRangeCheck_78>

080008b4 <??ZbZclAttrIntegerRangeCheck_79>:
 80008b4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80008b8:	db04      	blt.n	80008c4 <??ZbZclAttrIntegerRangeCheck_80>
 80008ba:	dc01      	bgt.n	80008c0 <??ZbZclAttrIntegerRangeCheck_78>
 80008bc:	2c00      	cmp	r4, #0
 80008be:	d301      	bcc.n	80008c4 <??ZbZclAttrIntegerRangeCheck_80>

080008c0 <??ZbZclAttrIntegerRangeCheck_78>:
 80008c0:	2000      	movs	r0, #0
 80008c2:	e03a      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080008c4 <??ZbZclAttrIntegerRangeCheck_80>:
 80008c4:	e021      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080008c6 <??ZbZclAttrIntegerRangeCheck_15>:
 80008c6:	2000      	movs	r0, #0
 80008c8:	491e      	ldr	r1, [pc, #120]	; (8000944 <??DataTable1_1>)
 80008ca:	428d      	cmp	r5, r1
 80008cc:	d103      	bne.n	80008d6 <??ZbZclAttrIntegerRangeCheck_82>
 80008ce:	4284      	cmp	r4, r0
 80008d0:	d101      	bne.n	80008d6 <??ZbZclAttrIntegerRangeCheck_82>
 80008d2:	2001      	movs	r0, #1
 80008d4:	e031      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080008d6 <??ZbZclAttrIntegerRangeCheck_82>:
 80008d6:	2000      	movs	r0, #0
 80008d8:	491a      	ldr	r1, [pc, #104]	; (8000944 <??DataTable1_1>)
 80008da:	428d      	cmp	r5, r1
 80008dc:	db08      	blt.n	80008f0 <??ZbZclAttrIntegerRangeCheck_83>
 80008de:	dc01      	bgt.n	80008e4 <??ZbZclAttrIntegerRangeCheck_84>
 80008e0:	4284      	cmp	r4, r0
 80008e2:	d305      	bcc.n	80008f0 <??ZbZclAttrIntegerRangeCheck_83>

080008e4 <??ZbZclAttrIntegerRangeCheck_84>:
 80008e4:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 80008e8:	db04      	blt.n	80008f4 <??ZbZclAttrIntegerRangeCheck_85>
 80008ea:	dc01      	bgt.n	80008f0 <??ZbZclAttrIntegerRangeCheck_83>
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d301      	bcc.n	80008f4 <??ZbZclAttrIntegerRangeCheck_85>

080008f0 <??ZbZclAttrIntegerRangeCheck_83>:
 80008f0:	2000      	movs	r0, #0
 80008f2:	e022      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

080008f4 <??ZbZclAttrIntegerRangeCheck_85>:
 80008f4:	e009      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

080008f6 <??ZbZclAttrIntegerRangeCheck_16>:
 80008f6:	2000      	movs	r0, #0
 80008f8:	f05f 4100 	movs.w	r1, #2147483648	; 0x80000000
 80008fc:	428d      	cmp	r5, r1
 80008fe:	d103      	bne.n	8000908 <??ZbZclAttrIntegerRangeCheck_87>
 8000900:	4284      	cmp	r4, r0
 8000902:	d101      	bne.n	8000908 <??ZbZclAttrIntegerRangeCheck_87>
 8000904:	2001      	movs	r0, #1
 8000906:	e018      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

08000908 <??ZbZclAttrIntegerRangeCheck_87>:
 8000908:	e7ff      	b.n	800090a <??ZbZclAttrIntegerRangeCheck_17>

0800090a <??ZbZclAttrIntegerRangeCheck_17>:
 800090a:	ea56 0008 	orrs.w	r0, r6, r8
 800090e:	ea57 0109 	orrs.w	r1, r7, r9
 8000912:	2900      	cmp	r1, #0
 8000914:	d103      	bne.n	800091e <??ZbZclAttrIntegerRangeCheck_88>
 8000916:	2800      	cmp	r0, #0
 8000918:	d101      	bne.n	800091e <??ZbZclAttrIntegerRangeCheck_88>
 800091a:	2001      	movs	r0, #1
 800091c:	e00d      	b.n	800093a <??ZbZclAttrIntegerRangeCheck_19>

0800091e <??ZbZclAttrIntegerRangeCheck_88>:
 800091e:	42bd      	cmp	r5, r7
 8000920:	db09      	blt.n	8000936 <??ZbZclAttrIntegerRangeCheck_89>
 8000922:	dc01      	bgt.n	8000928 <??ZbZclAttrIntegerRangeCheck_90>
 8000924:	42b4      	cmp	r4, r6
 8000926:	d306      	bcc.n	8000936 <??ZbZclAttrIntegerRangeCheck_89>

08000928 <??ZbZclAttrIntegerRangeCheck_90>:
 8000928:	45a9      	cmp	r9, r5
 800092a:	db04      	blt.n	8000936 <??ZbZclAttrIntegerRangeCheck_89>
 800092c:	dc01      	bgt.n	8000932 <??ZbZclAttrIntegerRangeCheck_91>
 800092e:	45a0      	cmp	r8, r4
 8000930:	d301      	bcc.n	8000936 <??ZbZclAttrIntegerRangeCheck_89>

08000932 <??ZbZclAttrIntegerRangeCheck_91>:
 8000932:	2001      	movs	r0, #1
 8000934:	e000      	b.n	8000938 <??ZbZclAttrIntegerRangeCheck_92>

08000936 <??ZbZclAttrIntegerRangeCheck_89>:
 8000936:	2000      	movs	r0, #0

08000938 <??ZbZclAttrIntegerRangeCheck_92>:
 8000938:	b2c0      	uxtb	r0, r0

0800093a <??ZbZclAttrIntegerRangeCheck_19>:
 800093a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800093e:	4770      	bx	lr

08000940 <??DataTable1>:
 8000940:	8000 ffff                                   ....

08000944 <??DataTable1_1>:
 8000944:	0000 ff80                                   ....

08000948 <ZbZclAttrIntegerRead>:
 8000948:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800094c:	b085      	sub	sp, #20
 800094e:	0006      	movs	r6, r0
 8000950:	000f      	movs	r7, r1
 8000952:	0015      	movs	r5, r2
 8000954:	001c      	movs	r4, r3
 8000956:	2000      	movs	r0, #0
 8000958:	f88d 0009 	strb.w	r0, [sp, #9]
 800095c:	f05f 0808 	movs.w	r8, #8
 8000960:	f05f 0900 	movs.w	r9, #0
 8000964:	f10d 0a0c 	add.w	sl, sp, #12
 8000968:	464a      	mov	r2, r9
 800096a:	4641      	mov	r1, r8
 800096c:	4650      	mov	r0, sl
 800096e:	f006 ffb3 	bl	80078d8 <__aeabi_memset>
 8000972:	2000      	movs	r0, #0
 8000974:	9001      	str	r0, [sp, #4]
 8000976:	2008      	movs	r0, #8
 8000978:	9000      	str	r0, [sp, #0]
 800097a:	ab03      	add	r3, sp, #12
 800097c:	f10d 0209 	add.w	r2, sp, #9
 8000980:	0039      	movs	r1, r7
 8000982:	b289      	uxth	r1, r1
 8000984:	0030      	movs	r0, r6
 8000986:	f003 f95c 	bl	8003c42 <ZbZclAttrRead>
 800098a:	f88d 0008 	strb.w	r0, [sp, #8]
 800098e:	2c00      	cmp	r4, #0
 8000990:	d002      	beq.n	8000998 <??ZbZclAttrIntegerRead_0>
 8000992:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000996:	7020      	strb	r0, [r4, #0]

08000998 <??ZbZclAttrIntegerRead_0>:
 8000998:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800099c:	2800      	cmp	r0, #0
 800099e:	d002      	beq.n	80009a6 <??ZbZclAttrIntegerRead_1>
 80009a0:	2000      	movs	r0, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	e01a      	b.n	80009dc <??ZbZclAttrIntegerRead_2>

080009a6 <??ZbZclAttrIntegerRead_1>:
 80009a6:	aa02      	add	r2, sp, #8
 80009a8:	a903      	add	r1, sp, #12
 80009aa:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80009ae:	f7ff fcb1 	bl	8000314 <ZbZclParseInteger>
 80009b2:	0002      	movs	r2, r0
 80009b4:	000b      	movs	r3, r1
 80009b6:	2c00      	cmp	r4, #0
 80009b8:	d002      	beq.n	80009c0 <??ZbZclAttrIntegerRead_3>
 80009ba:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80009be:	7020      	strb	r0, [r4, #0]

080009c0 <??ZbZclAttrIntegerRead_3>:
 80009c0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d002      	beq.n	80009ce <??ZbZclAttrIntegerRead_4>
 80009c8:	2000      	movs	r0, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	e006      	b.n	80009dc <??ZbZclAttrIntegerRead_2>

080009ce <??ZbZclAttrIntegerRead_4>:
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d002      	beq.n	80009d8 <??ZbZclAttrIntegerRead_5>
 80009d2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80009d6:	7028      	strb	r0, [r5, #0]

080009d8 <??ZbZclAttrIntegerRead_5>:
 80009d8:	0010      	movs	r0, r2
 80009da:	0019      	movs	r1, r3

080009dc <??ZbZclAttrIntegerRead_2>:
 80009dc:	b006      	add	sp, #24
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080009e2 <ZbZclAttrIntegerWrite>:
 80009e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009e6:	b087      	sub	sp, #28
 80009e8:	4680      	mov	r8, r0
 80009ea:	4689      	mov	r9, r1
 80009ec:	0014      	movs	r4, r2
 80009ee:	001d      	movs	r5, r3
 80009f0:	f1b8 0f00 	cmp.w	r8, #0
 80009f4:	d101      	bne.n	80009fa <??ZbZclAttrIntegerWrite_0>
 80009f6:	2087      	movs	r0, #135	; 0x87
 80009f8:	e042      	b.n	8000a80 <??ZbZclAttrIntegerWrite_1>

080009fa <??ZbZclAttrIntegerWrite_0>:
 80009fa:	ab04      	add	r3, sp, #16
 80009fc:	f10d 0211 	add.w	r2, sp, #17
 8000a00:	4649      	mov	r1, r9
 8000a02:	b289      	uxth	r1, r1
 8000a04:	4640      	mov	r0, r8
 8000a06:	f7ff ff9f 	bl	8000948 <ZbZclAttrIntegerRead>
 8000a0a:	0006      	movs	r6, r0
 8000a0c:	000f      	movs	r7, r1
 8000a0e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d002      	beq.n	8000a1c <??ZbZclAttrIntegerWrite_2>
 8000a16:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000a1a:	e031      	b.n	8000a80 <??ZbZclAttrIntegerWrite_1>

08000a1c <??ZbZclAttrIntegerWrite_2>:
 8000a1c:	42af      	cmp	r7, r5
 8000a1e:	d103      	bne.n	8000a28 <??ZbZclAttrIntegerWrite_3>
 8000a20:	42a6      	cmp	r6, r4
 8000a22:	d101      	bne.n	8000a28 <??ZbZclAttrIntegerWrite_3>
 8000a24:	2000      	movs	r0, #0
 8000a26:	e02b      	b.n	8000a80 <??ZbZclAttrIntegerWrite_1>

08000a28 <??ZbZclAttrIntegerWrite_3>:
 8000a28:	2000      	movs	r0, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000a30:	2000      	movs	r0, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	e9cd 0100 	strd	r0, r1, [sp]
 8000a38:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8000a3c:	0020      	movs	r0, r4
 8000a3e:	0029      	movs	r1, r5
 8000a40:	f7ff fdac 	bl	800059c <ZbZclAttrIntegerRangeCheck>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d101      	bne.n	8000a4c <??ZbZclAttrIntegerWrite_4>
 8000a48:	2087      	movs	r0, #135	; 0x87
 8000a4a:	e019      	b.n	8000a80 <??ZbZclAttrIntegerWrite_1>

08000a4c <??ZbZclAttrIntegerWrite_4>:
 8000a4c:	0022      	movs	r2, r4
 8000a4e:	002b      	movs	r3, r5
 8000a50:	a805      	add	r0, sp, #20
 8000a52:	f002 ffb4 	bl	80039be <putle64>
 8000a56:	2002      	movs	r0, #2
 8000a58:	9001      	str	r0, [sp, #4]
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	9000      	str	r0, [sp, #0]
 8000a5e:	ab05      	add	r3, sp, #20
 8000a60:	464a      	mov	r2, r9
 8000a62:	b292      	uxth	r2, r2
 8000a64:	2100      	movs	r1, #0
 8000a66:	4640      	mov	r0, r8
 8000a68:	f003 fa3d 	bl	8003ee6 <ZbZclAttrWrite>
 8000a6c:	f88d 0010 	strb.w	r0, [sp, #16]
 8000a70:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d002      	beq.n	8000a7e <??ZbZclAttrIntegerWrite_5>
 8000a78:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000a7c:	e000      	b.n	8000a80 <??ZbZclAttrIntegerWrite_1>

08000a7e <??ZbZclAttrIntegerWrite_5>:
 8000a7e:	2000      	movs	r0, #0

08000a80 <??ZbZclAttrIntegerWrite_1>:
 8000a80:	b007      	add	sp, #28
 8000a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a86 <ZbZclAttrIntegerIncrement>:
 8000a86:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	468b      	mov	fp, r1
 8000a8e:	0016      	movs	r6, r2
 8000a90:	001f      	movs	r7, r3
 8000a92:	f05f 0a00 	movs.w	sl, #0
 8000a96:	466b      	mov	r3, sp
 8000a98:	f10d 0201 	add.w	r2, sp, #1
 8000a9c:	4659      	mov	r1, fp
 8000a9e:	b289      	uxth	r1, r1
 8000aa0:	9804      	ldr	r0, [sp, #16]
 8000aa2:	f7ff ff51 	bl	8000948 <ZbZclAttrIntegerRead>
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	000b      	movs	r3, r1
 8000aaa:	f89d 0000 	ldrb.w	r0, [sp]
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d002      	beq.n	8000ab8 <??ZbZclAttrIntegerIncrement_0>
 8000ab2:	f89d 0000 	ldrb.w	r0, [sp]
 8000ab6:	e03e      	b.n	8000b36 <??ZbZclAttrIntegerIncrement_1>

08000ab8 <??ZbZclAttrIntegerIncrement_0>:
 8000ab8:	eb12 0806 	adds.w	r8, r2, r6
 8000abc:	eb53 0907 	adcs.w	r9, r3, r7
 8000ac0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000ac4:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8000ac8:	f003 fe58 	bl	800477c <ZbZclAttrTypeLength>
 8000acc:	9001      	str	r0, [sp, #4]
 8000ace:	9801      	ldr	r0, [sp, #4]
 8000ad0:	2801      	cmp	r0, #1
 8000ad2:	d017      	beq.n	8000b04 <??ZbZclAttrIntegerIncrement_2>
 8000ad4:	2802      	cmp	r0, #2
 8000ad6:	d00b      	beq.n	8000af0 <??ZbZclAttrIntegerIncrement_3>
 8000ad8:	2804      	cmp	r0, #4
 8000ada:	d002      	beq.n	8000ae2 <??ZbZclAttrIntegerIncrement_4>
 8000adc:	2808      	cmp	r0, #8
 8000ade:	d118      	bne.n	8000b12 <??ZbZclAttrIntegerIncrement_5>

08000ae0 <??ZbZclAttrIntegerIncrement_6>:
 8000ae0:	e019      	b.n	8000b16 <??ZbZclAttrIntegerIncrement_7>

08000ae2 <??ZbZclAttrIntegerIncrement_4>:
 8000ae2:	f038 0000 	bics.w	r0, r8, #0
 8000ae6:	f039 31ff 	bics.w	r1, r9, #4294967295
 8000aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000aee:	e012      	b.n	8000b16 <??ZbZclAttrIntegerIncrement_7>

08000af0 <??ZbZclAttrIntegerIncrement_3>:
 8000af0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000af4:	2100      	movs	r1, #0
 8000af6:	ea18 0000 	ands.w	r0, r8, r0
 8000afa:	ea19 0101 	ands.w	r1, r9, r1
 8000afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000b02:	e008      	b.n	8000b16 <??ZbZclAttrIntegerIncrement_7>

08000b04 <??ZbZclAttrIntegerIncrement_2>:
 8000b04:	f018 00ff 	ands.w	r0, r8, #255	; 0xff
 8000b08:	f019 0100 	ands.w	r1, r9, #0
 8000b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000b10:	e001      	b.n	8000b16 <??ZbZclAttrIntegerIncrement_7>

08000b12 <??ZbZclAttrIntegerIncrement_5>:
 8000b12:	2001      	movs	r0, #1
 8000b14:	4682      	mov	sl, r0

08000b16 <??ZbZclAttrIntegerIncrement_7>:
 8000b16:	4650      	mov	r0, sl
 8000b18:	b2c0      	uxtb	r0, r0
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d001      	beq.n	8000b22 <??ZbZclAttrIntegerIncrement_8>
 8000b1e:	2086      	movs	r0, #134	; 0x86
 8000b20:	e009      	b.n	8000b36 <??ZbZclAttrIntegerIncrement_1>

08000b22 <??ZbZclAttrIntegerIncrement_8>:
 8000b22:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8000b26:	0022      	movs	r2, r4
 8000b28:	002b      	movs	r3, r5
 8000b2a:	4659      	mov	r1, fp
 8000b2c:	b289      	uxth	r1, r1
 8000b2e:	9804      	ldr	r0, [sp, #16]
 8000b30:	f7ff ff57 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8000b34:	2000      	movs	r0, #0

08000b36 <??ZbZclAttrIntegerIncrement_1>:
 8000b36:	b005      	add	sp, #20
 8000b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b3c <ZbZclAttrEuiRead>:
 8000b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	0005      	movs	r5, r0
 8000b44:	000e      	movs	r6, r1
 8000b46:	0014      	movs	r4, r2
 8000b48:	f05f 0808 	movs.w	r8, #8
 8000b4c:	f05f 0900 	movs.w	r9, #0
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	464a      	mov	r2, r9
 8000b54:	4641      	mov	r1, r8
 8000b56:	0038      	movs	r0, r7
 8000b58:	f006 febe 	bl	80078d8 <__aeabi_memset>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	9001      	str	r0, [sp, #4]
 8000b60:	2008      	movs	r0, #8
 8000b62:	9000      	str	r0, [sp, #0]
 8000b64:	ab02      	add	r3, sp, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	0031      	movs	r1, r6
 8000b6a:	b289      	uxth	r1, r1
 8000b6c:	0028      	movs	r0, r5
 8000b6e:	f003 f868 	bl	8003c42 <ZbZclAttrRead>
 8000b72:	0007      	movs	r7, r0
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d000      	beq.n	8000b7a <??ZbZclAttrEuiRead_0>
 8000b78:	7027      	strb	r7, [r4, #0]

08000b7a <??ZbZclAttrEuiRead_0>:
 8000b7a:	0038      	movs	r0, r7
 8000b7c:	b2c0      	uxtb	r0, r0
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d002      	beq.n	8000b88 <??ZbZclAttrEuiRead_1>
 8000b82:	2000      	movs	r0, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	e002      	b.n	8000b8e <??ZbZclAttrEuiRead_2>

08000b88 <??ZbZclAttrEuiRead_1>:
 8000b88:	a802      	add	r0, sp, #8
 8000b8a:	f002 fec5 	bl	8003918 <pletoh64>

08000b8e <??ZbZclAttrEuiRead_2>:
 8000b8e:	b005      	add	sp, #20
 8000b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000b94 <ZbZclAttrEuiWrite>:
 8000b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	4680      	mov	r8, r0
 8000b9c:	4689      	mov	r9, r1
 8000b9e:	0014      	movs	r4, r2
 8000ba0:	001d      	movs	r5, r3
 8000ba2:	f1b8 0f00 	cmp.w	r8, #0
 8000ba6:	d101      	bne.n	8000bac <??ZbZclAttrEuiWrite_0>
 8000ba8:	2087      	movs	r0, #135	; 0x87
 8000baa:	e02e      	b.n	8000c0a <??ZbZclAttrEuiWrite_1>

08000bac <??ZbZclAttrEuiWrite_0>:
 8000bac:	aa02      	add	r2, sp, #8
 8000bae:	4649      	mov	r1, r9
 8000bb0:	b289      	uxth	r1, r1
 8000bb2:	4640      	mov	r0, r8
 8000bb4:	f7ff ffc2 	bl	8000b3c <ZbZclAttrEuiRead>
 8000bb8:	0006      	movs	r6, r0
 8000bba:	000f      	movs	r7, r1
 8000bbc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d002      	beq.n	8000bca <??ZbZclAttrEuiWrite_2>
 8000bc4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000bc8:	e01f      	b.n	8000c0a <??ZbZclAttrEuiWrite_1>

08000bca <??ZbZclAttrEuiWrite_2>:
 8000bca:	42af      	cmp	r7, r5
 8000bcc:	d103      	bne.n	8000bd6 <??ZbZclAttrEuiWrite_3>
 8000bce:	42a6      	cmp	r6, r4
 8000bd0:	d101      	bne.n	8000bd6 <??ZbZclAttrEuiWrite_3>
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	e019      	b.n	8000c0a <??ZbZclAttrEuiWrite_1>

08000bd6 <??ZbZclAttrEuiWrite_3>:
 8000bd6:	0022      	movs	r2, r4
 8000bd8:	002b      	movs	r3, r5
 8000bda:	a803      	add	r0, sp, #12
 8000bdc:	f002 feef 	bl	80039be <putle64>
 8000be0:	2002      	movs	r0, #2
 8000be2:	9001      	str	r0, [sp, #4]
 8000be4:	2008      	movs	r0, #8
 8000be6:	9000      	str	r0, [sp, #0]
 8000be8:	ab03      	add	r3, sp, #12
 8000bea:	464a      	mov	r2, r9
 8000bec:	b292      	uxth	r2, r2
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	f003 f978 	bl	8003ee6 <ZbZclAttrWrite>
 8000bf6:	f88d 0008 	strb.w	r0, [sp, #8]
 8000bfa:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d002      	beq.n	8000c08 <??ZbZclAttrEuiWrite_4>
 8000c02:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000c06:	e000      	b.n	8000c0a <??ZbZclAttrEuiWrite_1>

08000c08 <??ZbZclAttrEuiWrite_4>:
 8000c08:	2000      	movs	r0, #0

08000c0a <??ZbZclAttrEuiWrite_1>:
 8000c0a:	b005      	add	sp, #20
 8000c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c10 <ZbZclClusterGetEndpoint>:
 8000c10:	7b80      	ldrb	r0, [r0, #14]
 8000c12:	4770      	bx	lr

08000c14 <ZbZclClusterSetCallbackArg>:
 8000c14:	6541      	str	r1, [r0, #84]	; 0x54
 8000c16:	4770      	bx	lr

08000c18 <ZbZclClusterSetMfrCode>:
 8000c18:	8201      	strh	r1, [r0, #16]
 8000c1a:	4770      	bx	lr

08000c1c <ZbZclClusterGetClusterId>:
 8000c1c:	8980      	ldrh	r0, [r0, #12]
 8000c1e:	4770      	bx	lr

08000c20 <ZbZclClusterSetProfileId>:
 8000c20:	b538      	push	{r3, r4, r5, lr}
 8000c22:	0004      	movs	r4, r0
 8000c24:	000d      	movs	r5, r1
 8000c26:	82a5      	strh	r5, [r4, #20]
 8000c28:	7ba0      	ldrb	r0, [r4, #14]
 8000c2a:	28ff      	cmp	r0, #255	; 0xff
 8000c2c:	d008      	beq.n	8000c40 <??ZbZclClusterSetProfileId_0>
 8000c2e:	0020      	movs	r0, r4
 8000c30:	f014 fa4c 	bl	80150cc <ZbZclClusterUnbind>
 8000c34:	7f23      	ldrb	r3, [r4, #28]
 8000c36:	8aa2      	ldrh	r2, [r4, #20]
 8000c38:	7ba1      	ldrb	r1, [r4, #14]
 8000c3a:	0020      	movs	r0, r4
 8000c3c:	f014 fa03 	bl	8015046 <ZbZclClusterBind>

08000c40 <??ZbZclClusterSetProfileId_0>:
 8000c40:	bd31      	pop	{r0, r4, r5, pc}

08000c42 <ZbZclClusterGetProfileId>:
 8000c42:	b510      	push	{r4, lr}
 8000c44:	0004      	movs	r4, r0
 8000c46:	7ba1      	ldrb	r1, [r4, #14]
 8000c48:	68a0      	ldr	r0, [r4, #8]
 8000c4a:	f013 fbd1 	bl	80143f0 <ZbApsEndpointProfile>
 8000c4e:	0001      	movs	r1, r0
 8000c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c54:	b289      	uxth	r1, r1
 8000c56:	4291      	cmp	r1, r2
 8000c58:	d101      	bne.n	8000c5e <??ZbZclClusterGetProfileId_0>
 8000c5a:	8aa1      	ldrh	r1, [r4, #20]
 8000c5c:	0008      	movs	r0, r1

08000c5e <??ZbZclClusterGetProfileId_0>:
 8000c5e:	b280      	uxth	r0, r0
 8000c60:	bd10      	pop	{r4, pc}

08000c62 <ZbZclClusterSetMinSecurity>:
 8000c62:	b430      	push	{r4, r5}
 8000c64:	0003      	movs	r3, r0
 8000c66:	2001      	movs	r0, #1
 8000c68:	7d9a      	ldrb	r2, [r3, #22]
 8000c6a:	f012 0203 	ands.w	r2, r2, #3
 8000c6e:	2a01      	cmp	r2, #1
 8000c70:	d101      	bne.n	8000c76 <??ZbZclClusterSetMinSecurity_0>
 8000c72:	2401      	movs	r4, #1
 8000c74:	e000      	b.n	8000c78 <??ZbZclClusterSetMinSecurity_1>

08000c76 <??ZbZclClusterSetMinSecurity_0>:
 8000c76:	2400      	movs	r4, #0

08000c78 <??ZbZclClusterSetMinSecurity_1>:
 8000c78:	000a      	movs	r2, r1
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	2aab      	cmp	r2, #171	; 0xab
 8000c7e:	d01d      	beq.n	8000cbc <??ZbZclClusterSetMinSecurity_2>
 8000c80:	2aac      	cmp	r2, #172	; 0xac
 8000c82:	d00f      	beq.n	8000ca4 <??ZbZclClusterSetMinSecurity_3>
 8000c84:	2aaf      	cmp	r2, #175	; 0xaf
 8000c86:	d123      	bne.n	8000cd0 <??ZbZclClusterSetMinSecurity_4>

08000c88 <??ZbZclClusterSetMinSecurity_5>:
 8000c88:	8add      	ldrh	r5, [r3, #22]
 8000c8a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000c8e:	4015      	ands	r5, r2
 8000c90:	82dd      	strh	r5, [r3, #22]
 8000c92:	8add      	ldrh	r5, [r3, #22]
 8000c94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c98:	4015      	ands	r5, r2
 8000c9a:	82dd      	strh	r5, [r3, #22]
 8000c9c:	0022      	movs	r2, r4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	2a00      	cmp	r2, #0

08000ca2 <??ZbZclClusterSetMinSecurity_6>:
 8000ca2:	e017      	b.n	8000cd4 <??ZbZclClusterSetMinSecurity_7>

08000ca4 <??ZbZclClusterSetMinSecurity_3>:
 8000ca4:	8ada      	ldrh	r2, [r3, #22]
 8000ca6:	f052 0202 	orrs.w	r2, r2, #2
 8000caa:	82da      	strh	r2, [r3, #22]
 8000cac:	8ada      	ldrh	r2, [r3, #22]
 8000cae:	f052 0201 	orrs.w	r2, r2, #1
 8000cb2:	82da      	strh	r2, [r3, #22]
 8000cb4:	0022      	movs	r2, r4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	2a00      	cmp	r2, #0

08000cba <??ZbZclClusterSetMinSecurity_8>:
 8000cba:	e00b      	b.n	8000cd4 <??ZbZclClusterSetMinSecurity_7>

08000cbc <??ZbZclClusterSetMinSecurity_2>:
 8000cbc:	8add      	ldrh	r5, [r3, #22]
 8000cbe:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000cc2:	4015      	ands	r5, r2
 8000cc4:	82dd      	strh	r5, [r3, #22]
 8000cc6:	8ada      	ldrh	r2, [r3, #22]
 8000cc8:	f052 0201 	orrs.w	r2, r2, #1
 8000ccc:	82da      	strh	r2, [r3, #22]
 8000cce:	e001      	b.n	8000cd4 <??ZbZclClusterSetMinSecurity_7>

08000cd0 <??ZbZclClusterSetMinSecurity_4>:
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	0010      	movs	r0, r2

08000cd4 <??ZbZclClusterSetMinSecurity_7>:
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d000      	beq.n	8000cde <??ZbZclClusterSetMinSecurity_9>
 8000cdc:	7499      	strb	r1, [r3, #18]

08000cde <??ZbZclClusterSetMinSecurity_9>:
 8000cde:	b2c0      	uxtb	r0, r0
 8000ce0:	bc30      	pop	{r4, r5}
 8000ce2:	4770      	bx	lr

08000ce4 <ZbZclClusterCheckMinSecurity>:
 8000ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce8:	0004      	movs	r4, r0
 8000cea:	000d      	movs	r5, r1
 8000cec:	0016      	movs	r6, r2
 8000cee:	2700      	movs	r7, #0
 8000cf0:	7ca0      	ldrb	r0, [r4, #18]
 8000cf2:	28af      	cmp	r0, #175	; 0xaf
 8000cf4:	d102      	bne.n	8000cfc <??ZbZclClusterCheckMinSecurity_0>
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	0007      	movs	r7, r0
 8000cfa:	e073      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000cfc <??ZbZclClusterCheckMinSecurity_0>:
 8000cfc:	7ca0      	ldrb	r0, [r4, #18]
 8000cfe:	28ac      	cmp	r0, #172	; 0xac
 8000d00:	d10a      	bne.n	8000d18 <??ZbZclClusterCheckMinSecurity_2>
 8000d02:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000d06:	28ac      	cmp	r0, #172	; 0xac
 8000d08:	d003      	beq.n	8000d12 <??ZbZclClusterCheckMinSecurity_3>
 8000d0a:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000d0e:	28ab      	cmp	r0, #171	; 0xab
 8000d10:	d101      	bne.n	8000d16 <??ZbZclClusterCheckMinSecurity_4>

08000d12 <??ZbZclClusterCheckMinSecurity_3>:
 8000d12:	2001      	movs	r0, #1
 8000d14:	0007      	movs	r7, r0

08000d16 <??ZbZclClusterCheckMinSecurity_4>:
 8000d16:	e065      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000d18 <??ZbZclClusterCheckMinSecurity_2>:
 8000d18:	7ca0      	ldrb	r0, [r4, #18]
 8000d1a:	28ab      	cmp	r0, #171	; 0xab
 8000d1c:	d162      	bne.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>
 8000d1e:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000d22:	28ab      	cmp	r0, #171	; 0xab
 8000d24:	d102      	bne.n	8000d2c <??ZbZclClusterCheckMinSecurity_6>
 8000d26:	2001      	movs	r0, #1
 8000d28:	0007      	movs	r7, r0
 8000d2a:	e05b      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000d2c <??ZbZclClusterCheckMinSecurity_6>:
 8000d2c:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000d30:	28ac      	cmp	r0, #172	; 0xac
 8000d32:	d157      	bne.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000d34 <??ZbZclClusterCheckMinSecurity_7>:
 8000d34:	89a0      	ldrh	r0, [r4, #12]
 8000d36:	2819      	cmp	r0, #25
 8000d38:	d114      	bne.n	8000d64 <??ZbZclClusterCheckMinSecurity_8>
 8000d3a:	7f20      	ldrb	r0, [r4, #28]
 8000d3c:	2801      	cmp	r0, #1
 8000d3e:	d111      	bne.n	8000d64 <??ZbZclClusterCheckMinSecurity_8>
 8000d40:	0028      	movs	r0, r5
 8000d42:	f013 fb88 	bl	8014456 <ZbApsAddrIsBcast>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	d00b      	beq.n	8000d62 <??ZbZclClusterCheckMinSecurity_9>
 8000d4a:	7830      	ldrb	r0, [r6, #0]
 8000d4c:	2801      	cmp	r0, #1
 8000d4e:	d108      	bne.n	8000d62 <??ZbZclClusterCheckMinSecurity_9>
 8000d50:	78b0      	ldrb	r0, [r6, #2]
 8000d52:	2801      	cmp	r0, #1
 8000d54:	d105      	bne.n	8000d62 <??ZbZclClusterCheckMinSecurity_9>
 8000d56:	79f0      	ldrb	r0, [r6, #7]
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d102      	bne.n	8000d62 <??ZbZclClusterCheckMinSecurity_9>
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	0007      	movs	r7, r0
 8000d60:	e040      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000d62 <??ZbZclClusterCheckMinSecurity_9>:
 8000d62:	e03f      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000d64 <??ZbZclClusterCheckMinSecurity_8>:
 8000d64:	f240 7802 	movw	r8, #1794	; 0x702
 8000d68:	89a0      	ldrh	r0, [r4, #12]
 8000d6a:	4540      	cmp	r0, r8
 8000d6c:	d11a      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d6e:	7f20      	ldrb	r0, [r4, #28]
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d117      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d74:	7830      	ldrb	r0, [r6, #0]
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d114      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d7a:	79f0      	ldrb	r0, [r6, #7]
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d111      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d80:	78b0      	ldrb	r0, [r6, #2]
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10e      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d86:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8000d88:	2802      	cmp	r0, #2
 8000d8a:	d30b      	bcc.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d8c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000d8e:	f002 fd85 	bl	800389c <pletoh16>
 8000d92:	0001      	movs	r1, r0
 8000d94:	f240 3206 	movw	r2, #774	; 0x306
 8000d98:	b289      	uxth	r1, r1
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d102      	bne.n	8000da4 <??ZbZclClusterCheckMinSecurity_10>
 8000d9e:	2101      	movs	r1, #1
 8000da0:	000f      	movs	r7, r1
 8000da2:	e01f      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000da4 <??ZbZclClusterCheckMinSecurity_10>:
 8000da4:	89a0      	ldrh	r0, [r4, #12]
 8000da6:	4540      	cmp	r0, r8
 8000da8:	d11b      	bne.n	8000de2 <??ZbZclClusterCheckMinSecurity_11>
 8000daa:	7f20      	ldrb	r0, [r4, #28]
 8000dac:	2801      	cmp	r0, #1
 8000dae:	d118      	bne.n	8000de2 <??ZbZclClusterCheckMinSecurity_11>
 8000db0:	7830      	ldrb	r0, [r6, #0]
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d114      	bne.n	8000de0 <??ZbZclClusterCheckMinSecurity_12>
 8000db6:	79f0      	ldrb	r0, [r6, #7]
 8000db8:	2801      	cmp	r0, #1
 8000dba:	d111      	bne.n	8000de0 <??ZbZclClusterCheckMinSecurity_12>
 8000dbc:	78b0      	ldrb	r0, [r6, #2]
 8000dbe:	2801      	cmp	r0, #1
 8000dc0:	d10e      	bne.n	8000de0 <??ZbZclClusterCheckMinSecurity_12>
 8000dc2:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8000dc4:	2802      	cmp	r0, #2
 8000dc6:	d30b      	bcc.n	8000de0 <??ZbZclClusterCheckMinSecurity_12>
 8000dc8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000dca:	f002 fd67 	bl	800389c <pletoh16>
 8000dce:	0001      	movs	r1, r0
 8000dd0:	f240 3206 	movw	r2, #774	; 0x306
 8000dd4:	b289      	uxth	r1, r1
 8000dd6:	4291      	cmp	r1, r2
 8000dd8:	d102      	bne.n	8000de0 <??ZbZclClusterCheckMinSecurity_12>
 8000dda:	2101      	movs	r1, #1
 8000ddc:	000f      	movs	r7, r1
 8000dde:	e001      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000de0 <??ZbZclClusterCheckMinSecurity_12>:
 8000de0:	e000      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000de2 <??ZbZclClusterCheckMinSecurity_11>:
 8000de2:	e7ff      	b.n	8000de4 <??ZbZclClusterCheckMinSecurity_1>

08000de4 <??ZbZclClusterCheckMinSecurity_1>:
 8000de4:	0038      	movs	r0, r7
 8000de6:	b2c0      	uxtb	r0, r0
 8000de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000dec <ZbZclClusterSetTxOptions>:
 8000dec:	05ca      	lsls	r2, r1, #23
 8000dee:	d400      	bmi.n	8000df2 <??ZbZclClusterSetTxOptions_0>

08000df0 <??ZbZclClusterSetTxOptions_1>:
 8000df0:	82c1      	strh	r1, [r0, #22]

08000df2 <??ZbZclClusterSetTxOptions_0>:
 8000df2:	4770      	bx	lr

08000df4 <ZbZclClusterGetTxOptions>:
 8000df4:	8ac0      	ldrh	r0, [r0, #22]
 8000df6:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8000dfa:	4008      	ands	r0, r1
 8000dfc:	4770      	bx	lr

08000dfe <ZbZclTxOptsFromSecurityStatus>:
 8000dfe:	0001      	movs	r1, r0
 8000e00:	2000      	movs	r0, #0
 8000e02:	f050 0004 	orrs.w	r0, r0, #4
 8000e06:	f050 0008 	orrs.w	r0, r0, #8
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	2aab      	cmp	r2, #171	; 0xab
 8000e10:	d102      	bne.n	8000e18 <??ZbZclTxOptsFromSecurityStatus_0>
 8000e12:	f050 0001 	orrs.w	r0, r0, #1
 8000e16:	e007      	b.n	8000e28 <??ZbZclTxOptsFromSecurityStatus_1>

08000e18 <??ZbZclTxOptsFromSecurityStatus_0>:
 8000e18:	000a      	movs	r2, r1
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	2aac      	cmp	r2, #172	; 0xac
 8000e1e:	d103      	bne.n	8000e28 <??ZbZclTxOptsFromSecurityStatus_1>
 8000e20:	f050 0001 	orrs.w	r0, r0, #1
 8000e24:	f050 0002 	orrs.w	r0, r0, #2

08000e28 <??ZbZclTxOptsFromSecurityStatus_1>:
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	4770      	bx	lr

08000e2c <ZbZclClusterGetDirection>:
 8000e2c:	7f00      	ldrb	r0, [r0, #28]
 8000e2e:	4770      	bx	lr

08000e30 <ZbZclClusterGetDirectionStr>:
 8000e30:	0001      	movs	r1, r0
 8000e32:	7f08      	ldrb	r0, [r1, #28]
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d003      	beq.n	8000e40 <??ZbZclClusterGetDirectionStr_0>
 8000e38:	2802      	cmp	r0, #2
 8000e3a:	d005      	beq.n	8000e48 <??ZbZclClusterGetDirectionStr_1>
 8000e3c:	d302      	bcc.n	8000e44 <??ZbZclClusterGetDirectionStr_2>
 8000e3e:	e005      	b.n	8000e4c <??ZbZclClusterGetDirectionStr_3>

08000e40 <??ZbZclClusterGetDirectionStr_0>:
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <??DataTable1>)
 8000e42:	e004      	b.n	8000e4e <??ZbZclClusterGetDirectionStr_4>

08000e44 <??ZbZclClusterGetDirectionStr_2>:
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <??DataTable1_1>)
 8000e46:	e002      	b.n	8000e4e <??ZbZclClusterGetDirectionStr_4>

08000e48 <??ZbZclClusterGetDirectionStr_1>:
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <??DataTable1_2>)
 8000e4a:	e000      	b.n	8000e4e <??ZbZclClusterGetDirectionStr_4>

08000e4c <??ZbZclClusterGetDirectionStr_3>:
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <??DataTable1_3>)

08000e4e <??ZbZclClusterGetDirectionStr_4>:
 8000e4e:	4770      	bx	lr

08000e50 <??DataTable1>:
 8000e50:	a6a4 0801                                   ....

08000e54 <??DataTable1_1>:
 8000e54:	a6ac 0801                                   ....

08000e58 <??DataTable1_2>:
 8000e58:	a6b4 0801                                   ....

08000e5c <??DataTable1_3>:
 8000e5c:	a6bc 0801                                   ....

08000e60 <ZbZclClusterSetDiscoverRoute>:
 8000e60:	7601      	strb	r1, [r0, #24]
 8000e62:	4770      	bx	lr

08000e64 <ZbZclClusterSetRadius>:
 8000e64:	7641      	strb	r1, [r0, #25]
 8000e66:	4770      	bx	lr

08000e68 <ZbZclClusterGetRadius>:
 8000e68:	7e40      	ldrb	r0, [r0, #25]
 8000e6a:	4770      	bx	lr

08000e6c <ZbZclClusterSetMaxAsduLength>:
 8000e6c:	b410      	push	{r4}
 8000e6e:	0002      	movs	r2, r0
 8000e70:	000b      	movs	r3, r1
 8000e72:	0018      	movs	r0, r3
 8000e74:	b280      	uxth	r0, r0
 8000e76:	f240 74d1 	movw	r4, #2001	; 0x7d1
 8000e7a:	42a0      	cmp	r0, r4
 8000e7c:	d301      	bcc.n	8000e82 <??ZbZclClusterSetMaxAsduLength_0>
 8000e7e:	2000      	movs	r0, #0
 8000e80:	e007      	b.n	8000e92 <??ZbZclClusterSetMaxAsduLength_1>

08000e82 <??ZbZclClusterSetMaxAsduLength_0>:
 8000e82:	0018      	movs	r0, r3
 8000e84:	b280      	uxth	r0, r0
 8000e86:	2839      	cmp	r0, #57	; 0x39
 8000e88:	d201      	bcs.n	8000e8e <??ZbZclClusterSetMaxAsduLength_2>
 8000e8a:	2039      	movs	r0, #57	; 0x39
 8000e8c:	0003      	movs	r3, r0

08000e8e <??ZbZclClusterSetMaxAsduLength_2>:
 8000e8e:	8353      	strh	r3, [r2, #26]
 8000e90:	2001      	movs	r0, #1

08000e92 <??ZbZclClusterSetMaxAsduLength_1>:
 8000e92:	bc10      	pop	{r4}
 8000e94:	4770      	bx	lr

08000e96 <ZbZclClusterGetMaxAsduLength>:
 8000e96:	8b40      	ldrh	r0, [r0, #26]
 8000e98:	4770      	bx	lr

08000e9a <ZbZclClusterInitCommandReq>:
 8000e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e9e:	0004      	movs	r4, r0
 8000ea0:	000d      	movs	r5, r1
 8000ea2:	2630      	movs	r6, #48	; 0x30
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	46a8      	mov	r8, r5
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	0031      	movs	r1, r6
 8000eac:	4640      	mov	r0, r8
 8000eae:	f006 fd13 	bl	80078d8 <__aeabi_memset>
 8000eb2:	8aa0      	ldrh	r0, [r4, #20]
 8000eb4:	8228      	strh	r0, [r5, #16]
 8000eb6:	89a0      	ldrh	r0, [r4, #12]
 8000eb8:	8268      	strh	r0, [r5, #18]
 8000eba:	7ba0      	ldrb	r0, [r4, #14]
 8000ebc:	82a8      	strh	r0, [r5, #20]
 8000ebe:	8ae0      	ldrh	r0, [r4, #22]
 8000ec0:	82e8      	strh	r0, [r5, #22]
 8000ec2:	7e20      	ldrb	r0, [r4, #24]
 8000ec4:	7628      	strb	r0, [r5, #24]
 8000ec6:	7e60      	ldrb	r0, [r4, #25]
 8000ec8:	7668      	strb	r0, [r5, #25]
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ece <ZbZclClusterInitApsdeReq>:
 8000ece:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ed2:	0005      	movs	r5, r0
 8000ed4:	000e      	movs	r6, r1
 8000ed6:	0014      	movs	r4, r2
 8000ed8:	2730      	movs	r7, #48	; 0x30
 8000eda:	f05f 0800 	movs.w	r8, #0
 8000ede:	46b1      	mov	r9, r6
 8000ee0:	4642      	mov	r2, r8
 8000ee2:	0039      	movs	r1, r7
 8000ee4:	4648      	mov	r0, r9
 8000ee6:	f006 fcf7 	bl	80078d8 <__aeabi_memset>
 8000eea:	8aa8      	ldrh	r0, [r5, #20]
 8000eec:	8230      	strh	r0, [r6, #16]
 8000eee:	89a8      	ldrh	r0, [r5, #12]
 8000ef0:	8270      	strh	r0, [r6, #18]
 8000ef2:	7ba8      	ldrb	r0, [r5, #14]
 8000ef4:	82b0      	strh	r0, [r6, #20]
 8000ef6:	8ae8      	ldrh	r0, [r5, #22]
 8000ef8:	84b0      	strh	r0, [r6, #36]	; 0x24
 8000efa:	7e28      	ldrb	r0, [r5, #24]
 8000efc:	f886 0026 	strb.w	r0, [r6, #38]	; 0x26
 8000f00:	7e68      	ldrb	r0, [r5, #25]
 8000f02:	f886 0027 	strb.w	r0, [r6, #39]	; 0x27
 8000f06:	2c00      	cmp	r4, #0
 8000f08:	d00b      	beq.n	8000f22 <??ZbZclClusterInitApsdeReq_0>
 8000f0a:	8ab0      	ldrh	r0, [r6, #20]
 8000f0c:	28ff      	cmp	r0, #255	; 0xff
 8000f0e:	d101      	bne.n	8000f14 <??ZbZclClusterInitApsdeReq_1>
 8000f10:	8860      	ldrh	r0, [r4, #2]
 8000f12:	82b0      	strh	r0, [r6, #20]

08000f14 <??ZbZclClusterInitApsdeReq_1>:
 8000f14:	8c20      	ldrh	r0, [r4, #32]
 8000f16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f1a:	4288      	cmp	r0, r1
 8000f1c:	d001      	beq.n	8000f22 <??ZbZclClusterInitApsdeReq_0>
 8000f1e:	8c20      	ldrh	r0, [r4, #32]
 8000f20:	8230      	strh	r0, [r6, #16]

08000f22 <??ZbZclClusterInitApsdeReq_0>:
 8000f22:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08000f28 <zcl_persist_handle_set>:
 8000f28:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f2c:	0004      	movs	r4, r0
 8000f2e:	000d      	movs	r5, r1
 8000f30:	0016      	movs	r6, r2
 8000f32:	f05f 0b00 	movs.w	fp, #0

08000f36 <??zcl_persist_handle_set_0>:
 8000f36:	4658      	mov	r0, fp
 8000f38:	0031      	movs	r1, r6
 8000f3a:	b280      	uxth	r0, r0
 8000f3c:	b289      	uxth	r1, r1
 8000f3e:	4288      	cmp	r0, r1
 8000f40:	d23c      	bcs.n	8000fbc <??zcl_persist_handle_set_1>
 8000f42:	0030      	movs	r0, r6
 8000f44:	b280      	uxth	r0, r0
 8000f46:	4659      	mov	r1, fp
 8000f48:	b289      	uxth	r1, r1
 8000f4a:	1d09      	adds	r1, r1, #4
 8000f4c:	4288      	cmp	r0, r1
 8000f4e:	d201      	bcs.n	8000f54 <??zcl_persist_handle_set_2>
 8000f50:	2087      	movs	r0, #135	; 0x87
 8000f52:	e034      	b.n	8000fbe <??zcl_persist_handle_set_3>

08000f54 <??zcl_persist_handle_set_2>:
 8000f54:	4658      	mov	r0, fp
 8000f56:	b280      	uxth	r0, r0
 8000f58:	4428      	add	r0, r5
 8000f5a:	f002 fc9f 	bl	800389c <pletoh16>
 8000f5e:	0007      	movs	r7, r0
 8000f60:	f11b 0b02 	adds.w	fp, fp, #2
 8000f64:	4658      	mov	r0, fp
 8000f66:	b280      	uxth	r0, r0
 8000f68:	4428      	add	r0, r5
 8000f6a:	f002 fc97 	bl	800389c <pletoh16>
 8000f6e:	4680      	mov	r8, r0
 8000f70:	f11b 0b02 	adds.w	fp, fp, #2
 8000f74:	0030      	movs	r0, r6
 8000f76:	b280      	uxth	r0, r0
 8000f78:	4641      	mov	r1, r8
 8000f7a:	b289      	uxth	r1, r1
 8000f7c:	fa11 f18b 	uxtah	r1, r1, fp
 8000f80:	4288      	cmp	r0, r1
 8000f82:	da01      	bge.n	8000f88 <??zcl_persist_handle_set_4>
 8000f84:	2087      	movs	r0, #135	; 0x87
 8000f86:	e01a      	b.n	8000fbe <??zcl_persist_handle_set_3>

08000f88 <??zcl_persist_handle_set_4>:
 8000f88:	4658      	mov	r0, fp
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	4428      	add	r0, r5
 8000f8e:	4681      	mov	r9, r0
 8000f90:	eb18 0b0b 	adds.w	fp, r8, fp
 8000f94:	2006      	movs	r0, #6
 8000f96:	9001      	str	r0, [sp, #4]
 8000f98:	4640      	mov	r0, r8
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	9000      	str	r0, [sp, #0]
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	003a      	movs	r2, r7
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	f002 ff9d 	bl	8003ee6 <ZbZclAttrWrite>
 8000fac:	4682      	mov	sl, r0
 8000fae:	4650      	mov	r0, sl
 8000fb0:	b2c0      	uxtb	r0, r0
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d0bf      	beq.n	8000f36 <??zcl_persist_handle_set_0>
 8000fb6:	4650      	mov	r0, sl
 8000fb8:	b2c0      	uxtb	r0, r0
 8000fba:	e000      	b.n	8000fbe <??zcl_persist_handle_set_3>

08000fbc <??zcl_persist_handle_set_1>:
 8000fbc:	2000      	movs	r0, #0

08000fbe <??zcl_persist_handle_set_3>:
 8000fbe:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000fc2 <ZbZclHandleReadAttr>:
 8000fc2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc6:	b092      	sub	sp, #72	; 0x48
 8000fc8:	0005      	movs	r5, r0
 8000fca:	000e      	movs	r6, r1
 8000fcc:	0017      	movs	r7, r2
 8000fce:	f20f 19a4 	addw	r9, pc, #420	; 0x1a4
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	464a      	mov	r2, r9
 8000fd6:	8b69      	ldrh	r1, [r5, #26]
 8000fd8:	68a8      	ldr	r0, [r5, #8]
 8000fda:	f014 f948 	bl	801526e <zb_heap_alloc>
 8000fde:	0004      	movs	r4, r0
 8000fe0:	2c00      	cmp	r4, #0
 8000fe2:	d106      	bne.n	8000ff2 <??ZbZclHandleReadAttr_0>
 8000fe4:	2389      	movs	r3, #137	; 0x89
 8000fe6:	0032      	movs	r2, r6
 8000fe8:	0039      	movs	r1, r7
 8000fea:	0028      	movs	r0, r5
 8000fec:	f013 ff3c 	bl	8014e68 <ZbZclSendDefaultResponse>
 8000ff0:	e0bd      	b.n	800116e <??ZbZclHandleReadAttr_1>

08000ff2 <??ZbZclHandleReadAttr_0>:
 8000ff2:	f05f 0808 	movs.w	r8, #8
 8000ff6:	f05f 0a00 	movs.w	sl, #0
 8000ffa:	f10d 0b0c 	add.w	fp, sp, #12
 8000ffe:	4652      	mov	r2, sl
 8001000:	4641      	mov	r1, r8
 8001002:	4658      	mov	r0, fp
 8001004:	f006 fc68 	bl	80078d8 <__aeabi_memset>
 8001008:	2000      	movs	r0, #0
 800100a:	f88d 000c 	strb.w	r0, [sp, #12]
 800100e:	7870      	ldrb	r0, [r6, #1]
 8001010:	f88d 000d 	strb.w	r0, [sp, #13]
 8001014:	78b0      	ldrb	r0, [r6, #2]
 8001016:	2800      	cmp	r0, #0
 8001018:	d101      	bne.n	800101e <??ZbZclHandleReadAttr_2>
 800101a:	2001      	movs	r0, #1
 800101c:	e000      	b.n	8001020 <??ZbZclHandleReadAttr_3>

0800101e <??ZbZclHandleReadAttr_2>:
 800101e:	2000      	movs	r0, #0

08001020 <??ZbZclHandleReadAttr_3>:
 8001020:	f88d 000e 	strb.w	r0, [sp, #14]
 8001024:	2001      	movs	r0, #1
 8001026:	f88d 000f 	strb.w	r0, [sp, #15]
 800102a:	88b0      	ldrh	r0, [r6, #4]
 800102c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8001030:	79b0      	ldrb	r0, [r6, #6]
 8001032:	f88d 0012 	strb.w	r0, [sp, #18]
 8001036:	2001      	movs	r0, #1
 8001038:	f88d 0013 	strb.w	r0, [sp, #19]
 800103c:	8b6a      	ldrh	r2, [r5, #26]
 800103e:	0021      	movs	r1, r4
 8001040:	a803      	add	r0, sp, #12
 8001042:	f000 fca5 	bl	8001990 <ZbZclAppendHeader>
 8001046:	4680      	mov	r8, r0
 8001048:	f1b8 0f00 	cmp.w	r8, #0
 800104c:	d50c      	bpl.n	8001068 <??ZbZclHandleReadAttr_4>
 800104e:	2300      	movs	r3, #0
 8001050:	464a      	mov	r2, r9
 8001052:	0021      	movs	r1, r4
 8001054:	68a8      	ldr	r0, [r5, #8]
 8001056:	f014 f919 	bl	801528c <zb_heap_free>
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	0032      	movs	r2, r6
 800105e:	0039      	movs	r1, r7
 8001060:	0028      	movs	r0, r5
 8001062:	f013 ff01 	bl	8014e68 <ZbZclSendDefaultResponse>
 8001066:	e082      	b.n	800116e <??ZbZclHandleReadAttr_1>

08001068 <??ZbZclHandleReadAttr_4>:
 8001068:	46c3      	mov	fp, r8

0800106a <??ZbZclHandleReadAttr_5>:
 800106a:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 800106c:	2802      	cmp	r0, #2
 800106e:	d353      	bcc.n	8001118 <??ZbZclHandleReadAttr_6>

08001070 <??ZbZclHandleReadAttr_7>:
 8001070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001072:	f002 fc13 	bl	800389c <pletoh16>
 8001076:	f8ad 000a 	strh.w	r0, [sp, #10]
 800107a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800107c:	1c80      	adds	r0, r0, #2
 800107e:	6278      	str	r0, [r7, #36]	; 0x24
 8001080:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8001082:	1e80      	subs	r0, r0, #2
 8001084:	8538      	strh	r0, [r7, #40]	; 0x28
 8001086:	f11b 0004 	adds.w	r0, fp, #4
 800108a:	8b69      	ldrh	r1, [r5, #26]
 800108c:	4288      	cmp	r0, r1
 800108e:	d243      	bcs.n	8001118 <??ZbZclHandleReadAttr_6>

08001090 <??ZbZclHandleReadAttr_8>:
 8001090:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8001094:	eb04 000b 	add.w	r0, r4, fp
 8001098:	f002 fc4c 	bl	8003934 <putle16>
 800109c:	f11b 0b02 	adds.w	fp, fp, #2
 80010a0:	2000      	movs	r0, #0
 80010a2:	9001      	str	r0, [sp, #4]
 80010a4:	8b68      	ldrh	r0, [r5, #26]
 80010a6:	ebb0 000b 	subs.w	r0, r0, fp
 80010aa:	1e80      	subs	r0, r0, #2
 80010ac:	9000      	str	r0, [sp, #0]
 80010ae:	eb04 000b 	add.w	r0, r4, fp
 80010b2:	1c83      	adds	r3, r0, #2
 80010b4:	aa02      	add	r2, sp, #8
 80010b6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80010ba:	0028      	movs	r0, r5
 80010bc:	f002 fdc1 	bl	8003c42 <ZbZclAttrRead>
 80010c0:	4682      	mov	sl, r0
 80010c2:	f804 a00b 	strb.w	sl, [r4, fp]
 80010c6:	f11b 0b01 	adds.w	fp, fp, #1
 80010ca:	4650      	mov	r0, sl
 80010cc:	b2c0      	uxtb	r0, r0
 80010ce:	2889      	cmp	r0, #137	; 0x89
 80010d0:	d022      	beq.n	8001118 <??ZbZclHandleReadAttr_6>

080010d2 <??ZbZclHandleReadAttr_9>:
 80010d2:	4650      	mov	r0, sl
 80010d4:	b2c0      	uxtb	r0, r0
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d1c7      	bne.n	800106a <??ZbZclHandleReadAttr_5>

080010da <??ZbZclHandleReadAttr_10>:
 80010da:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80010de:	f804 000b 	strb.w	r0, [r4, fp]
 80010e2:	f11b 0b01 	adds.w	fp, fp, #1
 80010e6:	2300      	movs	r3, #0
 80010e8:	8b6a      	ldrh	r2, [r5, #26]
 80010ea:	ebb2 020b 	subs.w	r2, r2, fp
 80010ee:	eb04 010b 	add.w	r1, r4, fp
 80010f2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80010f6:	f003 fbcc 	bl	8004892 <ZbZclAttrParseLength>
 80010fa:	4680      	mov	r8, r0
 80010fc:	f1b8 0f00 	cmp.w	r8, #0
 8001100:	d507      	bpl.n	8001112 <??ZbZclHandleReadAttr_11>
 8001102:	f1bb 0b01 	subs.w	fp, fp, #1
 8001106:	2087      	movs	r0, #135	; 0x87
 8001108:	eb04 010b 	add.w	r1, r4, fp
 800110c:	f801 0c01 	strb.w	r0, [r1, #-1]
 8001110:	e7ab      	b.n	800106a <??ZbZclHandleReadAttr_5>

08001112 <??ZbZclHandleReadAttr_11>:
 8001112:	eb18 0b0b 	adds.w	fp, r8, fp
 8001116:	e7a8      	b.n	800106a <??ZbZclHandleReadAttr_5>

08001118 <??ZbZclHandleReadAttr_6>:
 8001118:	003a      	movs	r2, r7
 800111a:	a906      	add	r1, sp, #24
 800111c:	0028      	movs	r0, r5
 800111e:	f7ff fed6 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8001122:	a806      	add	r0, sp, #24
 8001124:	f117 0110 	adds.w	r1, r7, #16
 8001128:	2210      	movs	r2, #16
 800112a:	f016 fc99 	bl	8017a60 <__aeabi_memcpy>
 800112e:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001132:	f7ff fe64 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 8001136:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800113a:	7da8      	ldrb	r0, [r5, #22]
 800113c:	0700      	lsls	r0, r0, #28
 800113e:	d406      	bmi.n	800114e <??ZbZclHandleReadAttr_12>
 8001140:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8001144:	f64f 70f7 	movw	r0, #65527	; 0xfff7
 8001148:	4001      	ands	r1, r0
 800114a:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c

0800114e <??ZbZclHandleReadAttr_12>:
 800114e:	940c      	str	r4, [sp, #48]	; 0x30
 8001150:	4658      	mov	r0, fp
 8001152:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8001156:	2300      	movs	r3, #0
 8001158:	2200      	movs	r2, #0
 800115a:	a906      	add	r1, sp, #24
 800115c:	68a8      	ldr	r0, [r5, #8]
 800115e:	f013 f8e9 	bl	8014334 <ZbApsdeDataReqCallback>
 8001162:	2300      	movs	r3, #0
 8001164:	464a      	mov	r2, r9
 8001166:	0021      	movs	r1, r4
 8001168:	68a8      	ldr	r0, [r5, #8]
 800116a:	f014 f88f 	bl	801528c <zb_heap_free>

0800116e <??ZbZclHandleReadAttr_1>:
 800116e:	b013      	add	sp, #76	; 0x4c
 8001170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001174 <??DataTable1>:
 8001174:	0000 0000                                   ....

08001178 <ZbZclHandleWriteAttr>:
 8001178:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800117c:	b0a3      	sub	sp, #140	; 0x8c
 800117e:	0016      	movs	r6, r2
 8001180:	2701      	movs	r7, #1
 8001182:	2500      	movs	r5, #0
 8001184:	2400      	movs	r4, #0
 8001186:	f05f 0800 	movs.w	r8, #0
 800118a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800118c:	79c0      	ldrb	r0, [r0, #7]
 800118e:	f88d 000a 	strb.w	r0, [sp, #10]
 8001192:	f05f 0900 	movs.w	r9, #0
 8001196:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800119a:	2802      	cmp	r0, #2
 800119c:	d007      	beq.n	80011ae <??ZbZclHandleWriteAttr_0>
 800119e:	2803      	cmp	r0, #3
 80011a0:	d003      	beq.n	80011aa <??ZbZclHandleWriteAttr_1>
 80011a2:	2805      	cmp	r0, #5
 80011a4:	f000 80c3 	beq.w	800132e <??ZbZclHandleWriteAttr_2>
 80011a8:	e116      	b.n	80013d8 <??ZbZclHandleWriteAttr_3>

080011aa <??ZbZclHandleWriteAttr_1>:
 80011aa:	f059 0901 	orrs.w	r9, r9, #1

080011ae <??ZbZclHandleWriteAttr_0>:
 80011ae:	2008      	movs	r0, #8
 80011b0:	9001      	str	r0, [sp, #4]
 80011b2:	2000      	movs	r0, #0
 80011b4:	9000      	str	r0, [sp, #0]
 80011b6:	f10d 0b14 	add.w	fp, sp, #20
 80011ba:	9a00      	ldr	r2, [sp, #0]
 80011bc:	9901      	ldr	r1, [sp, #4]
 80011be:	4658      	mov	r0, fp
 80011c0:	f006 fb8a 	bl	80078d8 <__aeabi_memset>
 80011c4:	2000      	movs	r0, #0
 80011c6:	f88d 0014 	strb.w	r0, [sp, #20]
 80011ca:	9824      	ldr	r0, [sp, #144]	; 0x90
 80011cc:	7840      	ldrb	r0, [r0, #1]
 80011ce:	f88d 0015 	strb.w	r0, [sp, #21]
 80011d2:	9824      	ldr	r0, [sp, #144]	; 0x90
 80011d4:	7880      	ldrb	r0, [r0, #2]
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d101      	bne.n	80011de <??ZbZclHandleWriteAttr_4>
 80011da:	2001      	movs	r0, #1
 80011dc:	e000      	b.n	80011e0 <??ZbZclHandleWriteAttr_5>

080011de <??ZbZclHandleWriteAttr_4>:
 80011de:	2000      	movs	r0, #0

080011e0 <??ZbZclHandleWriteAttr_5>:
 80011e0:	f88d 0016 	strb.w	r0, [sp, #22]
 80011e4:	2001      	movs	r0, #1
 80011e6:	f88d 0017 	strb.w	r0, [sp, #23]
 80011ea:	9824      	ldr	r0, [sp, #144]	; 0x90
 80011ec:	8880      	ldrh	r0, [r0, #4]
 80011ee:	f8ad 0018 	strh.w	r0, [sp, #24]
 80011f2:	9824      	ldr	r0, [sp, #144]	; 0x90
 80011f4:	7980      	ldrb	r0, [r0, #6]
 80011f6:	f88d 001a 	strb.w	r0, [sp, #26]
 80011fa:	2004      	movs	r0, #4
 80011fc:	f88d 001b 	strb.w	r0, [sp, #27]
 8001200:	2239      	movs	r2, #57	; 0x39
 8001202:	a907      	add	r1, sp, #28
 8001204:	a805      	add	r0, sp, #20
 8001206:	f000 fbc3 	bl	8001990 <ZbZclAppendHeader>
 800120a:	0005      	movs	r5, r0
 800120c:	2d00      	cmp	r5, #0
 800120e:	d502      	bpl.n	8001216 <??ZbZclHandleWriteAttr_6>
 8001210:	2080      	movs	r0, #128	; 0x80
 8001212:	4680      	mov	r8, r0
 8001214:	e0e2      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

08001216 <??ZbZclHandleWriteAttr_6>:
 8001216:	0032      	movs	r2, r6
 8001218:	a916      	add	r1, sp, #88	; 0x58
 800121a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800121c:	f7ff fe57 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8001220:	a816      	add	r0, sp, #88	; 0x58
 8001222:	f116 0110 	adds.w	r1, r6, #16
 8001226:	2210      	movs	r2, #16
 8001228:	f016 fc1a 	bl	8017a60 <__aeabi_memcpy>
 800122c:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 8001230:	f7ff fde5 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 8001234:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
 8001238:	2000      	movs	r0, #0
 800123a:	4682      	mov	sl, r0
 800123c:	2080      	movs	r0, #128	; 0x80
 800123e:	0007      	movs	r7, r0
 8001240:	2001      	movs	r0, #1
 8001242:	f88d 0008 	strb.w	r0, [sp, #8]
 8001246:	2000      	movs	r0, #0
 8001248:	0004      	movs	r4, r0

0800124a <??ZbZclHandleWriteAttr_8>:
 800124a:	f11a 0003 	adds.w	r0, sl, #3
 800124e:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8001250:	4288      	cmp	r0, r1
 8001252:	d302      	bcc.n	800125a <??ZbZclHandleWriteAttr_9>
 8001254:	2080      	movs	r0, #128	; 0x80
 8001256:	0007      	movs	r7, r0
 8001258:	e05c      	b.n	8001314 <??ZbZclHandleWriteAttr_10>

0800125a <??ZbZclHandleWriteAttr_9>:
 800125a:	1ce8      	adds	r0, r5, #3
 800125c:	283a      	cmp	r0, #58	; 0x3a
 800125e:	d305      	bcc.n	800126c <??ZbZclHandleWriteAttr_11>
 8001260:	2001      	movs	r0, #1
 8001262:	f88d 0008 	strb.w	r0, [sp, #8]
 8001266:	2089      	movs	r0, #137	; 0x89
 8001268:	0007      	movs	r7, r0
 800126a:	e053      	b.n	8001314 <??ZbZclHandleWriteAttr_10>

0800126c <??ZbZclHandleWriteAttr_11>:
 800126c:	2000      	movs	r0, #0
 800126e:	f88d 0008 	strb.w	r0, [sp, #8]
 8001272:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001274:	4450      	add	r0, sl
 8001276:	f002 fb11 	bl	800389c <pletoh16>
 800127a:	f8ad 000c 	strh.w	r0, [sp, #12]
 800127e:	f11a 0a02 	adds.w	sl, sl, #2
 8001282:	4650      	mov	r0, sl
 8001284:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8001286:	5c09      	ldrb	r1, [r1, r0]
 8001288:	f88d 1009 	strb.w	r1, [sp, #9]
 800128c:	4682      	mov	sl, r0
 800128e:	f11a 0a01 	adds.w	sl, sl, #1
 8001292:	2300      	movs	r3, #0
 8001294:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8001296:	ebb2 020a 	subs.w	r2, r2, sl
 800129a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800129c:	eb00 010a 	add.w	r1, r0, sl
 80012a0:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80012a4:	f003 faf5 	bl	8004892 <ZbZclAttrParseLength>
 80012a8:	9004      	str	r0, [sp, #16]
 80012aa:	9804      	ldr	r0, [sp, #16]
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d50c      	bpl.n	80012ca <??ZbZclHandleWriteAttr_12>
 80012b0:	1c64      	adds	r4, r4, #1
 80012b2:	2087      	movs	r0, #135	; 0x87
 80012b4:	a907      	add	r1, sp, #28
 80012b6:	5548      	strb	r0, [r1, r5]
 80012b8:	1c6d      	adds	r5, r5, #1
 80012ba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80012be:	a807      	add	r0, sp, #28
 80012c0:	4428      	add	r0, r5
 80012c2:	f002 fb37 	bl	8003934 <putle16>
 80012c6:	1cad      	adds	r5, r5, #2
 80012c8:	e024      	b.n	8001314 <??ZbZclHandleWriteAttr_10>

080012ca <??ZbZclHandleWriteAttr_12>:
 80012ca:	4648      	mov	r0, r9
 80012cc:	b280      	uxth	r0, r0
 80012ce:	9001      	str	r0, [sp, #4]
 80012d0:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80012d2:	ebb0 000a 	subs.w	r0, r0, sl
 80012d6:	9000      	str	r0, [sp, #0]
 80012d8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80012da:	eb00 030a 	add.w	r3, r0, sl
 80012de:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80012e2:	f116 0110 	adds.w	r1, r6, #16
 80012e6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80012e8:	f002 fdfd 	bl	8003ee6 <ZbZclAttrWrite>
 80012ec:	0007      	movs	r7, r0
 80012ee:	9804      	ldr	r0, [sp, #16]
 80012f0:	eb10 0a0a 	adds.w	sl, r0, sl
 80012f4:	0038      	movs	r0, r7
 80012f6:	b2c0      	uxtb	r0, r0
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d0a6      	beq.n	800124a <??ZbZclHandleWriteAttr_8>
 80012fc:	1c64      	adds	r4, r4, #1
 80012fe:	a807      	add	r0, sp, #28
 8001300:	5547      	strb	r7, [r0, r5]
 8001302:	1c6d      	adds	r5, r5, #1
 8001304:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001308:	a807      	add	r0, sp, #28
 800130a:	4428      	add	r0, r5
 800130c:	f002 fb12 	bl	8003934 <putle16>
 8001310:	1cad      	adds	r5, r5, #2
 8001312:	e79a      	b.n	800124a <??ZbZclHandleWriteAttr_8>

08001314 <??ZbZclHandleWriteAttr_10>:
 8001314:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001318:	2800      	cmp	r0, #0
 800131a:	d001      	beq.n	8001320 <??ZbZclHandleWriteAttr_13>
 800131c:	46b8      	mov	r8, r7
 800131e:	e05d      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

08001320 <??ZbZclHandleWriteAttr_13>:
 8001320:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8001324:	2802      	cmp	r0, #2
 8001326:	d001      	beq.n	800132c <??ZbZclHandleWriteAttr_14>
 8001328:	2c00      	cmp	r4, #0
 800132a:	d000      	beq.n	800132e <??ZbZclHandleWriteAttr_2>

0800132c <??ZbZclHandleWriteAttr_14>:
 800132c:	e056      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

0800132e <??ZbZclHandleWriteAttr_2>:
 800132e:	2000      	movs	r0, #0
 8001330:	4682      	mov	sl, r0
 8001332:	f05f 0b00 	movs.w	fp, #0

08001336 <??ZbZclHandleWriteAttr_15>:
 8001336:	f11a 0003 	adds.w	r0, sl, #3
 800133a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800133c:	4288      	cmp	r0, r1
 800133e:	d302      	bcc.n	8001346 <??ZbZclHandleWriteAttr_16>
 8001340:	465c      	mov	r4, fp
 8001342:	1c64      	adds	r4, r4, #1
 8001344:	e03b      	b.n	80013be <??ZbZclHandleWriteAttr_17>

08001346 <??ZbZclHandleWriteAttr_16>:
 8001346:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001348:	4450      	add	r0, sl
 800134a:	f002 faa7 	bl	800389c <pletoh16>
 800134e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8001352:	f11a 0a02 	adds.w	sl, sl, #2
 8001356:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001358:	f810 000a 	ldrb.w	r0, [r0, sl]
 800135c:	f88d 0009 	strb.w	r0, [sp, #9]
 8001360:	f11a 0a01 	adds.w	sl, sl, #1
 8001364:	2300      	movs	r3, #0
 8001366:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8001368:	ebb2 020a 	subs.w	r2, r2, sl
 800136c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800136e:	eb00 010a 	add.w	r1, r0, sl
 8001372:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001376:	f003 fa8c 	bl	8004892 <ZbZclAttrParseLength>
 800137a:	9004      	str	r0, [sp, #16]
 800137c:	9804      	ldr	r0, [sp, #16]
 800137e:	2800      	cmp	r0, #0
 8001380:	d502      	bpl.n	8001388 <??ZbZclHandleWriteAttr_18>
 8001382:	465c      	mov	r4, fp
 8001384:	1c64      	adds	r4, r4, #1
 8001386:	e01a      	b.n	80013be <??ZbZclHandleWriteAttr_17>

08001388 <??ZbZclHandleWriteAttr_18>:
 8001388:	2000      	movs	r0, #0
 800138a:	9001      	str	r0, [sp, #4]
 800138c:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 800138e:	ebb0 000a 	subs.w	r0, r0, sl
 8001392:	9000      	str	r0, [sp, #0]
 8001394:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001396:	eb00 030a 	add.w	r3, r0, sl
 800139a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800139e:	f116 0110 	adds.w	r1, r6, #16
 80013a2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80013a4:	f002 fd9f 	bl	8003ee6 <ZbZclAttrWrite>
 80013a8:	0007      	movs	r7, r0
 80013aa:	0038      	movs	r0, r7
 80013ac:	b2c0      	uxtb	r0, r0
 80013ae:	2800      	cmp	r0, #0
 80013b0:	d001      	beq.n	80013b6 <??ZbZclHandleWriteAttr_19>
 80013b2:	f11b 0b01 	adds.w	fp, fp, #1

080013b6 <??ZbZclHandleWriteAttr_19>:
 80013b6:	9804      	ldr	r0, [sp, #16]
 80013b8:	eb10 0a0a 	adds.w	sl, r0, sl
 80013bc:	e7bb      	b.n	8001336 <??ZbZclHandleWriteAttr_15>

080013be <??ZbZclHandleWriteAttr_17>:
 80013be:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80013c2:	2803      	cmp	r0, #3
 80013c4:	d105      	bne.n	80013d2 <??ZbZclHandleWriteAttr_20>
 80013c6:	2c00      	cmp	r4, #0
 80013c8:	d002      	beq.n	80013d0 <??ZbZclHandleWriteAttr_21>
 80013ca:	2001      	movs	r0, #1
 80013cc:	4680      	mov	r8, r0
 80013ce:	e005      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

080013d0 <??ZbZclHandleWriteAttr_21>:
 80013d0:	e004      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

080013d2 <??ZbZclHandleWriteAttr_20>:
 80013d2:	20ff      	movs	r0, #255	; 0xff
 80013d4:	4680      	mov	r8, r0
 80013d6:	e001      	b.n	80013dc <??ZbZclHandleWriteAttr_7>

080013d8 <??ZbZclHandleWriteAttr_3>:
 80013d8:	2081      	movs	r0, #129	; 0x81
 80013da:	4680      	mov	r8, r0

080013dc <??ZbZclHandleWriteAttr_7>:
 80013dc:	4640      	mov	r0, r8
 80013de:	b2c0      	uxtb	r0, r0
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d00b      	beq.n	80013fc <??ZbZclHandleWriteAttr_22>
 80013e4:	4640      	mov	r0, r8
 80013e6:	b2c0      	uxtb	r0, r0
 80013e8:	28ff      	cmp	r0, #255	; 0xff
 80013ea:	d006      	beq.n	80013fa <??ZbZclHandleWriteAttr_23>
 80013ec:	4643      	mov	r3, r8
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80013f2:	0031      	movs	r1, r6
 80013f4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80013f6:	f013 fd37 	bl	8014e68 <ZbZclSendDefaultResponse>

080013fa <??ZbZclHandleWriteAttr_23>:
 80013fa:	e01a      	b.n	8001432 <??ZbZclHandleWriteAttr_24>

080013fc <??ZbZclHandleWriteAttr_22>:
 80013fc:	2c00      	cmp	r4, #0
 80013fe:	d10c      	bne.n	800141a <??ZbZclHandleWriteAttr_25>
 8001400:	2d00      	cmp	r5, #0
 8001402:	d106      	bne.n	8001412 <??ZbZclHandleWriteAttr_26>
 8001404:	2301      	movs	r3, #1
 8001406:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001408:	0031      	movs	r1, r6
 800140a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800140c:	f013 fd2c 	bl	8014e68 <ZbZclSendDefaultResponse>
 8001410:	e00f      	b.n	8001432 <??ZbZclHandleWriteAttr_24>

08001412 <??ZbZclHandleWriteAttr_26>:
 8001412:	2000      	movs	r0, #0
 8001414:	a907      	add	r1, sp, #28
 8001416:	5548      	strb	r0, [r1, r5]
 8001418:	1c6d      	adds	r5, r5, #1

0800141a <??ZbZclHandleWriteAttr_25>:
 800141a:	a807      	add	r0, sp, #28
 800141c:	901c      	str	r0, [sp, #112]	; 0x70
 800141e:	0028      	movs	r0, r5
 8001420:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
 8001424:	2300      	movs	r3, #0
 8001426:	2200      	movs	r2, #0
 8001428:	a916      	add	r1, sp, #88	; 0x58
 800142a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800142c:	6880      	ldr	r0, [r0, #8]
 800142e:	f012 ff81 	bl	8014334 <ZbApsdeDataReqCallback>

08001432 <??ZbZclHandleWriteAttr_24>:
 8001432:	b025      	add	sp, #148	; 0x94
 8001434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001438 <zcl_handle_command>:
 8001438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800143c:	0004      	movs	r4, r0
 800143e:	000d      	movs	r5, r1
 8001440:	0016      	movs	r6, r2
 8001442:	79f7      	ldrb	r7, [r6, #7]
 8001444:	8868      	ldrh	r0, [r5, #2]
 8001446:	28ff      	cmp	r0, #255	; 0xff
 8001448:	d102      	bne.n	8001450 <??zcl_handle_command_0>
 800144a:	f05f 0800 	movs.w	r8, #0
 800144e:	e001      	b.n	8001454 <??zcl_handle_command_1>

08001450 <??zcl_handle_command_0>:
 8001450:	f05f 0801 	movs.w	r8, #1

08001454 <??zcl_handle_command_1>:
 8001454:	f115 0110 	adds.w	r1, r5, #16
 8001458:	68a0      	ldr	r0, [r4, #8]
 800145a:	f013 f81f 	bl	801449c <ZbApsAddrIsLocal>
 800145e:	2800      	cmp	r0, #0
 8001460:	d121      	bne.n	80014a6 <??zcl_handle_command_2>

08001462 <??zcl_handle_command_3>:
 8001462:	89a0      	ldrh	r0, [r4, #12]
 8001464:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001468:	d01d      	beq.n	80014a6 <??zcl_handle_command_2>

0800146a <??zcl_handle_command_4>:
 800146a:	0032      	movs	r2, r6
 800146c:	0029      	movs	r1, r5
 800146e:	0020      	movs	r0, r4
 8001470:	f7ff fc38 	bl	8000ce4 <ZbZclClusterCheckMinSecurity>
 8001474:	2800      	cmp	r0, #0
 8001476:	d107      	bne.n	8001488 <??zcl_handle_command_5>
 8001478:	2301      	movs	r3, #1
 800147a:	0032      	movs	r2, r6
 800147c:	0029      	movs	r1, r5
 800147e:	0020      	movs	r0, r4
 8001480:	f013 fcf2 	bl	8014e68 <ZbZclSendDefaultResponse>
 8001484:	4640      	mov	r0, r8
 8001486:	e0f7      	b.n	8001678 <??zcl_handle_command_6>

08001488 <??zcl_handle_command_5>:
 8001488:	0032      	movs	r2, r6
 800148a:	0029      	movs	r1, r5
 800148c:	68a0      	ldr	r0, [r4, #8]
 800148e:	f013 fc07 	bl	8014ca0 <ZbZclDeviceLogCheckAllow>
 8001492:	2800      	cmp	r0, #0
 8001494:	d107      	bne.n	80014a6 <??zcl_handle_command_2>
 8001496:	2301      	movs	r3, #1
 8001498:	0032      	movs	r2, r6
 800149a:	0029      	movs	r1, r5
 800149c:	0020      	movs	r0, r4
 800149e:	f013 fce3 	bl	8014e68 <ZbZclSendDefaultResponse>
 80014a2:	4640      	mov	r0, r8
 80014a4:	e0e8      	b.n	8001678 <??zcl_handle_command_6>

080014a6 <??zcl_handle_command_2>:
 80014a6:	7830      	ldrb	r0, [r6, #0]
 80014a8:	2801      	cmp	r0, #1
 80014aa:	d13a      	bne.n	8001522 <??zcl_handle_command_8>
 80014ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d107      	bne.n	80014c2 <??zcl_handle_command_9>
 80014b2:	2381      	movs	r3, #129	; 0x81
 80014b4:	0032      	movs	r2, r6
 80014b6:	0029      	movs	r1, r5
 80014b8:	0020      	movs	r0, r4
 80014ba:	f013 fcd5 	bl	8014e68 <ZbZclSendDefaultResponse>
 80014be:	4640      	mov	r0, r8
 80014c0:	e0da      	b.n	8001678 <??zcl_handle_command_6>

080014c2 <??zcl_handle_command_9>:
 80014c2:	7870      	ldrb	r0, [r6, #1]
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d00e      	beq.n	80014e6 <??zcl_handle_command_10>
 80014c8:	8a20      	ldrh	r0, [r4, #16]
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d003      	beq.n	80014d6 <??zcl_handle_command_11>
 80014ce:	8a20      	ldrh	r0, [r4, #16]
 80014d0:	88b1      	ldrh	r1, [r6, #4]
 80014d2:	4288      	cmp	r0, r1
 80014d4:	d012      	beq.n	80014fc <??zcl_handle_command_12>

080014d6 <??zcl_handle_command_11>:
 80014d6:	2381      	movs	r3, #129	; 0x81
 80014d8:	0032      	movs	r2, r6
 80014da:	0029      	movs	r1, r5
 80014dc:	0020      	movs	r0, r4
 80014de:	f013 fcc3 	bl	8014e68 <ZbZclSendDefaultResponse>
 80014e2:	4640      	mov	r0, r8
 80014e4:	e0c8      	b.n	8001678 <??zcl_handle_command_6>

080014e6 <??zcl_handle_command_10>:
 80014e6:	8a20      	ldrh	r0, [r4, #16]
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d007      	beq.n	80014fc <??zcl_handle_command_12>
 80014ec:	2381      	movs	r3, #129	; 0x81
 80014ee:	0032      	movs	r2, r6
 80014f0:	0029      	movs	r1, r5
 80014f2:	0020      	movs	r0, r4
 80014f4:	f013 fcb8 	bl	8014e68 <ZbZclSendDefaultResponse>
 80014f8:	4640      	mov	r0, r8
 80014fa:	e0bd      	b.n	8001678 <??zcl_handle_command_6>

080014fc <??zcl_handle_command_12>:
 80014fc:	002a      	movs	r2, r5
 80014fe:	0031      	movs	r1, r6
 8001500:	0020      	movs	r0, r4
 8001502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001504:	4798      	blx	r3
 8001506:	4681      	mov	r9, r0
 8001508:	4648      	mov	r0, r9
 800150a:	b2c0      	uxtb	r0, r0
 800150c:	28ff      	cmp	r0, #255	; 0xff
 800150e:	d006      	beq.n	800151e <??zcl_handle_command_13>
 8001510:	464b      	mov	r3, r9
 8001512:	b2db      	uxtb	r3, r3
 8001514:	0032      	movs	r2, r6
 8001516:	0029      	movs	r1, r5
 8001518:	0020      	movs	r0, r4
 800151a:	f013 fca5 	bl	8014e68 <ZbZclSendDefaultResponse>

0800151e <??zcl_handle_command_13>:
 800151e:	4640      	mov	r0, r8
 8001520:	e0aa      	b.n	8001678 <??zcl_handle_command_6>

08001522 <??zcl_handle_command_8>:
 8001522:	7830      	ldrb	r0, [r6, #0]
 8001524:	2800      	cmp	r0, #0
 8001526:	d007      	beq.n	8001538 <??zcl_handle_command_14>
 8001528:	2385      	movs	r3, #133	; 0x85
 800152a:	0032      	movs	r2, r6
 800152c:	0029      	movs	r1, r5
 800152e:	0020      	movs	r0, r4
 8001530:	f013 fc9a 	bl	8014e68 <ZbZclSendDefaultResponse>
 8001534:	4640      	mov	r0, r8
 8001536:	e09f      	b.n	8001678 <??zcl_handle_command_6>

08001538 <??zcl_handle_command_14>:
 8001538:	0038      	movs	r0, r7
 800153a:	b2c0      	uxtb	r0, r0
 800153c:	2800      	cmp	r0, #0
 800153e:	d01c      	beq.n	800157a <??zcl_handle_command_15>
 8001540:	2801      	cmp	r0, #1
 8001542:	d03f      	beq.n	80015c4 <??zcl_handle_command_16>
 8001544:	2802      	cmp	r0, #2
 8001546:	d01e      	beq.n	8001586 <??zcl_handle_command_17>
 8001548:	2803      	cmp	r0, #3
 800154a:	d01c      	beq.n	8001586 <??zcl_handle_command_17>
 800154c:	2804      	cmp	r0, #4
 800154e:	d039      	beq.n	80015c4 <??zcl_handle_command_16>
 8001550:	2805      	cmp	r0, #5
 8001552:	d018      	beq.n	8001586 <??zcl_handle_command_17>
 8001554:	2806      	cmp	r0, #6
 8001556:	d01c      	beq.n	8001592 <??zcl_handle_command_18>
 8001558:	2807      	cmp	r0, #7
 800155a:	d033      	beq.n	80015c4 <??zcl_handle_command_16>
 800155c:	2808      	cmp	r0, #8
 800155e:	d01e      	beq.n	800159e <??zcl_handle_command_19>
 8001560:	2809      	cmp	r0, #9
 8001562:	d02f      	beq.n	80015c4 <??zcl_handle_command_16>
 8001564:	280a      	cmp	r0, #10
 8001566:	d020      	beq.n	80015aa <??zcl_handle_command_20>
 8001568:	280b      	cmp	r0, #11
 800156a:	d02a      	beq.n	80015c2 <??zcl_handle_command_21>
 800156c:	280c      	cmp	r0, #12
 800156e:	d022      	beq.n	80015b6 <??zcl_handle_command_22>
 8001570:	280d      	cmp	r0, #13
 8001572:	d027      	beq.n	80015c4 <??zcl_handle_command_16>
 8001574:	2810      	cmp	r0, #16
 8001576:	d025      	beq.n	80015c4 <??zcl_handle_command_16>
 8001578:	e025      	b.n	80015c6 <??zcl_handle_command_23>

0800157a <??zcl_handle_command_15>:
 800157a:	002a      	movs	r2, r5
 800157c:	0031      	movs	r1, r6
 800157e:	0020      	movs	r0, r4
 8001580:	f7ff fd1f 	bl	8000fc2 <ZbZclHandleReadAttr>
 8001584:	e077      	b.n	8001676 <??zcl_handle_command_24>

08001586 <??zcl_handle_command_17>:
 8001586:	002a      	movs	r2, r5
 8001588:	0031      	movs	r1, r6
 800158a:	0020      	movs	r0, r4
 800158c:	f7ff fdf4 	bl	8001178 <ZbZclHandleWriteAttr>
 8001590:	e071      	b.n	8001676 <??zcl_handle_command_24>

08001592 <??zcl_handle_command_18>:
 8001592:	002a      	movs	r2, r5
 8001594:	0031      	movs	r1, r6
 8001596:	0020      	movs	r0, r4
 8001598:	f004 fad5 	bl	8005b46 <ZbZclHandleConfigReport>
 800159c:	e06b      	b.n	8001676 <??zcl_handle_command_24>

0800159e <??zcl_handle_command_19>:
 800159e:	002a      	movs	r2, r5
 80015a0:	0031      	movs	r1, r6
 80015a2:	0020      	movs	r0, r4
 80015a4:	f004 fd53 	bl	800604e <ZbZclHandleReadReport>
 80015a8:	e065      	b.n	8001676 <??zcl_handle_command_24>

080015aa <??zcl_handle_command_20>:
 80015aa:	002a      	movs	r2, r5
 80015ac:	0031      	movs	r1, r6
 80015ae:	0020      	movs	r0, r4
 80015b0:	f004 fe72 	bl	8006298 <ZbZclHandleReportAttr>
 80015b4:	e05f      	b.n	8001676 <??zcl_handle_command_24>

080015b6 <??zcl_handle_command_22>:
 80015b6:	002a      	movs	r2, r5
 80015b8:	0031      	movs	r1, r6
 80015ba:	0020      	movs	r0, r4
 80015bc:	f002 fa5f 	bl	8003a7e <ZbZclAttrHandleDiscover>
 80015c0:	e059      	b.n	8001676 <??zcl_handle_command_24>

080015c2 <??zcl_handle_command_21>:
 80015c2:	e058      	b.n	8001676 <??zcl_handle_command_24>

080015c4 <??zcl_handle_command_16>:
 80015c4:	e057      	b.n	8001676 <??zcl_handle_command_24>

080015c6 <??zcl_handle_command_23>:
 80015c6:	7870      	ldrb	r0, [r6, #1]
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d04e      	beq.n	800166a <??zcl_handle_command_25>
 80015cc:	88b0      	ldrh	r0, [r6, #4]
 80015ce:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80015d2:	4288      	cmp	r0, r1
 80015d4:	d141      	bne.n	800165a <??zcl_handle_command_26>
 80015d6:	f115 0110 	adds.w	r1, r5, #16
 80015da:	68a0      	ldr	r0, [r4, #8]
 80015dc:	f012 ff5e 	bl	801449c <ZbApsAddrIsLocal>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d107      	bne.n	80015f4 <??zcl_handle_command_27>
 80015e4:	2381      	movs	r3, #129	; 0x81
 80015e6:	0032      	movs	r2, r6
 80015e8:	0029      	movs	r1, r5
 80015ea:	0020      	movs	r0, r4
 80015ec:	f013 fc3c 	bl	8014e68 <ZbZclSendDefaultResponse>
 80015f0:	4640      	mov	r0, r8
 80015f2:	e041      	b.n	8001678 <??zcl_handle_command_6>

080015f4 <??zcl_handle_command_27>:
 80015f4:	0038      	movs	r0, r7
 80015f6:	b2c0      	uxtb	r0, r0
 80015f8:	28f0      	cmp	r0, #240	; 0xf0
 80015fa:	d108      	bne.n	800160e <??zcl_handle_command_28>
 80015fc:	78b0      	ldrb	r0, [r6, #2]
 80015fe:	2800      	cmp	r0, #0
 8001600:	d131      	bne.n	8001666 <??zcl_handle_command_29>
 8001602:	002a      	movs	r2, r5
 8001604:	0031      	movs	r1, r6
 8001606:	0020      	movs	r0, r4
 8001608:	f005 fbbf 	bl	8006d8a <ZbZclHandleGetSceneData>
 800160c:	e02b      	b.n	8001666 <??zcl_handle_command_29>

0800160e <??zcl_handle_command_28>:
 800160e:	0038      	movs	r0, r7
 8001610:	b2c0      	uxtb	r0, r0
 8001612:	28f1      	cmp	r0, #241	; 0xf1
 8001614:	d108      	bne.n	8001628 <??zcl_handle_command_30>
 8001616:	78b0      	ldrb	r0, [r6, #2]
 8001618:	2800      	cmp	r0, #0
 800161a:	d124      	bne.n	8001666 <??zcl_handle_command_29>
 800161c:	002a      	movs	r2, r5
 800161e:	0031      	movs	r1, r6
 8001620:	0020      	movs	r0, r4
 8001622:	f005 fc31 	bl	8006e88 <ZbZclHandleSetSceneData>
 8001626:	e01e      	b.n	8001666 <??zcl_handle_command_29>

08001628 <??zcl_handle_command_30>:
 8001628:	0038      	movs	r0, r7
 800162a:	b2c0      	uxtb	r0, r0
 800162c:	28f2      	cmp	r0, #242	; 0xf2
 800162e:	d10d      	bne.n	800164c <??zcl_handle_command_31>
 8001630:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8001632:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001634:	0020      	movs	r0, r4
 8001636:	f7ff fc77 	bl	8000f28 <zcl_persist_handle_set>
 800163a:	4681      	mov	r9, r0
 800163c:	464b      	mov	r3, r9
 800163e:	b2db      	uxtb	r3, r3
 8001640:	0032      	movs	r2, r6
 8001642:	0029      	movs	r1, r5
 8001644:	0020      	movs	r0, r4
 8001646:	f013 fc0f 	bl	8014e68 <ZbZclSendDefaultResponse>
 800164a:	e00c      	b.n	8001666 <??zcl_handle_command_29>

0800164c <??zcl_handle_command_31>:
 800164c:	2381      	movs	r3, #129	; 0x81
 800164e:	0032      	movs	r2, r6
 8001650:	0029      	movs	r1, r5
 8001652:	0020      	movs	r0, r4
 8001654:	f013 fc08 	bl	8014e68 <ZbZclSendDefaultResponse>
 8001658:	e005      	b.n	8001666 <??zcl_handle_command_29>

0800165a <??zcl_handle_command_26>:
 800165a:	2381      	movs	r3, #129	; 0x81
 800165c:	0032      	movs	r2, r6
 800165e:	0029      	movs	r1, r5
 8001660:	0020      	movs	r0, r4
 8001662:	f013 fc01 	bl	8014e68 <ZbZclSendDefaultResponse>

08001666 <??zcl_handle_command_29>:
 8001666:	4640      	mov	r0, r8
 8001668:	e006      	b.n	8001678 <??zcl_handle_command_6>

0800166a <??zcl_handle_command_25>:
 800166a:	2381      	movs	r3, #129	; 0x81
 800166c:	0032      	movs	r2, r6
 800166e:	0029      	movs	r1, r5
 8001670:	0020      	movs	r0, r4
 8001672:	f013 fbf9 	bl	8014e68 <ZbZclSendDefaultResponse>

08001676 <??zcl_handle_command_24>:
 8001676:	4640      	mov	r0, r8

08001678 <??zcl_handle_command_6>:
 8001678:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

0800167c <zcl_cluster_data_ind>:
 800167c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800167e:	0004      	movs	r4, r0
 8001680:	000d      	movs	r5, r1
 8001682:	002e      	movs	r6, r5
 8001684:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001686:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001688:	4668      	mov	r0, sp
 800168a:	f000 f8fe 	bl	800188a <ZbZclParseHeader>
 800168e:	0007      	movs	r7, r0
 8001690:	2f00      	cmp	r7, #0
 8001692:	d501      	bpl.n	8001698 <??zcl_cluster_data_ind_0>
 8001694:	2000      	movs	r0, #0
 8001696:	e00a      	b.n	80016ae <??zcl_cluster_data_ind_1>

08001698 <??zcl_cluster_data_ind_0>:
 8001698:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800169a:	4438      	add	r0, r7
 800169c:	6260      	str	r0, [r4, #36]	; 0x24
 800169e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80016a0:	1bc0      	subs	r0, r0, r7
 80016a2:	8520      	strh	r0, [r4, #40]	; 0x28
 80016a4:	466a      	mov	r2, sp
 80016a6:	0021      	movs	r1, r4
 80016a8:	0030      	movs	r0, r6
 80016aa:	f7ff fec5 	bl	8001438 <zcl_handle_command>

080016ae <??zcl_cluster_data_ind_1>:
 80016ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080016b0 <zcl_cluster_alarm_data_ind>:
 80016b0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b4:	b098      	sub	sp, #96	; 0x60
 80016b6:	0004      	movs	r4, r0
 80016b8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80016ba:	26ff      	movs	r6, #255	; 0xff
 80016bc:	2700      	movs	r7, #0
 80016be:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80016c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016c2:	a802      	add	r0, sp, #8
 80016c4:	f000 f8e1 	bl	800188a <ZbZclParseHeader>
 80016c8:	4680      	mov	r8, r0
 80016ca:	f1b8 0f00 	cmp.w	r8, #0
 80016ce:	d501      	bpl.n	80016d4 <??zcl_cluster_alarm_data_ind_0>
 80016d0:	2000      	movs	r0, #0
 80016d2:	e0d7      	b.n	8001884 <??zcl_cluster_alarm_data_ind_1>

080016d4 <??zcl_cluster_alarm_data_ind_0>:
 80016d4:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80016d6:	ebb0 0008 	subs.w	r0, r0, r8
 80016da:	8520      	strh	r0, [r4, #40]	; 0x28
 80016dc:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80016de:	2809      	cmp	r0, #9
 80016e0:	d001      	beq.n	80016e6 <??zcl_cluster_alarm_data_ind_2>
 80016e2:	2000      	movs	r0, #0
 80016e4:	e0ce      	b.n	8001884 <??zcl_cluster_alarm_data_ind_1>

080016e6 <??zcl_cluster_alarm_data_ind_2>:
 80016e6:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d001      	beq.n	80016f2 <??zcl_cluster_alarm_data_ind_3>
 80016ee:	2000      	movs	r0, #0
 80016f0:	e0c8      	b.n	8001884 <??zcl_cluster_alarm_data_ind_1>

080016f2 <??zcl_cluster_alarm_data_ind_3>:
 80016f2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80016f6:	2801      	cmp	r0, #1
 80016f8:	d001      	beq.n	80016fe <??zcl_cluster_alarm_data_ind_4>
 80016fa:	2000      	movs	r0, #0
 80016fc:	e0c2      	b.n	8001884 <??zcl_cluster_alarm_data_ind_1>

080016fe <??zcl_cluster_alarm_data_ind_4>:
 80016fe:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001702:	2800      	cmp	r0, #0
 8001704:	d002      	beq.n	800170c <??zcl_cluster_alarm_data_ind_5>
 8001706:	2801      	cmp	r0, #1
 8001708:	d02a      	beq.n	8001760 <??zcl_cluster_alarm_data_ind_6>
 800170a:	e03f      	b.n	800178c <??zcl_cluster_alarm_data_ind_7>

0800170c <??zcl_cluster_alarm_data_ind_5>:
 800170c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800170e:	f810 0008 	ldrb.w	r0, [r0, r8]
 8001712:	f88d 0004 	strb.w	r0, [sp, #4]
 8001716:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001718:	4440      	add	r0, r8
 800171a:	1c40      	adds	r0, r0, #1
 800171c:	f002 f8be 	bl	800389c <pletoh16>
 8001720:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001724:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8001728:	0028      	movs	r0, r5
 800172a:	f7ff fa77 	bl	8000c1c <ZbZclClusterGetClusterId>
 800172e:	4581      	cmp	r9, r0
 8001730:	d12c      	bne.n	800178c <??zcl_cluster_alarm_data_ind_7>

08001732 <??zcl_cluster_alarm_data_ind_9>:
 8001732:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8001734:	2800      	cmp	r0, #0
 8001736:	d104      	bne.n	8001742 <??zcl_cluster_alarm_data_ind_10>
 8001738:	2081      	movs	r0, #129	; 0x81
 800173a:	0006      	movs	r6, r0
 800173c:	2001      	movs	r0, #1
 800173e:	0007      	movs	r7, r0
 8001740:	e024      	b.n	800178c <??zcl_cluster_alarm_data_ind_7>

08001742 <??zcl_cluster_alarm_data_ind_10>:
 8001742:	a802      	add	r0, sp, #8
 8001744:	9000      	str	r0, [sp, #0]
 8001746:	0023      	movs	r3, r4
 8001748:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800174c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001750:	0028      	movs	r0, r5
 8001752:	f8d5 c04c 	ldr.w	ip, [r5, #76]	; 0x4c
 8001756:	47e0      	blx	ip
 8001758:	0006      	movs	r6, r0
 800175a:	2001      	movs	r0, #1
 800175c:	0007      	movs	r7, r0
 800175e:	e015      	b.n	800178c <??zcl_cluster_alarm_data_ind_7>

08001760 <??zcl_cluster_alarm_data_ind_6>:
 8001760:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8001762:	2800      	cmp	r0, #0
 8001764:	d104      	bne.n	8001770 <??zcl_cluster_alarm_data_ind_11>
 8001766:	2081      	movs	r0, #129	; 0x81
 8001768:	0006      	movs	r6, r0
 800176a:	2001      	movs	r0, #1
 800176c:	0007      	movs	r7, r0
 800176e:	e00d      	b.n	800178c <??zcl_cluster_alarm_data_ind_7>

08001770 <??zcl_cluster_alarm_data_ind_11>:
 8001770:	a802      	add	r0, sp, #8
 8001772:	9000      	str	r0, [sp, #0]
 8001774:	0023      	movs	r3, r4
 8001776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177a:	21ff      	movs	r1, #255	; 0xff
 800177c:	0028      	movs	r0, r5
 800177e:	f8d5 c04c 	ldr.w	ip, [r5, #76]	; 0x4c
 8001782:	47e0      	blx	ip
 8001784:	0006      	movs	r6, r0
 8001786:	2001      	movs	r0, #1
 8001788:	0007      	movs	r7, r0
 800178a:	e7ff      	b.n	800178c <??zcl_cluster_alarm_data_ind_7>

0800178c <??zcl_cluster_alarm_data_ind_7>:
 800178c:	0030      	movs	r0, r6
 800178e:	b2c0      	uxtb	r0, r0
 8001790:	28ff      	cmp	r0, #255	; 0xff
 8001792:	d076      	beq.n	8001882 <??zcl_cluster_alarm_data_ind_12>
 8001794:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001798:	f88d 0000 	strb.w	r0, [sp]
 800179c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80017a0:	f88d 0002 	strb.w	r0, [sp, #2]
 80017a4:	f88d 6003 	strb.w	r6, [sp, #3]
 80017a8:	f05f 0a08 	movs.w	sl, #8
 80017ac:	f05f 0b00 	movs.w	fp, #0
 80017b0:	f10d 0908 	add.w	r9, sp, #8
 80017b4:	465a      	mov	r2, fp
 80017b6:	4651      	mov	r1, sl
 80017b8:	4648      	mov	r0, r9
 80017ba:	f006 f88d 	bl	80078d8 <__aeabi_memset>
 80017be:	2000      	movs	r0, #0
 80017c0:	f88d 0008 	strb.w	r0, [sp, #8]
 80017c4:	2000      	movs	r0, #0
 80017c6:	f88d 0009 	strb.w	r0, [sp, #9]
 80017ca:	2001      	movs	r0, #1
 80017cc:	f88d 000a 	strb.w	r0, [sp, #10]
 80017d0:	2001      	movs	r0, #1
 80017d2:	f88d 000b 	strb.w	r0, [sp, #11]
 80017d6:	2000      	movs	r0, #0
 80017d8:	f8ad 000c 	strh.w	r0, [sp, #12]
 80017dc:	f89d 0000 	ldrb.w	r0, [sp]
 80017e0:	f88d 000e 	strb.w	r0, [sp, #14]
 80017e4:	200b      	movs	r0, #11
 80017e6:	f88d 000f 	strb.w	r0, [sp, #15]
 80017ea:	2205      	movs	r2, #5
 80017ec:	a905      	add	r1, sp, #20
 80017ee:	a802      	add	r0, sp, #8
 80017f0:	f000 f8ce 	bl	8001990 <ZbZclAppendHeader>
 80017f4:	4681      	mov	r9, r0
 80017f6:	f1b9 0f00 	cmp.w	r9, #0
 80017fa:	d501      	bpl.n	8001800 <??zcl_cluster_alarm_data_ind_13>
 80017fc:	2089      	movs	r0, #137	; 0x89
 80017fe:	e041      	b.n	8001884 <??zcl_cluster_alarm_data_ind_1>

08001800 <??zcl_cluster_alarm_data_ind_13>:
 8001800:	a805      	add	r0, sp, #20
 8001802:	9014      	str	r0, [sp, #80]	; 0x50
 8001804:	a814      	add	r0, sp, #80	; 0x50
 8001806:	f8c0 9004 	str.w	r9, [r0, #4]
 800180a:	f10d 0102 	add.w	r1, sp, #2
 800180e:	6081      	str	r1, [r0, #8]
 8001810:	2002      	movs	r0, #2
 8001812:	9017      	str	r0, [sp, #92]	; 0x5c
 8001814:	2030      	movs	r0, #48	; 0x30
 8001816:	9004      	str	r0, [sp, #16]
 8001818:	f05f 0a00 	movs.w	sl, #0
 800181c:	f10d 0b20 	add.w	fp, sp, #32
 8001820:	4652      	mov	r2, sl
 8001822:	9904      	ldr	r1, [sp, #16]
 8001824:	4658      	mov	r0, fp
 8001826:	f006 f857 	bl	80078d8 <__aeabi_memset>
 800182a:	a808      	add	r0, sp, #32
 800182c:	f114 0110 	adds.w	r1, r4, #16
 8001830:	2210      	movs	r2, #16
 8001832:	f016 f915 	bl	8017a60 <__aeabi_memcpy>
 8001836:	8aa8      	ldrh	r0, [r5, #20]
 8001838:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 800183c:	2009      	movs	r0, #9
 800183e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8001842:	7ba8      	ldrb	r0, [r5, #14]
 8001844:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8001848:	a814      	add	r0, sp, #80	; 0x50
 800184a:	900e      	str	r0, [sp, #56]	; 0x38
 800184c:	2002      	movs	r0, #2
 800184e:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8001852:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001856:	f7ff fad2 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 800185a:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 800185e:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 8001862:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8001866:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 800186a:	2000      	movs	r0, #0
 800186c:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
 8001870:	2000      	movs	r0, #0
 8001872:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
 8001876:	2300      	movs	r3, #0
 8001878:	2200      	movs	r2, #0
 800187a:	a908      	add	r1, sp, #32
 800187c:	68a8      	ldr	r0, [r5, #8]
 800187e:	f012 fd59 	bl	8014334 <ZbApsdeDataReqCallback>

08001882 <??zcl_cluster_alarm_data_ind_12>:
 8001882:	0038      	movs	r0, r7

08001884 <??zcl_cluster_alarm_data_ind_1>:
 8001884:	b019      	add	sp, #100	; 0x64
 8001886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800188a <ZbZclParseHeader>:
 800188a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800188e:	0004      	movs	r4, r0
 8001890:	000d      	movs	r5, r1
 8001892:	0016      	movs	r6, r2
 8001894:	2700      	movs	r7, #0
 8001896:	2e03      	cmp	r6, #3
 8001898:	d202      	bcs.n	80018a0 <??ZbZclParseHeader_0>
 800189a:	f05f 30ff 	movs.w	r0, #4294967295
 800189e:	e035      	b.n	800190c <??ZbZclParseHeader_1>

080018a0 <??ZbZclParseHeader_0>:
 80018a0:	f05f 0808 	movs.w	r8, #8
 80018a4:	f05f 0900 	movs.w	r9, #0
 80018a8:	46a2      	mov	sl, r4
 80018aa:	464a      	mov	r2, r9
 80018ac:	4641      	mov	r1, r8
 80018ae:	4650      	mov	r0, sl
 80018b0:	f006 f812 	bl	80078d8 <__aeabi_memset>
 80018b4:	5de8      	ldrb	r0, [r5, r7]
 80018b6:	f010 0003 	ands.w	r0, r0, #3
 80018ba:	7020      	strb	r0, [r4, #0]
 80018bc:	5de8      	ldrb	r0, [r5, r7]
 80018be:	b2c0      	uxtb	r0, r0
 80018c0:	0880      	lsrs	r0, r0, #2
 80018c2:	f010 0001 	ands.w	r0, r0, #1
 80018c6:	7060      	strb	r0, [r4, #1]
 80018c8:	5de8      	ldrb	r0, [r5, r7]
 80018ca:	b2c0      	uxtb	r0, r0
 80018cc:	08c0      	lsrs	r0, r0, #3
 80018ce:	f010 0001 	ands.w	r0, r0, #1
 80018d2:	70a0      	strb	r0, [r4, #2]
 80018d4:	5de8      	ldrb	r0, [r5, r7]
 80018d6:	b2c0      	uxtb	r0, r0
 80018d8:	0900      	lsrs	r0, r0, #4
 80018da:	f010 0001 	ands.w	r0, r0, #1
 80018de:	70e0      	strb	r0, [r4, #3]
 80018e0:	1c7f      	adds	r7, r7, #1
 80018e2:	7860      	ldrb	r0, [r4, #1]
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d00a      	beq.n	80018fe <??ZbZclParseHeader_2>
 80018e8:	2e05      	cmp	r6, #5
 80018ea:	d202      	bcs.n	80018f2 <??ZbZclParseHeader_3>
 80018ec:	f05f 30ff 	movs.w	r0, #4294967295
 80018f0:	e00c      	b.n	800190c <??ZbZclParseHeader_1>

080018f2 <??ZbZclParseHeader_3>:
 80018f2:	eb05 0007 	add.w	r0, r5, r7
 80018f6:	f001 ffd1 	bl	800389c <pletoh16>
 80018fa:	80a0      	strh	r0, [r4, #4]
 80018fc:	1cbf      	adds	r7, r7, #2

080018fe <??ZbZclParseHeader_2>:
 80018fe:	5de8      	ldrb	r0, [r5, r7]
 8001900:	71a0      	strb	r0, [r4, #6]
 8001902:	1c7f      	adds	r7, r7, #1
 8001904:	5de8      	ldrb	r0, [r5, r7]
 8001906:	71e0      	strb	r0, [r4, #7]
 8001908:	1c7f      	adds	r7, r7, #1
 800190a:	0038      	movs	r0, r7

0800190c <??ZbZclParseHeader_1>:
 800190c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001910 <ZbZclPrependHeader>:
 8001910:	b470      	push	{r4, r5, r6}
 8001912:	0003      	movs	r3, r0
 8001914:	2400      	movs	r4, #0
 8001916:	0015      	movs	r5, r2
 8001918:	2600      	movs	r6, #0
 800191a:	7858      	ldrb	r0, [r3, #1]
 800191c:	2800      	cmp	r0, #0
 800191e:	d004      	beq.n	800192a <??ZbZclPrependHeader_0>
 8001920:	2a05      	cmp	r2, #5
 8001922:	d202      	bcs.n	800192a <??ZbZclPrependHeader_0>
 8001924:	f05f 30ff 	movs.w	r0, #4294967295
 8001928:	e030      	b.n	800198c <??ZbZclPrependHeader_1>

0800192a <??ZbZclPrependHeader_0>:
 800192a:	2a03      	cmp	r2, #3
 800192c:	d202      	bcs.n	8001934 <??ZbZclPrependHeader_2>
 800192e:	f05f 30ff 	movs.w	r0, #4294967295
 8001932:	e02b      	b.n	800198c <??ZbZclPrependHeader_1>

08001934 <??ZbZclPrependHeader_2>:
 8001934:	1e6d      	subs	r5, r5, #1
 8001936:	79d8      	ldrb	r0, [r3, #7]
 8001938:	5548      	strb	r0, [r1, r5]
 800193a:	1c76      	adds	r6, r6, #1
 800193c:	1e6d      	subs	r5, r5, #1
 800193e:	7998      	ldrb	r0, [r3, #6]
 8001940:	5548      	strb	r0, [r1, r5]
 8001942:	1c76      	adds	r6, r6, #1
 8001944:	7858      	ldrb	r0, [r3, #1]
 8001946:	2800      	cmp	r0, #0
 8001948:	d009      	beq.n	800195e <??ZbZclPrependHeader_3>
 800194a:	1e6d      	subs	r5, r5, #1
 800194c:	8898      	ldrh	r0, [r3, #4]
 800194e:	b280      	uxth	r0, r0
 8001950:	0a00      	lsrs	r0, r0, #8
 8001952:	5548      	strb	r0, [r1, r5]
 8001954:	1c76      	adds	r6, r6, #1
 8001956:	1e6d      	subs	r5, r5, #1
 8001958:	8898      	ldrh	r0, [r3, #4]
 800195a:	5548      	strb	r0, [r1, r5]
 800195c:	1c76      	adds	r6, r6, #1

0800195e <??ZbZclPrependHeader_3>:
 800195e:	7818      	ldrb	r0, [r3, #0]
 8001960:	f010 0003 	ands.w	r0, r0, #3
 8001964:	4304      	orrs	r4, r0
 8001966:	7858      	ldrb	r0, [r3, #1]
 8001968:	2800      	cmp	r0, #0
 800196a:	d001      	beq.n	8001970 <??ZbZclPrependHeader_4>
 800196c:	f054 0404 	orrs.w	r4, r4, #4

08001970 <??ZbZclPrependHeader_4>:
 8001970:	7898      	ldrb	r0, [r3, #2]
 8001972:	2801      	cmp	r0, #1
 8001974:	d101      	bne.n	800197a <??ZbZclPrependHeader_5>
 8001976:	f054 0408 	orrs.w	r4, r4, #8

0800197a <??ZbZclPrependHeader_5>:
 800197a:	78d8      	ldrb	r0, [r3, #3]
 800197c:	2801      	cmp	r0, #1
 800197e:	d101      	bne.n	8001984 <??ZbZclPrependHeader_6>
 8001980:	f054 0410 	orrs.w	r4, r4, #16

08001984 <??ZbZclPrependHeader_6>:
 8001984:	1e6d      	subs	r5, r5, #1
 8001986:	554c      	strb	r4, [r1, r5]
 8001988:	1c76      	adds	r6, r6, #1
 800198a:	0030      	movs	r0, r6

0800198c <??ZbZclPrependHeader_1>:
 800198c:	bc70      	pop	{r4, r5, r6}
 800198e:	4770      	bx	lr

08001990 <ZbZclAppendHeader>:
 8001990:	b430      	push	{r4, r5}
 8001992:	0003      	movs	r3, r0
 8001994:	2400      	movs	r4, #0
 8001996:	2500      	movs	r5, #0
 8001998:	7858      	ldrb	r0, [r3, #1]
 800199a:	2800      	cmp	r0, #0
 800199c:	d004      	beq.n	80019a8 <??ZbZclAppendHeader_0>
 800199e:	2a05      	cmp	r2, #5
 80019a0:	d202      	bcs.n	80019a8 <??ZbZclAppendHeader_0>
 80019a2:	f05f 30ff 	movs.w	r0, #4294967295
 80019a6:	e02b      	b.n	8001a00 <??ZbZclAppendHeader_1>

080019a8 <??ZbZclAppendHeader_0>:
 80019a8:	2a03      	cmp	r2, #3
 80019aa:	d202      	bcs.n	80019b2 <??ZbZclAppendHeader_2>
 80019ac:	f05f 30ff 	movs.w	r0, #4294967295
 80019b0:	e026      	b.n	8001a00 <??ZbZclAppendHeader_1>

080019b2 <??ZbZclAppendHeader_2>:
 80019b2:	7818      	ldrb	r0, [r3, #0]
 80019b4:	f010 0003 	ands.w	r0, r0, #3
 80019b8:	4304      	orrs	r4, r0
 80019ba:	7858      	ldrb	r0, [r3, #1]
 80019bc:	2800      	cmp	r0, #0
 80019be:	d001      	beq.n	80019c4 <??ZbZclAppendHeader_3>
 80019c0:	f054 0404 	orrs.w	r4, r4, #4

080019c4 <??ZbZclAppendHeader_3>:
 80019c4:	7898      	ldrb	r0, [r3, #2]
 80019c6:	2801      	cmp	r0, #1
 80019c8:	d101      	bne.n	80019ce <??ZbZclAppendHeader_4>
 80019ca:	f054 0408 	orrs.w	r4, r4, #8

080019ce <??ZbZclAppendHeader_4>:
 80019ce:	78d8      	ldrb	r0, [r3, #3]
 80019d0:	2801      	cmp	r0, #1
 80019d2:	d101      	bne.n	80019d8 <??ZbZclAppendHeader_5>
 80019d4:	f054 0410 	orrs.w	r4, r4, #16

080019d8 <??ZbZclAppendHeader_5>:
 80019d8:	554c      	strb	r4, [r1, r5]
 80019da:	1c6d      	adds	r5, r5, #1
 80019dc:	7858      	ldrb	r0, [r3, #1]
 80019de:	2800      	cmp	r0, #0
 80019e0:	d007      	beq.n	80019f2 <??ZbZclAppendHeader_6>
 80019e2:	8898      	ldrh	r0, [r3, #4]
 80019e4:	5548      	strb	r0, [r1, r5]
 80019e6:	1c6d      	adds	r5, r5, #1
 80019e8:	8898      	ldrh	r0, [r3, #4]
 80019ea:	b280      	uxth	r0, r0
 80019ec:	0a00      	lsrs	r0, r0, #8
 80019ee:	5548      	strb	r0, [r1, r5]
 80019f0:	1c6d      	adds	r5, r5, #1

080019f2 <??ZbZclAppendHeader_6>:
 80019f2:	7998      	ldrb	r0, [r3, #6]
 80019f4:	5548      	strb	r0, [r1, r5]
 80019f6:	1c6d      	adds	r5, r5, #1
 80019f8:	79d8      	ldrb	r0, [r3, #7]
 80019fa:	5548      	strb	r0, [r1, r5]
 80019fc:	1c6d      	adds	r5, r5, #1
 80019fe:	0028      	movs	r0, r5

08001a00 <??ZbZclAppendHeader_1>:
 8001a00:	bc30      	pop	{r4, r5}
 8001a02:	4770      	bx	lr

08001a04 <zb_zcl_append_uint8>:
 8001a04:	b410      	push	{r4}
 8001a06:	0004      	movs	r4, r0
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	d102      	bne.n	8001a12 <??zb_zcl_append_uint8_0>
 8001a0c:	f05f 30ff 	movs.w	r0, #4294967295
 8001a10:	e011      	b.n	8001a36 <??zb_zcl_append_uint8_1>

08001a12 <??zb_zcl_append_uint8_0>:
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	d102      	bne.n	8001a1c <??zb_zcl_append_uint8_2>
 8001a16:	f05f 30ff 	movs.w	r0, #4294967295
 8001a1a:	e00c      	b.n	8001a36 <??zb_zcl_append_uint8_1>

08001a1c <??zb_zcl_append_uint8_2>:
 8001a1c:	6810      	ldr	r0, [r2, #0]
 8001a1e:	1c40      	adds	r0, r0, #1
 8001a20:	4281      	cmp	r1, r0
 8001a22:	d202      	bcs.n	8001a2a <??zb_zcl_append_uint8_3>
 8001a24:	f05f 30ff 	movs.w	r0, #4294967295
 8001a28:	e005      	b.n	8001a36 <??zb_zcl_append_uint8_1>

08001a2a <??zb_zcl_append_uint8_3>:
 8001a2a:	6810      	ldr	r0, [r2, #0]
 8001a2c:	5423      	strb	r3, [r4, r0]
 8001a2e:	6810      	ldr	r0, [r2, #0]
 8001a30:	1c40      	adds	r0, r0, #1
 8001a32:	6010      	str	r0, [r2, #0]
 8001a34:	6810      	ldr	r0, [r2, #0]

08001a36 <??zb_zcl_append_uint8_1>:
 8001a36:	bc10      	pop	{r4}
 8001a38:	4770      	bx	lr

08001a3a <zb_zcl_append_uint16>:
 8001a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3c:	0005      	movs	r5, r0
 8001a3e:	000e      	movs	r6, r1
 8001a40:	0014      	movs	r4, r2
 8001a42:	001f      	movs	r7, r3
 8001a44:	2d00      	cmp	r5, #0
 8001a46:	d102      	bne.n	8001a4e <??zb_zcl_append_uint16_0>
 8001a48:	f05f 30ff 	movs.w	r0, #4294967295
 8001a4c:	e015      	b.n	8001a7a <??zb_zcl_append_uint16_1>

08001a4e <??zb_zcl_append_uint16_0>:
 8001a4e:	2c00      	cmp	r4, #0
 8001a50:	d102      	bne.n	8001a58 <??zb_zcl_append_uint16_2>
 8001a52:	f05f 30ff 	movs.w	r0, #4294967295
 8001a56:	e010      	b.n	8001a7a <??zb_zcl_append_uint16_1>

08001a58 <??zb_zcl_append_uint16_2>:
 8001a58:	6820      	ldr	r0, [r4, #0]
 8001a5a:	1c80      	adds	r0, r0, #2
 8001a5c:	4286      	cmp	r6, r0
 8001a5e:	d202      	bcs.n	8001a66 <??zb_zcl_append_uint16_3>
 8001a60:	f05f 30ff 	movs.w	r0, #4294967295
 8001a64:	e009      	b.n	8001a7a <??zb_zcl_append_uint16_1>

08001a66 <??zb_zcl_append_uint16_3>:
 8001a66:	0039      	movs	r1, r7
 8001a68:	b289      	uxth	r1, r1
 8001a6a:	6820      	ldr	r0, [r4, #0]
 8001a6c:	4428      	add	r0, r5
 8001a6e:	f001 ff61 	bl	8003934 <putle16>
 8001a72:	6820      	ldr	r0, [r4, #0]
 8001a74:	1c80      	adds	r0, r0, #2
 8001a76:	6020      	str	r0, [r4, #0]
 8001a78:	6820      	ldr	r0, [r4, #0]

08001a7a <??zb_zcl_append_uint16_1>:
 8001a7a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001a7c <zb_zcl_append_uint32>:
 8001a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7e:	0005      	movs	r5, r0
 8001a80:	000e      	movs	r6, r1
 8001a82:	0014      	movs	r4, r2
 8001a84:	001f      	movs	r7, r3
 8001a86:	2d00      	cmp	r5, #0
 8001a88:	d102      	bne.n	8001a90 <??zb_zcl_append_uint32_0>
 8001a8a:	f05f 30ff 	movs.w	r0, #4294967295
 8001a8e:	e014      	b.n	8001aba <??zb_zcl_append_uint32_1>

08001a90 <??zb_zcl_append_uint32_0>:
 8001a90:	2c00      	cmp	r4, #0
 8001a92:	d102      	bne.n	8001a9a <??zb_zcl_append_uint32_2>
 8001a94:	f05f 30ff 	movs.w	r0, #4294967295
 8001a98:	e00f      	b.n	8001aba <??zb_zcl_append_uint32_1>

08001a9a <??zb_zcl_append_uint32_2>:
 8001a9a:	6820      	ldr	r0, [r4, #0]
 8001a9c:	1d00      	adds	r0, r0, #4
 8001a9e:	4286      	cmp	r6, r0
 8001aa0:	d202      	bcs.n	8001aa8 <??zb_zcl_append_uint32_3>
 8001aa2:	f05f 30ff 	movs.w	r0, #4294967295
 8001aa6:	e008      	b.n	8001aba <??zb_zcl_append_uint32_1>

08001aa8 <??zb_zcl_append_uint32_3>:
 8001aa8:	0039      	movs	r1, r7
 8001aaa:	6820      	ldr	r0, [r4, #0]
 8001aac:	4428      	add	r0, r5
 8001aae:	f001 ff53 	bl	8003958 <putle32>
 8001ab2:	6820      	ldr	r0, [r4, #0]
 8001ab4:	1d00      	adds	r0, r0, #4
 8001ab6:	6020      	str	r0, [r4, #0]
 8001ab8:	6820      	ldr	r0, [r4, #0]

08001aba <??zb_zcl_append_uint32_1>:
 8001aba:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001abc <zb_zcl_parse_uint8>:
 8001abc:	b410      	push	{r4}
 8001abe:	0004      	movs	r4, r0
 8001ac0:	2c00      	cmp	r4, #0
 8001ac2:	d102      	bne.n	8001aca <??zb_zcl_parse_uint8_0>
 8001ac4:	f05f 30ff 	movs.w	r0, #4294967295
 8001ac8:	e012      	b.n	8001af0 <??zb_zcl_parse_uint8_1>

08001aca <??zb_zcl_parse_uint8_0>:
 8001aca:	2a00      	cmp	r2, #0
 8001acc:	d102      	bne.n	8001ad4 <??zb_zcl_parse_uint8_2>
 8001ace:	f05f 30ff 	movs.w	r0, #4294967295
 8001ad2:	e00d      	b.n	8001af0 <??zb_zcl_parse_uint8_1>

08001ad4 <??zb_zcl_parse_uint8_2>:
 8001ad4:	6810      	ldr	r0, [r2, #0]
 8001ad6:	1c40      	adds	r0, r0, #1
 8001ad8:	4281      	cmp	r1, r0
 8001ada:	d202      	bcs.n	8001ae2 <??zb_zcl_parse_uint8_3>
 8001adc:	f05f 30ff 	movs.w	r0, #4294967295
 8001ae0:	e006      	b.n	8001af0 <??zb_zcl_parse_uint8_1>

08001ae2 <??zb_zcl_parse_uint8_3>:
 8001ae2:	6810      	ldr	r0, [r2, #0]
 8001ae4:	5c20      	ldrb	r0, [r4, r0]
 8001ae6:	7018      	strb	r0, [r3, #0]
 8001ae8:	6810      	ldr	r0, [r2, #0]
 8001aea:	1c40      	adds	r0, r0, #1
 8001aec:	6010      	str	r0, [r2, #0]
 8001aee:	6810      	ldr	r0, [r2, #0]

08001af0 <??zb_zcl_parse_uint8_1>:
 8001af0:	bc10      	pop	{r4}
 8001af2:	4770      	bx	lr

08001af4 <zb_zcl_parse_uint16>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	0005      	movs	r5, r0
 8001af8:	000e      	movs	r6, r1
 8001afa:	0014      	movs	r4, r2
 8001afc:	001f      	movs	r7, r3
 8001afe:	2d00      	cmp	r5, #0
 8001b00:	d102      	bne.n	8001b08 <??zb_zcl_parse_uint16_0>
 8001b02:	f05f 30ff 	movs.w	r0, #4294967295
 8001b06:	e014      	b.n	8001b32 <??zb_zcl_parse_uint16_1>

08001b08 <??zb_zcl_parse_uint16_0>:
 8001b08:	2c00      	cmp	r4, #0
 8001b0a:	d102      	bne.n	8001b12 <??zb_zcl_parse_uint16_2>
 8001b0c:	f05f 30ff 	movs.w	r0, #4294967295
 8001b10:	e00f      	b.n	8001b32 <??zb_zcl_parse_uint16_1>

08001b12 <??zb_zcl_parse_uint16_2>:
 8001b12:	6820      	ldr	r0, [r4, #0]
 8001b14:	1c80      	adds	r0, r0, #2
 8001b16:	4286      	cmp	r6, r0
 8001b18:	d202      	bcs.n	8001b20 <??zb_zcl_parse_uint16_3>
 8001b1a:	f05f 30ff 	movs.w	r0, #4294967295
 8001b1e:	e008      	b.n	8001b32 <??zb_zcl_parse_uint16_1>

08001b20 <??zb_zcl_parse_uint16_3>:
 8001b20:	6820      	ldr	r0, [r4, #0]
 8001b22:	4428      	add	r0, r5
 8001b24:	f001 feba 	bl	800389c <pletoh16>
 8001b28:	8038      	strh	r0, [r7, #0]
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	1c80      	adds	r0, r0, #2
 8001b2e:	6020      	str	r0, [r4, #0]
 8001b30:	6820      	ldr	r0, [r4, #0]

08001b32 <??zb_zcl_parse_uint16_1>:
 8001b32:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001b34 <zb_zcl_parse_uint32>:
 8001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b36:	0005      	movs	r5, r0
 8001b38:	000e      	movs	r6, r1
 8001b3a:	0014      	movs	r4, r2
 8001b3c:	001f      	movs	r7, r3
 8001b3e:	2d00      	cmp	r5, #0
 8001b40:	d102      	bne.n	8001b48 <??zb_zcl_parse_uint32_0>
 8001b42:	f05f 30ff 	movs.w	r0, #4294967295
 8001b46:	e014      	b.n	8001b72 <??zb_zcl_parse_uint32_1>

08001b48 <??zb_zcl_parse_uint32_0>:
 8001b48:	2c00      	cmp	r4, #0
 8001b4a:	d102      	bne.n	8001b52 <??zb_zcl_parse_uint32_2>
 8001b4c:	f05f 30ff 	movs.w	r0, #4294967295
 8001b50:	e00f      	b.n	8001b72 <??zb_zcl_parse_uint32_1>

08001b52 <??zb_zcl_parse_uint32_2>:
 8001b52:	6820      	ldr	r0, [r4, #0]
 8001b54:	1d00      	adds	r0, r0, #4
 8001b56:	4286      	cmp	r6, r0
 8001b58:	d202      	bcs.n	8001b60 <??zb_zcl_parse_uint32_3>
 8001b5a:	f05f 30ff 	movs.w	r0, #4294967295
 8001b5e:	e008      	b.n	8001b72 <??zb_zcl_parse_uint32_1>

08001b60 <??zb_zcl_parse_uint32_3>:
 8001b60:	6820      	ldr	r0, [r4, #0]
 8001b62:	4428      	add	r0, r5
 8001b64:	f001 feab 	bl	80038be <pletoh32>
 8001b68:	6038      	str	r0, [r7, #0]
 8001b6a:	6820      	ldr	r0, [r4, #0]
 8001b6c:	1d00      	adds	r0, r0, #4
 8001b6e:	6020      	str	r0, [r4, #0]
 8001b70:	6820      	ldr	r0, [r4, #0]

08001b72 <??zb_zcl_parse_uint32_1>:
 8001b72:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001b74 <zb_zcl_parse_uint64>:
 8001b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b76:	0004      	movs	r4, r0
 8001b78:	000e      	movs	r6, r1
 8001b7a:	0015      	movs	r5, r2
 8001b7c:	001f      	movs	r7, r3
 8001b7e:	2c00      	cmp	r4, #0
 8001b80:	d102      	bne.n	8001b88 <??zb_zcl_parse_uint64_0>
 8001b82:	f05f 30ff 	movs.w	r0, #4294967295
 8001b86:	e015      	b.n	8001bb4 <??zb_zcl_parse_uint64_1>

08001b88 <??zb_zcl_parse_uint64_0>:
 8001b88:	2d00      	cmp	r5, #0
 8001b8a:	d102      	bne.n	8001b92 <??zb_zcl_parse_uint64_2>
 8001b8c:	f05f 30ff 	movs.w	r0, #4294967295
 8001b90:	e010      	b.n	8001bb4 <??zb_zcl_parse_uint64_1>

08001b92 <??zb_zcl_parse_uint64_2>:
 8001b92:	6828      	ldr	r0, [r5, #0]
 8001b94:	3008      	adds	r0, #8
 8001b96:	4286      	cmp	r6, r0
 8001b98:	d202      	bcs.n	8001ba0 <??zb_zcl_parse_uint64_3>
 8001b9a:	f05f 30ff 	movs.w	r0, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <??zb_zcl_parse_uint64_1>

08001ba0 <??zb_zcl_parse_uint64_3>:
 8001ba0:	6828      	ldr	r0, [r5, #0]
 8001ba2:	4420      	add	r0, r4
 8001ba4:	f001 feb8 	bl	8003918 <pletoh64>
 8001ba8:	e9c7 0100 	strd	r0, r1, [r7]
 8001bac:	6828      	ldr	r0, [r5, #0]
 8001bae:	3008      	adds	r0, #8
 8001bb0:	6028      	str	r0, [r5, #0]
 8001bb2:	6828      	ldr	r0, [r5, #0]

08001bb4 <??zb_zcl_parse_uint64_1>:
 8001bb4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001bb6 <zcl_attr_cb>:
 8001bb6:	b538      	push	{r3, r4, r5, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	0004      	movs	r4, r0
 8001bbc:	000d      	movs	r5, r1
 8001bbe:	7928      	ldrb	r0, [r5, #4]
 8001bc0:	2801      	cmp	r0, #1
 8001bc2:	d10f      	bne.n	8001be4 <??zcl_attr_cb_0>
 8001bc4:	69e8      	ldr	r0, [r5, #28]
 8001bc6:	9003      	str	r0, [sp, #12]
 8001bc8:	8a28      	ldrh	r0, [r5, #16]
 8001bca:	9002      	str	r0, [sp, #8]
 8001bcc:	6968      	ldr	r0, [r5, #20]
 8001bce:	9001      	str	r0, [sp, #4]
 8001bd0:	68e8      	ldr	r0, [r5, #12]
 8001bd2:	9000      	str	r0, [sp, #0]
 8001bd4:	68ab      	ldr	r3, [r5, #8]
 8001bd6:	6828      	ldr	r0, [r5, #0]
 8001bd8:	8802      	ldrh	r2, [r0, #0]
 8001bda:	69a9      	ldr	r1, [r5, #24]
 8001bdc:	0020      	movs	r0, r4
 8001bde:	f000 f9cb 	bl	8001f78 <zcl_attr_write_cb>
 8001be2:	e00d      	b.n	8001c00 <??zcl_attr_cb_1>

08001be4 <??zcl_attr_cb_0>:
 8001be4:	7928      	ldrb	r0, [r5, #4]
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d109      	bne.n	8001bfe <??zcl_attr_cb_2>
 8001bea:	69e8      	ldr	r0, [r5, #28]
 8001bec:	9000      	str	r0, [sp, #0]
 8001bee:	68eb      	ldr	r3, [r5, #12]
 8001bf0:	68aa      	ldr	r2, [r5, #8]
 8001bf2:	6828      	ldr	r0, [r5, #0]
 8001bf4:	8801      	ldrh	r1, [r0, #0]
 8001bf6:	0020      	movs	r0, r4
 8001bf8:	f000 fa28 	bl	800204c <zcl_attr_read_cb>
 8001bfc:	e000      	b.n	8001c00 <??zcl_attr_cb_1>

08001bfe <??zcl_attr_cb_2>:
 8001bfe:	2001      	movs	r0, #1

08001c00 <??zcl_attr_cb_1>:
 8001c00:	b005      	add	sp, #20
 8001c02:	bd30      	pop	{r4, r5, pc}

08001c04 <ZbZclOtaClientGetDefaultCallbacks>:
 8001c04:	f8df 1858 	ldr.w	r1, [pc, #2136]	; 8002460 <??DataTable6>
 8001c08:	6081      	str	r1, [r0, #8]
 8001c0a:	f8df 1858 	ldr.w	r1, [pc, #2136]	; 8002464 <??DataTable6_1>
 8001c0e:	60c1      	str	r1, [r0, #12]
 8001c10:	f8df 1854 	ldr.w	r1, [pc, #2132]	; 8002468 <??DataTable6_2>
 8001c14:	6101      	str	r1, [r0, #16]
 8001c16:	f8df 1854 	ldr.w	r1, [pc, #2132]	; 800246c <??DataTable6_3>
 8001c1a:	6181      	str	r1, [r0, #24]
 8001c1c:	f8df 1850 	ldr.w	r1, [pc, #2128]	; 8002470 <??DataTable6_4>
 8001c20:	61c1      	str	r1, [r0, #28]
 8001c22:	f8df 1850 	ldr.w	r1, [pc, #2128]	; 8002474 <??DataTable6_5>
 8001c26:	6041      	str	r1, [r0, #4]
 8001c28:	f8df 184c 	ldr.w	r1, [pc, #2124]	; 8002478 <??DataTable6_6>
 8001c2c:	6001      	str	r1, [r0, #0]
 8001c2e:	4770      	bx	lr

08001c30 <ZbZclOtaClientAlloc>:
 8001c30:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c34:	0005      	movs	r5, r0
 8001c36:	000e      	movs	r6, r1
 8001c38:	0017      	movs	r7, r2
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	9000      	str	r0, [sp, #0]
 8001c3e:	78b3      	ldrb	r3, [r6, #2]
 8001c40:	2219      	movs	r2, #25
 8001c42:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8001c46:	0028      	movs	r0, r5
 8001c48:	f004 fdb5 	bl	80067b6 <ZbZclClusterAlloc>
 8001c4c:	0004      	movs	r4, r0
 8001c4e:	2c00      	cmp	r4, #0
 8001c50:	d101      	bne.n	8001c56 <??ZbZclOtaClientAlloc_0>
 8001c52:	2000      	movs	r0, #0
 8001c54:	e0da      	b.n	8001e0c <??ZbZclOtaClientAlloc_1>

08001c56 <??ZbZclOtaClientAlloc_0>:
 8001c56:	f20f 10f1 	addw	r0, pc, #497	; 0x1f1
 8001c5a:	65a0      	str	r0, [r4, #88]	; 0x58
 8001c5c:	f20f 10b5 	addw	r0, pc, #437	; 0x1b5
 8001c60:	66a0      	str	r0, [r4, #104]	; 0x68
 8001c62:	6567      	str	r7, [r4, #84]	; 0x54
 8001c64:	f05f 0898 	movs.w	r8, #152	; 0x98
 8001c68:	46b1      	mov	r9, r6
 8001c6a:	f114 0a70 	adds.w	sl, r4, #112	; 0x70
 8001c6e:	4642      	mov	r2, r8
 8001c70:	4649      	mov	r1, r9
 8001c72:	4650      	mov	r0, sl
 8001c74:	f015 fef4 	bl	8017a60 <__aeabi_memcpy>
 8001c78:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d107      	bne.n	8001c90 <??ZbZclOtaClientAlloc_2>
 8001c80:	2300      	movs	r3, #0
 8001c82:	a263      	add	r2, pc, #396	; (adr r2, 8001e10 <??DataTable2>)
 8001c84:	0021      	movs	r1, r4
 8001c86:	0028      	movs	r0, r5
 8001c88:	f013 fb00 	bl	801528c <zb_heap_free>
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e0bd      	b.n	8001e0c <??ZbZclOtaClientAlloc_1>

08001c90 <??ZbZclOtaClientAlloc_2>:
 8001c90:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 8001c94:	2800      	cmp	r0, #0
 8001c96:	d107      	bne.n	8001ca8 <??ZbZclOtaClientAlloc_3>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	a25d      	add	r2, pc, #372	; (adr r2, 8001e10 <??DataTable2>)
 8001c9c:	0021      	movs	r1, r4
 8001c9e:	0028      	movs	r0, r5
 8001ca0:	f013 faf4 	bl	801528c <zb_heap_free>
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	e0b1      	b.n	8001e0c <??ZbZclOtaClientAlloc_1>

08001ca8 <??ZbZclOtaClientAlloc_3>:
 8001ca8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8001cac:	f8df 17b8 	ldr.w	r1, [pc, #1976]	; 8002468 <??DataTable6_2>
 8001cb0:	4288      	cmp	r0, r1
 8001cb2:	d10b      	bne.n	8001ccc <??ZbZclOtaClientAlloc_4>
 8001cb4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d107      	bne.n	8001ccc <??ZbZclOtaClientAlloc_4>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	a254      	add	r2, pc, #336	; (adr r2, 8001e10 <??DataTable2>)
 8001cc0:	0021      	movs	r1, r4
 8001cc2:	0028      	movs	r0, r5
 8001cc4:	f013 fae2 	bl	801528c <zb_heap_free>
 8001cc8:	2000      	movs	r0, #0
 8001cca:	e09f      	b.n	8001e0c <??ZbZclOtaClientAlloc_1>

08001ccc <??ZbZclOtaClientAlloc_4>:
 8001ccc:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8001cd0:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 800246c <??DataTable6_3>
 8001cd4:	4288      	cmp	r0, r1
 8001cd6:	d10f      	bne.n	8001cf8 <??ZbZclOtaClientAlloc_5>
 8001cd8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	d003      	beq.n	8001ce8 <??ZbZclOtaClientAlloc_6>
 8001ce0:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d107      	bne.n	8001cf8 <??ZbZclOtaClientAlloc_5>

08001ce8 <??ZbZclOtaClientAlloc_6>:
 8001ce8:	2300      	movs	r3, #0
 8001cea:	a249      	add	r2, pc, #292	; (adr r2, 8001e10 <??DataTable2>)
 8001cec:	0021      	movs	r1, r4
 8001cee:	0028      	movs	r0, r5
 8001cf0:	f013 facc 	bl	801528c <zb_heap_free>
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	e089      	b.n	8001e0c <??ZbZclOtaClientAlloc_1>

08001cf8 <??ZbZclOtaClientAlloc_5>:
 8001cf8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001cfa:	2832      	cmp	r0, #50	; 0x32
 8001cfc:	d201      	bcs.n	8001d02 <??ZbZclOtaClientAlloc_7>
 8001cfe:	2032      	movs	r0, #50	; 0x32
 8001d00:	67a0      	str	r0, [r4, #120]	; 0x78

08001d02 <??ZbZclOtaClientAlloc_7>:
 8001d02:	0022      	movs	r2, r4
 8001d04:	f8df 1774 	ldr.w	r1, [pc, #1908]	; 800247c <??DataTable6_7>
 8001d08:	0028      	movs	r0, r5
 8001d0a:	f012 fd63 	bl	80147d4 <ZbTimerAlloc>
 8001d0e:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
 8001d12:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d107      	bne.n	8001d2a <??ZbZclOtaClientAlloc_8>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	a23c      	add	r2, pc, #240	; (adr r2, 8001e10 <??DataTable2>)
 8001d1e:	0021      	movs	r1, r4
 8001d20:	0028      	movs	r0, r5
 8001d22:	f013 fab3 	bl	801528c <zb_heap_free>
 8001d26:	2000      	movs	r0, #0
 8001d28:	e070      	b.n	8001e0c <??ZbZclOtaClientAlloc_1>

08001d2a <??ZbZclOtaClientAlloc_8>:
 8001d2a:	0022      	movs	r2, r4
 8001d2c:	f8df 1750 	ldr.w	r1, [pc, #1872]	; 8002480 <??DataTable6_8>
 8001d30:	0028      	movs	r0, r5
 8001d32:	f012 fd4f 	bl	80147d4 <ZbTimerAlloc>
 8001d36:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8001d3a:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d104      	bne.n	8001d4c <??ZbZclOtaClientAlloc_9>
 8001d42:	0020      	movs	r0, r4
 8001d44:	f004 fdf9 	bl	800693a <ZbZclClusterFree>
 8001d48:	2000      	movs	r0, #0
 8001d4a:	e05f      	b.n	8001e0c <??ZbZclOtaClientAlloc_1>

08001d4c <??ZbZclOtaClientAlloc_9>:
 8001d4c:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
 8001d50:	0020      	movs	r0, r4
 8001d52:	f7fe ff65 	bl	8000c20 <ZbZclClusterSetProfileId>
 8001d56:	f05f 30ff 	movs.w	r0, #4294967295
 8001d5a:	f05f 31ff 	movs.w	r1, #4294967295
 8001d5e:	e9c4 0144 	strd	r0, r1, [r4, #272]	; 0x110
 8001d62:	2000      	movs	r0, #0
 8001d64:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f8a4 01ea 	strh.w	r0, [r4, #490]	; 0x1ea
 8001d74:	220c      	movs	r2, #12
 8001d76:	f8df 170c 	ldr.w	r1, [pc, #1804]	; 8002484 <??DataTable6_9>
 8001d7a:	0020      	movs	r0, r4
 8001d7c:	f002 fe6e 	bl	8004a5c <ZbZclAttrAppendList>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d004      	beq.n	8001d8e <??ZbZclOtaClientAlloc_10>
 8001d84:	0020      	movs	r0, r4
 8001d86:	f004 fdd8 	bl	800693a <ZbZclClusterFree>
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	e03e      	b.n	8001e0c <??ZbZclOtaClientAlloc_1>

08001d8e <??ZbZclOtaClientAlloc_10>:
 8001d8e:	f05f 32ff 	movs.w	r2, #4294967295
 8001d92:	f05f 33ff 	movs.w	r3, #4294967295
 8001d96:	2100      	movs	r1, #0
 8001d98:	0020      	movs	r0, r4
 8001d9a:	f7fe fe22 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001d9e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001da2:	2300      	movs	r3, #0
 8001da4:	2102      	movs	r1, #2
 8001da6:	0020      	movs	r0, r4
 8001da8:	f7fe fe1b 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001dac:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
 8001db0:	2300      	movs	r3, #0
 8001db2:	2103      	movs	r1, #3
 8001db4:	0020      	movs	r0, r4
 8001db6:	f7fe fe14 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001dba:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2107      	movs	r1, #7
 8001dc2:	0020      	movs	r0, r4
 8001dc4:	f7fe fe0d 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001dc8:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2108      	movs	r1, #8
 8001dd0:	0020      	movs	r0, r4
 8001dd2:	f7fe fe06 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001dd6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001dd8:	2300      	movs	r3, #0
 8001dda:	2109      	movs	r1, #9
 8001ddc:	0020      	movs	r0, r4
 8001dde:	f7fe fe00 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001de2:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
 8001de6:	2300      	movs	r3, #0
 8001de8:	210b      	movs	r1, #11
 8001dea:	0020      	movs	r0, r4
 8001dec:	f7fe fdf9 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001df0:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 8001df4:	2300      	movs	r3, #0
 8001df6:	210c      	movs	r1, #12
 8001df8:	0020      	movs	r0, r4
 8001dfa:	f7fe fdf2 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001dfe:	0020      	movs	r0, r4
 8001e00:	f000 f856 	bl	8001eb0 <zcl_otacli_reset_cluster>
 8001e04:	0020      	movs	r0, r4
 8001e06:	f004 fd66 	bl	80068d6 <ZbZclClusterAttach>
 8001e0a:	0020      	movs	r0, r4

08001e0c <??ZbZclOtaClientAlloc_1>:
 8001e0c:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08001e10 <??DataTable2>:
 8001e10:	0000 0000                                   ....

08001e14 <zcl_otacli_cluster_cleanup>:
 8001e14:	b538      	push	{r3, r4, r5, lr}
 8001e16:	0004      	movs	r4, r0
 8001e18:	0025      	movs	r5, r4
 8001e1a:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d006      	beq.n	8001e30 <??zcl_otacli_cluster_cleanup_0>
 8001e22:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
 8001e26:	f012 fd27 	bl	8014878 <ZbTimerFree>
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f8c5 010c 	str.w	r0, [r5, #268]	; 0x10c

08001e30 <??zcl_otacli_cluster_cleanup_0>:
 8001e30:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d006      	beq.n	8001e46 <??zcl_otacli_cluster_cleanup_1>
 8001e38:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
 8001e3c:	f012 fd1c 	bl	8014878 <ZbTimerFree>
 8001e40:	2000      	movs	r0, #0
 8001e42:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108

08001e46 <??zcl_otacli_cluster_cleanup_1>:
 8001e46:	bd31      	pop	{r0, r4, r5, pc}

08001e48 <zcl_otacli_handle_command>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	0004      	movs	r4, r0
 8001e4c:	000d      	movs	r5, r1
 8001e4e:	0016      	movs	r6, r2
 8001e50:	78a8      	ldrb	r0, [r5, #2]
 8001e52:	2801      	cmp	r0, #1
 8001e54:	d001      	beq.n	8001e5a <??zcl_otacli_handle_command_0>
 8001e56:	2081      	movs	r0, #129	; 0x81
 8001e58:	e01b      	b.n	8001e92 <??zcl_otacli_handle_command_1>

08001e5a <??zcl_otacli_handle_command_0>:
 8001e5a:	79e8      	ldrb	r0, [r5, #7]
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d008      	beq.n	8001e72 <??zcl_otacli_handle_command_2>
 8001e60:	2802      	cmp	r0, #2
 8001e62:	d013      	beq.n	8001e8c <??zcl_otacli_handle_command_3>
 8001e64:	2805      	cmp	r0, #5
 8001e66:	d011      	beq.n	8001e8c <??zcl_otacli_handle_command_3>
 8001e68:	2807      	cmp	r0, #7
 8001e6a:	d009      	beq.n	8001e80 <??zcl_otacli_handle_command_4>
 8001e6c:	2809      	cmp	r0, #9
 8001e6e:	d00d      	beq.n	8001e8c <??zcl_otacli_handle_command_3>
 8001e70:	e00e      	b.n	8001e90 <??zcl_otacli_handle_command_5>

08001e72 <??zcl_otacli_handle_command_2>:
 8001e72:	0032      	movs	r2, r6
 8001e74:	0029      	movs	r1, r5
 8001e76:	0020      	movs	r0, r4
 8001e78:	f001 f9d8 	bl	800322c <zcl_otacli_handle_image_notify>
 8001e7c:	20ff      	movs	r0, #255	; 0xff
 8001e7e:	e008      	b.n	8001e92 <??zcl_otacli_handle_command_1>

08001e80 <??zcl_otacli_handle_command_4>:
 8001e80:	0032      	movs	r2, r6
 8001e82:	0029      	movs	r1, r5
 8001e84:	0020      	movs	r0, r4
 8001e86:	f001 f981 	bl	800318c <zcl_otacli_handle_upgrade_end_rsp>
 8001e8a:	e002      	b.n	8001e92 <??zcl_otacli_handle_command_1>

08001e8c <??zcl_otacli_handle_command_3>:
 8001e8c:	20ff      	movs	r0, #255	; 0xff
 8001e8e:	e000      	b.n	8001e92 <??zcl_otacli_handle_command_1>

08001e90 <??zcl_otacli_handle_command_5>:
 8001e90:	2081      	movs	r0, #129	; 0x81

08001e92 <??zcl_otacli_handle_command_1>:
 8001e92:	bd70      	pop	{r4, r5, r6, pc}

08001e94 <zcl_otacli_write_upgrade_status>:
 8001e94:	6883      	ldr	r3, [r0, #8]
 8001e96:	f880 1129 	strb.w	r1, [r0, #297]	; 0x129
 8001e9a:	4770      	bx	lr

08001e9c <zcl_otacli_reset_block_timer>:
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	0004      	movs	r4, r0
 8001ea0:	000d      	movs	r5, r1
 8001ea2:	0016      	movs	r6, r2
 8001ea4:	0029      	movs	r1, r5
 8001ea6:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 8001eaa:	f012 fd19 	bl	80148e0 <ZbTimerReset>
 8001eae:	bd70      	pop	{r4, r5, r6, pc}

08001eb0 <zcl_otacli_reset_cluster>:
 8001eb0:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb4:	4680      	mov	r8, r0
 8001eb6:	f05f 30ff 	movs.w	r0, #4294967295
 8001eba:	f8c8 0180 	str.w	r0, [r8, #384]	; 0x180
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f888 0186 	strb.w	r0, [r8, #390]	; 0x186
 8001ec4:	2050      	movs	r0, #80	; 0x50
 8001ec6:	9001      	str	r0, [sp, #4]
 8001ec8:	2000      	movs	r0, #0
 8001eca:	9000      	str	r0, [sp, #0]
 8001ecc:	f518 7498 	adds.w	r4, r8, #304	; 0x130
 8001ed0:	9a00      	ldr	r2, [sp, #0]
 8001ed2:	9901      	ldr	r1, [sp, #4]
 8001ed4:	0020      	movs	r0, r4
 8001ed6:	f005 fcff 	bl	80078d8 <__aeabi_memset>
 8001eda:	2000      	movs	r0, #0
 8001edc:	f888 01ef 	strb.w	r0, [r8, #495]	; 0x1ef
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f8c8 01f4 	str.w	r0, [r8, #500]	; 0x1f4
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f8c8 01f8 	str.w	r0, [r8, #504]	; 0x1f8
 8001eec:	2000      	movs	r0, #0
 8001eee:	f8a8 01ea 	strh.w	r0, [r8, #490]	; 0x1ea
 8001ef2:	2038      	movs	r0, #56	; 0x38
 8001ef4:	f8a8 01ec 	strh.w	r0, [r8, #492]	; 0x1ec
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f888 0185 	strb.w	r0, [r8, #389]	; 0x185
 8001efe:	2000      	movs	r0, #0
 8001f00:	f888 024e 	strb.w	r0, [r8, #590]	; 0x24e
 8001f04:	244a      	movs	r4, #74	; 0x4a
 8001f06:	2500      	movs	r5, #0
 8001f08:	f518 7601 	adds.w	r6, r8, #516	; 0x204
 8001f0c:	002a      	movs	r2, r5
 8001f0e:	0021      	movs	r1, r4
 8001f10:	0030      	movs	r0, r6
 8001f12:	f005 fce1 	bl	80078d8 <__aeabi_memset>
 8001f16:	2000      	movs	r0, #0
 8001f18:	f888 029f 	strb.w	r0, [r8, #671]	; 0x29f
 8001f1c:	2650      	movs	r6, #80	; 0x50
 8001f1e:	2700      	movs	r7, #0
 8001f20:	f208 294f 	addw	r9, r8, #591	; 0x24f
 8001f24:	003a      	movs	r2, r7
 8001f26:	0031      	movs	r1, r6
 8001f28:	4648      	mov	r0, r9
 8001f2a:	f005 fcd5 	bl	80078d8 <__aeabi_memset>
 8001f2e:	f208 20a7 	addw	r0, r8, #679	; 0x2a7
 8001f32:	f013 f923 	bl	801517c <ZbHashInit>
 8001f36:	f05f 32ff 	movs.w	r2, #4294967295
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	4640      	mov	r0, r8
 8001f40:	f7fe fd4f 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2105      	movs	r1, #5
 8001f4c:	4640      	mov	r0, r8
 8001f4e:	f7fe fd48 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8001f52:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8001f56:	2100      	movs	r1, #0
 8001f58:	4640      	mov	r0, r8
 8001f5a:	f7ff ff9b 	bl	8001e94 <zcl_otacli_write_upgrade_status>
 8001f5e:	f05f 0907 	movs.w	r9, #7
 8001f62:	f05f 0a00 	movs.w	sl, #0
 8001f66:	f518 7b28 	adds.w	fp, r8, #672	; 0x2a0
 8001f6a:	4652      	mov	r2, sl
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	4658      	mov	r0, fp
 8001f70:	f005 fcb2 	bl	80078d8 <__aeabi_memset>
 8001f74:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f78 <zcl_attr_write_cb>:
 8001f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f7c:	0006      	movs	r6, r0
 8001f7e:	000f      	movs	r7, r1
 8001f80:	4690      	mov	r8, r2
 8001f82:	4699      	mov	r9, r3
 8001f84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001f86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f88:	46b2      	mov	sl, r6
 8001f8a:	4640      	mov	r0, r8
 8001f8c:	b280      	uxth	r0, r0
 8001f8e:	2801      	cmp	r0, #1
 8001f90:	d002      	beq.n	8001f98 <??zcl_attr_write_cb_0>
 8001f92:	2806      	cmp	r0, #6
 8001f94:	d036      	beq.n	8002004 <??zcl_attr_write_cb_1>
 8001f96:	e056      	b.n	8002046 <??zcl_attr_write_cb_2>

08001f98 <??zcl_attr_write_cb_0>:
 8001f98:	2c04      	cmp	r4, #4
 8001f9a:	d201      	bcs.n	8001fa0 <??zcl_attr_write_cb_3>
 8001f9c:	2080      	movs	r0, #128	; 0x80
 8001f9e:	e053      	b.n	8002048 <??zcl_attr_write_cb_4>

08001fa0 <??zcl_attr_write_cb_3>:
 8001fa0:	4648      	mov	r0, r9
 8001fa2:	f001 fc8c 	bl	80038be <pletoh32>
 8001fa6:	0001      	movs	r1, r0
 8001fa8:	f111 0f01 	cmn.w	r1, #1
 8001fac:	d01f      	beq.n	8001fee <??zcl_attr_write_cb_5>
 8001fae:	2900      	cmp	r1, #0
 8001fb0:	d01d      	beq.n	8001fee <??zcl_attr_write_cb_5>
 8001fb2:	f8ba 0136 	ldrh.w	r0, [sl, #310]	; 0x136
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d101      	bne.n	8001fbe <??zcl_attr_write_cb_6>
 8001fba:	2087      	movs	r0, #135	; 0x87
 8001fbc:	e044      	b.n	8002048 <??zcl_attr_write_cb_4>

08001fbe <??zcl_attr_write_cb_6>:
 8001fbe:	f8ba 0136 	ldrh.w	r0, [sl, #310]	; 0x136
 8001fc2:	4281      	cmp	r1, r0
 8001fc4:	d201      	bcs.n	8001fca <??zcl_attr_write_cb_7>
 8001fc6:	2087      	movs	r0, #135	; 0x87
 8001fc8:	e03e      	b.n	8002048 <??zcl_attr_write_cb_4>

08001fca <??zcl_attr_write_cb_7>:
 8001fca:	f8da 0168 	ldr.w	r0, [sl, #360]	; 0x168
 8001fce:	4288      	cmp	r0, r1
 8001fd0:	d201      	bcs.n	8001fd6 <??zcl_attr_write_cb_8>
 8001fd2:	2087      	movs	r0, #135	; 0x87
 8001fd4:	e038      	b.n	8002048 <??zcl_attr_write_cb_4>

08001fd6 <??zcl_attr_write_cb_8>:
 8001fd6:	f8da 00f4 	ldr.w	r0, [sl, #244]	; 0xf4
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d005      	beq.n	8001fea <??zcl_attr_write_cb_9>
 8001fde:	f8da 00f4 	ldr.w	r0, [sl, #244]	; 0xf4
 8001fe2:	f8df 2488 	ldr.w	r2, [pc, #1160]	; 800246c <??DataTable6_3>
 8001fe6:	4290      	cmp	r0, r2
 8001fe8:	d101      	bne.n	8001fee <??zcl_attr_write_cb_5>

08001fea <??zcl_attr_write_cb_9>:
 8001fea:	2001      	movs	r0, #1
 8001fec:	e02c      	b.n	8002048 <??zcl_attr_write_cb_4>

08001fee <??zcl_attr_write_cb_5>:
 8001fee:	0028      	movs	r0, r5
 8001ff0:	b280      	uxth	r0, r0
 8001ff2:	07c0      	lsls	r0, r0, #31
 8001ff4:	d404      	bmi.n	8002000 <??zcl_attr_write_cb_10>
 8001ff6:	f8ca 1180 	str.w	r1, [sl, #384]	; 0x180
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f8aa 01ea 	strh.w	r0, [sl, #490]	; 0x1ea

08002000 <??zcl_attr_write_cb_10>:
 8002000:	2000      	movs	r0, #0
 8002002:	e021      	b.n	8002048 <??zcl_attr_write_cb_4>

08002004 <??zcl_attr_write_cb_1>:
 8002004:	2c00      	cmp	r4, #0
 8002006:	d101      	bne.n	800200c <??zcl_attr_write_cb_11>
 8002008:	2080      	movs	r0, #128	; 0x80
 800200a:	e01d      	b.n	8002048 <??zcl_attr_write_cb_4>

0800200c <??zcl_attr_write_cb_11>:
 800200c:	f899 b000 	ldrb.w	fp, [r9]
 8002010:	4658      	mov	r0, fp
 8002012:	b2c0      	uxtb	r0, r0
 8002014:	2806      	cmp	r0, #6
 8002016:	db01      	blt.n	800201c <??zcl_attr_write_cb_12>
 8002018:	2087      	movs	r0, #135	; 0x87
 800201a:	e015      	b.n	8002048 <??zcl_attr_write_cb_4>

0800201c <??zcl_attr_write_cb_12>:
 800201c:	0028      	movs	r0, r5
 800201e:	b280      	uxth	r0, r0
 8002020:	07c0      	lsls	r0, r0, #31
 8002022:	d40e      	bmi.n	8002042 <??zcl_attr_write_cb_13>
 8002024:	4658      	mov	r0, fp
 8002026:	b2c0      	uxtb	r0, r0
 8002028:	2800      	cmp	r0, #0
 800202a:	d103      	bne.n	8002034 <??zcl_attr_write_cb_14>
 800202c:	4650      	mov	r0, sl
 800202e:	f7ff ff3f 	bl	8001eb0 <zcl_otacli_reset_cluster>
 8002032:	e006      	b.n	8002042 <??zcl_attr_write_cb_13>

08002034 <??zcl_attr_write_cb_14>:
 8002034:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8002038:	4659      	mov	r1, fp
 800203a:	b2c9      	uxtb	r1, r1
 800203c:	4650      	mov	r0, sl
 800203e:	f7ff ff29 	bl	8001e94 <zcl_otacli_write_upgrade_status>

08002042 <??zcl_attr_write_cb_13>:
 8002042:	2000      	movs	r0, #0
 8002044:	e000      	b.n	8002048 <??zcl_attr_write_cb_4>

08002046 <??zcl_attr_write_cb_2>:
 8002046:	2086      	movs	r0, #134	; 0x86

08002048 <??zcl_attr_write_cb_4>:
 8002048:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800204c <zcl_attr_read_cb>:
 800204c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002050:	0005      	movs	r5, r0
 8002052:	000e      	movs	r6, r1
 8002054:	0017      	movs	r7, r2
 8002056:	001c      	movs	r4, r3
 8002058:	46a8      	mov	r8, r5
 800205a:	0030      	movs	r0, r6
 800205c:	b280      	uxth	r0, r0
 800205e:	2801      	cmp	r0, #1
 8002060:	d002      	beq.n	8002068 <??zcl_attr_read_cb_0>
 8002062:	2806      	cmp	r0, #6
 8002064:	d00b      	beq.n	800207e <??zcl_attr_read_cb_1>
 8002066:	e013      	b.n	8002090 <??zcl_attr_read_cb_2>

08002068 <??zcl_attr_read_cb_0>:
 8002068:	2c04      	cmp	r4, #4
 800206a:	d201      	bcs.n	8002070 <??zcl_attr_read_cb_3>
 800206c:	2089      	movs	r0, #137	; 0x89
 800206e:	e010      	b.n	8002092 <??zcl_attr_read_cb_4>

08002070 <??zcl_attr_read_cb_3>:
 8002070:	f8d8 1180 	ldr.w	r1, [r8, #384]	; 0x180
 8002074:	0038      	movs	r0, r7
 8002076:	f001 fc6f 	bl	8003958 <putle32>
 800207a:	2000      	movs	r0, #0
 800207c:	e009      	b.n	8002092 <??zcl_attr_read_cb_4>

0800207e <??zcl_attr_read_cb_1>:
 800207e:	2c00      	cmp	r4, #0
 8002080:	d101      	bne.n	8002086 <??zcl_attr_read_cb_5>
 8002082:	2089      	movs	r0, #137	; 0x89
 8002084:	e005      	b.n	8002092 <??zcl_attr_read_cb_4>

08002086 <??zcl_attr_read_cb_5>:
 8002086:	f898 0129 	ldrb.w	r0, [r8, #297]	; 0x129
 800208a:	7038      	strb	r0, [r7, #0]
 800208c:	2000      	movs	r0, #0
 800208e:	e000      	b.n	8002092 <??zcl_attr_read_cb_4>

08002090 <??zcl_attr_read_cb_2>:
 8002090:	2086      	movs	r0, #134	; 0x86

08002092 <??zcl_attr_read_cb_4>:
 8002092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002096 <ZbZclOtaClientDiscover>:
 8002096:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	0004      	movs	r4, r0
 800209e:	000d      	movs	r5, r1
 80020a0:	0026      	movs	r6, r4
 80020a2:	7828      	ldrb	r0, [r5, #0]
 80020a4:	2803      	cmp	r0, #3
 80020a6:	d128      	bne.n	80020fa <??ZbZclOtaClientDiscover_0>
 80020a8:	2718      	movs	r7, #24
 80020aa:	f05f 0800 	movs.w	r8, #0
 80020ae:	f10d 0908 	add.w	r9, sp, #8
 80020b2:	4642      	mov	r2, r8
 80020b4:	0039      	movs	r1, r7
 80020b6:	4648      	mov	r0, r9
 80020b8:	f005 fc0e 	bl	80078d8 <__aeabi_memset>
 80020bc:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 80020c0:	f8ad 0008 	strh.w	r0, [sp, #8]
 80020c4:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80020c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80020cc:	2000      	movs	r0, #0
 80020ce:	f88d 0018 	strb.w	r0, [sp, #24]
 80020d2:	2000      	movs	r0, #0
 80020d4:	f88d 0019 	strb.w	r0, [sp, #25]
 80020d8:	0033      	movs	r3, r6
 80020da:	f20f 227d 	addw	r2, pc, #637	; 0x27d
 80020de:	a902      	add	r1, sp, #8
 80020e0:	68a0      	ldr	r0, [r4, #8]
 80020e2:	f012 fd09 	bl	8014af8 <ZbZdoNwkAddrReq>
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d032      	beq.n	8002150 <??ZbZclOtaClientDiscover_1>
 80020ea:	f05f 30ff 	movs.w	r0, #4294967295
 80020ee:	f05f 31ff 	movs.w	r1, #4294967295
 80020f2:	e9c6 0144 	strd	r0, r1, [r6, #272]	; 0x110
 80020f6:	2001      	movs	r0, #1
 80020f8:	e02b      	b.n	8002152 <??ZbZclOtaClientDiscover_2>

080020fa <??ZbZclOtaClientDiscover_0>:
 80020fa:	7828      	ldrb	r0, [r5, #0]
 80020fc:	2802      	cmp	r0, #2
 80020fe:	d125      	bne.n	800214c <??ZbZclOtaClientDiscover_3>
 8002100:	2706      	movs	r7, #6
 8002102:	f05f 0800 	movs.w	r8, #0
 8002106:	46e9      	mov	r9, sp
 8002108:	4642      	mov	r2, r8
 800210a:	0039      	movs	r1, r7
 800210c:	4648      	mov	r0, r9
 800210e:	f005 fbe3 	bl	80078d8 <__aeabi_memset>
 8002112:	2000      	movs	r0, #0
 8002114:	f88d 0004 	strb.w	r0, [sp, #4]
 8002118:	2000      	movs	r0, #0
 800211a:	f88d 0005 	strb.w	r0, [sp, #5]
 800211e:	88e8      	ldrh	r0, [r5, #6]
 8002120:	f8ad 0000 	strh.w	r0, [sp]
 8002124:	88e8      	ldrh	r0, [r5, #6]
 8002126:	f8ad 0002 	strh.w	r0, [sp, #2]
 800212a:	0033      	movs	r3, r6
 800212c:	f20f 22ad 	addw	r2, pc, #685	; 0x2ad
 8002130:	4669      	mov	r1, sp
 8002132:	68a0      	ldr	r0, [r4, #8]
 8002134:	f012 fd1f 	bl	8014b76 <ZbZdoIeeeAddrReq>
 8002138:	2800      	cmp	r0, #0
 800213a:	d009      	beq.n	8002150 <??ZbZclOtaClientDiscover_1>
 800213c:	f05f 30ff 	movs.w	r0, #4294967295
 8002140:	f05f 31ff 	movs.w	r1, #4294967295
 8002144:	e9c6 0144 	strd	r0, r1, [r6, #272]	; 0x110
 8002148:	2001      	movs	r0, #1
 800214a:	e002      	b.n	8002152 <??ZbZclOtaClientDiscover_2>

0800214c <??ZbZclOtaClientDiscover_3>:
 800214c:	2001      	movs	r0, #1
 800214e:	e000      	b.n	8002152 <??ZbZclOtaClientDiscover_2>

08002150 <??ZbZclOtaClientDiscover_1>:
 8002150:	2000      	movs	r0, #0

08002152 <??ZbZclOtaClientDiscover_2>:
 8002152:	b009      	add	sp, #36	; 0x24
 8002154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002158 <zcl_otacli_disc_complete>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	0004      	movs	r4, r0
 800215c:	000d      	movs	r5, r1
 800215e:	0026      	movs	r6, r4
 8002160:	0028      	movs	r0, r5
 8002162:	b2c0      	uxtb	r0, r0
 8002164:	2800      	cmp	r0, #0
 8002166:	d005      	beq.n	8002174 <??zcl_otacli_disc_complete_0>
 8002168:	f05f 30ff 	movs.w	r0, #4294967295
 800216c:	f05f 31ff 	movs.w	r1, #4294967295
 8002170:	e9c6 0144 	strd	r0, r1, [r6, #272]	; 0x110

08002174 <??zcl_otacli_disc_complete_0>:
 8002174:	f8d6 00dc 	ldr.w	r0, [r6, #220]	; 0xdc
 8002178:	2800      	cmp	r0, #0
 800217a:	d006      	beq.n	800218a <??zcl_otacli_disc_complete_1>
 800217c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800217e:	0029      	movs	r1, r5
 8002180:	b2c9      	uxtb	r1, r1
 8002182:	0020      	movs	r0, r4
 8002184:	f8d6 30dc 	ldr.w	r3, [r6, #220]	; 0xdc
 8002188:	4798      	blx	r3

0800218a <??zcl_otacli_disc_complete_1>:
 800218a:	bd70      	pop	{r4, r5, r6, pc}

0800218c <ZbZclOtaClientDiscoverForced>:
 800218c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002190:	0007      	movs	r7, r0
 8002192:	0014      	movs	r4, r2
 8002194:	001d      	movs	r5, r3
 8002196:	9e06      	ldr	r6, [sp, #24]
 8002198:	46b8      	mov	r8, r7
 800219a:	e9c8 4544 	strd	r4, r5, [r8, #272]	; 0x110
 800219e:	f888 6118 	strb.w	r6, [r8, #280]	; 0x118
 80021a2:	e9d8 2344 	ldrd	r2, r3, [r8, #272]	; 0x110
 80021a6:	2100      	movs	r1, #0
 80021a8:	4640      	mov	r0, r8
 80021aa:	f7fe fc1a 	bl	80009e2 <ZbZclAttrIntegerWrite>
 80021ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080021b2 <ZbZclOtaClientImageTransferStart>:
 80021b2:	b538      	push	{r3, r4, r5, lr}
 80021b4:	0004      	movs	r4, r0
 80021b6:	0025      	movs	r5, r4
 80021b8:	f895 0129 	ldrb.w	r0, [r5, #297]	; 0x129
 80021bc:	2800      	cmp	r0, #0
 80021be:	d001      	beq.n	80021c4 <??ZbZclOtaClientImageTransferStart_0>
 80021c0:	2001      	movs	r0, #1
 80021c2:	e024      	b.n	800220e <??ZbZclOtaClientImageTransferStart_1>

080021c4 <??ZbZclOtaClientImageTransferStart_0>:
 80021c4:	f8b5 011c 	ldrh.w	r0, [r5, #284]	; 0x11c
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d109      	bne.n	80021e0 <??ZbZclOtaClientImageTransferStart_2>
 80021cc:	f8b5 011e 	ldrh.w	r0, [r5, #286]	; 0x11e
 80021d0:	2800      	cmp	r0, #0
 80021d2:	d105      	bne.n	80021e0 <??ZbZclOtaClientImageTransferStart_2>
 80021d4:	f8d5 0120 	ldr.w	r0, [r5, #288]	; 0x120
 80021d8:	2800      	cmp	r0, #0
 80021da:	d101      	bne.n	80021e0 <??ZbZclOtaClientImageTransferStart_2>
 80021dc:	2098      	movs	r0, #152	; 0x98
 80021de:	e016      	b.n	800220e <??ZbZclOtaClientImageTransferStart_1>

080021e0 <??ZbZclOtaClientImageTransferStart_2>:
 80021e0:	0028      	movs	r0, r5
 80021e2:	f7ff fe65 	bl	8001eb0 <zcl_otacli_reset_cluster>
 80021e6:	2000      	movs	r0, #0
 80021e8:	f8c5 0180 	str.w	r0, [r5, #384]	; 0x180
 80021ec:	2000      	movs	r0, #0
 80021ee:	f885 01ee 	strb.w	r0, [r5, #494]	; 0x1ee
 80021f2:	2031      	movs	r0, #49	; 0x31
 80021f4:	f885 0184 	strb.w	r0, [r5, #388]	; 0x184
 80021f8:	f240 2253 	movw	r2, #595	; 0x253
 80021fc:	2101      	movs	r1, #1
 80021fe:	0028      	movs	r0, r5
 8002200:	f7ff fe48 	bl	8001e94 <zcl_otacli_write_upgrade_status>
 8002204:	0029      	movs	r1, r5
 8002206:	68a0      	ldr	r0, [r4, #8]
 8002208:	f001 f87b 	bl	8003302 <zcl_otacli_send_image_block_req>
 800220c:	2000      	movs	r0, #0

0800220e <??ZbZclOtaClientImageTransferStart_1>:
 800220e:	bd32      	pop	{r1, r4, r5, pc}

08002210 <ZbZclOtaClientImageTransferResume>:
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	0004      	movs	r4, r0
 8002214:	0025      	movs	r5, r4
 8002216:	f895 01fc 	ldrb.w	r0, [r5, #508]	; 0x1fc
 800221a:	2800      	cmp	r0, #0
 800221c:	d101      	bne.n	8002222 <??ZbZclOtaClientImageTransferResume_0>
 800221e:	2001      	movs	r0, #1
 8002220:	e011      	b.n	8002246 <??ZbZclOtaClientImageTransferResume_1>

08002222 <??ZbZclOtaClientImageTransferResume_0>:
 8002222:	2000      	movs	r0, #0
 8002224:	f885 01fc 	strb.w	r0, [r5, #508]	; 0x1fc
 8002228:	68a0      	ldr	r0, [r4, #8]
 800222a:	f012 fd26 	bl	8014c7a <ZbZclUptime>
 800222e:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
 8002232:	f012 fb85 	bl	8014940 <ZbTimeoutRemaining>
 8002236:	0006      	movs	r6, r0
 8002238:	f44f 721a 	mov.w	r2, #616	; 0x268
 800223c:	0031      	movs	r1, r6
 800223e:	0028      	movs	r0, r5
 8002240:	f000 fe48 	bl	8002ed4 <zcl_otacli_request_next_block>
 8002244:	2000      	movs	r0, #0

08002246 <??ZbZclOtaClientImageTransferResume_1>:
 8002246:	bd70      	pop	{r4, r5, r6, pc}

08002248 <zcl_otacli_handle_query_next_image_rsp>:
 8002248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224a:	0004      	movs	r4, r0
 800224c:	000d      	movs	r5, r1
 800224e:	002e      	movs	r6, r5
 8002250:	7860      	ldrb	r0, [r4, #1]
 8002252:	2800      	cmp	r0, #0
 8002254:	d003      	beq.n	800225e <??zcl_otacli_handle_query_next_image_rsp_0>
 8002256:	7860      	ldrb	r0, [r4, #1]
 8002258:	f886 0128 	strb.w	r0, [r6, #296]	; 0x128
 800225c:	e019      	b.n	8002292 <??zcl_otacli_handle_query_next_image_rsp_1>

0800225e <??zcl_otacli_handle_query_next_image_rsp_0>:
 800225e:	f516 7392 	adds.w	r3, r6, #292	; 0x124
 8002262:	f516 728e 	adds.w	r2, r6, #284	; 0x11c
 8002266:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002268:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800226a:	f000 f9ed 	bl	8002648 <zcl_otacli_parse_query_next_image_rsp>
 800226e:	f886 0128 	strb.w	r0, [r6, #296]	; 0x128
 8002272:	f8d6 00e4 	ldr.w	r0, [r6, #228]	; 0xe4
 8002276:	2800      	cmp	r0, #0
 8002278:	d00b      	beq.n	8002292 <??zcl_otacli_handle_query_next_image_rsp_1>
 800227a:	6d70      	ldr	r0, [r6, #84]	; 0x54
 800227c:	9000      	str	r0, [sp, #0]
 800227e:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 8002282:	f516 728e 	adds.w	r2, r6, #284	; 0x11c
 8002286:	f896 1128 	ldrb.w	r1, [r6, #296]	; 0x128
 800228a:	0030      	movs	r0, r6
 800228c:	f8d6 70e4 	ldr.w	r7, [r6, #228]	; 0xe4
 8002290:	47b8      	blx	r7

08002292 <??zcl_otacli_handle_query_next_image_rsp_1>:
 8002292:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08002294 <ZbZclOtaClientQueryNextImageReq>:
 8002294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002298:	0005      	movs	r5, r0
 800229a:	000c      	movs	r4, r1
 800229c:	0016      	movs	r6, r2
 800229e:	4699      	mov	r9, r3
 80022a0:	002f      	movs	r7, r5
 80022a2:	f05f 0800 	movs.w	r8, #0
 80022a6:	2c00      	cmp	r4, #0
 80022a8:	d101      	bne.n	80022ae <??ZbZclOtaClientQueryNextImageReq_0>
 80022aa:	2001      	movs	r0, #1
 80022ac:	e01e      	b.n	80022ec <??ZbZclOtaClientQueryNextImageReq_1>

080022ae <??ZbZclOtaClientQueryNextImageReq_0>:
 80022ae:	f897 0129 	ldrb.w	r0, [r7, #297]	; 0x129
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d001      	beq.n	80022ba <??ZbZclOtaClientQueryNextImageReq_2>
 80022b6:	2001      	movs	r0, #1
 80022b8:	e018      	b.n	80022ec <??ZbZclOtaClientQueryNextImageReq_1>

080022ba <??ZbZclOtaClientQueryNextImageReq_2>:
 80022ba:	4648      	mov	r0, r9
 80022bc:	b280      	uxth	r0, r0
 80022be:	9000      	str	r0, [sp, #0]
 80022c0:	0033      	movs	r3, r6
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	0022      	movs	r2, r4
 80022c6:	210b      	movs	r1, #11
 80022c8:	a801      	add	r0, sp, #4
 80022ca:	f000 f8dd 	bl	8002488 <zcl_otacli_build_query_next_image_req>
 80022ce:	4682      	mov	sl, r0
 80022d0:	f1ba 0f00 	cmp.w	sl, #0
 80022d4:	d501      	bpl.n	80022da <??ZbZclOtaClientQueryNextImageReq_3>
 80022d6:	2089      	movs	r0, #137	; 0x89
 80022d8:	e008      	b.n	80022ec <??ZbZclOtaClientQueryNextImageReq_1>

080022da <??ZbZclOtaClientQueryNextImageReq_3>:
 80022da:	f8df 08b4 	ldr.w	r0, [pc, #2228]	; 8002b90 <??DataTable7>
 80022de:	9000      	str	r0, [sp, #0]
 80022e0:	4653      	mov	r3, sl
 80022e2:	aa01      	add	r2, sp, #4
 80022e4:	2101      	movs	r1, #1
 80022e6:	0038      	movs	r0, r7
 80022e8:	f000 ffcc 	bl	8003284 <zcl_otacli_send_command>

080022ec <??ZbZclOtaClientQueryNextImageReq_1>:
 80022ec:	b004      	add	sp, #16
 80022ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080022f2 <zcl_otacli_match_desc_rsp>:
 80022f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f4:	0004      	movs	r4, r0
 80022f6:	000d      	movs	r5, r1
 80022f8:	002f      	movs	r7, r5
 80022fa:	003e      	movs	r6, r7
 80022fc:	7820      	ldrb	r0, [r4, #0]
 80022fe:	2800      	cmp	r0, #0
 8002300:	d004      	beq.n	800230c <??zcl_otacli_match_desc_rsp_0>
 8002302:	2101      	movs	r1, #1
 8002304:	0030      	movs	r0, r6
 8002306:	f7ff ff27 	bl	8002158 <zcl_otacli_disc_complete>
 800230a:	e023      	b.n	8002354 <??zcl_otacli_match_desc_rsp_1>

0800230c <??zcl_otacli_match_desc_rsp_0>:
 800230c:	7920      	ldrb	r0, [r4, #4]
 800230e:	2800      	cmp	r0, #0
 8002310:	d104      	bne.n	800231c <??zcl_otacli_match_desc_rsp_2>
 8002312:	2101      	movs	r1, #1
 8002314:	0030      	movs	r0, r6
 8002316:	f7ff ff1f 	bl	8002158 <zcl_otacli_disc_complete>
 800231a:	e01b      	b.n	8002354 <??zcl_otacli_match_desc_rsp_1>

0800231c <??zcl_otacli_match_desc_rsp_2>:
 800231c:	7960      	ldrb	r0, [r4, #5]
 800231e:	f887 0118 	strb.w	r0, [r7, #280]	; 0x118
 8002322:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002326:	2100      	movs	r1, #0
 8002328:	0038      	movs	r0, r7
 800232a:	f7fe fb5a 	bl	80009e2 <ZbZclAttrIntegerWrite>
 800232e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002332:	f05f 32ff 	movs.w	r2, #4294967295
 8002336:	f05f 33ff 	movs.w	r3, #4294967295
 800233a:	4299      	cmp	r1, r3
 800233c:	d106      	bne.n	800234c <??zcl_otacli_match_desc_rsp_3>
 800233e:	4290      	cmp	r0, r2
 8002340:	d104      	bne.n	800234c <??zcl_otacli_match_desc_rsp_3>
 8002342:	2101      	movs	r1, #1
 8002344:	0030      	movs	r0, r6
 8002346:	f7ff ff07 	bl	8002158 <zcl_otacli_disc_complete>
 800234a:	e003      	b.n	8002354 <??zcl_otacli_match_desc_rsp_1>

0800234c <??zcl_otacli_match_desc_rsp_3>:
 800234c:	2100      	movs	r1, #0
 800234e:	0030      	movs	r0, r6
 8002350:	f7ff ff02 	bl	8002158 <zcl_otacli_disc_complete>

08002354 <??zcl_otacli_match_desc_rsp_1>:
 8002354:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08002358 <zcl_otacli_nwk_addr_rsp>:
 8002358:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800235c:	b093      	sub	sp, #76	; 0x4c
 800235e:	0004      	movs	r4, r0
 8002360:	000d      	movs	r5, r1
 8002362:	002e      	movs	r6, r5
 8002364:	0037      	movs	r7, r6
 8002366:	7820      	ldrb	r0, [r4, #0]
 8002368:	2800      	cmp	r0, #0
 800236a:	d004      	beq.n	8002376 <??zcl_otacli_nwk_addr_rsp_0>
 800236c:	2101      	movs	r1, #1
 800236e:	0038      	movs	r0, r7
 8002370:	f7ff fef2 	bl	8002158 <zcl_otacli_disc_complete>
 8002374:	e02e      	b.n	80023d4 <??zcl_otacli_nwk_addr_rsp_1>

08002376 <??zcl_otacli_nwk_addr_rsp_0>:
 8002376:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800237a:	e9c6 0144 	strd	r0, r1, [r6, #272]	; 0x110
 800237e:	f05f 084a 	movs.w	r8, #74	; 0x4a
 8002382:	f05f 0900 	movs.w	r9, #0
 8002386:	46ea      	mov	sl, sp
 8002388:	464a      	mov	r2, r9
 800238a:	4641      	mov	r1, r8
 800238c:	4650      	mov	r0, sl
 800238e:	f005 faa3 	bl	80078d8 <__aeabi_memset>
 8002392:	8ab8      	ldrh	r0, [r7, #20]
 8002394:	f8ad 0004 	strh.w	r0, [sp, #4]
 8002398:	8a20      	ldrh	r0, [r4, #16]
 800239a:	f8ad 0002 	strh.w	r0, [sp, #2]
 800239e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80023a2:	f8ad 0000 	strh.w	r0, [sp]
 80023a6:	2001      	movs	r0, #1
 80023a8:	f88d 0006 	strb.w	r0, [sp, #6]
 80023ac:	2019      	movs	r0, #25
 80023ae:	f8ad 0008 	strh.w	r0, [sp, #8]
 80023b2:	2000      	movs	r0, #0
 80023b4:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 80023b8:	0033      	movs	r3, r6
 80023ba:	f8df 27d8 	ldr.w	r2, [pc, #2008]	; 8002b94 <??DataTable7_1>
 80023be:	4669      	mov	r1, sp
 80023c0:	68b8      	ldr	r0, [r7, #8]
 80023c2:	f012 fc19 	bl	8014bf8 <ZbZdoMatchDescReq>
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d004      	beq.n	80023d4 <??zcl_otacli_nwk_addr_rsp_1>
 80023ca:	2101      	movs	r1, #1
 80023cc:	0038      	movs	r0, r7
 80023ce:	f7ff fec3 	bl	8002158 <zcl_otacli_disc_complete>
 80023d2:	e7ff      	b.n	80023d4 <??zcl_otacli_nwk_addr_rsp_1>

080023d4 <??zcl_otacli_nwk_addr_rsp_1>:
 80023d4:	b014      	add	sp, #80	; 0x50
 80023d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080023dc <zcl_otacli_ieee_addr_rsp>:
 80023dc:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023e0:	b093      	sub	sp, #76	; 0x4c
 80023e2:	0004      	movs	r4, r0
 80023e4:	000d      	movs	r5, r1
 80023e6:	002e      	movs	r6, r5
 80023e8:	0037      	movs	r7, r6
 80023ea:	7820      	ldrb	r0, [r4, #0]
 80023ec:	2800      	cmp	r0, #0
 80023ee:	d004      	beq.n	80023fa <??zcl_otacli_ieee_addr_rsp_0>
 80023f0:	2101      	movs	r1, #1
 80023f2:	0038      	movs	r0, r7
 80023f4:	f7ff feb0 	bl	8002158 <zcl_otacli_disc_complete>
 80023f8:	e02e      	b.n	8002458 <??zcl_otacli_ieee_addr_rsp_1>

080023fa <??zcl_otacli_ieee_addr_rsp_0>:
 80023fa:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80023fe:	e9c6 0144 	strd	r0, r1, [r6, #272]	; 0x110
 8002402:	f05f 084a 	movs.w	r8, #74	; 0x4a
 8002406:	f05f 0900 	movs.w	r9, #0
 800240a:	46ea      	mov	sl, sp
 800240c:	464a      	mov	r2, r9
 800240e:	4641      	mov	r1, r8
 8002410:	4650      	mov	r0, sl
 8002412:	f005 fa61 	bl	80078d8 <__aeabi_memset>
 8002416:	8ab8      	ldrh	r0, [r7, #20]
 8002418:	f8ad 0004 	strh.w	r0, [sp, #4]
 800241c:	8a20      	ldrh	r0, [r4, #16]
 800241e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8002422:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8002426:	f8ad 0000 	strh.w	r0, [sp]
 800242a:	2001      	movs	r0, #1
 800242c:	f88d 0006 	strb.w	r0, [sp, #6]
 8002430:	2019      	movs	r0, #25
 8002432:	f8ad 0008 	strh.w	r0, [sp, #8]
 8002436:	2000      	movs	r0, #0
 8002438:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 800243c:	0033      	movs	r3, r6
 800243e:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8002b94 <??DataTable7_1>
 8002442:	4669      	mov	r1, sp
 8002444:	68b8      	ldr	r0, [r7, #8]
 8002446:	f012 fbd7 	bl	8014bf8 <ZbZdoMatchDescReq>
 800244a:	2800      	cmp	r0, #0
 800244c:	d004      	beq.n	8002458 <??zcl_otacli_ieee_addr_rsp_1>
 800244e:	2101      	movs	r1, #1
 8002450:	0038      	movs	r0, r7
 8002452:	f7ff fe81 	bl	8002158 <zcl_otacli_disc_complete>
 8002456:	e7ff      	b.n	8002458 <??zcl_otacli_ieee_addr_rsp_1>

08002458 <??zcl_otacli_ieee_addr_rsp_1>:
 8002458:	b014      	add	sp, #80	; 0x50
 800245a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002460 <??DataTable6>:
 8002460:	33d3 0800                                   .3..

08002464 <??DataTable6_1>:
 8002464:	3401 0800                                   .4..

08002468 <??DataTable6_2>:
 8002468:	3423 0800                                   #4..

0800246c <??DataTable6_3>:
 800246c:	3543 0800                                   C5..

08002470 <??DataTable6_4>:
 8002470:	35d9 0800                                   .5..

08002474 <??DataTable6_5>:
 8002474:	3667 0800                                   g6..

08002478 <??DataTable6_6>:
 8002478:	37eb 0800                                   .7..

0800247c <??DataTable6_7>:
 800247c:	33af 0800                                   .3..

08002480 <??DataTable6_8>:
 8002480:	3303 0800                                   .3..

08002484 <??DataTable6_9>:
 8002484:	a6c8 0801                                   ....

08002488 <zcl_otacli_build_query_next_image_req>:
 8002488:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800248c:	0005      	movs	r5, r0
 800248e:	000e      	movs	r6, r1
 8002490:	0017      	movs	r7, r2
 8002492:	4698      	mov	r8, r3
 8002494:	9c08      	ldr	r4, [sp, #32]
 8002496:	2000      	movs	r0, #0
 8002498:	9000      	str	r0, [sp, #0]
 800249a:	4643      	mov	r3, r8
 800249c:	b2db      	uxtb	r3, r3
 800249e:	466a      	mov	r2, sp
 80024a0:	0031      	movs	r1, r6
 80024a2:	0028      	movs	r0, r5
 80024a4:	f7ff faae 	bl	8001a04 <zb_zcl_append_uint8>
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d502      	bpl.n	80024b2 <??zcl_otacli_build_query_next_image_req_0>
 80024ac:	f05f 30ff 	movs.w	r0, #4294967295
 80024b0:	e030      	b.n	8002514 <??zcl_otacli_build_query_next_image_req_1>

080024b2 <??zcl_otacli_build_query_next_image_req_0>:
 80024b2:	883b      	ldrh	r3, [r7, #0]
 80024b4:	466a      	mov	r2, sp
 80024b6:	0031      	movs	r1, r6
 80024b8:	0028      	movs	r0, r5
 80024ba:	f7ff fabe 	bl	8001a3a <zb_zcl_append_uint16>
 80024be:	2800      	cmp	r0, #0
 80024c0:	d502      	bpl.n	80024c8 <??zcl_otacli_build_query_next_image_req_2>
 80024c2:	f05f 30ff 	movs.w	r0, #4294967295
 80024c6:	e025      	b.n	8002514 <??zcl_otacli_build_query_next_image_req_1>

080024c8 <??zcl_otacli_build_query_next_image_req_2>:
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	466a      	mov	r2, sp
 80024cc:	0031      	movs	r1, r6
 80024ce:	0028      	movs	r0, r5
 80024d0:	f7ff fab3 	bl	8001a3a <zb_zcl_append_uint16>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d502      	bpl.n	80024de <??zcl_otacli_build_query_next_image_req_3>
 80024d8:	f05f 30ff 	movs.w	r0, #4294967295
 80024dc:	e01a      	b.n	8002514 <??zcl_otacli_build_query_next_image_req_1>

080024de <??zcl_otacli_build_query_next_image_req_3>:
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	466a      	mov	r2, sp
 80024e2:	0031      	movs	r1, r6
 80024e4:	0028      	movs	r0, r5
 80024e6:	f7ff fac9 	bl	8001a7c <zb_zcl_append_uint32>
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d502      	bpl.n	80024f4 <??zcl_otacli_build_query_next_image_req_4>
 80024ee:	f05f 30ff 	movs.w	r0, #4294967295
 80024f2:	e00f      	b.n	8002514 <??zcl_otacli_build_query_next_image_req_1>

080024f4 <??zcl_otacli_build_query_next_image_req_4>:
 80024f4:	ea5f 70c8 	movs.w	r0, r8, lsl #31
 80024f8:	d50b      	bpl.n	8002512 <??zcl_otacli_build_query_next_image_req_5>
 80024fa:	0023      	movs	r3, r4
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	466a      	mov	r2, sp
 8002500:	0031      	movs	r1, r6
 8002502:	0028      	movs	r0, r5
 8002504:	f7ff fa99 	bl	8001a3a <zb_zcl_append_uint16>
 8002508:	2800      	cmp	r0, #0
 800250a:	d502      	bpl.n	8002512 <??zcl_otacli_build_query_next_image_req_5>
 800250c:	f05f 30ff 	movs.w	r0, #4294967295
 8002510:	e000      	b.n	8002514 <??zcl_otacli_build_query_next_image_req_1>

08002512 <??zcl_otacli_build_query_next_image_req_5>:
 8002512:	9800      	ldr	r0, [sp, #0]

08002514 <??zcl_otacli_build_query_next_image_req_1>:
 8002514:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08002518 <zcl_otacli_build_image_block_req>:
 8002518:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800251c:	0006      	movs	r6, r0
 800251e:	000f      	movs	r7, r1
 8002520:	4690      	mov	r8, r2
 8002522:	4699      	mov	r9, r3
 8002524:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002526:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002528:	2000      	movs	r0, #0
 800252a:	9000      	str	r0, [sp, #0]
 800252c:	f05f 0a02 	movs.w	sl, #2
 8002530:	4653      	mov	r3, sl
 8002532:	b2db      	uxtb	r3, r3
 8002534:	466a      	mov	r2, sp
 8002536:	0039      	movs	r1, r7
 8002538:	0030      	movs	r0, r6
 800253a:	f7ff fa63 	bl	8001a04 <zb_zcl_append_uint8>
 800253e:	2800      	cmp	r0, #0
 8002540:	d502      	bpl.n	8002548 <??zcl_otacli_build_image_block_req_0>
 8002542:	f05f 30ff 	movs.w	r0, #4294967295
 8002546:	e047      	b.n	80025d8 <??zcl_otacli_build_image_block_req_1>

08002548 <??zcl_otacli_build_image_block_req_0>:
 8002548:	f8b8 3000 	ldrh.w	r3, [r8]
 800254c:	466a      	mov	r2, sp
 800254e:	0039      	movs	r1, r7
 8002550:	0030      	movs	r0, r6
 8002552:	f7ff fa72 	bl	8001a3a <zb_zcl_append_uint16>
 8002556:	2800      	cmp	r0, #0
 8002558:	d502      	bpl.n	8002560 <??zcl_otacli_build_image_block_req_2>
 800255a:	f05f 30ff 	movs.w	r0, #4294967295
 800255e:	e03b      	b.n	80025d8 <??zcl_otacli_build_image_block_req_1>

08002560 <??zcl_otacli_build_image_block_req_2>:
 8002560:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8002564:	466a      	mov	r2, sp
 8002566:	0039      	movs	r1, r7
 8002568:	0030      	movs	r0, r6
 800256a:	f7ff fa66 	bl	8001a3a <zb_zcl_append_uint16>
 800256e:	2800      	cmp	r0, #0
 8002570:	d502      	bpl.n	8002578 <??zcl_otacli_build_image_block_req_3>
 8002572:	f05f 30ff 	movs.w	r0, #4294967295
 8002576:	e02f      	b.n	80025d8 <??zcl_otacli_build_image_block_req_1>

08002578 <??zcl_otacli_build_image_block_req_3>:
 8002578:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800257c:	466a      	mov	r2, sp
 800257e:	0039      	movs	r1, r7
 8002580:	0030      	movs	r0, r6
 8002582:	f7ff fa7b 	bl	8001a7c <zb_zcl_append_uint32>
 8002586:	2800      	cmp	r0, #0
 8002588:	d502      	bpl.n	8002590 <??zcl_otacli_build_image_block_req_4>
 800258a:	f05f 30ff 	movs.w	r0, #4294967295
 800258e:	e023      	b.n	80025d8 <??zcl_otacli_build_image_block_req_1>

08002590 <??zcl_otacli_build_image_block_req_4>:
 8002590:	464b      	mov	r3, r9
 8002592:	466a      	mov	r2, sp
 8002594:	0039      	movs	r1, r7
 8002596:	0030      	movs	r0, r6
 8002598:	f7ff fa70 	bl	8001a7c <zb_zcl_append_uint32>
 800259c:	2800      	cmp	r0, #0
 800259e:	d502      	bpl.n	80025a6 <??zcl_otacli_build_image_block_req_5>
 80025a0:	f05f 30ff 	movs.w	r0, #4294967295
 80025a4:	e018      	b.n	80025d8 <??zcl_otacli_build_image_block_req_1>

080025a6 <??zcl_otacli_build_image_block_req_5>:
 80025a6:	0023      	movs	r3, r4
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	466a      	mov	r2, sp
 80025ac:	0039      	movs	r1, r7
 80025ae:	0030      	movs	r0, r6
 80025b0:	f7ff fa28 	bl	8001a04 <zb_zcl_append_uint8>
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d502      	bpl.n	80025be <??zcl_otacli_build_image_block_req_6>
 80025b8:	f05f 30ff 	movs.w	r0, #4294967295
 80025bc:	e00c      	b.n	80025d8 <??zcl_otacli_build_image_block_req_1>

080025be <??zcl_otacli_build_image_block_req_6>:
 80025be:	002b      	movs	r3, r5
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	466a      	mov	r2, sp
 80025c4:	0039      	movs	r1, r7
 80025c6:	0030      	movs	r0, r6
 80025c8:	f7ff fa37 	bl	8001a3a <zb_zcl_append_uint16>
 80025cc:	2800      	cmp	r0, #0
 80025ce:	d502      	bpl.n	80025d6 <??zcl_otacli_build_image_block_req_7>
 80025d0:	f05f 30ff 	movs.w	r0, #4294967295
 80025d4:	e000      	b.n	80025d8 <??zcl_otacli_build_image_block_req_1>

080025d6 <??zcl_otacli_build_image_block_req_7>:
 80025d6:	9800      	ldr	r0, [sp, #0]

080025d8 <??zcl_otacli_build_image_block_req_1>:
 80025d8:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

080025dc <zcl_otacli_build_upgrade_end_req>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	0004      	movs	r4, r0
 80025e0:	000d      	movs	r5, r1
 80025e2:	0016      	movs	r6, r2
 80025e4:	001f      	movs	r7, r3
 80025e6:	2000      	movs	r0, #0
 80025e8:	9000      	str	r0, [sp, #0]
 80025ea:	0033      	movs	r3, r6
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	466a      	mov	r2, sp
 80025f0:	0029      	movs	r1, r5
 80025f2:	0020      	movs	r0, r4
 80025f4:	f7ff fa06 	bl	8001a04 <zb_zcl_append_uint8>
 80025f8:	2800      	cmp	r0, #0
 80025fa:	d502      	bpl.n	8002602 <??zcl_otacli_build_upgrade_end_req_0>
 80025fc:	f05f 30ff 	movs.w	r0, #4294967295
 8002600:	e021      	b.n	8002646 <??zcl_otacli_build_upgrade_end_req_1>

08002602 <??zcl_otacli_build_upgrade_end_req_0>:
 8002602:	883b      	ldrh	r3, [r7, #0]
 8002604:	466a      	mov	r2, sp
 8002606:	0029      	movs	r1, r5
 8002608:	0020      	movs	r0, r4
 800260a:	f7ff fa16 	bl	8001a3a <zb_zcl_append_uint16>
 800260e:	2800      	cmp	r0, #0
 8002610:	d502      	bpl.n	8002618 <??zcl_otacli_build_upgrade_end_req_2>
 8002612:	f05f 30ff 	movs.w	r0, #4294967295
 8002616:	e016      	b.n	8002646 <??zcl_otacli_build_upgrade_end_req_1>

08002618 <??zcl_otacli_build_upgrade_end_req_2>:
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	466a      	mov	r2, sp
 800261c:	0029      	movs	r1, r5
 800261e:	0020      	movs	r0, r4
 8002620:	f7ff fa0b 	bl	8001a3a <zb_zcl_append_uint16>
 8002624:	2800      	cmp	r0, #0
 8002626:	d502      	bpl.n	800262e <??zcl_otacli_build_upgrade_end_req_3>
 8002628:	f05f 30ff 	movs.w	r0, #4294967295
 800262c:	e00b      	b.n	8002646 <??zcl_otacli_build_upgrade_end_req_1>

0800262e <??zcl_otacli_build_upgrade_end_req_3>:
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	466a      	mov	r2, sp
 8002632:	0029      	movs	r1, r5
 8002634:	0020      	movs	r0, r4
 8002636:	f7ff fa21 	bl	8001a7c <zb_zcl_append_uint32>
 800263a:	2800      	cmp	r0, #0
 800263c:	d502      	bpl.n	8002644 <??zcl_otacli_build_upgrade_end_req_4>
 800263e:	f05f 30ff 	movs.w	r0, #4294967295
 8002642:	e000      	b.n	8002646 <??zcl_otacli_build_upgrade_end_req_1>

08002644 <??zcl_otacli_build_upgrade_end_req_4>:
 8002644:	9800      	ldr	r0, [sp, #0]

08002646 <??zcl_otacli_build_upgrade_end_req_1>:
 8002646:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002648 <zcl_otacli_parse_query_next_image_rsp>:
 8002648:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800264a:	0004      	movs	r4, r0
 800264c:	000d      	movs	r5, r1
 800264e:	0016      	movs	r6, r2
 8002650:	001f      	movs	r7, r3
 8002652:	2000      	movs	r0, #0
 8002654:	9001      	str	r0, [sp, #4]
 8002656:	466b      	mov	r3, sp
 8002658:	aa01      	add	r2, sp, #4
 800265a:	0029      	movs	r1, r5
 800265c:	0020      	movs	r0, r4
 800265e:	f7ff fa2d 	bl	8001abc <zb_zcl_parse_uint8>
 8002662:	2800      	cmp	r0, #0
 8002664:	d501      	bpl.n	800266a <??zcl_otacli_parse_query_next_image_rsp_0>
 8002666:	2080      	movs	r0, #128	; 0x80
 8002668:	e02f      	b.n	80026ca <??zcl_otacli_parse_query_next_image_rsp_1>

0800266a <??zcl_otacli_parse_query_next_image_rsp_0>:
 800266a:	f89d 0000 	ldrb.w	r0, [sp]
 800266e:	2800      	cmp	r0, #0
 8002670:	d002      	beq.n	8002678 <??zcl_otacli_parse_query_next_image_rsp_2>
 8002672:	f89d 0000 	ldrb.w	r0, [sp]
 8002676:	e028      	b.n	80026ca <??zcl_otacli_parse_query_next_image_rsp_1>

08002678 <??zcl_otacli_parse_query_next_image_rsp_2>:
 8002678:	0033      	movs	r3, r6
 800267a:	aa01      	add	r2, sp, #4
 800267c:	0029      	movs	r1, r5
 800267e:	0020      	movs	r0, r4
 8002680:	f7ff fa38 	bl	8001af4 <zb_zcl_parse_uint16>
 8002684:	2800      	cmp	r0, #0
 8002686:	d501      	bpl.n	800268c <??zcl_otacli_parse_query_next_image_rsp_3>
 8002688:	2080      	movs	r0, #128	; 0x80
 800268a:	e01e      	b.n	80026ca <??zcl_otacli_parse_query_next_image_rsp_1>

0800268c <??zcl_otacli_parse_query_next_image_rsp_3>:
 800268c:	1cb3      	adds	r3, r6, #2
 800268e:	aa01      	add	r2, sp, #4
 8002690:	0029      	movs	r1, r5
 8002692:	0020      	movs	r0, r4
 8002694:	f7ff fa2e 	bl	8001af4 <zb_zcl_parse_uint16>
 8002698:	2800      	cmp	r0, #0
 800269a:	d501      	bpl.n	80026a0 <??zcl_otacli_parse_query_next_image_rsp_4>
 800269c:	2080      	movs	r0, #128	; 0x80
 800269e:	e014      	b.n	80026ca <??zcl_otacli_parse_query_next_image_rsp_1>

080026a0 <??zcl_otacli_parse_query_next_image_rsp_4>:
 80026a0:	1d33      	adds	r3, r6, #4
 80026a2:	aa01      	add	r2, sp, #4
 80026a4:	0029      	movs	r1, r5
 80026a6:	0020      	movs	r0, r4
 80026a8:	f7ff fa44 	bl	8001b34 <zb_zcl_parse_uint32>
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d501      	bpl.n	80026b4 <??zcl_otacli_parse_query_next_image_rsp_5>
 80026b0:	2080      	movs	r0, #128	; 0x80
 80026b2:	e00a      	b.n	80026ca <??zcl_otacli_parse_query_next_image_rsp_1>

080026b4 <??zcl_otacli_parse_query_next_image_rsp_5>:
 80026b4:	003b      	movs	r3, r7
 80026b6:	aa01      	add	r2, sp, #4
 80026b8:	0029      	movs	r1, r5
 80026ba:	0020      	movs	r0, r4
 80026bc:	f7ff fa3a 	bl	8001b34 <zb_zcl_parse_uint32>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d501      	bpl.n	80026c8 <??zcl_otacli_parse_query_next_image_rsp_6>
 80026c4:	2080      	movs	r0, #128	; 0x80
 80026c6:	e000      	b.n	80026ca <??zcl_otacli_parse_query_next_image_rsp_1>

080026c8 <??zcl_otacli_parse_query_next_image_rsp_6>:
 80026c8:	2000      	movs	r0, #0

080026ca <??zcl_otacli_parse_query_next_image_rsp_1>:
 80026ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080026cc <zcl_otacli_parse_image_block_rsp_success>:
 80026cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d0:	0004      	movs	r4, r0
 80026d2:	000d      	movs	r5, r1
 80026d4:	0016      	movs	r6, r2
 80026d6:	001f      	movs	r7, r3
 80026d8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80026dc:	f05f 0908 	movs.w	r9, #8
 80026e0:	f05f 0a00 	movs.w	sl, #0
 80026e4:	46bb      	mov	fp, r7
 80026e6:	4652      	mov	r2, sl
 80026e8:	4649      	mov	r1, r9
 80026ea:	4658      	mov	r0, fp
 80026ec:	f005 f8f4 	bl	80078d8 <__aeabi_memset>
 80026f0:	003b      	movs	r3, r7
 80026f2:	0032      	movs	r2, r6
 80026f4:	0029      	movs	r1, r5
 80026f6:	0020      	movs	r0, r4
 80026f8:	f7ff f9fc 	bl	8001af4 <zb_zcl_parse_uint16>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d501      	bpl.n	8002704 <??zcl_otacli_parse_image_block_rsp_success_0>
 8002700:	2080      	movs	r0, #128	; 0x80
 8002702:	e047      	b.n	8002794 <??zcl_otacli_parse_image_block_rsp_success_1>

08002704 <??zcl_otacli_parse_image_block_rsp_success_0>:
 8002704:	1cbb      	adds	r3, r7, #2
 8002706:	0032      	movs	r2, r6
 8002708:	0029      	movs	r1, r5
 800270a:	0020      	movs	r0, r4
 800270c:	f7ff f9f2 	bl	8001af4 <zb_zcl_parse_uint16>
 8002710:	2800      	cmp	r0, #0
 8002712:	d501      	bpl.n	8002718 <??zcl_otacli_parse_image_block_rsp_success_2>
 8002714:	2080      	movs	r0, #128	; 0x80
 8002716:	e03d      	b.n	8002794 <??zcl_otacli_parse_image_block_rsp_success_1>

08002718 <??zcl_otacli_parse_image_block_rsp_success_2>:
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	0032      	movs	r2, r6
 800271c:	0029      	movs	r1, r5
 800271e:	0020      	movs	r0, r4
 8002720:	f7ff fa08 	bl	8001b34 <zb_zcl_parse_uint32>
 8002724:	2800      	cmp	r0, #0
 8002726:	d501      	bpl.n	800272c <??zcl_otacli_parse_image_block_rsp_success_3>
 8002728:	2080      	movs	r0, #128	; 0x80
 800272a:	e033      	b.n	8002794 <??zcl_otacli_parse_image_block_rsp_success_1>

0800272c <??zcl_otacli_parse_image_block_rsp_success_3>:
 800272c:	f44f 7984 	mov.w	r9, #264	; 0x108
 8002730:	f05f 0a00 	movs.w	sl, #0
 8002734:	46c3      	mov	fp, r8
 8002736:	4652      	mov	r2, sl
 8002738:	4649      	mov	r1, r9
 800273a:	4658      	mov	r0, fp
 800273c:	f005 f8cc 	bl	80078d8 <__aeabi_memset>
 8002740:	4643      	mov	r3, r8
 8002742:	0032      	movs	r2, r6
 8002744:	0029      	movs	r1, r5
 8002746:	0020      	movs	r0, r4
 8002748:	f7ff f9f4 	bl	8001b34 <zb_zcl_parse_uint32>
 800274c:	2800      	cmp	r0, #0
 800274e:	d501      	bpl.n	8002754 <??zcl_otacli_parse_image_block_rsp_success_4>
 8002750:	2080      	movs	r0, #128	; 0x80
 8002752:	e01f      	b.n	8002794 <??zcl_otacli_parse_image_block_rsp_success_1>

08002754 <??zcl_otacli_parse_image_block_rsp_success_4>:
 8002754:	f118 0304 	adds.w	r3, r8, #4
 8002758:	0032      	movs	r2, r6
 800275a:	0029      	movs	r1, r5
 800275c:	0020      	movs	r0, r4
 800275e:	f7ff f9ad 	bl	8001abc <zb_zcl_parse_uint8>
 8002762:	2800      	cmp	r0, #0
 8002764:	d501      	bpl.n	800276a <??zcl_otacli_parse_image_block_rsp_success_5>
 8002766:	2080      	movs	r0, #128	; 0x80
 8002768:	e014      	b.n	8002794 <??zcl_otacli_parse_image_block_rsp_success_1>

0800276a <??zcl_otacli_parse_image_block_rsp_success_5>:
 800276a:	6830      	ldr	r0, [r6, #0]
 800276c:	f898 1004 	ldrb.w	r1, [r8, #4]
 8002770:	1840      	adds	r0, r0, r1
 8002772:	4285      	cmp	r5, r0
 8002774:	d201      	bcs.n	800277a <??zcl_otacli_parse_image_block_rsp_success_6>
 8002776:	2080      	movs	r0, #128	; 0x80
 8002778:	e00c      	b.n	8002794 <??zcl_otacli_parse_image_block_rsp_success_1>

0800277a <??zcl_otacli_parse_image_block_rsp_success_6>:
 800277a:	f898 9004 	ldrb.w	r9, [r8, #4]
 800277e:	6830      	ldr	r0, [r6, #0]
 8002780:	eb04 0a00 	add.w	sl, r4, r0
 8002784:	f118 0b05 	adds.w	fp, r8, #5
 8002788:	464a      	mov	r2, r9
 800278a:	4651      	mov	r1, sl
 800278c:	4658      	mov	r0, fp
 800278e:	f015 f967 	bl	8017a60 <__aeabi_memcpy>
 8002792:	2000      	movs	r0, #0

08002794 <??zcl_otacli_parse_image_block_rsp_success_1>:
 8002794:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002798 <zcl_otacli_parse_image_block_rsp_wait>:
 8002798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800279c:	0004      	movs	r4, r0
 800279e:	000d      	movs	r5, r1
 80027a0:	0016      	movs	r6, r2
 80027a2:	001f      	movs	r7, r3
 80027a4:	f05f 080c 	movs.w	r8, #12
 80027a8:	f05f 0900 	movs.w	r9, #0
 80027ac:	46ba      	mov	sl, r7
 80027ae:	464a      	mov	r2, r9
 80027b0:	4641      	mov	r1, r8
 80027b2:	4650      	mov	r0, sl
 80027b4:	f005 f890 	bl	80078d8 <__aeabi_memset>
 80027b8:	003b      	movs	r3, r7
 80027ba:	0032      	movs	r2, r6
 80027bc:	0029      	movs	r1, r5
 80027be:	0020      	movs	r0, r4
 80027c0:	f7ff f9b8 	bl	8001b34 <zb_zcl_parse_uint32>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d501      	bpl.n	80027cc <??zcl_otacli_parse_image_block_rsp_wait_0>
 80027c8:	2080      	movs	r0, #128	; 0x80
 80027ca:	e015      	b.n	80027f8 <??zcl_otacli_parse_image_block_rsp_wait_1>

080027cc <??zcl_otacli_parse_image_block_rsp_wait_0>:
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	0032      	movs	r2, r6
 80027d0:	0029      	movs	r1, r5
 80027d2:	0020      	movs	r0, r4
 80027d4:	f7ff f9ae 	bl	8001b34 <zb_zcl_parse_uint32>
 80027d8:	2800      	cmp	r0, #0
 80027da:	d501      	bpl.n	80027e0 <??zcl_otacli_parse_image_block_rsp_wait_2>
 80027dc:	2080      	movs	r0, #128	; 0x80
 80027de:	e00b      	b.n	80027f8 <??zcl_otacli_parse_image_block_rsp_wait_1>

080027e0 <??zcl_otacli_parse_image_block_rsp_wait_2>:
 80027e0:	f117 0308 	adds.w	r3, r7, #8
 80027e4:	0032      	movs	r2, r6
 80027e6:	0029      	movs	r1, r5
 80027e8:	0020      	movs	r0, r4
 80027ea:	f7ff f983 	bl	8001af4 <zb_zcl_parse_uint16>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d501      	bpl.n	80027f6 <??zcl_otacli_parse_image_block_rsp_wait_3>
 80027f2:	2000      	movs	r0, #0
 80027f4:	8138      	strh	r0, [r7, #8]

080027f6 <??zcl_otacli_parse_image_block_rsp_wait_3>:
 80027f6:	2000      	movs	r0, #0

080027f8 <??zcl_otacli_parse_image_block_rsp_wait_1>:
 80027f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080027fc <zcl_otacli_parse_image_block_rsp>:
 80027fc:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002800:	0004      	movs	r4, r0
 8002802:	000d      	movs	r5, r1
 8002804:	0016      	movs	r6, r2
 8002806:	001f      	movs	r7, r3
 8002808:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800280c:	2000      	movs	r0, #0
 800280e:	9002      	str	r0, [sp, #8]
 8002810:	ab01      	add	r3, sp, #4
 8002812:	aa02      	add	r2, sp, #8
 8002814:	0029      	movs	r1, r5
 8002816:	0020      	movs	r0, r4
 8002818:	f7ff f950 	bl	8001abc <zb_zcl_parse_uint8>
 800281c:	2800      	cmp	r0, #0
 800281e:	d501      	bpl.n	8002824 <??zcl_otacli_parse_image_block_rsp_0>
 8002820:	2080      	movs	r0, #128	; 0x80
 8002822:	e035      	b.n	8002890 <??zcl_otacli_parse_image_block_rsp_1>

08002824 <??zcl_otacli_parse_image_block_rsp_0>:
 8002824:	f05f 0908 	movs.w	r9, #8
 8002828:	f05f 0a00 	movs.w	sl, #0
 800282c:	46b3      	mov	fp, r6
 800282e:	4652      	mov	r2, sl
 8002830:	4649      	mov	r1, r9
 8002832:	4658      	mov	r0, fp
 8002834:	f005 f850 	bl	80078d8 <__aeabi_memset>
 8002838:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800283c:	2800      	cmp	r0, #0
 800283e:	d004      	beq.n	800284a <??zcl_otacli_parse_image_block_rsp_2>
 8002840:	2895      	cmp	r0, #149	; 0x95
 8002842:	d01c      	beq.n	800287e <??zcl_otacli_parse_image_block_rsp_3>
 8002844:	2897      	cmp	r0, #151	; 0x97
 8002846:	d00a      	beq.n	800285e <??zcl_otacli_parse_image_block_rsp_4>
 8002848:	e01d      	b.n	8002886 <??zcl_otacli_parse_image_block_rsp_5>

0800284a <??zcl_otacli_parse_image_block_rsp_2>:
 800284a:	9700      	str	r7, [sp, #0]
 800284c:	0033      	movs	r3, r6
 800284e:	aa02      	add	r2, sp, #8
 8002850:	0029      	movs	r1, r5
 8002852:	0020      	movs	r0, r4
 8002854:	f7ff ff3a 	bl	80026cc <zcl_otacli_parse_image_block_rsp_success>
 8002858:	f88d 0004 	strb.w	r0, [sp, #4]
 800285c:	e016      	b.n	800288c <??zcl_otacli_parse_image_block_rsp_6>

0800285e <??zcl_otacli_parse_image_block_rsp_4>:
 800285e:	4643      	mov	r3, r8
 8002860:	aa02      	add	r2, sp, #8
 8002862:	0029      	movs	r1, r5
 8002864:	0020      	movs	r0, r4
 8002866:	f7ff ff97 	bl	8002798 <zcl_otacli_parse_image_block_rsp_wait>
 800286a:	f88d 0004 	strb.w	r0, [sp, #4]
 800286e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002872:	2800      	cmp	r0, #0
 8002874:	d102      	bne.n	800287c <??zcl_otacli_parse_image_block_rsp_7>
 8002876:	2097      	movs	r0, #151	; 0x97
 8002878:	f88d 0004 	strb.w	r0, [sp, #4]

0800287c <??zcl_otacli_parse_image_block_rsp_7>:
 800287c:	e006      	b.n	800288c <??zcl_otacli_parse_image_block_rsp_6>

0800287e <??zcl_otacli_parse_image_block_rsp_3>:
 800287e:	2095      	movs	r0, #149	; 0x95
 8002880:	f88d 0004 	strb.w	r0, [sp, #4]
 8002884:	e002      	b.n	800288c <??zcl_otacli_parse_image_block_rsp_6>

08002886 <??zcl_otacli_parse_image_block_rsp_5>:
 8002886:	2085      	movs	r0, #133	; 0x85
 8002888:	f88d 0004 	strb.w	r0, [sp, #4]

0800288c <??zcl_otacli_parse_image_block_rsp_6>:
 800288c:	f89d 0004 	ldrb.w	r0, [sp, #4]

08002890 <??zcl_otacli_parse_image_block_rsp_1>:
 8002890:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002894 <zcl_otacli_parse_upgrade_end_rsp>:
 8002894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002898:	0004      	movs	r4, r0
 800289a:	000d      	movs	r5, r1
 800289c:	0016      	movs	r6, r2
 800289e:	001f      	movs	r7, r3
 80028a0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80028a4:	2000      	movs	r0, #0
 80028a6:	9000      	str	r0, [sp, #0]
 80028a8:	f05f 0908 	movs.w	r9, #8
 80028ac:	f05f 0a00 	movs.w	sl, #0
 80028b0:	46b3      	mov	fp, r6
 80028b2:	4652      	mov	r2, sl
 80028b4:	4649      	mov	r1, r9
 80028b6:	4658      	mov	r0, fp
 80028b8:	f005 f80e 	bl	80078d8 <__aeabi_memset>
 80028bc:	0033      	movs	r3, r6
 80028be:	466a      	mov	r2, sp
 80028c0:	0029      	movs	r1, r5
 80028c2:	0020      	movs	r0, r4
 80028c4:	f7ff f916 	bl	8001af4 <zb_zcl_parse_uint16>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d501      	bpl.n	80028d0 <??zcl_otacli_parse_upgrade_end_rsp_0>
 80028cc:	2080      	movs	r0, #128	; 0x80
 80028ce:	e028      	b.n	8002922 <??zcl_otacli_parse_upgrade_end_rsp_1>

080028d0 <??zcl_otacli_parse_upgrade_end_rsp_0>:
 80028d0:	1cb3      	adds	r3, r6, #2
 80028d2:	466a      	mov	r2, sp
 80028d4:	0029      	movs	r1, r5
 80028d6:	0020      	movs	r0, r4
 80028d8:	f7ff f90c 	bl	8001af4 <zb_zcl_parse_uint16>
 80028dc:	2800      	cmp	r0, #0
 80028de:	d501      	bpl.n	80028e4 <??zcl_otacli_parse_upgrade_end_rsp_2>
 80028e0:	2080      	movs	r0, #128	; 0x80
 80028e2:	e01e      	b.n	8002922 <??zcl_otacli_parse_upgrade_end_rsp_1>

080028e4 <??zcl_otacli_parse_upgrade_end_rsp_2>:
 80028e4:	1d33      	adds	r3, r6, #4
 80028e6:	466a      	mov	r2, sp
 80028e8:	0029      	movs	r1, r5
 80028ea:	0020      	movs	r0, r4
 80028ec:	f7ff f922 	bl	8001b34 <zb_zcl_parse_uint32>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d501      	bpl.n	80028f8 <??zcl_otacli_parse_upgrade_end_rsp_3>
 80028f4:	2080      	movs	r0, #128	; 0x80
 80028f6:	e014      	b.n	8002922 <??zcl_otacli_parse_upgrade_end_rsp_1>

080028f8 <??zcl_otacli_parse_upgrade_end_rsp_3>:
 80028f8:	003b      	movs	r3, r7
 80028fa:	466a      	mov	r2, sp
 80028fc:	0029      	movs	r1, r5
 80028fe:	0020      	movs	r0, r4
 8002900:	f7ff f918 	bl	8001b34 <zb_zcl_parse_uint32>
 8002904:	2800      	cmp	r0, #0
 8002906:	d501      	bpl.n	800290c <??zcl_otacli_parse_upgrade_end_rsp_4>
 8002908:	2080      	movs	r0, #128	; 0x80
 800290a:	e00a      	b.n	8002922 <??zcl_otacli_parse_upgrade_end_rsp_1>

0800290c <??zcl_otacli_parse_upgrade_end_rsp_4>:
 800290c:	4643      	mov	r3, r8
 800290e:	466a      	mov	r2, sp
 8002910:	0029      	movs	r1, r5
 8002912:	0020      	movs	r0, r4
 8002914:	f7ff f90e 	bl	8001b34 <zb_zcl_parse_uint32>
 8002918:	2800      	cmp	r0, #0
 800291a:	d501      	bpl.n	8002920 <??zcl_otacli_parse_upgrade_end_rsp_5>
 800291c:	2080      	movs	r0, #128	; 0x80
 800291e:	e000      	b.n	8002922 <??zcl_otacli_parse_upgrade_end_rsp_1>

08002920 <??zcl_otacli_parse_upgrade_end_rsp_5>:
 8002920:	2000      	movs	r0, #0

08002922 <??zcl_otacli_parse_upgrade_end_rsp_1>:
 8002922:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002926 <zcl_otacli_parse_image_notify_req>:
 8002926:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800292a:	0005      	movs	r5, r0
 800292c:	000e      	movs	r6, r1
 800292e:	0017      	movs	r7, r2
 8002930:	4698      	mov	r8, r3
 8002932:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002934:	2000      	movs	r0, #0
 8002936:	9000      	str	r0, [sp, #0]
 8002938:	2c00      	cmp	r4, #0
 800293a:	d046      	beq.n	80029ca <??zcl_otacli_parse_image_notify_req_0>
 800293c:	f05f 0908 	movs.w	r9, #8
 8002940:	f05f 0a00 	movs.w	sl, #0
 8002944:	46a3      	mov	fp, r4
 8002946:	4652      	mov	r2, sl
 8002948:	4649      	mov	r1, r9
 800294a:	4658      	mov	r0, fp
 800294c:	f004 ffc4 	bl	80078d8 <__aeabi_memset>
 8002950:	003b      	movs	r3, r7
 8002952:	466a      	mov	r2, sp
 8002954:	0031      	movs	r1, r6
 8002956:	0028      	movs	r0, r5
 8002958:	f7ff f8b0 	bl	8001abc <zb_zcl_parse_uint8>
 800295c:	2800      	cmp	r0, #0
 800295e:	d501      	bpl.n	8002964 <??zcl_otacli_parse_image_notify_req_1>
 8002960:	2080      	movs	r0, #128	; 0x80
 8002962:	e033      	b.n	80029cc <??zcl_otacli_parse_image_notify_req_2>

08002964 <??zcl_otacli_parse_image_notify_req_1>:
 8002964:	4643      	mov	r3, r8
 8002966:	466a      	mov	r2, sp
 8002968:	0031      	movs	r1, r6
 800296a:	0028      	movs	r0, r5
 800296c:	f7ff f8a6 	bl	8001abc <zb_zcl_parse_uint8>
 8002970:	2800      	cmp	r0, #0
 8002972:	d501      	bpl.n	8002978 <??zcl_otacli_parse_image_notify_req_3>
 8002974:	2080      	movs	r0, #128	; 0x80
 8002976:	e029      	b.n	80029cc <??zcl_otacli_parse_image_notify_req_2>

08002978 <??zcl_otacli_parse_image_notify_req_3>:
 8002978:	7838      	ldrb	r0, [r7, #0]
 800297a:	2800      	cmp	r0, #0
 800297c:	d009      	beq.n	8002992 <??zcl_otacli_parse_image_notify_req_4>
 800297e:	0023      	movs	r3, r4
 8002980:	466a      	mov	r2, sp
 8002982:	0031      	movs	r1, r6
 8002984:	0028      	movs	r0, r5
 8002986:	f7ff f8b5 	bl	8001af4 <zb_zcl_parse_uint16>
 800298a:	2800      	cmp	r0, #0
 800298c:	d501      	bpl.n	8002992 <??zcl_otacli_parse_image_notify_req_4>
 800298e:	2080      	movs	r0, #128	; 0x80
 8002990:	e01c      	b.n	80029cc <??zcl_otacli_parse_image_notify_req_2>

08002992 <??zcl_otacli_parse_image_notify_req_4>:
 8002992:	7838      	ldrb	r0, [r7, #0]
 8002994:	2802      	cmp	r0, #2
 8002996:	db09      	blt.n	80029ac <??zcl_otacli_parse_image_notify_req_5>
 8002998:	1ca3      	adds	r3, r4, #2
 800299a:	466a      	mov	r2, sp
 800299c:	0031      	movs	r1, r6
 800299e:	0028      	movs	r0, r5
 80029a0:	f7ff f8a8 	bl	8001af4 <zb_zcl_parse_uint16>
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d501      	bpl.n	80029ac <??zcl_otacli_parse_image_notify_req_5>
 80029a8:	2080      	movs	r0, #128	; 0x80
 80029aa:	e00f      	b.n	80029cc <??zcl_otacli_parse_image_notify_req_2>

080029ac <??zcl_otacli_parse_image_notify_req_5>:
 80029ac:	7838      	ldrb	r0, [r7, #0]
 80029ae:	2803      	cmp	r0, #3
 80029b0:	db09      	blt.n	80029c6 <??zcl_otacli_parse_image_notify_req_6>
 80029b2:	1d23      	adds	r3, r4, #4
 80029b4:	466a      	mov	r2, sp
 80029b6:	0031      	movs	r1, r6
 80029b8:	0028      	movs	r0, r5
 80029ba:	f7ff f8bb 	bl	8001b34 <zb_zcl_parse_uint32>
 80029be:	2800      	cmp	r0, #0
 80029c0:	d501      	bpl.n	80029c6 <??zcl_otacli_parse_image_notify_req_6>
 80029c2:	2080      	movs	r0, #128	; 0x80
 80029c4:	e002      	b.n	80029cc <??zcl_otacli_parse_image_notify_req_2>

080029c6 <??zcl_otacli_parse_image_notify_req_6>:
 80029c6:	2000      	movs	r0, #0
 80029c8:	e000      	b.n	80029cc <??zcl_otacli_parse_image_notify_req_2>

080029ca <??zcl_otacli_parse_image_notify_req_0>:
 80029ca:	2089      	movs	r0, #137	; 0x89

080029cc <??zcl_otacli_parse_image_notify_req_2>:
 80029cc:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080029d0 <ZbZclOtaHeaderParse>:
 80029d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029d4:	0004      	movs	r4, r0
 80029d6:	000d      	movs	r5, r1
 80029d8:	0016      	movs	r6, r2
 80029da:	2000      	movs	r0, #0
 80029dc:	9000      	str	r0, [sp, #0]
 80029de:	2750      	movs	r7, #80	; 0x50
 80029e0:	f05f 0800 	movs.w	r8, #0
 80029e4:	46b1      	mov	r9, r6
 80029e6:	4642      	mov	r2, r8
 80029e8:	0039      	movs	r1, r7
 80029ea:	4648      	mov	r0, r9
 80029ec:	f004 ff74 	bl	80078d8 <__aeabi_memset>
 80029f0:	0033      	movs	r3, r6
 80029f2:	466a      	mov	r2, sp
 80029f4:	0029      	movs	r1, r5
 80029f6:	b2c9      	uxtb	r1, r1
 80029f8:	0020      	movs	r0, r4
 80029fa:	f7ff f89b 	bl	8001b34 <zb_zcl_parse_uint32>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d501      	bpl.n	8002a06 <??ZbZclOtaHeaderParse_0>
 8002a02:	2000      	movs	r0, #0
 8002a04:	e0c2      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002a06 <??ZbZclOtaHeaderParse_0>:
 8002a06:	6830      	ldr	r0, [r6, #0]
 8002a08:	f8df 1bc0 	ldr.w	r1, [pc, #3008]	; 80035cc <??DataTable9>
 8002a0c:	4288      	cmp	r0, r1
 8002a0e:	d001      	beq.n	8002a14 <??ZbZclOtaHeaderParse_2>
 8002a10:	2000      	movs	r0, #0
 8002a12:	e0bb      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002a14 <??ZbZclOtaHeaderParse_2>:
 8002a14:	1d33      	adds	r3, r6, #4
 8002a16:	466a      	mov	r2, sp
 8002a18:	0029      	movs	r1, r5
 8002a1a:	b2c9      	uxtb	r1, r1
 8002a1c:	0020      	movs	r0, r4
 8002a1e:	f7ff f869 	bl	8001af4 <zb_zcl_parse_uint16>
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d502      	bpl.n	8002a2c <??ZbZclOtaHeaderParse_3>
 8002a26:	9800      	ldr	r0, [sp, #0]
 8002a28:	b2c0      	uxtb	r0, r0
 8002a2a:	e0af      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002a2c <??ZbZclOtaHeaderParse_3>:
 8002a2c:	1db3      	adds	r3, r6, #6
 8002a2e:	466a      	mov	r2, sp
 8002a30:	0029      	movs	r1, r5
 8002a32:	b2c9      	uxtb	r1, r1
 8002a34:	0020      	movs	r0, r4
 8002a36:	f7ff f85d 	bl	8001af4 <zb_zcl_parse_uint16>
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	d502      	bpl.n	8002a44 <??ZbZclOtaHeaderParse_4>
 8002a3e:	9800      	ldr	r0, [sp, #0]
 8002a40:	b2c0      	uxtb	r0, r0
 8002a42:	e0a3      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002a44 <??ZbZclOtaHeaderParse_4>:
 8002a44:	f116 0308 	adds.w	r3, r6, #8
 8002a48:	466a      	mov	r2, sp
 8002a4a:	0029      	movs	r1, r5
 8002a4c:	b2c9      	uxtb	r1, r1
 8002a4e:	0020      	movs	r0, r4
 8002a50:	f7ff f850 	bl	8001af4 <zb_zcl_parse_uint16>
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d502      	bpl.n	8002a5e <??ZbZclOtaHeaderParse_5>
 8002a58:	9800      	ldr	r0, [sp, #0]
 8002a5a:	b2c0      	uxtb	r0, r0
 8002a5c:	e096      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002a5e <??ZbZclOtaHeaderParse_5>:
 8002a5e:	f116 030a 	adds.w	r3, r6, #10
 8002a62:	466a      	mov	r2, sp
 8002a64:	0029      	movs	r1, r5
 8002a66:	b2c9      	uxtb	r1, r1
 8002a68:	0020      	movs	r0, r4
 8002a6a:	f7ff f843 	bl	8001af4 <zb_zcl_parse_uint16>
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d502      	bpl.n	8002a78 <??ZbZclOtaHeaderParse_6>
 8002a72:	9800      	ldr	r0, [sp, #0]
 8002a74:	b2c0      	uxtb	r0, r0
 8002a76:	e089      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002a78 <??ZbZclOtaHeaderParse_6>:
 8002a78:	f116 030c 	adds.w	r3, r6, #12
 8002a7c:	466a      	mov	r2, sp
 8002a7e:	0029      	movs	r1, r5
 8002a80:	b2c9      	uxtb	r1, r1
 8002a82:	0020      	movs	r0, r4
 8002a84:	f7ff f836 	bl	8001af4 <zb_zcl_parse_uint16>
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	d502      	bpl.n	8002a92 <??ZbZclOtaHeaderParse_7>
 8002a8c:	9800      	ldr	r0, [sp, #0]
 8002a8e:	b2c0      	uxtb	r0, r0
 8002a90:	e07c      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002a92 <??ZbZclOtaHeaderParse_7>:
 8002a92:	f116 0310 	adds.w	r3, r6, #16
 8002a96:	466a      	mov	r2, sp
 8002a98:	0029      	movs	r1, r5
 8002a9a:	b2c9      	uxtb	r1, r1
 8002a9c:	0020      	movs	r0, r4
 8002a9e:	f7ff f849 	bl	8001b34 <zb_zcl_parse_uint32>
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d502      	bpl.n	8002aac <??ZbZclOtaHeaderParse_8>
 8002aa6:	9800      	ldr	r0, [sp, #0]
 8002aa8:	b2c0      	uxtb	r0, r0
 8002aaa:	e06f      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002aac <??ZbZclOtaHeaderParse_8>:
 8002aac:	f116 0314 	adds.w	r3, r6, #20
 8002ab0:	466a      	mov	r2, sp
 8002ab2:	0029      	movs	r1, r5
 8002ab4:	b2c9      	uxtb	r1, r1
 8002ab6:	0020      	movs	r0, r4
 8002ab8:	f7ff f81c 	bl	8001af4 <zb_zcl_parse_uint16>
 8002abc:	2800      	cmp	r0, #0
 8002abe:	d502      	bpl.n	8002ac6 <??ZbZclOtaHeaderParse_9>
 8002ac0:	9800      	ldr	r0, [sp, #0]
 8002ac2:	b2c0      	uxtb	r0, r0
 8002ac4:	e062      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002ac6 <??ZbZclOtaHeaderParse_9>:
 8002ac6:	0028      	movs	r0, r5
 8002ac8:	b2c0      	uxtb	r0, r0
 8002aca:	9900      	ldr	r1, [sp, #0]
 8002acc:	3120      	adds	r1, #32
 8002ace:	4288      	cmp	r0, r1
 8002ad0:	d202      	bcs.n	8002ad8 <??ZbZclOtaHeaderParse_10>
 8002ad2:	9800      	ldr	r0, [sp, #0]
 8002ad4:	b2c0      	uxtb	r0, r0
 8002ad6:	e059      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002ad8 <??ZbZclOtaHeaderParse_10>:
 8002ad8:	2720      	movs	r7, #32
 8002ada:	9800      	ldr	r0, [sp, #0]
 8002adc:	eb04 0800 	add.w	r8, r4, r0
 8002ae0:	f116 0916 	adds.w	r9, r6, #22
 8002ae4:	003a      	movs	r2, r7
 8002ae6:	4641      	mov	r1, r8
 8002ae8:	4648      	mov	r0, r9
 8002aea:	f014 ffb9 	bl	8017a60 <__aeabi_memcpy>
 8002aee:	9800      	ldr	r0, [sp, #0]
 8002af0:	3020      	adds	r0, #32
 8002af2:	9000      	str	r0, [sp, #0]
 8002af4:	f116 0338 	adds.w	r3, r6, #56	; 0x38
 8002af8:	466a      	mov	r2, sp
 8002afa:	0029      	movs	r1, r5
 8002afc:	b2c9      	uxtb	r1, r1
 8002afe:	0020      	movs	r0, r4
 8002b00:	f7ff f818 	bl	8001b34 <zb_zcl_parse_uint32>
 8002b04:	2800      	cmp	r0, #0
 8002b06:	d502      	bpl.n	8002b0e <??ZbZclOtaHeaderParse_11>
 8002b08:	9800      	ldr	r0, [sp, #0]
 8002b0a:	b2c0      	uxtb	r0, r0
 8002b0c:	e03e      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002b0e <??ZbZclOtaHeaderParse_11>:
 8002b0e:	7a30      	ldrb	r0, [r6, #8]
 8002b10:	07c0      	lsls	r0, r0, #31
 8002b12:	d50c      	bpl.n	8002b2e <??ZbZclOtaHeaderParse_12>
 8002b14:	f116 033c 	adds.w	r3, r6, #60	; 0x3c
 8002b18:	466a      	mov	r2, sp
 8002b1a:	0029      	movs	r1, r5
 8002b1c:	b2c9      	uxtb	r1, r1
 8002b1e:	0020      	movs	r0, r4
 8002b20:	f7fe ffcc 	bl	8001abc <zb_zcl_parse_uint8>
 8002b24:	2800      	cmp	r0, #0
 8002b26:	d502      	bpl.n	8002b2e <??ZbZclOtaHeaderParse_12>
 8002b28:	9800      	ldr	r0, [sp, #0]
 8002b2a:	b2c0      	uxtb	r0, r0
 8002b2c:	e02e      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002b2e <??ZbZclOtaHeaderParse_12>:
 8002b2e:	7a30      	ldrb	r0, [r6, #8]
 8002b30:	0780      	lsls	r0, r0, #30
 8002b32:	d50c      	bpl.n	8002b4e <??ZbZclOtaHeaderParse_13>
 8002b34:	f116 0340 	adds.w	r3, r6, #64	; 0x40
 8002b38:	466a      	mov	r2, sp
 8002b3a:	0029      	movs	r1, r5
 8002b3c:	b2c9      	uxtb	r1, r1
 8002b3e:	0020      	movs	r0, r4
 8002b40:	f7ff f818 	bl	8001b74 <zb_zcl_parse_uint64>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d502      	bpl.n	8002b4e <??ZbZclOtaHeaderParse_13>
 8002b48:	9800      	ldr	r0, [sp, #0]
 8002b4a:	b2c0      	uxtb	r0, r0
 8002b4c:	e01e      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002b4e <??ZbZclOtaHeaderParse_13>:
 8002b4e:	7a30      	ldrb	r0, [r6, #8]
 8002b50:	0740      	lsls	r0, r0, #29
 8002b52:	d519      	bpl.n	8002b88 <??ZbZclOtaHeaderParse_14>
 8002b54:	f116 0348 	adds.w	r3, r6, #72	; 0x48
 8002b58:	466a      	mov	r2, sp
 8002b5a:	0029      	movs	r1, r5
 8002b5c:	b2c9      	uxtb	r1, r1
 8002b5e:	0020      	movs	r0, r4
 8002b60:	f7fe ffc8 	bl	8001af4 <zb_zcl_parse_uint16>
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d502      	bpl.n	8002b6e <??ZbZclOtaHeaderParse_15>
 8002b68:	9800      	ldr	r0, [sp, #0]
 8002b6a:	b2c0      	uxtb	r0, r0
 8002b6c:	e00e      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002b6e <??ZbZclOtaHeaderParse_15>:
 8002b6e:	f116 034a 	adds.w	r3, r6, #74	; 0x4a
 8002b72:	466a      	mov	r2, sp
 8002b74:	0029      	movs	r1, r5
 8002b76:	b2c9      	uxtb	r1, r1
 8002b78:	0020      	movs	r0, r4
 8002b7a:	f7fe ffbb 	bl	8001af4 <zb_zcl_parse_uint16>
 8002b7e:	2800      	cmp	r0, #0
 8002b80:	d502      	bpl.n	8002b88 <??ZbZclOtaHeaderParse_14>
 8002b82:	9800      	ldr	r0, [sp, #0]
 8002b84:	b2c0      	uxtb	r0, r0
 8002b86:	e001      	b.n	8002b8c <??ZbZclOtaHeaderParse_1>

08002b88 <??ZbZclOtaHeaderParse_14>:
 8002b88:	9800      	ldr	r0, [sp, #0]
 8002b8a:	b2c0      	uxtb	r0, r0

08002b8c <??ZbZclOtaHeaderParse_1>:
 8002b8c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08002b90 <??DataTable7>:
 8002b90:	2249 0800                                   I"..

08002b94 <??DataTable7_1>:
 8002b94:	22f3 0800                                   ."..

08002b98 <zcl_ota_header_print>:
 8002b98:	4770      	bx	lr

08002b9a <zcl_ota_image_def_print>:
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d1ff      	bne.n	8002b9e <??zcl_ota_image_def_print_0>

08002b9e <??zcl_ota_image_def_print_0>:
 8002b9e:	4770      	bx	lr

08002ba0 <zcl_otacli_abort_download>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	0004      	movs	r4, r0
 8002ba4:	000d      	movs	r5, r1
 8002ba6:	68a6      	ldr	r6, [r4, #8]
 8002ba8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002baa:	0029      	movs	r1, r5
 8002bac:	b2c9      	uxtb	r1, r1
 8002bae:	0020      	movs	r0, r4
 8002bb0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002bb4:	4798      	blx	r3
 8002bb6:	0007      	movs	r7, r0
 8002bb8:	0038      	movs	r0, r7
 8002bba:	b2c0      	uxtb	r0, r0
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d00d      	beq.n	8002bdc <??zcl_otacli_abort_download_0>
 8002bc0:	0030      	movs	r0, r6
 8002bc2:	f012 f85a 	bl	8014c7a <ZbZclUptime>
 8002bc6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002bc8:	1808      	adds	r0, r1, r0
 8002bca:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f884 01fc 	strb.w	r0, [r4, #508]	; 0x1fc
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f884 01ee 	strb.w	r0, [r4, #494]	; 0x1ee
 8002bda:	e005      	b.n	8002be8 <??zcl_otacli_abort_download_1>

08002bdc <??zcl_otacli_abort_download_0>:
 8002bdc:	0020      	movs	r0, r4
 8002bde:	f7ff f967 	bl	8001eb0 <zcl_otacli_reset_cluster>
 8002be2:	2000      	movs	r0, #0
 8002be4:	f884 01fc 	strb.w	r0, [r4, #508]	; 0x1fc

08002be8 <??zcl_otacli_abort_download_1>:
 8002be8:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08002bea <zcl_otacli_raw_write_skip_sig>:
 8002bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bee:	0004      	movs	r4, r0
 8002bf0:	000d      	movs	r5, r1
 8002bf2:	0016      	movs	r6, r2
 8002bf4:	f8d4 01f4 	ldr.w	r0, [r4, #500]	; 0x1f4
 8002bf8:	f8d4 71f8 	ldr.w	r7, [r4, #504]	; 0x1f8
 8002bfc:	1bc7      	subs	r7, r0, r7
 8002bfe:	0028      	movs	r0, r5
 8002c00:	b280      	uxth	r0, r0
 8002c02:	2801      	cmp	r0, #1
 8002c04:	d003      	beq.n	8002c0e <??zcl_otacli_raw_write_skip_sig_0>
 8002c06:	2803      	cmp	r0, #3
 8002c08:	d00e      	beq.n	8002c28 <??zcl_otacli_raw_write_skip_sig_1>
 8002c0a:	2805      	cmp	r0, #5
 8002c0c:	d10d      	bne.n	8002c2a <??zcl_otacli_raw_write_skip_sig_2>

08002c0e <??zcl_otacli_raw_write_skip_sig_0>:
 8002c0e:	2f08      	cmp	r7, #8
 8002c10:	d21b      	bcs.n	8002c4a <??zcl_otacli_raw_write_skip_sig_3>

08002c12 <??zcl_otacli_raw_write_skip_sig_4>:
 8002c12:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
 8002c16:	1838      	adds	r0, r7, r0
 8002c18:	2809      	cmp	r0, #9
 8002c1a:	d302      	bcc.n	8002c22 <??zcl_otacli_raw_write_skip_sig_5>
 8002c1c:	f1d7 0808 	rsbs	r8, r7, #8
 8002c20:	e001      	b.n	8002c26 <??zcl_otacli_raw_write_skip_sig_6>

08002c22 <??zcl_otacli_raw_write_skip_sig_5>:
 8002c22:	f8b4 81ea 	ldrh.w	r8, [r4, #490]	; 0x1ea

08002c26 <??zcl_otacli_raw_write_skip_sig_6>:
 8002c26:	e003      	b.n	8002c30 <??zcl_otacli_raw_write_skip_sig_7>

08002c28 <??zcl_otacli_raw_write_skip_sig_1>:
 8002c28:	e00f      	b.n	8002c4a <??zcl_otacli_raw_write_skip_sig_3>

08002c2a <??zcl_otacli_raw_write_skip_sig_2>:
 8002c2a:	46b0      	mov	r8, r6
 8002c2c:	fa1f f888 	uxth.w	r8, r8

08002c30 <??zcl_otacli_raw_write_skip_sig_7>:
 8002c30:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d008      	beq.n	8002c4a <??zcl_otacli_raw_write_skip_sig_3>
 8002c38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c3a:	f204 1287 	addw	r2, r4, #391	; 0x187
 8002c3e:	4641      	mov	r1, r8
 8002c40:	b2c9      	uxtb	r1, r1
 8002c42:	0020      	movs	r0, r4
 8002c44:	f8d4 c0e8 	ldr.w	ip, [r4, #232]	; 0xe8
 8002c48:	47e0      	blx	ip

08002c4a <??zcl_otacli_raw_write_skip_sig_3>:
 8002c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c4e <zcl_otacli_remove_from_cache>:
 8002c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c52:	0004      	movs	r4, r0
 8002c54:	000d      	movs	r5, r1
 8002c56:	f8b4 61ea 	ldrh.w	r6, [r4, #490]	; 0x1ea
 8002c5a:	1b76      	subs	r6, r6, r5
 8002c5c:	eb04 0005 	add.w	r0, r4, r5
 8002c60:	f200 1787 	addw	r7, r0, #391	; 0x187
 8002c64:	f204 1887 	addw	r8, r4, #391	; 0x187
 8002c68:	0032      	movs	r2, r6
 8002c6a:	0039      	movs	r1, r7
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	f004 fe16 	bl	800789e <__aeabi_memmove>
 8002c72:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
 8002c76:	1b40      	subs	r0, r0, r5
 8002c78:	f8a4 01ea 	strh.w	r0, [r4, #490]	; 0x1ea
 8002c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c80 <zcl_otacli_process_block_data>:
 8002c80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002c84:	0006      	movs	r6, r0
 8002c86:	68b7      	ldr	r7, [r6, #8]
 8002c88:	f896 0186 	ldrb.w	r0, [r6, #390]	; 0x186
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d049      	beq.n	8002d24 <??zcl_otacli_process_block_data_0>
 8002c90:	f516 7298 	adds.w	r2, r6, #304	; 0x130
 8002c94:	f8b6 11ea 	ldrh.w	r1, [r6, #490]	; 0x1ea
 8002c98:	b2c9      	uxtb	r1, r1
 8002c9a:	f206 1087 	addw	r0, r6, #391	; 0x187
 8002c9e:	f7ff fe97 	bl	80029d0 <ZbZclOtaHeaderParse>
 8002ca2:	0004      	movs	r4, r0
 8002ca4:	0020      	movs	r0, r4
 8002ca6:	b2c0      	uxtb	r0, r0
 8002ca8:	f8b6 1136 	ldrh.w	r1, [r6, #310]	; 0x136
 8002cac:	b280      	uxth	r0, r0
 8002cae:	4288      	cmp	r0, r1
 8002cb0:	d201      	bcs.n	8002cb6 <??zcl_otacli_process_block_data_1>
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	e10b      	b.n	8002ece <??zcl_otacli_process_block_data_2>

08002cb6 <??zcl_otacli_process_block_data_1>:
 8002cb6:	f8b6 0136 	ldrh.w	r0, [r6, #310]	; 0x136
 8002cba:	0021      	movs	r1, r4
 8002cbc:	b2c9      	uxtb	r1, r1
 8002cbe:	b289      	uxth	r1, r1
 8002cc0:	4288      	cmp	r0, r1
 8002cc2:	d201      	bcs.n	8002cc8 <??zcl_otacli_process_block_data_3>
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	e102      	b.n	8002ece <??zcl_otacli_process_block_data_2>

08002cc8 <??zcl_otacli_process_block_data_3>:
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f886 0186 	strb.w	r0, [r6, #390]	; 0x186
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f886 01ef 	strb.w	r0, [r6, #495]	; 0x1ef
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f8c6 01f8 	str.w	r0, [r6, #504]	; 0x1f8
 8002cda:	f516 7198 	adds.w	r1, r6, #304	; 0x130
 8002cde:	0038      	movs	r0, r7
 8002ce0:	f7ff ff5a 	bl	8002b98 <zcl_ota_header_print>
 8002ce4:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d008      	beq.n	8002cfe <??zcl_otacli_process_block_data_4>
 8002cec:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002cee:	f206 1287 	addw	r2, r6, #391	; 0x187
 8002cf2:	0021      	movs	r1, r4
 8002cf4:	b2c9      	uxtb	r1, r1
 8002cf6:	0030      	movs	r0, r6
 8002cf8:	f8d6 c0e8 	ldr.w	ip, [r6, #232]	; 0xe8
 8002cfc:	47e0      	blx	ip

08002cfe <??zcl_otacli_process_block_data_4>:
 8002cfe:	f8b6 01ea 	ldrh.w	r0, [r6, #490]	; 0x1ea
 8002d02:	f8b6 1136 	ldrh.w	r1, [r6, #310]	; 0x136
 8002d06:	4288      	cmp	r0, r1
 8002d08:	d104      	bne.n	8002d14 <??zcl_otacli_process_block_data_5>
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f8a6 01ea 	strh.w	r0, [r6, #490]	; 0x1ea
 8002d10:	2000      	movs	r0, #0
 8002d12:	e0dc      	b.n	8002ece <??zcl_otacli_process_block_data_2>

08002d14 <??zcl_otacli_process_block_data_5>:
 8002d14:	0021      	movs	r1, r4
 8002d16:	b2c9      	uxtb	r1, r1
 8002d18:	0030      	movs	r0, r6
 8002d1a:	f7ff ff98 	bl	8002c4e <zcl_otacli_remove_from_cache>
 8002d1e:	2006      	movs	r0, #6
 8002d20:	f8a6 01ec 	strh.w	r0, [r6, #492]	; 0x1ec

08002d24 <??zcl_otacli_process_block_data_0>:
 8002d24:	f896 01ef 	ldrb.w	r0, [r6, #495]	; 0x1ef
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d127      	bne.n	8002d7c <??zcl_otacli_process_block_data_6>
 8002d2c:	f8b6 01ea 	ldrh.w	r0, [r6, #490]	; 0x1ea
 8002d30:	2803      	cmp	r0, #3
 8002d32:	db21      	blt.n	8002d78 <??zcl_otacli_process_block_data_7>
 8002d34:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
 8002d38:	2800      	cmp	r0, #0
 8002d3a:	d007      	beq.n	8002d4c <??zcl_otacli_process_block_data_8>
 8002d3c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002d3e:	f206 1287 	addw	r2, r6, #391	; 0x187
 8002d42:	2102      	movs	r1, #2
 8002d44:	0030      	movs	r0, r6
 8002d46:	f8d6 c0e8 	ldr.w	ip, [r6, #232]	; 0xe8
 8002d4a:	47e0      	blx	ip

08002d4c <??zcl_otacli_process_block_data_8>:
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	9003      	str	r0, [sp, #12]
 8002d50:	f516 73f8 	adds.w	r3, r6, #496	; 0x1f0
 8002d54:	aa03      	add	r2, sp, #12
 8002d56:	f8b6 11ea 	ldrh.w	r1, [r6, #490]	; 0x1ea
 8002d5a:	f206 1087 	addw	r0, r6, #391	; 0x187
 8002d5e:	f7fe fec9 	bl	8001af4 <zb_zcl_parse_uint16>
 8002d62:	2102      	movs	r1, #2
 8002d64:	0030      	movs	r0, r6
 8002d66:	f7ff ff72 	bl	8002c4e <zcl_otacli_remove_from_cache>
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f886 01ef 	strb.w	r0, [r6, #495]	; 0x1ef
 8002d70:	2000      	movs	r0, #0
 8002d72:	f8c6 01f8 	str.w	r0, [r6, #504]	; 0x1f8
 8002d76:	e001      	b.n	8002d7c <??zcl_otacli_process_block_data_6>

08002d78 <??zcl_otacli_process_block_data_7>:
 8002d78:	2000      	movs	r0, #0
 8002d7a:	e0a8      	b.n	8002ece <??zcl_otacli_process_block_data_2>

08002d7c <??zcl_otacli_process_block_data_6>:
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	9003      	str	r0, [sp, #12]
 8002d80:	f8d6 01f8 	ldr.w	r0, [r6, #504]	; 0x1f8
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d128      	bne.n	8002dda <??zcl_otacli_process_block_data_9>
 8002d88:	f8b6 01ea 	ldrh.w	r0, [r6, #490]	; 0x1ea
 8002d8c:	2805      	cmp	r0, #5
 8002d8e:	db22      	blt.n	8002dd6 <??zcl_otacli_process_block_data_10>
 8002d90:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
 8002d94:	2800      	cmp	r0, #0
 8002d96:	d007      	beq.n	8002da8 <??zcl_otacli_process_block_data_11>
 8002d98:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002d9a:	f206 1287 	addw	r2, r6, #391	; 0x187
 8002d9e:	2104      	movs	r1, #4
 8002da0:	0030      	movs	r0, r6
 8002da2:	f8d6 c0e8 	ldr.w	ip, [r6, #232]	; 0xe8
 8002da6:	47e0      	blx	ip

08002da8 <??zcl_otacli_process_block_data_11>:
 8002da8:	2000      	movs	r0, #0
 8002daa:	9003      	str	r0, [sp, #12]
 8002dac:	f516 73fa 	adds.w	r3, r6, #500	; 0x1f4
 8002db0:	aa03      	add	r2, sp, #12
 8002db2:	f8b6 11ea 	ldrh.w	r1, [r6, #490]	; 0x1ea
 8002db6:	f206 1087 	addw	r0, r6, #391	; 0x187
 8002dba:	f7fe febb 	bl	8001b34 <zb_zcl_parse_uint32>
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f8a6 01ec 	strh.w	r0, [r6, #492]	; 0x1ec
 8002dc4:	f8d6 01f4 	ldr.w	r0, [r6, #500]	; 0x1f4
 8002dc8:	f8c6 01f8 	str.w	r0, [r6, #504]	; 0x1f8
 8002dcc:	2104      	movs	r1, #4
 8002dce:	0030      	movs	r0, r6
 8002dd0:	f7ff ff3d 	bl	8002c4e <zcl_otacli_remove_from_cache>
 8002dd4:	e001      	b.n	8002dda <??zcl_otacli_process_block_data_9>

08002dd6 <??zcl_otacli_process_block_data_10>:
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	e079      	b.n	8002ece <??zcl_otacli_process_block_data_2>

08002dda <??zcl_otacli_process_block_data_9>:
 8002dda:	f8b6 01ea 	ldrh.w	r0, [r6, #490]	; 0x1ea
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d101      	bne.n	8002de6 <??zcl_otacli_process_block_data_12>
 8002de2:	2000      	movs	r0, #0
 8002de4:	e073      	b.n	8002ece <??zcl_otacli_process_block_data_2>

08002de6 <??zcl_otacli_process_block_data_12>:
 8002de6:	f8b6 01ea 	ldrh.w	r0, [r6, #490]	; 0x1ea
 8002dea:	f8d6 11f8 	ldr.w	r1, [r6, #504]	; 0x1f8
 8002dee:	4288      	cmp	r0, r1
 8002df0:	d230      	bcs.n	8002e54 <??zcl_otacli_process_block_data_13>
 8002df2:	f8b6 21ea 	ldrh.w	r2, [r6, #490]	; 0x1ea
 8002df6:	f8b6 11f0 	ldrh.w	r1, [r6, #496]	; 0x1f0
 8002dfa:	0030      	movs	r0, r6
 8002dfc:	f7ff fef5 	bl	8002bea <zcl_otacli_raw_write_skip_sig>
 8002e00:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
 8002e04:	2800      	cmp	r0, #0
 8002e06:	d014      	beq.n	8002e32 <??zcl_otacli_process_block_data_14>
 8002e08:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8002e0a:	9002      	str	r0, [sp, #8]
 8002e0c:	f206 1087 	addw	r0, r6, #391	; 0x187
 8002e10:	9001      	str	r0, [sp, #4]
 8002e12:	f8b6 01ea 	ldrh.w	r0, [r6, #490]	; 0x1ea
 8002e16:	b2c0      	uxtb	r0, r0
 8002e18:	9000      	str	r0, [sp, #0]
 8002e1a:	f8d6 31f4 	ldr.w	r3, [r6, #500]	; 0x1f4
 8002e1e:	f8b6 21f0 	ldrh.w	r2, [r6, #496]	; 0x1f0
 8002e22:	f516 7198 	adds.w	r1, r6, #304	; 0x130
 8002e26:	0030      	movs	r0, r6
 8002e28:	f8d6 c0ec 	ldr.w	ip, [r6, #236]	; 0xec
 8002e2c:	47e0      	blx	ip
 8002e2e:	4680      	mov	r8, r0
 8002e30:	e001      	b.n	8002e36 <??zcl_otacli_process_block_data_15>

08002e32 <??zcl_otacli_process_block_data_14>:
 8002e32:	f05f 0800 	movs.w	r8, #0

08002e36 <??zcl_otacli_process_block_data_15>:
 8002e36:	f8d6 11f8 	ldr.w	r1, [r6, #504]	; 0x1f8
 8002e3a:	f8b6 01ea 	ldrh.w	r0, [r6, #490]	; 0x1ea
 8002e3e:	1a09      	subs	r1, r1, r0
 8002e40:	f8c6 11f8 	str.w	r1, [r6, #504]	; 0x1f8
 8002e44:	f8b6 11ea 	ldrh.w	r1, [r6, #490]	; 0x1ea
 8002e48:	0030      	movs	r0, r6
 8002e4a:	f7ff ff00 	bl	8002c4e <zcl_otacli_remove_from_cache>
 8002e4e:	4640      	mov	r0, r8
 8002e50:	b2c0      	uxtb	r0, r0
 8002e52:	e03c      	b.n	8002ece <??zcl_otacli_process_block_data_2>

08002e54 <??zcl_otacli_process_block_data_13>:
 8002e54:	f8d6 21f8 	ldr.w	r2, [r6, #504]	; 0x1f8
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	f8b6 11f0 	ldrh.w	r1, [r6, #496]	; 0x1f0
 8002e5e:	0030      	movs	r0, r6
 8002e60:	f7ff fec3 	bl	8002bea <zcl_otacli_raw_write_skip_sig>
 8002e64:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	d014      	beq.n	8002e96 <??zcl_otacli_process_block_data_16>
 8002e6c:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8002e6e:	9002      	str	r0, [sp, #8]
 8002e70:	f206 1087 	addw	r0, r6, #391	; 0x187
 8002e74:	9001      	str	r0, [sp, #4]
 8002e76:	f8d6 01f8 	ldr.w	r0, [r6, #504]	; 0x1f8
 8002e7a:	b2c0      	uxtb	r0, r0
 8002e7c:	9000      	str	r0, [sp, #0]
 8002e7e:	f8d6 31f4 	ldr.w	r3, [r6, #500]	; 0x1f4
 8002e82:	f8b6 21f0 	ldrh.w	r2, [r6, #496]	; 0x1f0
 8002e86:	f516 7198 	adds.w	r1, r6, #304	; 0x130
 8002e8a:	0030      	movs	r0, r6
 8002e8c:	f8d6 c0ec 	ldr.w	ip, [r6, #236]	; 0xec
 8002e90:	47e0      	blx	ip
 8002e92:	0005      	movs	r5, r0
 8002e94:	e001      	b.n	8002e9a <??zcl_otacli_process_block_data_17>

08002e96 <??zcl_otacli_process_block_data_16>:
 8002e96:	2000      	movs	r0, #0
 8002e98:	0005      	movs	r5, r0

08002e9a <??zcl_otacli_process_block_data_17>:
 8002e9a:	f8d6 11f8 	ldr.w	r1, [r6, #504]	; 0x1f8
 8002e9e:	0030      	movs	r0, r6
 8002ea0:	f7ff fed5 	bl	8002c4e <zcl_otacli_remove_from_cache>
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f886 01ef 	strb.w	r0, [r6, #495]	; 0x1ef
 8002eaa:	2006      	movs	r0, #6
 8002eac:	f8a6 01ec 	strh.w	r0, [r6, #492]	; 0x1ec
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f8c6 01f8 	str.w	r0, [r6, #504]	; 0x1f8
 8002eb6:	0028      	movs	r0, r5
 8002eb8:	b2c0      	uxtb	r0, r0
 8002eba:	2897      	cmp	r0, #151	; 0x97
 8002ebc:	d101      	bne.n	8002ec2 <??zcl_otacli_process_block_data_18>
 8002ebe:	2097      	movs	r0, #151	; 0x97
 8002ec0:	e005      	b.n	8002ece <??zcl_otacli_process_block_data_2>

08002ec2 <??zcl_otacli_process_block_data_18>:
 8002ec2:	f8b6 01ea 	ldrh.w	r0, [r6, #490]	; 0x1ea
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	f47f af2c 	bne.w	8002d24 <??zcl_otacli_process_block_data_0>
 8002ecc:	2000      	movs	r0, #0

08002ece <??zcl_otacli_process_block_data_2>:
 8002ece:	b004      	add	sp, #16
 8002ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002ed4 <zcl_otacli_request_next_block>:
 8002ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed8:	0004      	movs	r4, r0
 8002eda:	000d      	movs	r5, r1
 8002edc:	0016      	movs	r6, r2
 8002ede:	68a7      	ldr	r7, [r4, #8]
 8002ee0:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 8002ee4:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
 8002ee8:	4288      	cmp	r0, r1
 8002eea:	d205      	bcs.n	8002ef8 <??zcl_otacli_request_next_block_0>
 8002eec:	0032      	movs	r2, r6
 8002eee:	0029      	movs	r1, r5
 8002ef0:	0020      	movs	r0, r4
 8002ef2:	f7fe ffd3 	bl	8001e9c <zcl_otacli_reset_block_timer>
 8002ef6:	e02d      	b.n	8002f54 <??zcl_otacli_request_next_block_1>

08002ef8 <??zcl_otacli_request_next_block_0>:
 8002ef8:	f240 524e 	movw	r2, #1358	; 0x54e
 8002efc:	2102      	movs	r1, #2
 8002efe:	0020      	movs	r0, r4
 8002f00:	f7fe ffc8 	bl	8001e94 <zcl_otacli_write_upgrade_status>
 8002f04:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d008      	beq.n	8002f1e <??zcl_otacli_request_next_block_2>
 8002f0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f0e:	f514 7198 	adds.w	r1, r4, #304	; 0x130
 8002f12:	0020      	movs	r0, r4
 8002f14:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002f18:	4798      	blx	r3
 8002f1a:	4680      	mov	r8, r0
 8002f1c:	e001      	b.n	8002f22 <??zcl_otacli_request_next_block_3>

08002f1e <??zcl_otacli_request_next_block_2>:
 8002f1e:	f05f 0800 	movs.w	r8, #0

08002f22 <??zcl_otacli_request_next_block_3>:
 8002f22:	4640      	mov	r0, r8
 8002f24:	b2c0      	uxtb	r0, r0
 8002f26:	2800      	cmp	r0, #0
 8002f28:	d101      	bne.n	8002f2e <??zcl_otacli_request_next_block_4>
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	e000      	b.n	8002f30 <??zcl_otacli_request_next_block_5>

08002f2e <??zcl_otacli_request_next_block_4>:
 8002f2e:	2000      	movs	r0, #0

08002f30 <??zcl_otacli_request_next_block_5>:
 8002f30:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
 8002f34:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d102      	bne.n	8002f42 <??zcl_otacli_request_next_block_6>

08002f3c <??zcl_otacli_request_next_block_7>:
 8002f3c:	0020      	movs	r0, r4
 8002f3e:	f7fe ffb7 	bl	8001eb0 <zcl_otacli_reset_cluster>

08002f42 <??zcl_otacli_request_next_block_6>:
 8002f42:	4641      	mov	r1, r8
 8002f44:	b2c9      	uxtb	r1, r1
 8002f46:	0020      	movs	r0, r4
 8002f48:	f000 fa15 	bl	8003376 <zcl_otacli_send_upgrade_end_req>
 8002f4c:	0001      	movs	r1, r0
 8002f4e:	0008      	movs	r0, r1
 8002f50:	b2c0      	uxtb	r0, r0
 8002f52:	2800      	cmp	r0, #0

08002f54 <??zcl_otacli_request_next_block_1>:
 8002f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f58 <zcl_otacli_block_req_retry>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	0004      	movs	r4, r0
 8002f5c:	000d      	movs	r5, r1
 8002f5e:	68a6      	ldr	r6, [r4, #8]
 8002f60:	f894 01ee 	ldrb.w	r0, [r4, #494]	; 0x1ee
 8002f64:	280a      	cmp	r0, #10
 8002f66:	d304      	bcc.n	8002f72 <??zcl_otacli_block_req_retry_0>
 8002f68:	2103      	movs	r1, #3
 8002f6a:	0020      	movs	r0, r4
 8002f6c:	f7ff fe18 	bl	8002ba0 <zcl_otacli_abort_download>
 8002f70:	e00a      	b.n	8002f88 <??zcl_otacli_block_req_retry_1>

08002f72 <??zcl_otacli_block_req_retry_0>:
 8002f72:	f894 01ee 	ldrb.w	r0, [r4, #494]	; 0x1ee
 8002f76:	1c40      	adds	r0, r0, #1
 8002f78:	f884 01ee 	strb.w	r0, [r4, #494]	; 0x1ee
 8002f7c:	f240 527b 	movw	r2, #1403	; 0x57b
 8002f80:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002f82:	0020      	movs	r0, r4
 8002f84:	f7fe ff8a 	bl	8001e9c <zcl_otacli_reset_block_timer>

08002f88 <??zcl_otacli_block_req_retry_1>:
 8002f88:	bd70      	pop	{r4, r5, r6, pc}

08002f8a <zcl_otacli_handle_image_block_rsp>:
 8002f8a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8e:	b0cc      	sub	sp, #304	; 0x130
 8002f90:	0005      	movs	r5, r0
 8002f92:	000e      	movs	r6, r1
 8002f94:	0037      	movs	r7, r6
 8002f96:	68b8      	ldr	r0, [r7, #8]
 8002f98:	9009      	str	r0, [sp, #36]	; 0x24
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f88d 0004 	strb.w	r0, [sp, #4]
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	9002      	str	r0, [sp, #8]
 8002fa4:	7868      	ldrb	r0, [r5, #1]
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d004      	beq.n	8002fb4 <??zcl_otacli_handle_image_block_rsp_0>
 8002faa:	7869      	ldrb	r1, [r5, #1]
 8002fac:	0038      	movs	r0, r7
 8002fae:	f7ff ffd3 	bl	8002f58 <zcl_otacli_block_req_retry>
 8002fb2:	e0e8      	b.n	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08002fb4 <??zcl_otacli_handle_image_block_rsp_0>:
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f887 01ee 	strb.w	r0, [r7, #494]	; 0x1ee
 8002fba:	7fa8      	ldrb	r0, [r5, #30]
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d120      	bne.n	8003002 <??zcl_otacli_handle_image_block_rsp_2>
 8002fc0:	f895 0025 	ldrb.w	r0, [r5, #37]	; 0x25
 8002fc4:	280b      	cmp	r0, #11
 8002fc6:	d11b      	bne.n	8003000 <??zcl_otacli_handle_image_block_rsp_3>
 8002fc8:	ab01      	add	r3, sp, #4
 8002fca:	aa02      	add	r2, sp, #8
 8002fcc:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 8002fce:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002fd0:	f7fe fd74 	bl	8001abc <zb_zcl_parse_uint8>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	f100 80d6 	bmi.w	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08002fda <??zcl_otacli_handle_image_block_rsp_4>:
 8002fda:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002fde:	2805      	cmp	r0, #5
 8002fe0:	f040 80d1 	bne.w	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08002fe4 <??zcl_otacli_handle_image_block_rsp_5>:
 8002fe4:	466b      	mov	r3, sp
 8002fe6:	aa02      	add	r2, sp, #8
 8002fe8:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 8002fea:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002fec:	f7fe fd66 	bl	8001abc <zb_zcl_parse_uint8>
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	f100 80c8 	bmi.w	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08002ff6 <??zcl_otacli_handle_image_block_rsp_6>:
 8002ff6:	2105      	movs	r1, #5
 8002ff8:	0038      	movs	r0, r7
 8002ffa:	f7ff fdd1 	bl	8002ba0 <zcl_otacli_abort_download>
 8002ffe:	e7ff      	b.n	8003000 <??zcl_otacli_handle_image_block_rsp_3>

08003000 <??zcl_otacli_handle_image_block_rsp_3>:
 8003000:	e0c1      	b.n	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08003002 <??zcl_otacli_handle_image_block_rsp_2>:
 8003002:	f517 788e 	adds.w	r8, r7, #284	; 0x11c
 8003006:	a803      	add	r0, sp, #12
 8003008:	9000      	str	r0, [sp, #0]
 800300a:	ab0a      	add	r3, sp, #40	; 0x28
 800300c:	aa06      	add	r2, sp, #24
 800300e:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 8003010:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003012:	f7ff fbf3 	bl	80027fc <zcl_otacli_parse_image_block_rsp>
 8003016:	4681      	mov	r9, r0
 8003018:	4648      	mov	r0, r9
 800301a:	b2c0      	uxtb	r0, r0
 800301c:	2800      	cmp	r0, #0

0800301e <??zcl_otacli_handle_image_block_rsp_8>:
 800301e:	4648      	mov	r0, r9
 8003020:	b2c0      	uxtb	r0, r0
 8003022:	2800      	cmp	r0, #0
 8003024:	d005      	beq.n	8003032 <??zcl_otacli_handle_image_block_rsp_9>
 8003026:	2895      	cmp	r0, #149	; 0x95
 8003028:	f000 80a8 	beq.w	800317c <??zcl_otacli_handle_image_block_rsp_10>
 800302c:	2897      	cmp	r0, #151	; 0x97
 800302e:	d06f      	beq.n	8003110 <??zcl_otacli_handle_image_block_rsp_11>
 8003030:	e0a9      	b.n	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08003032 <??zcl_otacli_handle_image_block_rsp_9>:
 8003032:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8003036:	f8b8 1000 	ldrh.w	r1, [r8]
 800303a:	4288      	cmp	r0, r1
 800303c:	d10a      	bne.n	8003054 <??zcl_otacli_handle_image_block_rsp_13>
 800303e:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8003042:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8003046:	4288      	cmp	r0, r1
 8003048:	d104      	bne.n	8003054 <??zcl_otacli_handle_image_block_rsp_13>
 800304a:	9807      	ldr	r0, [sp, #28]
 800304c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003050:	4288      	cmp	r0, r1
 8003052:	d000      	beq.n	8003056 <??zcl_otacli_handle_image_block_rsp_14>

08003054 <??zcl_otacli_handle_image_block_rsp_13>:
 8003054:	e097      	b.n	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08003056 <??zcl_otacli_handle_image_block_rsp_14>:
 8003056:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003058:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 800305c:	4288      	cmp	r0, r1
 800305e:	f040 8092 	bne.w	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08003062 <??zcl_otacli_handle_image_block_rsp_16>:
 8003062:	f8b7 01ea 	ldrh.w	r0, [r7, #490]	; 0x1ea
 8003066:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800306a:	1808      	adds	r0, r1, r0
 800306c:	2863      	cmp	r0, #99	; 0x63
 800306e:	f080 808a 	bcs.w	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08003072 <??zcl_otacli_handle_image_block_rsp_17>:
 8003072:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 8003076:	9008      	str	r0, [sp, #32]
 8003078:	f10d 0a2d 	add.w	sl, sp, #45	; 0x2d
 800307c:	f8b7 01ea 	ldrh.w	r0, [r7, #490]	; 0x1ea
 8003080:	4438      	add	r0, r7
 8003082:	f200 1b87 	addw	fp, r0, #391	; 0x187
 8003086:	9a08      	ldr	r2, [sp, #32]
 8003088:	4651      	mov	r1, sl
 800308a:	4658      	mov	r0, fp
 800308c:	f014 fce8 	bl	8017a60 <__aeabi_memcpy>
 8003090:	f8b7 01ea 	ldrh.w	r0, [r7, #490]	; 0x1ea
 8003094:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8003098:	fa50 f081 	uxtab	r0, r0, r1
 800309c:	f8a7 01ea 	strh.w	r0, [r7, #490]	; 0x1ea
 80030a0:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80030a4:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 80030a8:	fa50 f081 	uxtab	r0, r0, r1
 80030ac:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 80030b0:	f8b7 01ea 	ldrh.w	r0, [r7, #490]	; 0x1ea
 80030b4:	f8b7 11ec 	ldrh.w	r1, [r7, #492]	; 0x1ec
 80030b8:	4288      	cmp	r0, r1
 80030ba:	d322      	bcc.n	8003102 <??zcl_otacli_handle_image_block_rsp_18>
 80030bc:	0038      	movs	r0, r7
 80030be:	f7ff fddf 	bl	8002c80 <zcl_otacli_process_block_data>
 80030c2:	4681      	mov	r9, r0
 80030c4:	4648      	mov	r0, r9
 80030c6:	b2c0      	uxtb	r0, r0
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d013      	beq.n	80030f4 <??zcl_otacli_handle_image_block_rsp_19>
 80030cc:	4648      	mov	r0, r9
 80030ce:	b2c0      	uxtb	r0, r0
 80030d0:	2897      	cmp	r0, #151	; 0x97
 80030d2:	d10a      	bne.n	80030ea <??zcl_otacli_handle_image_block_rsp_20>
 80030d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030d6:	f011 fdd0 	bl	8014c7a <ZbZclUptime>
 80030da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80030dc:	1808      	adds	r0, r1, r0
 80030de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
 80030e2:	2001      	movs	r0, #1
 80030e4:	f887 01fc 	strb.w	r0, [r7, #508]	; 0x1fc
 80030e8:	e003      	b.n	80030f2 <??zcl_otacli_handle_image_block_rsp_21>

080030ea <??zcl_otacli_handle_image_block_rsp_20>:
 80030ea:	2105      	movs	r1, #5
 80030ec:	0038      	movs	r0, r7
 80030ee:	f7ff fd57 	bl	8002ba0 <zcl_otacli_abort_download>

080030f2 <??zcl_otacli_handle_image_block_rsp_21>:
 80030f2:	e048      	b.n	8003186 <??zcl_otacli_handle_image_block_rsp_1>

080030f4 <??zcl_otacli_handle_image_block_rsp_19>:
 80030f4:	f240 52de 	movw	r2, #1502	; 0x5de
 80030f8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80030fa:	0038      	movs	r0, r7
 80030fc:	f7ff feea 	bl	8002ed4 <zcl_otacli_request_next_block>
 8003100:	e005      	b.n	800310e <??zcl_otacli_handle_image_block_rsp_22>

08003102 <??zcl_otacli_handle_image_block_rsp_18>:
 8003102:	f240 52e2 	movw	r2, #1506	; 0x5e2
 8003106:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003108:	0038      	movs	r0, r7
 800310a:	f7fe fec7 	bl	8001e9c <zcl_otacli_reset_block_timer>

0800310e <??zcl_otacli_handle_image_block_rsp_22>:
 800310e:	e03a      	b.n	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08003110 <??zcl_otacli_handle_image_block_rsp_11>:
 8003110:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003112:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8003116:	4288      	cmp	r0, r1
 8003118:	d209      	bcs.n	800312e <??zcl_otacli_handle_image_block_rsp_23>
 800311a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800311e:	2300      	movs	r3, #0
 8003120:	2109      	movs	r1, #9
 8003122:	0038      	movs	r0, r7
 8003124:	f7fd fc5d 	bl	80009e2 <ZbZclAttrIntegerWrite>
 8003128:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800312c:	67b8      	str	r0, [r7, #120]	; 0x78

0800312e <??zcl_otacli_handle_image_block_rsp_23>:
 800312e:	f240 52ed 	movw	r2, #1517	; 0x5ed
 8003132:	2101      	movs	r1, #1
 8003134:	0038      	movs	r0, r7
 8003136:	f7fe fead 	bl	8001e94 <zcl_otacli_write_upgrade_status>
 800313a:	9803      	ldr	r0, [sp, #12]
 800313c:	2800      	cmp	r0, #0
 800313e:	d108      	bne.n	8003152 <??zcl_otacli_handle_image_block_rsp_24>
 8003140:	9804      	ldr	r0, [sp, #16]
 8003142:	2800      	cmp	r0, #0
 8003144:	d005      	beq.n	8003152 <??zcl_otacli_handle_image_block_rsp_24>
 8003146:	9904      	ldr	r1, [sp, #16]
 8003148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800314c:	4341      	muls	r1, r0
 800314e:	000c      	movs	r4, r1
 8003150:	e00d      	b.n	800316e <??zcl_otacli_handle_image_block_rsp_25>

08003152 <??zcl_otacli_handle_image_block_rsp_24>:
 8003152:	9803      	ldr	r0, [sp, #12]
 8003154:	9904      	ldr	r1, [sp, #16]
 8003156:	4288      	cmp	r0, r1
 8003158:	d102      	bne.n	8003160 <??zcl_otacli_handle_image_block_rsp_26>
 800315a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800315c:	0004      	movs	r4, r0
 800315e:	e006      	b.n	800316e <??zcl_otacli_handle_image_block_rsp_25>

08003160 <??zcl_otacli_handle_image_block_rsp_26>:
 8003160:	9904      	ldr	r1, [sp, #16]
 8003162:	9803      	ldr	r0, [sp, #12]
 8003164:	1a09      	subs	r1, r1, r0
 8003166:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800316a:	4341      	muls	r1, r0
 800316c:	000c      	movs	r4, r1

0800316e <??zcl_otacli_handle_image_block_rsp_25>:
 800316e:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 8003172:	0021      	movs	r1, r4
 8003174:	0038      	movs	r0, r7
 8003176:	f7fe fe91 	bl	8001e9c <zcl_otacli_reset_block_timer>
 800317a:	e004      	b.n	8003186 <??zcl_otacli_handle_image_block_rsp_1>

0800317c <??zcl_otacli_handle_image_block_rsp_10>:
 800317c:	2105      	movs	r1, #5
 800317e:	0038      	movs	r0, r7
 8003180:	f7ff fd0e 	bl	8002ba0 <zcl_otacli_abort_download>
 8003184:	e7ff      	b.n	8003186 <??zcl_otacli_handle_image_block_rsp_1>

08003186 <??zcl_otacli_handle_image_block_rsp_1>:
 8003186:	b04d      	add	sp, #308	; 0x134
 8003188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800318c <zcl_otacli_handle_upgrade_end_rsp>:
 800318c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003190:	b085      	sub	sp, #20
 8003192:	0004      	movs	r4, r0
 8003194:	000d      	movs	r5, r1
 8003196:	0016      	movs	r6, r2
 8003198:	0027      	movs	r7, r4
 800319a:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800319e:	2000      	movs	r0, #0
 80031a0:	9002      	str	r0, [sp, #8]
 80031a2:	2000      	movs	r0, #0
 80031a4:	9001      	str	r0, [sp, #4]
 80031a6:	f897 0185 	ldrb.w	r0, [r7, #389]	; 0x185
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d101      	bne.n	80031b2 <??zcl_otacli_handle_upgrade_end_rsp_0>
 80031ae:	2096      	movs	r0, #150	; 0x96
 80031b0:	e039      	b.n	8003226 <??zcl_otacli_handle_upgrade_end_rsp_1>

080031b2 <??zcl_otacli_handle_upgrade_end_rsp_0>:
 80031b2:	a801      	add	r0, sp, #4
 80031b4:	9000      	str	r0, [sp, #0]
 80031b6:	ab02      	add	r3, sp, #8
 80031b8:	aa03      	add	r2, sp, #12
 80031ba:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80031bc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80031be:	f7ff fb69 	bl	8002894 <zcl_otacli_parse_upgrade_end_rsp>
 80031c2:	4681      	mov	r9, r0
 80031c4:	4648      	mov	r0, r9
 80031c6:	b2c0      	uxtb	r0, r0
 80031c8:	2800      	cmp	r0, #0
 80031ca:	d005      	beq.n	80031d8 <??zcl_otacli_handle_upgrade_end_rsp_2>
 80031cc:	0038      	movs	r0, r7
 80031ce:	f7fe fe6f 	bl	8001eb0 <zcl_otacli_reset_cluster>
 80031d2:	4648      	mov	r0, r9
 80031d4:	b2c0      	uxtb	r0, r0
 80031d6:	e026      	b.n	8003226 <??zcl_otacli_handle_upgrade_end_rsp_1>

080031d8 <??zcl_otacli_handle_upgrade_end_rsp_2>:
 80031d8:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80031dc:	2800      	cmp	r0, #0
 80031de:	d019      	beq.n	8003214 <??zcl_otacli_handle_upgrade_end_rsp_3>
 80031e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80031e2:	9000      	str	r0, [sp, #0]
 80031e4:	9b01      	ldr	r3, [sp, #4]
 80031e6:	9a02      	ldr	r2, [sp, #8]
 80031e8:	f517 7198 	adds.w	r1, r7, #304	; 0x130
 80031ec:	0038      	movs	r0, r7
 80031ee:	f8d7 c0f8 	ldr.w	ip, [r7, #248]	; 0xf8
 80031f2:	47e0      	blx	ip
 80031f4:	4681      	mov	r9, r0
 80031f6:	4648      	mov	r0, r9
 80031f8:	b2c0      	uxtb	r0, r0
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d10a      	bne.n	8003214 <??zcl_otacli_handle_upgrade_end_rsp_3>
 80031fe:	f897 0129 	ldrb.w	r0, [r7, #297]	; 0x129
 8003202:	2800      	cmp	r0, #0
 8003204:	d001      	beq.n	800320a <??zcl_otacli_handle_upgrade_end_rsp_5>
 8003206:	2000      	movs	r0, #0
 8003208:	e00d      	b.n	8003226 <??zcl_otacli_handle_upgrade_end_rsp_1>

0800320a <??zcl_otacli_handle_upgrade_end_rsp_5>:
 800320a:	0038      	movs	r0, r7
 800320c:	f7fe fe50 	bl	8001eb0 <zcl_otacli_reset_cluster>
 8003210:	2000      	movs	r0, #0
 8003212:	e008      	b.n	8003226 <??zcl_otacli_handle_upgrade_end_rsp_1>

08003214 <??zcl_otacli_handle_upgrade_end_rsp_3>:
 8003214:	4648      	mov	r0, r9
 8003216:	b2c0      	uxtb	r0, r0
 8003218:	2800      	cmp	r0, #0
 800321a:	d002      	beq.n	8003222 <??zcl_otacli_handle_upgrade_end_rsp_6>
 800321c:	0038      	movs	r0, r7
 800321e:	f7fe fe47 	bl	8001eb0 <zcl_otacli_reset_cluster>

08003222 <??zcl_otacli_handle_upgrade_end_rsp_6>:
 8003222:	4648      	mov	r0, r9
 8003224:	b2c0      	uxtb	r0, r0

08003226 <??zcl_otacli_handle_upgrade_end_rsp_1>:
 8003226:	b005      	add	sp, #20
 8003228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800322c <zcl_otacli_handle_image_notify>:
 800322c:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 8003230:	b085      	sub	sp, #20
 8003232:	0004      	movs	r4, r0
 8003234:	000d      	movs	r5, r1
 8003236:	0016      	movs	r6, r2
 8003238:	0027      	movs	r7, r4
 800323a:	a803      	add	r0, sp, #12
 800323c:	9000      	str	r0, [sp, #0]
 800323e:	ab02      	add	r3, sp, #8
 8003240:	f10d 0209 	add.w	r2, sp, #9
 8003244:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8003246:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003248:	f7ff fb6d 	bl	8002926 <zcl_otacli_parse_image_notify_req>
 800324c:	4680      	mov	r8, r0
 800324e:	4640      	mov	r0, r8
 8003250:	b2c0      	uxtb	r0, r0
 8003252:	2800      	cmp	r0, #0
 8003254:	d113      	bne.n	800327e <??zcl_otacli_handle_image_notify_0>

08003256 <??zcl_otacli_handle_image_notify_1>:
 8003256:	2200      	movs	r2, #0
 8003258:	a903      	add	r1, sp, #12
 800325a:	68a0      	ldr	r0, [r4, #8]
 800325c:	f7ff fc9d 	bl	8002b9a <zcl_ota_image_def_print>
 8003260:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8003264:	2800      	cmp	r0, #0
 8003266:	d00a      	beq.n	800327e <??zcl_otacli_handle_image_notify_0>
 8003268:	9501      	str	r5, [sp, #4]
 800326a:	9600      	str	r6, [sp, #0]
 800326c:	ab03      	add	r3, sp, #12
 800326e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003272:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8003276:	0020      	movs	r0, r4
 8003278:	f8d7 c0e0 	ldr.w	ip, [r7, #224]	; 0xe0
 800327c:	47e0      	blx	ip

0800327e <??zcl_otacli_handle_image_notify_0>:
 800327e:	b006      	add	sp, #24
 8003280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003284 <zcl_otacli_send_command>:
 8003284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003288:	b088      	sub	sp, #32
 800328a:	0004      	movs	r4, r0
 800328c:	468a      	mov	sl, r1
 800328e:	0015      	movs	r5, r2
 8003290:	001e      	movs	r6, r3
 8003292:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003294:	e9d4 2344 	ldrd	r2, r3, [r4, #272]	; 0x110
 8003298:	f05f 30ff 	movs.w	r0, #4294967295
 800329c:	f05f 31ff 	movs.w	r1, #4294967295
 80032a0:	428b      	cmp	r3, r1
 80032a2:	d103      	bne.n	80032ac <??zcl_otacli_send_command_0>
 80032a4:	4282      	cmp	r2, r0
 80032a6:	d101      	bne.n	80032ac <??zcl_otacli_send_command_0>
 80032a8:	2001      	movs	r0, #1
 80032aa:	e027      	b.n	80032fc <??zcl_otacli_send_command_1>

080032ac <??zcl_otacli_send_command_0>:
 80032ac:	f894 0118 	ldrb.w	r0, [r4, #280]	; 0x118
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d101      	bne.n	80032b8 <??zcl_otacli_send_command_2>
 80032b4:	2001      	movs	r0, #1
 80032b6:	e021      	b.n	80032fc <??zcl_otacli_send_command_1>

080032b8 <??zcl_otacli_send_command_2>:
 80032b8:	f05f 0820 	movs.w	r8, #32
 80032bc:	f05f 0900 	movs.w	r9, #0
 80032c0:	46eb      	mov	fp, sp
 80032c2:	464a      	mov	r2, r9
 80032c4:	4641      	mov	r1, r8
 80032c6:	4658      	mov	r0, fp
 80032c8:	f004 fb06 	bl	80078d8 <__aeabi_memset>
 80032cc:	2003      	movs	r0, #3
 80032ce:	f88d 0000 	strb.w	r0, [sp]
 80032d2:	e9d4 0144 	ldrd	r0, r1, [r4, #272]	; 0x110
 80032d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032da:	f894 0118 	ldrb.w	r0, [r4, #280]	; 0x118
 80032de:	f8ad 0002 	strh.w	r0, [sp, #2]
 80032e2:	f88d a010 	strb.w	sl, [sp, #16]
 80032e6:	2001      	movs	r0, #1
 80032e8:	f88d 0011 	strb.w	r0, [sp, #17]
 80032ec:	9505      	str	r5, [sp, #20]
 80032ee:	9606      	str	r6, [sp, #24]
 80032f0:	0023      	movs	r3, r4
 80032f2:	003a      	movs	r2, r7
 80032f4:	4669      	mov	r1, sp
 80032f6:	0020      	movs	r0, r4
 80032f8:	f011 fdee 	bl	8014ed8 <ZbZclClusterCommandReq>

080032fc <??zcl_otacli_send_command_1>:
 80032fc:	b009      	add	sp, #36	; 0x24
 80032fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003302 <zcl_otacli_send_image_block_req>:
 8003302:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	0004      	movs	r4, r0
 800330a:	000d      	movs	r5, r1
 800330c:	002e      	movs	r6, r5
 800330e:	ab02      	add	r3, sp, #8
 8003310:	2200      	movs	r2, #0
 8003312:	2109      	movs	r1, #9
 8003314:	0030      	movs	r0, r6
 8003316:	f7fd fb17 	bl	8000948 <ZbZclAttrIntegerRead>
 800331a:	0007      	movs	r7, r0
 800331c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003320:	2800      	cmp	r0, #0
 8003322:	d125      	bne.n	8003370 <??zcl_otacli_send_image_block_req_0>

08003324 <??zcl_otacli_send_image_block_req_1>:
 8003324:	0038      	movs	r0, r7
 8003326:	b280      	uxth	r0, r0
 8003328:	9001      	str	r0, [sp, #4]
 800332a:	f896 0184 	ldrb.w	r0, [r6, #388]	; 0x184
 800332e:	9000      	str	r0, [sp, #0]
 8003330:	f8d6 3180 	ldr.w	r3, [r6, #384]	; 0x180
 8003334:	f516 728e 	adds.w	r2, r6, #284	; 0x11c
 8003338:	2118      	movs	r1, #24
 800333a:	a803      	add	r0, sp, #12
 800333c:	f7ff f8ec 	bl	8002518 <zcl_otacli_build_image_block_req>
 8003340:	4680      	mov	r8, r0
 8003342:	f1b8 0f00 	cmp.w	r8, #0
 8003346:	d413      	bmi.n	8003370 <??zcl_otacli_send_image_block_req_0>

08003348 <??zcl_otacli_send_image_block_req_2>:
 8003348:	48a2      	ldr	r0, [pc, #648]	; (80035d4 <??DataTable9_2>)
 800334a:	9000      	str	r0, [sp, #0]
 800334c:	4643      	mov	r3, r8
 800334e:	aa03      	add	r2, sp, #12
 8003350:	2103      	movs	r1, #3
 8003352:	0030      	movs	r0, r6
 8003354:	f7ff ff96 	bl	8003284 <zcl_otacli_send_command>
 8003358:	f88d 0008 	strb.w	r0, [sp, #8]
 800335c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003360:	2800      	cmp	r0, #0
 8003362:	d005      	beq.n	8003370 <??zcl_otacli_send_image_block_req_0>
 8003364:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003368:	0030      	movs	r0, r6
 800336a:	f7ff fdf5 	bl	8002f58 <zcl_otacli_block_req_retry>
 800336e:	e7ff      	b.n	8003370 <??zcl_otacli_send_image_block_req_0>

08003370 <??zcl_otacli_send_image_block_req_0>:
 8003370:	b00a      	add	sp, #40	; 0x28
 8003372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003376 <zcl_otacli_send_upgrade_end_req>:
 8003376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	0004      	movs	r4, r0
 800337c:	000d      	movs	r5, r1
 800337e:	2600      	movs	r6, #0
 8003380:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
 8003384:	002a      	movs	r2, r5
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	2109      	movs	r1, #9
 800338a:	a801      	add	r0, sp, #4
 800338c:	f7ff f926 	bl	80025dc <zcl_otacli_build_upgrade_end_req>
 8003390:	0007      	movs	r7, r0
 8003392:	2f00      	cmp	r7, #0
 8003394:	d501      	bpl.n	800339a <??zcl_otacli_send_upgrade_end_req_0>
 8003396:	2089      	movs	r0, #137	; 0x89
 8003398:	e007      	b.n	80033aa <??zcl_otacli_send_upgrade_end_req_1>

0800339a <??zcl_otacli_send_upgrade_end_req_0>:
 800339a:	2000      	movs	r0, #0
 800339c:	9000      	str	r0, [sp, #0]
 800339e:	003b      	movs	r3, r7
 80033a0:	aa01      	add	r2, sp, #4
 80033a2:	2106      	movs	r1, #6
 80033a4:	0020      	movs	r0, r4
 80033a6:	f7ff ff6d 	bl	8003284 <zcl_otacli_send_command>

080033aa <??zcl_otacli_send_upgrade_end_req_1>:
 80033aa:	b005      	add	sp, #20
 80033ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033ae <zcl_otacli_reboot_timer>:
 80033ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b0:	0004      	movs	r4, r0
 80033b2:	000d      	movs	r5, r1
 80033b4:	002e      	movs	r6, r5
 80033b6:	0037      	movs	r7, r6
 80033b8:	0038      	movs	r0, r7
 80033ba:	f7fe fd79 	bl	8001eb0 <zcl_otacli_reset_cluster>
 80033be:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d004      	beq.n	80033d0 <??zcl_otacli_reboot_timer_0>
 80033c6:	6d71      	ldr	r1, [r6, #84]	; 0x54
 80033c8:	0030      	movs	r0, r6
 80033ca:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80033ce:	4790      	blx	r2

080033d0 <??zcl_otacli_reboot_timer_0>:
 80033d0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080033d2 <ZbZclOtaClientQueryNextImageCb>:
 80033d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d4:	0004      	movs	r4, r0
 80033d6:	000d      	movs	r5, r1
 80033d8:	0016      	movs	r6, r2
 80033da:	001f      	movs	r7, r3
 80033dc:	0028      	movs	r0, r5
 80033de:	b2c0      	uxtb	r0, r0
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d10c      	bne.n	80033fe <??ZbZclOtaClientQueryNextImageCb_0>

080033e4 <??ZbZclOtaClientQueryNextImageCb_1>:
 80033e4:	003a      	movs	r2, r7
 80033e6:	0031      	movs	r1, r6
 80033e8:	68a0      	ldr	r0, [r4, #8]
 80033ea:	f7ff fbd6 	bl	8002b9a <zcl_ota_image_def_print>
 80033ee:	0020      	movs	r0, r4
 80033f0:	f7fe fedf 	bl	80021b2 <ZbZclOtaClientImageTransferStart>
 80033f4:	0001      	movs	r1, r0
 80033f6:	0008      	movs	r0, r1
 80033f8:	b2c0      	uxtb	r0, r0
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d1ff      	bne.n	80033fe <??ZbZclOtaClientQueryNextImageCb_0>

080033fe <??ZbZclOtaClientQueryNextImageCb_0>:
 80033fe:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08003400 <ZbZclOtaClientImageUpdateRawCb>:
 8003400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003404:	0004      	movs	r4, r0
 8003406:	000d      	movs	r5, r1
 8003408:	0016      	movs	r6, r2
 800340a:	001f      	movs	r7, r3
 800340c:	46a0      	mov	r8, r4
 800340e:	002a      	movs	r2, r5
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	0031      	movs	r1, r6
 8003414:	f208 20a7 	addw	r0, r8, #679	; 0x2a7
 8003418:	f011 fec9 	bl	80151ae <ZbHashAdd>
 800341c:	2000      	movs	r0, #0
 800341e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003422 <ZbZclOtaClientImageWriteTagCb>:
 8003422:	e92d 4ffb 	stmdb	sp!, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003426:	0005      	movs	r5, r0
 8003428:	0016      	movs	r6, r2
 800342a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800342c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800342e:	46a8      	mov	r8, r5
 8003430:	f05f 0900 	movs.w	r9, #0
 8003434:	0030      	movs	r0, r6
 8003436:	b280      	uxth	r0, r0
 8003438:	2800      	cmp	r0, #0
 800343a:	d00a      	beq.n	8003452 <??ZbZclOtaClientImageWriteTagCb_0>
 800343c:	2801      	cmp	r0, #1
 800343e:	d019      	beq.n	8003474 <??ZbZclOtaClientImageWriteTagCb_1>
 8003440:	2802      	cmp	r0, #2
 8003442:	d017      	beq.n	8003474 <??ZbZclOtaClientImageWriteTagCb_1>
 8003444:	2803      	cmp	r0, #3
 8003446:	d018      	beq.n	800347a <??ZbZclOtaClientImageWriteTagCb_2>
 8003448:	2805      	cmp	r0, #5
 800344a:	d019      	beq.n	8003480 <??ZbZclOtaClientImageWriteTagCb_3>
 800344c:	2806      	cmp	r0, #6
 800344e:	d037      	beq.n	80034c0 <??ZbZclOtaClientImageWriteTagCb_4>
 8003450:	e056      	b.n	8003500 <??ZbZclOtaClientImageWriteTagCb_5>

08003452 <??ZbZclOtaClientImageWriteTagCb_0>:
 8003452:	f8d8 00f0 	ldr.w	r0, [r8, #240]	; 0xf0
 8003456:	2800      	cmp	r0, #0
 8003458:	d00b      	beq.n	8003472 <??ZbZclOtaClientImageWriteTagCb_6>
 800345a:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800345c:	9000      	str	r0, [sp, #0]
 800345e:	003b      	movs	r3, r7
 8003460:	0022      	movs	r2, r4
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	9901      	ldr	r1, [sp, #4]
 8003466:	0028      	movs	r0, r5
 8003468:	f8d8 c0f0 	ldr.w	ip, [r8, #240]	; 0xf0
 800346c:	47e0      	blx	ip
 800346e:	4681      	mov	r9, r0
 8003470:	e048      	b.n	8003504 <??ZbZclOtaClientImageWriteTagCb_7>

08003472 <??ZbZclOtaClientImageWriteTagCb_6>:
 8003472:	e047      	b.n	8003504 <??ZbZclOtaClientImageWriteTagCb_7>

08003474 <??ZbZclOtaClientImageWriteTagCb_1>:
 8003474:	2085      	movs	r0, #133	; 0x85
 8003476:	4681      	mov	r9, r0
 8003478:	e044      	b.n	8003504 <??ZbZclOtaClientImageWriteTagCb_7>

0800347a <??ZbZclOtaClientImageWriteTagCb_2>:
 800347a:	2085      	movs	r0, #133	; 0x85
 800347c:	4681      	mov	r9, r0
 800347e:	e041      	b.n	8003504 <??ZbZclOtaClientImageWriteTagCb_7>

08003480 <??ZbZclOtaClientImageWriteTagCb_3>:
 8003480:	f898 029f 	ldrb.w	r0, [r8, #671]	; 0x29f
 8003484:	fa50 f084 	uxtab	r0, r0, r4
 8003488:	2851      	cmp	r0, #81	; 0x51
 800348a:	d302      	bcc.n	8003492 <??ZbZclOtaClientImageWriteTagCb_8>
 800348c:	2089      	movs	r0, #137	; 0x89
 800348e:	4681      	mov	r9, r0
 8003490:	e038      	b.n	8003504 <??ZbZclOtaClientImageWriteTagCb_7>

08003492 <??ZbZclOtaClientImageWriteTagCb_8>:
 8003492:	46a2      	mov	sl, r4
 8003494:	fa5f fa8a 	uxtb.w	sl, sl
 8003498:	9700      	str	r7, [sp, #0]
 800349a:	f898 029f 	ldrb.w	r0, [r8, #671]	; 0x29f
 800349e:	4440      	add	r0, r8
 80034a0:	f200 2b4f 	addw	fp, r0, #591	; 0x24f
 80034a4:	4652      	mov	r2, sl
 80034a6:	9900      	ldr	r1, [sp, #0]
 80034a8:	4658      	mov	r0, fp
 80034aa:	f014 fad9 	bl	8017a60 <__aeabi_memcpy>
 80034ae:	f898 029f 	ldrb.w	r0, [r8, #671]	; 0x29f
 80034b2:	1820      	adds	r0, r4, r0
 80034b4:	f888 029f 	strb.w	r0, [r8, #671]	; 0x29f
 80034b8:	f898 029f 	ldrb.w	r0, [r8, #671]	; 0x29f
 80034bc:	2850      	cmp	r0, #80	; 0x50

080034be <??ZbZclOtaClientImageWriteTagCb_9>:
 80034be:	e021      	b.n	8003504 <??ZbZclOtaClientImageWriteTagCb_7>

080034c0 <??ZbZclOtaClientImageWriteTagCb_4>:
 80034c0:	f898 024e 	ldrb.w	r0, [r8, #590]	; 0x24e
 80034c4:	fa50 f084 	uxtab	r0, r0, r4
 80034c8:	284b      	cmp	r0, #75	; 0x4b
 80034ca:	d302      	bcc.n	80034d2 <??ZbZclOtaClientImageWriteTagCb_10>
 80034cc:	2089      	movs	r0, #137	; 0x89
 80034ce:	4681      	mov	r9, r0
 80034d0:	e018      	b.n	8003504 <??ZbZclOtaClientImageWriteTagCb_7>

080034d2 <??ZbZclOtaClientImageWriteTagCb_10>:
 80034d2:	46a2      	mov	sl, r4
 80034d4:	fa5f fa8a 	uxtb.w	sl, sl
 80034d8:	9700      	str	r7, [sp, #0]
 80034da:	f898 024e 	ldrb.w	r0, [r8, #590]	; 0x24e
 80034de:	4440      	add	r0, r8
 80034e0:	f510 7b01 	adds.w	fp, r0, #516	; 0x204
 80034e4:	4652      	mov	r2, sl
 80034e6:	9900      	ldr	r1, [sp, #0]
 80034e8:	4658      	mov	r0, fp
 80034ea:	f014 fab9 	bl	8017a60 <__aeabi_memcpy>
 80034ee:	f898 024e 	ldrb.w	r0, [r8, #590]	; 0x24e
 80034f2:	1820      	adds	r0, r4, r0
 80034f4:	f888 024e 	strb.w	r0, [r8, #590]	; 0x24e
 80034f8:	f898 024e 	ldrb.w	r0, [r8, #590]	; 0x24e
 80034fc:	284a      	cmp	r0, #74	; 0x4a

080034fe <??ZbZclOtaClientImageWriteTagCb_11>:
 80034fe:	e001      	b.n	8003504 <??ZbZclOtaClientImageWriteTagCb_7>

08003500 <??ZbZclOtaClientImageWriteTagCb_5>:
 8003500:	2085      	movs	r0, #133	; 0x85
 8003502:	4681      	mov	r9, r0

08003504 <??ZbZclOtaClientImageWriteTagCb_7>:
 8003504:	4648      	mov	r0, r9
 8003506:	b2c0      	uxtb	r0, r0
 8003508:	2800      	cmp	r0, #0
 800350a:	d109      	bne.n	8003520 <??ZbZclOtaClientImageWriteTagCb_12>
 800350c:	0030      	movs	r0, r6
 800350e:	b280      	uxth	r0, r0
 8003510:	2807      	cmp	r0, #7
 8003512:	d205      	bcs.n	8003520 <??ZbZclOtaClientImageWriteTagCb_12>
 8003514:	2001      	movs	r0, #1
 8003516:	0031      	movs	r1, r6
 8003518:	b289      	uxth	r1, r1
 800351a:	4441      	add	r1, r8
 800351c:	f881 02a0 	strb.w	r0, [r1, #672]	; 0x2a0

08003520 <??ZbZclOtaClientImageWriteTagCb_12>:
 8003520:	4648      	mov	r0, r9
 8003522:	b2c0      	uxtb	r0, r0
 8003524:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003528 <zcl_otacli_has_tag>:
 8003528:	0002      	movs	r2, r0
 800352a:	0008      	movs	r0, r1
 800352c:	b2c0      	uxtb	r0, r0
 800352e:	2807      	cmp	r0, #7
 8003530:	d301      	bcc.n	8003536 <??zcl_otacli_has_tag_0>
 8003532:	2000      	movs	r0, #0
 8003534:	e004      	b.n	8003540 <??zcl_otacli_has_tag_1>

08003536 <??zcl_otacli_has_tag_0>:
 8003536:	b2c9      	uxtb	r1, r1
 8003538:	eb02 0001 	add.w	r0, r2, r1
 800353c:	f890 02a0 	ldrb.w	r0, [r0, #672]	; 0x2a0

08003540 <??zcl_otacli_has_tag_1>:
 8003540:	4770      	bx	lr

08003542 <ZbZclOtaClientImageValidateCb>:
 8003542:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	0005      	movs	r5, r0
 800354a:	000e      	movs	r6, r1
 800354c:	0017      	movs	r7, r2
 800354e:	46a8      	mov	r8, r5
 8003550:	0031      	movs	r1, r6
 8003552:	68a8      	ldr	r0, [r5, #8]
 8003554:	f7ff fb20 	bl	8002b98 <zcl_ota_header_print>
 8003558:	2105      	movs	r1, #5
 800355a:	4640      	mov	r0, r8
 800355c:	f7ff ffe4 	bl	8003528 <zcl_otacli_has_tag>
 8003560:	2800      	cmp	r0, #0
 8003562:	d101      	bne.n	8003568 <??ZbZclOtaClientImageValidateCb_0>
 8003564:	2096      	movs	r0, #150	; 0x96
 8003566:	e02d      	b.n	80035c4 <??ZbZclOtaClientImageValidateCb_1>

08003568 <??ZbZclOtaClientImageValidateCb_0>:
 8003568:	2106      	movs	r1, #6
 800356a:	4640      	mov	r0, r8
 800356c:	f7ff ffdc 	bl	8003528 <zcl_otacli_has_tag>
 8003570:	2800      	cmp	r0, #0
 8003572:	d101      	bne.n	8003578 <??ZbZclOtaClientImageValidateCb_2>
 8003574:	2096      	movs	r0, #150	; 0x96
 8003576:	e025      	b.n	80035c4 <??ZbZclOtaClientImageValidateCb_1>

08003578 <??ZbZclOtaClientImageValidateCb_2>:
 8003578:	a904      	add	r1, sp, #16
 800357a:	f208 20a7 	addw	r0, r8, #679	; 0x2a7
 800357e:	f011 fe48 	bl	8015212 <ZbHashDigest>
 8003582:	f20f 094c 	addw	r9, pc, #76	; 0x4c
 8003586:	2300      	movs	r3, #0
 8003588:	464a      	mov	r2, r9
 800358a:	2131      	movs	r1, #49	; 0x31
 800358c:	68a8      	ldr	r0, [r5, #8]
 800358e:	f011 fe6e 	bl	801526e <zb_heap_alloc>
 8003592:	0004      	movs	r4, r0
 8003594:	2c00      	cmp	r4, #0
 8003596:	d101      	bne.n	800359c <??ZbZclOtaClientImageValidateCb_3>
 8003598:	2089      	movs	r0, #137	; 0x89
 800359a:	e013      	b.n	80035c4 <??ZbZclOtaClientImageValidateCb_1>

0800359c <??ZbZclOtaClientImageValidateCb_3>:
 800359c:	0020      	movs	r0, r4
 800359e:	f011 fded 	bl	801517c <ZbHashInit>
 80035a2:	224a      	movs	r2, #74	; 0x4a
 80035a4:	f518 7101 	adds.w	r1, r8, #516	; 0x204
 80035a8:	0020      	movs	r0, r4
 80035aa:	f011 fe00 	bl	80151ae <ZbHashAdd>
 80035ae:	4669      	mov	r1, sp
 80035b0:	0020      	movs	r0, r4
 80035b2:	f011 fe2e 	bl	8015212 <ZbHashDigest>
 80035b6:	2300      	movs	r3, #0
 80035b8:	464a      	mov	r2, r9
 80035ba:	0021      	movs	r1, r4
 80035bc:	68a8      	ldr	r0, [r5, #8]
 80035be:	f011 fe65 	bl	801528c <zb_heap_free>
 80035c2:	2000      	movs	r0, #0

080035c4 <??ZbZclOtaClientImageValidateCb_1>:
 80035c4:	b009      	add	sp, #36	; 0x24
 80035c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080035cc <??DataTable9>:
 80035cc:	f11e 0bee                                   ....

080035d0 <??DataTable9_1>:
 80035d0:	0000 0000                                   ....

080035d4 <??DataTable9_2>:
 80035d4:	2f8b 0800                                   ./..

080035d8 <ZbZclOtaClientImageUpgradeEndCb>:
 80035d8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035dc:	0005      	movs	r5, r0
 80035de:	000e      	movs	r6, r1
 80035e0:	0017      	movs	r7, r2
 80035e2:	4698      	mov	r8, r3
 80035e4:	46a9      	mov	r9, r5
 80035e6:	466b      	mov	r3, sp
 80035e8:	2200      	movs	r2, #0
 80035ea:	210b      	movs	r1, #11
 80035ec:	0028      	movs	r0, r5
 80035ee:	f7fd f9ab 	bl	8000948 <ZbZclAttrIntegerRead>
 80035f2:	0004      	movs	r4, r0
 80035f4:	f89d 0000 	ldrb.w	r0, [sp]
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d001      	beq.n	8003600 <??ZbZclOtaClientImageUpgradeEndCb_0>
 80035fc:	2000      	movs	r0, #0
 80035fe:	0004      	movs	r4, r0

08003600 <??ZbZclOtaClientImageUpgradeEndCb_0>:
 8003600:	0020      	movs	r0, r4
 8003602:	b2c0      	uxtb	r0, r0
 8003604:	2801      	cmp	r0, #1
 8003606:	d104      	bne.n	8003612 <??ZbZclOtaClientImageUpgradeEndCb_1>
 8003608:	f118 0f01 	cmn.w	r8, #1
 800360c:	d001      	beq.n	8003612 <??ZbZclOtaClientImageUpgradeEndCb_1>
 800360e:	207e      	movs	r0, #126	; 0x7e
 8003610:	e027      	b.n	8003662 <??ZbZclOtaClientImageUpgradeEndCb_2>

08003612 <??ZbZclOtaClientImageUpgradeEndCb_1>:
 8003612:	f118 0f01 	cmn.w	r8, #1
 8003616:	d107      	bne.n	8003628 <??ZbZclOtaClientImageUpgradeEndCb_3>
 8003618:	f240 726a 	movw	r2, #1898	; 0x76a
 800361c:	2103      	movs	r1, #3
 800361e:	4648      	mov	r0, r9
 8003620:	f7fe fc38 	bl	8001e94 <zcl_otacli_write_upgrade_status>
 8003624:	2000      	movs	r0, #0
 8003626:	e01c      	b.n	8003662 <??ZbZclOtaClientImageUpgradeEndCb_2>

08003628 <??ZbZclOtaClientImageUpgradeEndCb_3>:
 8003628:	45b8      	cmp	r8, r7
 800362a:	d201      	bcs.n	8003630 <??ZbZclOtaClientImageUpgradeEndCb_4>
 800362c:	2001      	movs	r0, #1
 800362e:	e018      	b.n	8003662 <??ZbZclOtaClientImageUpgradeEndCb_2>

08003630 <??ZbZclOtaClientImageUpgradeEndCb_4>:
 8003630:	ebb8 0a07 	subs.w	sl, r8, r7
 8003634:	f1ba 0f00 	cmp.w	sl, #0
 8003638:	d00e      	beq.n	8003658 <??ZbZclOtaClientImageUpgradeEndCb_5>
 800363a:	f240 7277 	movw	r2, #1911	; 0x777
 800363e:	2104      	movs	r1, #4
 8003640:	4648      	mov	r0, r9
 8003642:	f7fe fc27 	bl	8001e94 <zcl_otacli_write_upgrade_status>
 8003646:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800364a:	fb01 f10a 	mul.w	r1, r1, sl
 800364e:	f8d9 010c 	ldr.w	r0, [r9, #268]	; 0x10c
 8003652:	f011 f945 	bl	80148e0 <ZbTimerReset>
 8003656:	e003      	b.n	8003660 <??ZbZclOtaClientImageUpgradeEndCb_6>

08003658 <??ZbZclOtaClientImageUpgradeEndCb_5>:
 8003658:	0029      	movs	r1, r5
 800365a:	68a8      	ldr	r0, [r5, #8]
 800365c:	f7ff fea7 	bl	80033ae <zcl_otacli_reboot_timer>

08003660 <??ZbZclOtaClientImageUpgradeEndCb_6>:
 8003660:	2000      	movs	r0, #0

08003662 <??ZbZclOtaClientImageUpgradeEndCb_2>:
 8003662:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08003666 <ZbZclOtaClientImageNotifyCb>:
 8003666:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	0004      	movs	r4, r0
 800366e:	4688      	mov	r8, r1
 8003670:	001d      	movs	r5, r3
 8003672:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8003674:	9400      	str	r4, [sp, #0]
 8003676:	2700      	movs	r7, #0
 8003678:	2300      	movs	r3, #0
 800367a:	2200      	movs	r2, #0
 800367c:	2107      	movs	r1, #7
 800367e:	0020      	movs	r0, r4
 8003680:	f7fd f962 	bl	8000948 <ZbZclAttrIntegerRead>
 8003684:	f8ad 0006 	strh.w	r0, [sp, #6]
 8003688:	2300      	movs	r3, #0
 800368a:	2200      	movs	r2, #0
 800368c:	2108      	movs	r1, #8
 800368e:	0020      	movs	r0, r4
 8003690:	f7fd f95a 	bl	8000948 <ZbZclAttrIntegerRead>
 8003694:	f8ad 0004 	strh.w	r0, [sp, #4]
 8003698:	2300      	movs	r3, #0
 800369a:	2200      	movs	r2, #0
 800369c:	2102      	movs	r1, #2
 800369e:	0020      	movs	r0, r4
 80036a0:	f7fd f952 	bl	8000948 <ZbZclAttrIntegerRead>
 80036a4:	9005      	str	r0, [sp, #20]
 80036a6:	0030      	movs	r0, r6
 80036a8:	f010 fed5 	bl	8014456 <ZbApsAddrIsBcast>
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d045      	beq.n	800373c <??ZbZclOtaClientImageNotifyCb_0>
 80036b0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80036b4:	2865      	cmp	r0, #101	; 0x65
 80036b6:	da03      	bge.n	80036c0 <??ZbZclOtaClientImageNotifyCb_1>
 80036b8:	4640      	mov	r0, r8
 80036ba:	b2c0      	uxtb	r0, r0
 80036bc:	2804      	cmp	r0, #4
 80036be:	db01      	blt.n	80036c4 <??ZbZclOtaClientImageNotifyCb_2>

080036c0 <??ZbZclOtaClientImageNotifyCb_1>:
 80036c0:	2001      	movs	r0, #1
 80036c2:	e08f      	b.n	80037e4 <??ZbZclOtaClientImageNotifyCb_3>

080036c4 <??ZbZclOtaClientImageNotifyCb_2>:
 80036c4:	f014 fe34 	bl	8018330 <rand>
 80036c8:	2164      	movs	r1, #100	; 0x64
 80036ca:	fb90 f2f1 	sdiv	r2, r0, r1
 80036ce:	fb01 0012 	mls	r0, r1, r2, r0
 80036d2:	1c40      	adds	r0, r0, #1
 80036d4:	f8ad 0008 	strh.w	r0, [sp, #8]
 80036d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80036dc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80036e0:	b280      	uxth	r0, r0
 80036e2:	4288      	cmp	r0, r1
 80036e4:	d201      	bcs.n	80036ea <??ZbZclOtaClientImageNotifyCb_4>
 80036e6:	2000      	movs	r0, #0
 80036e8:	e07c      	b.n	80037e4 <??ZbZclOtaClientImageNotifyCb_3>

080036ea <??ZbZclOtaClientImageNotifyCb_4>:
 80036ea:	4640      	mov	r0, r8
 80036ec:	b2c0      	uxtb	r0, r0
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d006      	beq.n	8003700 <??ZbZclOtaClientImageNotifyCb_5>
 80036f2:	8828      	ldrh	r0, [r5, #0]
 80036f4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80036f8:	4288      	cmp	r0, r1
 80036fa:	d001      	beq.n	8003700 <??ZbZclOtaClientImageNotifyCb_5>
 80036fc:	2001      	movs	r0, #1
 80036fe:	e071      	b.n	80037e4 <??ZbZclOtaClientImageNotifyCb_3>

08003700 <??ZbZclOtaClientImageNotifyCb_5>:
 8003700:	4640      	mov	r0, r8
 8003702:	b2c0      	uxtb	r0, r0
 8003704:	2802      	cmp	r0, #2
 8003706:	db0b      	blt.n	8003720 <??ZbZclOtaClientImageNotifyCb_6>
 8003708:	8868      	ldrh	r0, [r5, #2]
 800370a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800370e:	4288      	cmp	r0, r1
 8003710:	d006      	beq.n	8003720 <??ZbZclOtaClientImageNotifyCb_6>
 8003712:	8868      	ldrh	r0, [r5, #2]
 8003714:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003718:	4288      	cmp	r0, r1
 800371a:	d001      	beq.n	8003720 <??ZbZclOtaClientImageNotifyCb_6>
 800371c:	2001      	movs	r0, #1
 800371e:	e061      	b.n	80037e4 <??ZbZclOtaClientImageNotifyCb_3>

08003720 <??ZbZclOtaClientImageNotifyCb_6>:
 8003720:	4640      	mov	r0, r8
 8003722:	b2c0      	uxtb	r0, r0
 8003724:	2803      	cmp	r0, #3
 8003726:	db09      	blt.n	800373c <??ZbZclOtaClientImageNotifyCb_0>
 8003728:	6868      	ldr	r0, [r5, #4]
 800372a:	9905      	ldr	r1, [sp, #20]
 800372c:	4288      	cmp	r0, r1
 800372e:	d003      	beq.n	8003738 <??ZbZclOtaClientImageNotifyCb_7>
 8003730:	6868      	ldr	r0, [r5, #4]
 8003732:	f110 0f01 	cmn.w	r0, #1
 8003736:	d101      	bne.n	800373c <??ZbZclOtaClientImageNotifyCb_0>

08003738 <??ZbZclOtaClientImageNotifyCb_7>:
 8003738:	2001      	movs	r0, #1
 800373a:	e053      	b.n	80037e4 <??ZbZclOtaClientImageNotifyCb_3>

0800373c <??ZbZclOtaClientImageNotifyCb_0>:
 800373c:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8003740:	2900      	cmp	r1, #0
 8003742:	d103      	bne.n	800374c <??ZbZclOtaClientImageNotifyCb_8>
 8003744:	2800      	cmp	r0, #0
 8003746:	d101      	bne.n	800374c <??ZbZclOtaClientImageNotifyCb_8>
 8003748:	2001      	movs	r0, #1
 800374a:	e04b      	b.n	80037e4 <??ZbZclOtaClientImageNotifyCb_3>

0800374c <??ZbZclOtaClientImageNotifyCb_8>:
 800374c:	9800      	ldr	r0, [sp, #0]
 800374e:	e9d0 2344 	ldrd	r2, r3, [r0, #272]	; 0x110
 8003752:	f05f 30ff 	movs.w	r0, #4294967295
 8003756:	f05f 31ff 	movs.w	r1, #4294967295
 800375a:	428b      	cmp	r3, r1
 800375c:	d10b      	bne.n	8003776 <??ZbZclOtaClientImageNotifyCb_9>
 800375e:	4282      	cmp	r2, r0
 8003760:	d109      	bne.n	8003776 <??ZbZclOtaClientImageNotifyCb_9>
 8003762:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8003766:	9a00      	ldr	r2, [sp, #0]
 8003768:	e9c2 0144 	strd	r0, r1, [r2, #272]	; 0x110
 800376c:	8a70      	ldrh	r0, [r6, #18]
 800376e:	9900      	ldr	r1, [sp, #0]
 8003770:	f881 0118 	strb.w	r0, [r1, #280]	; 0x118
 8003774:	e00e      	b.n	8003794 <??ZbZclOtaClientImageNotifyCb_10>

08003776 <??ZbZclOtaClientImageNotifyCb_9>:
 8003776:	9800      	ldr	r0, [sp, #0]
 8003778:	e9d0 2344 	ldrd	r2, r3, [r0, #272]	; 0x110
 800377c:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8003780:	428b      	cmp	r3, r1
 8003782:	d101      	bne.n	8003788 <??ZbZclOtaClientImageNotifyCb_11>
 8003784:	4282      	cmp	r2, r0
 8003786:	d001      	beq.n	800378c <??ZbZclOtaClientImageNotifyCb_12>

08003788 <??ZbZclOtaClientImageNotifyCb_11>:
 8003788:	2001      	movs	r0, #1
 800378a:	e02b      	b.n	80037e4 <??ZbZclOtaClientImageNotifyCb_3>

0800378c <??ZbZclOtaClientImageNotifyCb_12>:
 800378c:	8a70      	ldrh	r0, [r6, #18]
 800378e:	9900      	ldr	r1, [sp, #0]
 8003790:	f881 0118 	strb.w	r0, [r1, #280]	; 0x118

08003794 <??ZbZclOtaClientImageNotifyCb_10>:
 8003794:	f05f 0908 	movs.w	r9, #8
 8003798:	f05f 0a00 	movs.w	sl, #0
 800379c:	f10d 0b0c 	add.w	fp, sp, #12
 80037a0:	4652      	mov	r2, sl
 80037a2:	4649      	mov	r1, r9
 80037a4:	4658      	mov	r0, fp
 80037a6:	f004 f897 	bl	80078d8 <__aeabi_memset>
 80037aa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80037ae:	f8ad 000c 	strh.w	r0, [sp, #12]
 80037b2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80037b6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80037ba:	9805      	ldr	r0, [sp, #20]
 80037bc:	9004      	str	r0, [sp, #16]
 80037be:	f057 0701 	orrs.w	r7, r7, #1
 80037c2:	9800      	ldr	r0, [sp, #0]
 80037c4:	f8b0 30d0 	ldrh.w	r3, [r0, #208]	; 0xd0
 80037c8:	003a      	movs	r2, r7
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	a903      	add	r1, sp, #12
 80037ce:	0020      	movs	r0, r4
 80037d0:	f7fe fd60 	bl	8002294 <ZbZclOtaClientQueryNextImageReq>
 80037d4:	0001      	movs	r1, r0
 80037d6:	0008      	movs	r0, r1
 80037d8:	b2c0      	uxtb	r0, r0
 80037da:	2800      	cmp	r0, #0
 80037dc:	d001      	beq.n	80037e2 <??ZbZclOtaClientImageNotifyCb_13>
 80037de:	2001      	movs	r0, #1
 80037e0:	e000      	b.n	80037e4 <??ZbZclOtaClientImageNotifyCb_3>

080037e2 <??ZbZclOtaClientImageNotifyCb_13>:
 80037e2:	2000      	movs	r0, #0

080037e4 <??ZbZclOtaClientImageNotifyCb_3>:
 80037e4:	b007      	add	sp, #28
 80037e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080037ea <ZbZclOtaClientDiscoveryFinishCb>:
 80037ea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	0004      	movs	r4, r0
 80037f2:	000d      	movs	r5, r1
 80037f4:	0016      	movs	r6, r2
 80037f6:	9403      	str	r4, [sp, #12]
 80037f8:	2700      	movs	r7, #0
 80037fa:	0028      	movs	r0, r5
 80037fc:	b2c0      	uxtb	r0, r0
 80037fe:	2800      	cmp	r0, #0
 8003800:	d13b      	bne.n	800387a <??ZbZclOtaClientDiscoveryFinishCb_0>

08003802 <??ZbZclOtaClientDiscoveryFinishCb_1>:
 8003802:	2300      	movs	r3, #0
 8003804:	2200      	movs	r2, #0
 8003806:	2107      	movs	r1, #7
 8003808:	0020      	movs	r0, r4
 800380a:	f7fd f89d 	bl	8000948 <ZbZclAttrIntegerRead>
 800380e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8003812:	2300      	movs	r3, #0
 8003814:	2200      	movs	r2, #0
 8003816:	2108      	movs	r1, #8
 8003818:	0020      	movs	r0, r4
 800381a:	f7fd f895 	bl	8000948 <ZbZclAttrIntegerRead>
 800381e:	f8ad 0000 	strh.w	r0, [sp]
 8003822:	2300      	movs	r3, #0
 8003824:	2200      	movs	r2, #0
 8003826:	2102      	movs	r1, #2
 8003828:	0020      	movs	r0, r4
 800382a:	f7fd f88d 	bl	8000948 <ZbZclAttrIntegerRead>
 800382e:	4680      	mov	r8, r0
 8003830:	f05f 0908 	movs.w	r9, #8
 8003834:	f05f 0a00 	movs.w	sl, #0
 8003838:	f10d 0b04 	add.w	fp, sp, #4
 800383c:	4652      	mov	r2, sl
 800383e:	4649      	mov	r1, r9
 8003840:	4658      	mov	r0, fp
 8003842:	f004 f849 	bl	80078d8 <__aeabi_memset>
 8003846:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800384a:	f8ad 0004 	strh.w	r0, [sp, #4]
 800384e:	f8bd 0000 	ldrh.w	r0, [sp]
 8003852:	f8ad 0006 	strh.w	r0, [sp, #6]
 8003856:	f8cd 8008 	str.w	r8, [sp, #8]
 800385a:	f057 0701 	orrs.w	r7, r7, #1
 800385e:	9803      	ldr	r0, [sp, #12]
 8003860:	f8b0 30d0 	ldrh.w	r3, [r0, #208]	; 0xd0
 8003864:	003a      	movs	r2, r7
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	a901      	add	r1, sp, #4
 800386a:	0020      	movs	r0, r4
 800386c:	f7fe fd12 	bl	8002294 <ZbZclOtaClientQueryNextImageReq>
 8003870:	0001      	movs	r1, r0
 8003872:	0008      	movs	r0, r1
 8003874:	b2c0      	uxtb	r0, r0
 8003876:	2800      	cmp	r0, #0
 8003878:	d1ff      	bne.n	800387a <??ZbZclOtaClientDiscoveryFinishCb_0>

0800387a <??ZbZclOtaClientDiscoveryFinishCb_0>:
 800387a:	b005      	add	sp, #20
 800387c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003880 <is_little_endian>:
 8003880:	b081      	sub	sp, #4
 8003882:	2001      	movs	r0, #1
 8003884:	f8ad 0000 	strh.w	r0, [sp]
 8003888:	4668      	mov	r0, sp
 800388a:	7800      	ldrb	r0, [r0, #0]
 800388c:	2801      	cmp	r0, #1
 800388e:	d101      	bne.n	8003894 <??is_little_endian_0>
 8003890:	2001      	movs	r0, #1
 8003892:	e000      	b.n	8003896 <??is_little_endian_1>

08003894 <??is_little_endian_0>:
 8003894:	2000      	movs	r0, #0

08003896 <??is_little_endian_1>:
 8003896:	b2c0      	uxtb	r0, r0
 8003898:	b001      	add	sp, #4
 800389a:	4770      	bx	lr

0800389c <pletoh16>:
 800389c:	0001      	movs	r1, r0
 800389e:	7808      	ldrb	r0, [r1, #0]
 80038a0:	7849      	ldrb	r1, [r1, #1]
 80038a2:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 80038a6:	b280      	uxth	r0, r0
 80038a8:	4770      	bx	lr

080038aa <pletoh24>:
 80038aa:	b510      	push	{r4, lr}
 80038ac:	0004      	movs	r4, r0
 80038ae:	0020      	movs	r0, r4
 80038b0:	f7ff fff4 	bl	800389c <pletoh16>
 80038b4:	b280      	uxth	r0, r0
 80038b6:	78a1      	ldrb	r1, [r4, #2]
 80038b8:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 80038bc:	bd10      	pop	{r4, pc}

080038be <pletoh32>:
 80038be:	b538      	push	{r3, r4, r5, lr}
 80038c0:	0004      	movs	r4, r0
 80038c2:	0020      	movs	r0, r4
 80038c4:	f7ff ffea 	bl	800389c <pletoh16>
 80038c8:	0005      	movs	r5, r0
 80038ca:	b2ad      	uxth	r5, r5
 80038cc:	1ca0      	adds	r0, r4, #2
 80038ce:	f7ff ffe5 	bl	800389c <pletoh16>
 80038d2:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 80038d6:	0028      	movs	r0, r5
 80038d8:	bd32      	pop	{r1, r4, r5, pc}

080038da <pletoh40>:
 80038da:	b510      	push	{r4, lr}
 80038dc:	0004      	movs	r4, r0
 80038de:	0020      	movs	r0, r4
 80038e0:	f7ff ffed 	bl	80038be <pletoh32>
 80038e4:	7921      	ldrb	r1, [r4, #4]
 80038e6:	bd10      	pop	{r4, pc}

080038e8 <pletoh48>:
 80038e8:	b510      	push	{r4, lr}
 80038ea:	0004      	movs	r4, r0
 80038ec:	0020      	movs	r0, r4
 80038ee:	f7ff fff4 	bl	80038da <pletoh40>
 80038f2:	7962      	ldrb	r2, [r4, #5]
 80038f4:	2300      	movs	r3, #0
 80038f6:	0213      	lsls	r3, r2, #8
 80038f8:	2200      	movs	r2, #0
 80038fa:	4310      	orrs	r0, r2
 80038fc:	4319      	orrs	r1, r3
 80038fe:	bd10      	pop	{r4, pc}

08003900 <pletoh56>:
 8003900:	b510      	push	{r4, lr}
 8003902:	0004      	movs	r4, r0
 8003904:	0020      	movs	r0, r4
 8003906:	f7ff ffef 	bl	80038e8 <pletoh48>
 800390a:	79a2      	ldrb	r2, [r4, #6]
 800390c:	2300      	movs	r3, #0
 800390e:	0413      	lsls	r3, r2, #16
 8003910:	2200      	movs	r2, #0
 8003912:	4310      	orrs	r0, r2
 8003914:	4319      	orrs	r1, r3
 8003916:	bd10      	pop	{r4, pc}

08003918 <pletoh64>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	0005      	movs	r5, r0
 800391c:	0028      	movs	r0, r5
 800391e:	f7ff ffce 	bl	80038be <pletoh32>
 8003922:	0004      	movs	r4, r0
 8003924:	1d28      	adds	r0, r5, #4
 8003926:	f7ff ffca 	bl	80038be <pletoh32>
 800392a:	0003      	movs	r3, r0
 800392c:	0022      	movs	r2, r4
 800392e:	0010      	movs	r0, r2
 8003930:	0019      	movs	r1, r3
 8003932:	bd34      	pop	{r2, r4, r5, pc}

08003934 <putle16>:
 8003934:	7001      	strb	r1, [r0, #0]
 8003936:	000a      	movs	r2, r1
 8003938:	b292      	uxth	r2, r2
 800393a:	0a12      	lsrs	r2, r2, #8
 800393c:	7042      	strb	r2, [r0, #1]
 800393e:	4770      	bx	lr

08003940 <putle24>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	0004      	movs	r4, r0
 8003944:	000d      	movs	r5, r1
 8003946:	0029      	movs	r1, r5
 8003948:	b289      	uxth	r1, r1
 800394a:	0020      	movs	r0, r4
 800394c:	f7ff fff2 	bl	8003934 <putle16>
 8003950:	0028      	movs	r0, r5
 8003952:	0c00      	lsrs	r0, r0, #16
 8003954:	70a0      	strb	r0, [r4, #2]
 8003956:	bd31      	pop	{r0, r4, r5, pc}

08003958 <putle32>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	0004      	movs	r4, r0
 800395c:	000d      	movs	r5, r1
 800395e:	0029      	movs	r1, r5
 8003960:	0020      	movs	r0, r4
 8003962:	f7ff ffed 	bl	8003940 <putle24>
 8003966:	0028      	movs	r0, r5
 8003968:	0e00      	lsrs	r0, r0, #24
 800396a:	70e0      	strb	r0, [r4, #3]
 800396c:	bd31      	pop	{r0, r4, r5, pc}

0800396e <putle40>:
 800396e:	b570      	push	{r4, r5, r6, lr}
 8003970:	0006      	movs	r6, r0
 8003972:	0014      	movs	r4, r2
 8003974:	001d      	movs	r5, r3
 8003976:	0021      	movs	r1, r4
 8003978:	0030      	movs	r0, r6
 800397a:	f7ff ffed 	bl	8003958 <putle32>
 800397e:	7135      	strb	r5, [r6, #4]
 8003980:	bd70      	pop	{r4, r5, r6, pc}

08003982 <putle48>:
 8003982:	b570      	push	{r4, r5, r6, lr}
 8003984:	0006      	movs	r6, r0
 8003986:	0014      	movs	r4, r2
 8003988:	001d      	movs	r5, r3
 800398a:	0022      	movs	r2, r4
 800398c:	002b      	movs	r3, r5
 800398e:	0030      	movs	r0, r6
 8003990:	f7ff ffed 	bl	800396e <putle40>
 8003994:	0020      	movs	r0, r4
 8003996:	0029      	movs	r1, r5
 8003998:	0a08      	lsrs	r0, r1, #8
 800399a:	2100      	movs	r1, #0
 800399c:	7170      	strb	r0, [r6, #5]
 800399e:	bd70      	pop	{r4, r5, r6, pc}

080039a0 <putle56>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	0006      	movs	r6, r0
 80039a4:	0014      	movs	r4, r2
 80039a6:	001d      	movs	r5, r3
 80039a8:	0022      	movs	r2, r4
 80039aa:	002b      	movs	r3, r5
 80039ac:	0030      	movs	r0, r6
 80039ae:	f7ff ffe8 	bl	8003982 <putle48>
 80039b2:	0020      	movs	r0, r4
 80039b4:	0029      	movs	r1, r5
 80039b6:	0c08      	lsrs	r0, r1, #16
 80039b8:	2100      	movs	r1, #0
 80039ba:	71b0      	strb	r0, [r6, #6]
 80039bc:	bd70      	pop	{r4, r5, r6, pc}

080039be <putle64>:
 80039be:	b570      	push	{r4, r5, r6, lr}
 80039c0:	0006      	movs	r6, r0
 80039c2:	0014      	movs	r4, r2
 80039c4:	001d      	movs	r5, r3
 80039c6:	0022      	movs	r2, r4
 80039c8:	002b      	movs	r3, r5
 80039ca:	0030      	movs	r0, r6
 80039cc:	f7ff ffe8 	bl	80039a0 <putle56>
 80039d0:	0020      	movs	r0, r4
 80039d2:	0029      	movs	r1, r5
 80039d4:	0e08      	lsrs	r0, r1, #24
 80039d6:	2100      	movs	r1, #0
 80039d8:	71f0      	strb	r0, [r6, #7]
 80039da:	bd70      	pop	{r4, r5, r6, pc}

080039dc <ZbZclAttrAddSorted>:
 80039dc:	b430      	push	{r4, r5}
 80039de:	0002      	movs	r2, r0
 80039e0:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80039e2:	f112 0424 	adds.w	r4, r2, #36	; 0x24
 80039e6:	42a0      	cmp	r0, r4
 80039e8:	d001      	beq.n	80039ee <??ZbZclAttrAddSorted_0>
 80039ea:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80039ec:	e000      	b.n	80039f0 <??ZbZclAttrAddSorted_1>

080039ee <??ZbZclAttrAddSorted_0>:
 80039ee:	2000      	movs	r0, #0

080039f0 <??ZbZclAttrAddSorted_1>:
 80039f0:	2800      	cmp	r0, #0
 80039f2:	d017      	beq.n	8003a24 <??ZbZclAttrAddSorted_2>
 80039f4:	0003      	movs	r3, r0
 80039f6:	688c      	ldr	r4, [r1, #8]
 80039f8:	8824      	ldrh	r4, [r4, #0]
 80039fa:	689d      	ldr	r5, [r3, #8]
 80039fc:	882d      	ldrh	r5, [r5, #0]
 80039fe:	42ac      	cmp	r4, r5
 8003a00:	d207      	bcs.n	8003a12 <??ZbZclAttrAddSorted_3>
 8003a02:	600b      	str	r3, [r1, #0]
 8003a04:	685c      	ldr	r4, [r3, #4]
 8003a06:	604c      	str	r4, [r1, #4]
 8003a08:	680c      	ldr	r4, [r1, #0]
 8003a0a:	6061      	str	r1, [r4, #4]
 8003a0c:	684c      	ldr	r4, [r1, #4]
 8003a0e:	6021      	str	r1, [r4, #0]
 8003a10:	e011      	b.n	8003a36 <??ZbZclAttrAddSorted_4>

08003a12 <??ZbZclAttrAddSorted_3>:
 8003a12:	6804      	ldr	r4, [r0, #0]
 8003a14:	f112 0524 	adds.w	r5, r2, #36	; 0x24
 8003a18:	42ac      	cmp	r4, r5
 8003a1a:	d001      	beq.n	8003a20 <??ZbZclAttrAddSorted_5>
 8003a1c:	6800      	ldr	r0, [r0, #0]
 8003a1e:	e7e7      	b.n	80039f0 <??ZbZclAttrAddSorted_1>

08003a20 <??ZbZclAttrAddSorted_5>:
 8003a20:	2000      	movs	r0, #0
 8003a22:	e7e5      	b.n	80039f0 <??ZbZclAttrAddSorted_1>

08003a24 <??ZbZclAttrAddSorted_2>:
 8003a24:	f112 0424 	adds.w	r4, r2, #36	; 0x24
 8003a28:	600c      	str	r4, [r1, #0]
 8003a2a:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8003a2c:	604c      	str	r4, [r1, #4]
 8003a2e:	680c      	ldr	r4, [r1, #0]
 8003a30:	6061      	str	r1, [r4, #4]
 8003a32:	684c      	ldr	r4, [r1, #4]
 8003a34:	6021      	str	r1, [r4, #0]

08003a36 <??ZbZclAttrAddSorted_4>:
 8003a36:	bc30      	pop	{r4, r5}
 8003a38:	4770      	bx	lr

08003a3a <ZbZclAttrFind>:
 8003a3a:	b430      	push	{r4, r5}
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003a40:	f113 0224 	adds.w	r2, r3, #36	; 0x24
 8003a44:	4290      	cmp	r0, r2
 8003a46:	d001      	beq.n	8003a4c <??ZbZclAttrFind_0>
 8003a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a4a:	e000      	b.n	8003a4e <??ZbZclAttrFind_1>

08003a4c <??ZbZclAttrFind_0>:
 8003a4c:	2200      	movs	r2, #0

08003a4e <??ZbZclAttrFind_1>:
 8003a4e:	2a00      	cmp	r2, #0
 8003a50:	d012      	beq.n	8003a78 <??ZbZclAttrFind_2>
 8003a52:	0014      	movs	r4, r2
 8003a54:	68a0      	ldr	r0, [r4, #8]
 8003a56:	8800      	ldrh	r0, [r0, #0]
 8003a58:	000d      	movs	r5, r1
 8003a5a:	b2ad      	uxth	r5, r5
 8003a5c:	42a8      	cmp	r0, r5
 8003a5e:	d005      	beq.n	8003a6c <??ZbZclAttrFind_3>
 8003a60:	6810      	ldr	r0, [r2, #0]
 8003a62:	f113 0524 	adds.w	r5, r3, #36	; 0x24
 8003a66:	42a8      	cmp	r0, r5
 8003a68:	d004      	beq.n	8003a74 <??ZbZclAttrFind_4>
 8003a6a:	e001      	b.n	8003a70 <??ZbZclAttrFind_5>

08003a6c <??ZbZclAttrFind_3>:
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	e004      	b.n	8003a7a <??ZbZclAttrFind_6>

08003a70 <??ZbZclAttrFind_5>:
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	e7ec      	b.n	8003a4e <??ZbZclAttrFind_1>

08003a74 <??ZbZclAttrFind_4>:
 8003a74:	2200      	movs	r2, #0
 8003a76:	e7ea      	b.n	8003a4e <??ZbZclAttrFind_1>

08003a78 <??ZbZclAttrFind_2>:
 8003a78:	2000      	movs	r0, #0

08003a7a <??ZbZclAttrFind_6>:
 8003a7a:	bc30      	pop	{r4, r5}
 8003a7c:	4770      	bx	lr

08003a7e <ZbZclAttrHandleDiscover>:
 8003a7e:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a82:	b09f      	sub	sp, #124	; 0x7c
 8003a84:	0004      	movs	r4, r0
 8003a86:	000d      	movs	r5, r1
 8003a88:	0016      	movs	r6, r2
 8003a8a:	2708      	movs	r7, #8
 8003a8c:	f05f 0800 	movs.w	r8, #0
 8003a90:	f10d 0908 	add.w	r9, sp, #8
 8003a94:	4642      	mov	r2, r8
 8003a96:	0039      	movs	r1, r7
 8003a98:	4648      	mov	r0, r9
 8003a9a:	f003 ff1d 	bl	80078d8 <__aeabi_memset>
 8003a9e:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8003aa0:	2803      	cmp	r0, #3
 8003aa2:	d206      	bcs.n	8003ab2 <??ZbZclAttrHandleDiscover_0>
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	002a      	movs	r2, r5
 8003aa8:	0031      	movs	r1, r6
 8003aaa:	0020      	movs	r0, r4
 8003aac:	f011 f9dc 	bl	8014e68 <ZbZclSendDefaultResponse>
 8003ab0:	e070      	b.n	8003b94 <??ZbZclAttrHandleDiscover_1>

08003ab2 <??ZbZclAttrHandleDiscover_0>:
 8003ab2:	f05f 0800 	movs.w	r8, #0
 8003ab6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003ab8:	4641      	mov	r1, r8
 8003aba:	b2c9      	uxtb	r1, r1
 8003abc:	4408      	add	r0, r1
 8003abe:	f7ff feed 	bl	800389c <pletoh16>
 8003ac2:	0007      	movs	r7, r0
 8003ac4:	f118 0802 	adds.w	r8, r8, #2
 8003ac8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003aca:	4641      	mov	r1, r8
 8003acc:	b2c9      	uxtb	r1, r1
 8003ace:	5c40      	ldrb	r0, [r0, r1]
 8003ad0:	f88d 0004 	strb.w	r0, [sp, #4]
 8003ad4:	f118 0801 	adds.w	r8, r8, #1
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f88d 0008 	strb.w	r0, [sp, #8]
 8003ade:	7868      	ldrb	r0, [r5, #1]
 8003ae0:	f88d 0009 	strb.w	r0, [sp, #9]
 8003ae4:	78a8      	ldrb	r0, [r5, #2]
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d101      	bne.n	8003aee <??ZbZclAttrHandleDiscover_2>
 8003aea:	2001      	movs	r0, #1
 8003aec:	e000      	b.n	8003af0 <??ZbZclAttrHandleDiscover_3>

08003aee <??ZbZclAttrHandleDiscover_2>:
 8003aee:	2000      	movs	r0, #0

08003af0 <??ZbZclAttrHandleDiscover_3>:
 8003af0:	f88d 000a 	strb.w	r0, [sp, #10]
 8003af4:	2001      	movs	r0, #1
 8003af6:	f88d 000b 	strb.w	r0, [sp, #11]
 8003afa:	88a8      	ldrh	r0, [r5, #4]
 8003afc:	f8ad 000c 	strh.w	r0, [sp, #12]
 8003b00:	79a8      	ldrb	r0, [r5, #6]
 8003b02:	f88d 000e 	strb.w	r0, [sp, #14]
 8003b06:	200d      	movs	r0, #13
 8003b08:	f88d 000f 	strb.w	r0, [sp, #15]
 8003b0c:	2239      	movs	r2, #57	; 0x39
 8003b0e:	a910      	add	r1, sp, #64	; 0x40
 8003b10:	a802      	add	r0, sp, #8
 8003b12:	f7fd ff3d 	bl	8001990 <ZbZclAppendHeader>
 8003b16:	4682      	mov	sl, r0
 8003b18:	f1ba 0f00 	cmp.w	sl, #0
 8003b1c:	d506      	bpl.n	8003b2c <??ZbZclAttrHandleDiscover_4>
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	002a      	movs	r2, r5
 8003b22:	0031      	movs	r1, r6
 8003b24:	0020      	movs	r0, r4
 8003b26:	f011 f99f 	bl	8014e68 <ZbZclSendDefaultResponse>
 8003b2a:	e033      	b.n	8003b94 <??ZbZclAttrHandleDiscover_1>

08003b2c <??ZbZclAttrHandleDiscover_4>:
 8003b2c:	f1da 0039 	rsbs	r0, sl, #57	; 0x39
 8003b30:	9000      	str	r0, [sp, #0]
 8003b32:	a810      	add	r0, sp, #64	; 0x40
 8003b34:	eb00 030a 	add.w	r3, r0, sl
 8003b38:	aa01      	add	r2, sp, #4
 8003b3a:	0039      	movs	r1, r7
 8003b3c:	b289      	uxth	r1, r1
 8003b3e:	0020      	movs	r0, r4
 8003b40:	f000 f82b 	bl	8003b9a <ZbZclAttrDiscoverGetList>
 8003b44:	4681      	mov	r9, r0
 8003b46:	eb19 090a 	adds.w	r9, r9, sl
 8003b4a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d104      	bne.n	8003b5c <??ZbZclAttrHandleDiscover_5>
 8003b52:	0030      	movs	r0, r6
 8003b54:	f010 fc7f 	bl	8014456 <ZbApsAddrIsBcast>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d11b      	bne.n	8003b94 <??ZbZclAttrHandleDiscover_1>

08003b5c <??ZbZclAttrHandleDiscover_5>:
 8003b5c:	0032      	movs	r2, r6
 8003b5e:	a904      	add	r1, sp, #16
 8003b60:	0020      	movs	r0, r4
 8003b62:	f7fd f9b4 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8003b66:	a804      	add	r0, sp, #16
 8003b68:	f116 0110 	adds.w	r1, r6, #16
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	f013 ff77 	bl	8017a60 <__aeabi_memcpy>
 8003b72:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 8003b76:	f7fd f942 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 8003b7a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8003b7e:	a810      	add	r0, sp, #64	; 0x40
 8003b80:	900a      	str	r0, [sp, #40]	; 0x28
 8003b82:	4648      	mov	r0, r9
 8003b84:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	68a0      	ldr	r0, [r4, #8]
 8003b90:	f010 fbd0 	bl	8014334 <ZbApsdeDataReqCallback>

08003b94 <??ZbZclAttrHandleDiscover_1>:
 8003b94:	b020      	add	sp, #128	; 0x80
 8003b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003b9a <ZbZclAttrDiscoverGetList>:
 8003b9a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9e:	0005      	movs	r5, r0
 8003ba0:	0016      	movs	r6, r2
 8003ba2:	001f      	movs	r7, r3
 8003ba4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8003ba8:	f05f 0a00 	movs.w	sl, #0
 8003bac:	f05f 0b00 	movs.w	fp, #0
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f807 000b 	strb.w	r0, [r7, fp]
 8003bb6:	f11b 0b01 	adds.w	fp, fp, #1
 8003bba:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003bbc:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8003bc0:	4288      	cmp	r0, r1
 8003bc2:	d001      	beq.n	8003bc8 <??ZbZclAttrDiscoverGetList_0>
 8003bc4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003bc6:	e000      	b.n	8003bca <??ZbZclAttrDiscoverGetList_1>

08003bc8 <??ZbZclAttrDiscoverGetList_0>:
 8003bc8:	2400      	movs	r4, #0

08003bca <??ZbZclAttrDiscoverGetList_1>:
 8003bca:	2c00      	cmp	r4, #0
 8003bcc:	d030      	beq.n	8003c30 <??ZbZclAttrDiscoverGetList_2>
 8003bce:	46a1      	mov	r9, r4
 8003bd0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8003bd4:	8800      	ldrh	r0, [r0, #0]
 8003bd6:	f8bd 1000 	ldrh.w	r1, [sp]
 8003bda:	4288      	cmp	r0, r1
 8003bdc:	d31f      	bcc.n	8003c1e <??ZbZclAttrDiscoverGetList_3>

08003bde <??ZbZclAttrDiscoverGetList_4>:
 8003bde:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8003be2:	8880      	ldrh	r0, [r0, #4]
 8003be4:	0400      	lsls	r0, r0, #16
 8003be6:	d41a      	bmi.n	8003c1e <??ZbZclAttrDiscoverGetList_3>

08003be8 <??ZbZclAttrDiscoverGetList_5>:
 8003be8:	4650      	mov	r0, sl
 8003bea:	7831      	ldrb	r1, [r6, #0]
 8003bec:	b2c0      	uxtb	r0, r0
 8003bee:	4288      	cmp	r0, r1
 8003bf0:	d21e      	bcs.n	8003c30 <??ZbZclAttrDiscoverGetList_2>

08003bf2 <??ZbZclAttrDiscoverGetList_6>:
 8003bf2:	f11b 0003 	adds.w	r0, fp, #3
 8003bf6:	4580      	cmp	r8, r0
 8003bf8:	d31a      	bcc.n	8003c30 <??ZbZclAttrDiscoverGetList_2>

08003bfa <??ZbZclAttrDiscoverGetList_7>:
 8003bfa:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8003bfe:	8801      	ldrh	r1, [r0, #0]
 8003c00:	eb07 000b 	add.w	r0, r7, fp
 8003c04:	f7ff fe96 	bl	8003934 <putle16>
 8003c08:	f11b 0b02 	adds.w	fp, fp, #2
 8003c0c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8003c10:	7880      	ldrb	r0, [r0, #2]
 8003c12:	f807 000b 	strb.w	r0, [r7, fp]
 8003c16:	f11b 0b01 	adds.w	fp, fp, #1
 8003c1a:	f11a 0a01 	adds.w	sl, sl, #1

08003c1e <??ZbZclAttrDiscoverGetList_3>:
 8003c1e:	6820      	ldr	r0, [r4, #0]
 8003c20:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8003c24:	4288      	cmp	r0, r1
 8003c26:	d001      	beq.n	8003c2c <??ZbZclAttrDiscoverGetList_8>
 8003c28:	6824      	ldr	r4, [r4, #0]
 8003c2a:	e7ce      	b.n	8003bca <??ZbZclAttrDiscoverGetList_1>

08003c2c <??ZbZclAttrDiscoverGetList_8>:
 8003c2c:	2400      	movs	r4, #0
 8003c2e:	e7cc      	b.n	8003bca <??ZbZclAttrDiscoverGetList_1>

08003c30 <??ZbZclAttrDiscoverGetList_2>:
 8003c30:	2c00      	cmp	r4, #0
 8003c32:	d101      	bne.n	8003c38 <??ZbZclAttrDiscoverGetList_9>
 8003c34:	2001      	movs	r0, #1
 8003c36:	7038      	strb	r0, [r7, #0]

08003c38 <??ZbZclAttrDiscoverGetList_9>:
 8003c38:	f886 a000 	strb.w	sl, [r6]
 8003c3c:	4658      	mov	r0, fp
 8003c3e:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003c42 <ZbZclAttrRead>:
 8003c42:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	4680      	mov	r8, r0
 8003c4a:	0014      	movs	r4, r2
 8003c4c:	001d      	movs	r5, r3
 8003c4e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8003c50:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8003c54:	4640      	mov	r0, r8
 8003c56:	f7ff fef0 	bl	8003a3a <ZbZclAttrFind>
 8003c5a:	0007      	movs	r7, r0
 8003c5c:	2f00      	cmp	r7, #0
 8003c5e:	d101      	bne.n	8003c64 <??ZbZclAttrRead_0>
 8003c60:	2086      	movs	r0, #134	; 0x86
 8003c62:	e03c      	b.n	8003cde <??ZbZclAttrRead_1>

08003c64 <??ZbZclAttrRead_0>:
 8003c64:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d005      	beq.n	8003c78 <??ZbZclAttrRead_2>
 8003c6c:	68b8      	ldr	r0, [r7, #8]
 8003c6e:	7900      	ldrb	r0, [r0, #4]
 8003c70:	0780      	lsls	r0, r0, #30
 8003c72:	d401      	bmi.n	8003c78 <??ZbZclAttrRead_2>
 8003c74:	208c      	movs	r0, #140	; 0x8c
 8003c76:	e032      	b.n	8003cde <??ZbZclAttrRead_1>

08003c78 <??ZbZclAttrRead_2>:
 8003c78:	2c00      	cmp	r4, #0
 8003c7a:	d002      	beq.n	8003c82 <??ZbZclAttrRead_3>
 8003c7c:	68b8      	ldr	r0, [r7, #8]
 8003c7e:	7880      	ldrb	r0, [r0, #2]
 8003c80:	7020      	strb	r0, [r4, #0]

08003c82 <??ZbZclAttrRead_3>:
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	d001      	beq.n	8003c8a <??ZbZclAttrRead_4>
 8003c86:	2e00      	cmp	r6, #0
 8003c88:	d105      	bne.n	8003c96 <??ZbZclAttrRead_5>

08003c8a <??ZbZclAttrRead_4>:
 8003c8a:	2c00      	cmp	r4, #0
 8003c8c:	d001      	beq.n	8003c92 <??ZbZclAttrRead_6>
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e025      	b.n	8003cde <??ZbZclAttrRead_1>

08003c92 <??ZbZclAttrRead_6>:
 8003c92:	2089      	movs	r0, #137	; 0x89
 8003c94:	e023      	b.n	8003cde <??ZbZclAttrRead_1>

08003c96 <??ZbZclAttrRead_5>:
 8003c96:	68b8      	ldr	r0, [r7, #8]
 8003c98:	7900      	ldrb	r0, [r0, #4]
 8003c9a:	06c0      	lsls	r0, r0, #27
 8003c9c:	d519      	bpl.n	8003cd2 <??ZbZclAttrRead_7>
 8003c9e:	f05f 0920 	movs.w	r9, #32
 8003ca2:	f05f 0a00 	movs.w	sl, #0
 8003ca6:	46eb      	mov	fp, sp
 8003ca8:	4652      	mov	r2, sl
 8003caa:	4649      	mov	r1, r9
 8003cac:	4658      	mov	r0, fp
 8003cae:	f003 fe13 	bl	80078d8 <__aeabi_memset>
 8003cb2:	68b8      	ldr	r0, [r7, #8]
 8003cb4:	9000      	str	r0, [sp, #0]
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	f88d 0004 	strb.w	r0, [sp, #4]
 8003cbc:	9502      	str	r5, [sp, #8]
 8003cbe:	9603      	str	r6, [sp, #12]
 8003cc0:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 8003cc4:	9007      	str	r0, [sp, #28]
 8003cc6:	466a      	mov	r2, sp
 8003cc8:	0039      	movs	r1, r7
 8003cca:	4640      	mov	r0, r8
 8003ccc:	f000 ff9e 	bl	8004c0c <ZbZclAttrCallbackExec>
 8003cd0:	e005      	b.n	8003cde <??ZbZclAttrRead_1>

08003cd2 <??ZbZclAttrRead_7>:
 8003cd2:	0033      	movs	r3, r6
 8003cd4:	002a      	movs	r2, r5
 8003cd6:	0039      	movs	r1, r7
 8003cd8:	4640      	mov	r0, r8
 8003cda:	f000 f803 	bl	8003ce4 <ZbZclAttrDefaultRead>

08003cde <??ZbZclAttrRead_1>:
 8003cde:	b009      	add	sp, #36	; 0x24
 8003ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003ce4 <ZbZclAttrDefaultRead>:
 8003ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	0005      	movs	r5, r0
 8003cea:	000e      	movs	r6, r1
 8003cec:	0017      	movs	r7, r2
 8003cee:	001c      	movs	r4, r3
 8003cf0:	f05f 0800 	movs.w	r8, #0
 8003cf4:	f05f 0900 	movs.w	r9, #0
 8003cf8:	68b0      	ldr	r0, [r6, #8]
 8003cfa:	7880      	ldrb	r0, [r0, #2]
 8003cfc:	2808      	cmp	r0, #8
 8003cfe:	d065      	beq.n	8003dcc <??ZbZclAttrDefaultRead_0>
 8003d00:	2809      	cmp	r0, #9
 8003d02:	d06b      	beq.n	8003ddc <??ZbZclAttrDefaultRead_1>
 8003d04:	280a      	cmp	r0, #10
 8003d06:	d071      	beq.n	8003dec <??ZbZclAttrDefaultRead_2>
 8003d08:	280b      	cmp	r0, #11
 8003d0a:	d077      	beq.n	8003dfc <??ZbZclAttrDefaultRead_3>
 8003d0c:	280c      	cmp	r0, #12
 8003d0e:	d07d      	beq.n	8003e0c <??ZbZclAttrDefaultRead_4>
 8003d10:	280d      	cmp	r0, #13
 8003d12:	f000 8083 	beq.w	8003e1c <??ZbZclAttrDefaultRead_5>
 8003d16:	280e      	cmp	r0, #14
 8003d18:	f000 8088 	beq.w	8003e2c <??ZbZclAttrDefaultRead_6>
 8003d1c:	280f      	cmp	r0, #15
 8003d1e:	f000 808d 	beq.w	8003e3c <??ZbZclAttrDefaultRead_7>
 8003d22:	2810      	cmp	r0, #16
 8003d24:	d052      	beq.n	8003dcc <??ZbZclAttrDefaultRead_0>
 8003d26:	2818      	cmp	r0, #24
 8003d28:	d050      	beq.n	8003dcc <??ZbZclAttrDefaultRead_0>
 8003d2a:	2819      	cmp	r0, #25
 8003d2c:	d056      	beq.n	8003ddc <??ZbZclAttrDefaultRead_1>
 8003d2e:	281a      	cmp	r0, #26
 8003d30:	d05c      	beq.n	8003dec <??ZbZclAttrDefaultRead_2>
 8003d32:	281b      	cmp	r0, #27
 8003d34:	d062      	beq.n	8003dfc <??ZbZclAttrDefaultRead_3>
 8003d36:	281c      	cmp	r0, #28
 8003d38:	d068      	beq.n	8003e0c <??ZbZclAttrDefaultRead_4>
 8003d3a:	281d      	cmp	r0, #29
 8003d3c:	d06e      	beq.n	8003e1c <??ZbZclAttrDefaultRead_5>
 8003d3e:	281e      	cmp	r0, #30
 8003d40:	d074      	beq.n	8003e2c <??ZbZclAttrDefaultRead_6>
 8003d42:	281f      	cmp	r0, #31
 8003d44:	d07a      	beq.n	8003e3c <??ZbZclAttrDefaultRead_7>
 8003d46:	2820      	cmp	r0, #32
 8003d48:	d040      	beq.n	8003dcc <??ZbZclAttrDefaultRead_0>
 8003d4a:	2821      	cmp	r0, #33	; 0x21
 8003d4c:	d046      	beq.n	8003ddc <??ZbZclAttrDefaultRead_1>
 8003d4e:	2822      	cmp	r0, #34	; 0x22
 8003d50:	d04c      	beq.n	8003dec <??ZbZclAttrDefaultRead_2>
 8003d52:	2823      	cmp	r0, #35	; 0x23
 8003d54:	d052      	beq.n	8003dfc <??ZbZclAttrDefaultRead_3>
 8003d56:	2824      	cmp	r0, #36	; 0x24
 8003d58:	d058      	beq.n	8003e0c <??ZbZclAttrDefaultRead_4>
 8003d5a:	2825      	cmp	r0, #37	; 0x25
 8003d5c:	d05e      	beq.n	8003e1c <??ZbZclAttrDefaultRead_5>
 8003d5e:	2826      	cmp	r0, #38	; 0x26
 8003d60:	d064      	beq.n	8003e2c <??ZbZclAttrDefaultRead_6>
 8003d62:	2827      	cmp	r0, #39	; 0x27
 8003d64:	d06a      	beq.n	8003e3c <??ZbZclAttrDefaultRead_7>
 8003d66:	2828      	cmp	r0, #40	; 0x28
 8003d68:	d030      	beq.n	8003dcc <??ZbZclAttrDefaultRead_0>
 8003d6a:	2829      	cmp	r0, #41	; 0x29
 8003d6c:	d036      	beq.n	8003ddc <??ZbZclAttrDefaultRead_1>
 8003d6e:	282a      	cmp	r0, #42	; 0x2a
 8003d70:	d03c      	beq.n	8003dec <??ZbZclAttrDefaultRead_2>
 8003d72:	282b      	cmp	r0, #43	; 0x2b
 8003d74:	d042      	beq.n	8003dfc <??ZbZclAttrDefaultRead_3>
 8003d76:	282c      	cmp	r0, #44	; 0x2c
 8003d78:	d048      	beq.n	8003e0c <??ZbZclAttrDefaultRead_4>
 8003d7a:	282d      	cmp	r0, #45	; 0x2d
 8003d7c:	d04e      	beq.n	8003e1c <??ZbZclAttrDefaultRead_5>
 8003d7e:	282e      	cmp	r0, #46	; 0x2e
 8003d80:	d054      	beq.n	8003e2c <??ZbZclAttrDefaultRead_6>
 8003d82:	282f      	cmp	r0, #47	; 0x2f
 8003d84:	d05a      	beq.n	8003e3c <??ZbZclAttrDefaultRead_7>
 8003d86:	2830      	cmp	r0, #48	; 0x30
 8003d88:	d020      	beq.n	8003dcc <??ZbZclAttrDefaultRead_0>
 8003d8a:	2831      	cmp	r0, #49	; 0x31
 8003d8c:	d026      	beq.n	8003ddc <??ZbZclAttrDefaultRead_1>
 8003d8e:	2838      	cmp	r0, #56	; 0x38
 8003d90:	d024      	beq.n	8003ddc <??ZbZclAttrDefaultRead_1>
 8003d92:	2839      	cmp	r0, #57	; 0x39
 8003d94:	d032      	beq.n	8003dfc <??ZbZclAttrDefaultRead_3>
 8003d96:	283a      	cmp	r0, #58	; 0x3a
 8003d98:	d050      	beq.n	8003e3c <??ZbZclAttrDefaultRead_7>
 8003d9a:	2841      	cmp	r0, #65	; 0x41
 8003d9c:	d05e      	beq.n	8003e5c <??ZbZclAttrDefaultRead_8>
 8003d9e:	2842      	cmp	r0, #66	; 0x42
 8003da0:	d05c      	beq.n	8003e5c <??ZbZclAttrDefaultRead_8>
 8003da2:	2843      	cmp	r0, #67	; 0x43
 8003da4:	d071      	beq.n	8003e8a <??ZbZclAttrDefaultRead_9>
 8003da6:	2844      	cmp	r0, #68	; 0x44
 8003da8:	d06f      	beq.n	8003e8a <??ZbZclAttrDefaultRead_9>
 8003daa:	28e0      	cmp	r0, #224	; 0xe0
 8003dac:	d026      	beq.n	8003dfc <??ZbZclAttrDefaultRead_3>
 8003dae:	28e1      	cmp	r0, #225	; 0xe1
 8003db0:	d024      	beq.n	8003dfc <??ZbZclAttrDefaultRead_3>
 8003db2:	28e2      	cmp	r0, #226	; 0xe2
 8003db4:	d022      	beq.n	8003dfc <??ZbZclAttrDefaultRead_3>
 8003db6:	28e8      	cmp	r0, #232	; 0xe8
 8003db8:	d010      	beq.n	8003ddc <??ZbZclAttrDefaultRead_1>
 8003dba:	28e9      	cmp	r0, #233	; 0xe9
 8003dbc:	d00e      	beq.n	8003ddc <??ZbZclAttrDefaultRead_1>
 8003dbe:	28ea      	cmp	r0, #234	; 0xea
 8003dc0:	d01c      	beq.n	8003dfc <??ZbZclAttrDefaultRead_3>
 8003dc2:	28f0      	cmp	r0, #240	; 0xf0
 8003dc4:	d03a      	beq.n	8003e3c <??ZbZclAttrDefaultRead_7>
 8003dc6:	28f1      	cmp	r0, #241	; 0xf1
 8003dc8:	d040      	beq.n	8003e4c <??ZbZclAttrDefaultRead_10>
 8003dca:	e078      	b.n	8003ebe <??ZbZclAttrDefaultRead_11>

08003dcc <??ZbZclAttrDefaultRead_0>:
 8003dcc:	2c00      	cmp	r4, #0
 8003dce:	d102      	bne.n	8003dd6 <??ZbZclAttrDefaultRead_12>
 8003dd0:	2089      	movs	r0, #137	; 0x89
 8003dd2:	4681      	mov	r9, r0
 8003dd4:	e075      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003dd6 <??ZbZclAttrDefaultRead_12>:
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	4680      	mov	r8, r0
 8003dda:	e072      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003ddc <??ZbZclAttrDefaultRead_1>:
 8003ddc:	2c02      	cmp	r4, #2
 8003dde:	d202      	bcs.n	8003de6 <??ZbZclAttrDefaultRead_14>
 8003de0:	2089      	movs	r0, #137	; 0x89
 8003de2:	4681      	mov	r9, r0
 8003de4:	e06d      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003de6 <??ZbZclAttrDefaultRead_14>:
 8003de6:	2002      	movs	r0, #2
 8003de8:	4680      	mov	r8, r0
 8003dea:	e06a      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003dec <??ZbZclAttrDefaultRead_2>:
 8003dec:	2c03      	cmp	r4, #3
 8003dee:	d202      	bcs.n	8003df6 <??ZbZclAttrDefaultRead_15>
 8003df0:	2089      	movs	r0, #137	; 0x89
 8003df2:	4681      	mov	r9, r0
 8003df4:	e065      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003df6 <??ZbZclAttrDefaultRead_15>:
 8003df6:	2003      	movs	r0, #3
 8003df8:	4680      	mov	r8, r0
 8003dfa:	e062      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003dfc <??ZbZclAttrDefaultRead_3>:
 8003dfc:	2c04      	cmp	r4, #4
 8003dfe:	d202      	bcs.n	8003e06 <??ZbZclAttrDefaultRead_16>
 8003e00:	2089      	movs	r0, #137	; 0x89
 8003e02:	4681      	mov	r9, r0
 8003e04:	e05d      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e06 <??ZbZclAttrDefaultRead_16>:
 8003e06:	2004      	movs	r0, #4
 8003e08:	4680      	mov	r8, r0
 8003e0a:	e05a      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e0c <??ZbZclAttrDefaultRead_4>:
 8003e0c:	2c05      	cmp	r4, #5
 8003e0e:	d202      	bcs.n	8003e16 <??ZbZclAttrDefaultRead_17>
 8003e10:	2089      	movs	r0, #137	; 0x89
 8003e12:	4681      	mov	r9, r0
 8003e14:	e055      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e16 <??ZbZclAttrDefaultRead_17>:
 8003e16:	2005      	movs	r0, #5
 8003e18:	4680      	mov	r8, r0
 8003e1a:	e052      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e1c <??ZbZclAttrDefaultRead_5>:
 8003e1c:	2c06      	cmp	r4, #6
 8003e1e:	d202      	bcs.n	8003e26 <??ZbZclAttrDefaultRead_18>
 8003e20:	2089      	movs	r0, #137	; 0x89
 8003e22:	4681      	mov	r9, r0
 8003e24:	e04d      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e26 <??ZbZclAttrDefaultRead_18>:
 8003e26:	2006      	movs	r0, #6
 8003e28:	4680      	mov	r8, r0
 8003e2a:	e04a      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e2c <??ZbZclAttrDefaultRead_6>:
 8003e2c:	2c07      	cmp	r4, #7
 8003e2e:	d202      	bcs.n	8003e36 <??ZbZclAttrDefaultRead_19>
 8003e30:	2089      	movs	r0, #137	; 0x89
 8003e32:	4681      	mov	r9, r0
 8003e34:	e045      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e36 <??ZbZclAttrDefaultRead_19>:
 8003e36:	2007      	movs	r0, #7
 8003e38:	4680      	mov	r8, r0
 8003e3a:	e042      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e3c <??ZbZclAttrDefaultRead_7>:
 8003e3c:	2c08      	cmp	r4, #8
 8003e3e:	d202      	bcs.n	8003e46 <??ZbZclAttrDefaultRead_20>
 8003e40:	2089      	movs	r0, #137	; 0x89
 8003e42:	4681      	mov	r9, r0
 8003e44:	e03d      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e46 <??ZbZclAttrDefaultRead_20>:
 8003e46:	2008      	movs	r0, #8
 8003e48:	4680      	mov	r8, r0
 8003e4a:	e03a      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e4c <??ZbZclAttrDefaultRead_10>:
 8003e4c:	2c10      	cmp	r4, #16
 8003e4e:	d202      	bcs.n	8003e56 <??ZbZclAttrDefaultRead_21>
 8003e50:	2089      	movs	r0, #137	; 0x89
 8003e52:	4681      	mov	r9, r0
 8003e54:	e035      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e56 <??ZbZclAttrDefaultRead_21>:
 8003e56:	2010      	movs	r0, #16
 8003e58:	4680      	mov	r8, r0
 8003e5a:	e032      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e5c <??ZbZclAttrDefaultRead_8>:
 8003e5c:	2c00      	cmp	r4, #0
 8003e5e:	d102      	bne.n	8003e66 <??ZbZclAttrDefaultRead_22>
 8003e60:	2089      	movs	r0, #137	; 0x89
 8003e62:	4681      	mov	r9, r0
 8003e64:	e02d      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e66 <??ZbZclAttrDefaultRead_22>:
 8003e66:	68f0      	ldr	r0, [r6, #12]
 8003e68:	7800      	ldrb	r0, [r0, #0]
 8003e6a:	0001      	movs	r1, r0
 8003e6c:	b2c9      	uxtb	r1, r1
 8003e6e:	29ff      	cmp	r1, #255	; 0xff
 8003e70:	d101      	bne.n	8003e76 <??ZbZclAttrDefaultRead_23>
 8003e72:	2100      	movs	r1, #0
 8003e74:	0008      	movs	r0, r1

08003e76 <??ZbZclAttrDefaultRead_23>:
 8003e76:	0001      	movs	r1, r0
 8003e78:	b2c9      	uxtb	r1, r1
 8003e7a:	1c49      	adds	r1, r1, #1
 8003e7c:	4688      	mov	r8, r1
 8003e7e:	4544      	cmp	r4, r8
 8003e80:	d202      	bcs.n	8003e88 <??ZbZclAttrDefaultRead_24>
 8003e82:	2189      	movs	r1, #137	; 0x89
 8003e84:	4689      	mov	r9, r1
 8003e86:	e01c      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e88 <??ZbZclAttrDefaultRead_24>:
 8003e88:	e01b      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e8a <??ZbZclAttrDefaultRead_9>:
 8003e8a:	2c00      	cmp	r4, #0
 8003e8c:	d102      	bne.n	8003e94 <??ZbZclAttrDefaultRead_25>
 8003e8e:	2089      	movs	r0, #137	; 0x89
 8003e90:	4681      	mov	r9, r0
 8003e92:	e016      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003e94 <??ZbZclAttrDefaultRead_25>:
 8003e94:	68f0      	ldr	r0, [r6, #12]
 8003e96:	f7ff fd01 	bl	800389c <pletoh16>
 8003e9a:	0001      	movs	r1, r0
 8003e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea0:	b289      	uxth	r1, r1
 8003ea2:	4291      	cmp	r1, r2
 8003ea4:	d101      	bne.n	8003eaa <??ZbZclAttrDefaultRead_26>
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	0008      	movs	r0, r1

08003eaa <??ZbZclAttrDefaultRead_26>:
 8003eaa:	0001      	movs	r1, r0
 8003eac:	b289      	uxth	r1, r1
 8003eae:	1c89      	adds	r1, r1, #2
 8003eb0:	4688      	mov	r8, r1
 8003eb2:	4544      	cmp	r4, r8
 8003eb4:	d202      	bcs.n	8003ebc <??ZbZclAttrDefaultRead_27>
 8003eb6:	2189      	movs	r1, #137	; 0x89
 8003eb8:	4689      	mov	r9, r1
 8003eba:	e002      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003ebc <??ZbZclAttrDefaultRead_27>:
 8003ebc:	e001      	b.n	8003ec2 <??ZbZclAttrDefaultRead_13>

08003ebe <??ZbZclAttrDefaultRead_11>:
 8003ebe:	2086      	movs	r0, #134	; 0x86
 8003ec0:	4681      	mov	r9, r0

08003ec2 <??ZbZclAttrDefaultRead_13>:
 8003ec2:	4648      	mov	r0, r9
 8003ec4:	b2c0      	uxtb	r0, r0
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d109      	bne.n	8003ede <??ZbZclAttrDefaultRead_28>
 8003eca:	f8cd 8000 	str.w	r8, [sp]
 8003ece:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8003ed2:	46bb      	mov	fp, r7
 8003ed4:	9a00      	ldr	r2, [sp, #0]
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	4658      	mov	r0, fp
 8003eda:	f013 fdc1 	bl	8017a60 <__aeabi_memcpy>

08003ede <??ZbZclAttrDefaultRead_28>:
 8003ede:	4648      	mov	r0, r9
 8003ee0:	b2c0      	uxtb	r0, r0
 8003ee2:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003ee6 <ZbZclAttrWrite>:
 8003ee6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eea:	b096      	sub	sp, #88	; 0x58
 8003eec:	4680      	mov	r8, r0
 8003eee:	4699      	mov	r9, r3
 8003ef0:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8003ef4:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8003ef6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8003efa:	4640      	mov	r0, r8
 8003efc:	f7ff fd9d 	bl	8003a3a <ZbZclAttrFind>
 8003f00:	0006      	movs	r6, r0
 8003f02:	2e00      	cmp	r6, #0
 8003f04:	d101      	bne.n	8003f0a <??ZbZclAttrWrite_0>
 8003f06:	2086      	movs	r0, #134	; 0x86
 8003f08:	e0a2      	b.n	8004050 <??ZbZclAttrWrite_1>

08003f0a <??ZbZclAttrWrite_0>:
 8003f0a:	68b0      	ldr	r0, [r6, #8]
 8003f0c:	7900      	ldrb	r0, [r0, #4]
 8003f0e:	f010 0001 	ands.w	r0, r0, #1
 8003f12:	b2c0      	uxtb	r0, r0
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d105      	bne.n	8003f24 <??ZbZclAttrWrite_2>
 8003f18:	0038      	movs	r0, r7
 8003f1a:	b280      	uxth	r0, r0
 8003f1c:	0780      	lsls	r0, r0, #30
 8003f1e:	d401      	bmi.n	8003f24 <??ZbZclAttrWrite_2>
 8003f20:	2088      	movs	r0, #136	; 0x88
 8003f22:	e095      	b.n	8004050 <??ZbZclAttrWrite_1>

08003f24 <??ZbZclAttrWrite_2>:
 8003f24:	2300      	movs	r3, #0
 8003f26:	4652      	mov	r2, sl
 8003f28:	4649      	mov	r1, r9
 8003f2a:	68b0      	ldr	r0, [r6, #8]
 8003f2c:	7880      	ldrb	r0, [r0, #2]
 8003f2e:	f000 fcb0 	bl	8004892 <ZbZclAttrParseLength>
 8003f32:	9005      	str	r0, [sp, #20]
 8003f34:	9805      	ldr	r0, [sp, #20]
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d501      	bpl.n	8003f3e <??ZbZclAttrWrite_3>
 8003f3a:	2087      	movs	r0, #135	; 0x87
 8003f3c:	e088      	b.n	8004050 <??ZbZclAttrWrite_1>

08003f3e <??ZbZclAttrWrite_3>:
 8003f3e:	68b0      	ldr	r0, [r6, #8]
 8003f40:	7880      	ldrb	r0, [r0, #2]
 8003f42:	f7fc fb15 	bl	8000570 <ZbZclAttrIsInteger>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d026      	beq.n	8003f98 <??ZbZclAttrWrite_4>
 8003f4a:	aa04      	add	r2, sp, #16
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	68b0      	ldr	r0, [r6, #8]
 8003f50:	7880      	ldrb	r0, [r0, #2]
 8003f52:	f7fc f9df 	bl	8000314 <ZbZclParseInteger>
 8003f56:	0004      	movs	r4, r0
 8003f58:	000d      	movs	r5, r1
 8003f5a:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d002      	beq.n	8003f68 <??ZbZclAttrWrite_5>
 8003f62:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003f66:	e073      	b.n	8004050 <??ZbZclAttrWrite_1>

08003f68 <??ZbZclAttrWrite_5>:
 8003f68:	68b0      	ldr	r0, [r6, #8]
 8003f6a:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 8003f6e:	f004 fa21 	bl	80083b4 <__aeabi_d2lz>
 8003f72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f76:	68b0      	ldr	r0, [r6, #8]
 8003f78:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8003f7c:	f004 fa1a 	bl	80083b4 <__aeabi_d2lz>
 8003f80:	e9cd 0100 	strd	r0, r1, [sp]
 8003f84:	68b0      	ldr	r0, [r6, #8]
 8003f86:	7882      	ldrb	r2, [r0, #2]
 8003f88:	0020      	movs	r0, r4
 8003f8a:	0029      	movs	r1, r5
 8003f8c:	f7fc fb06 	bl	800059c <ZbZclAttrIntegerRangeCheck>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d101      	bne.n	8003f98 <??ZbZclAttrWrite_4>
 8003f94:	2087      	movs	r0, #135	; 0x87
 8003f96:	e05b      	b.n	8004050 <??ZbZclAttrWrite_1>

08003f98 <??ZbZclAttrWrite_4>:
 8003f98:	68b0      	ldr	r0, [r6, #8]
 8003f9a:	7900      	ldrb	r0, [r0, #4]
 8003f9c:	0680      	lsls	r0, r0, #26
 8003f9e:	d522      	bpl.n	8003fe6 <??ZbZclAttrWrite_6>
 8003fa0:	2420      	movs	r4, #32
 8003fa2:	2500      	movs	r5, #0
 8003fa4:	f10d 0b18 	add.w	fp, sp, #24
 8003fa8:	002a      	movs	r2, r5
 8003faa:	0021      	movs	r1, r4
 8003fac:	4658      	mov	r0, fp
 8003fae:	f003 fc93 	bl	80078d8 <__aeabi_memset>
 8003fb2:	68b0      	ldr	r0, [r6, #8]
 8003fb4:	9006      	str	r0, [sp, #24]
 8003fb6:	2001      	movs	r0, #1
 8003fb8:	f88d 001c 	strb.w	r0, [sp, #28]
 8003fbc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003fbe:	900c      	str	r0, [sp, #48]	; 0x30
 8003fc0:	f8cd 9020 	str.w	r9, [sp, #32]
 8003fc4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003fc8:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8003fcc:	68f0      	ldr	r0, [r6, #12]
 8003fce:	900b      	str	r0, [sp, #44]	; 0x2c
 8003fd0:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 8003fd4:	900d      	str	r0, [sp, #52]	; 0x34
 8003fd6:	aa06      	add	r2, sp, #24
 8003fd8:	0031      	movs	r1, r6
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f000 fe16 	bl	8004c0c <ZbZclAttrCallbackExec>
 8003fe0:	f88d 0010 	strb.w	r0, [sp, #16]
 8003fe4:	e028      	b.n	8004038 <??ZbZclAttrWrite_7>

08003fe6 <??ZbZclAttrWrite_6>:
 8003fe6:	003b      	movs	r3, r7
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	464a      	mov	r2, r9
 8003fec:	0031      	movs	r1, r6
 8003fee:	4640      	mov	r0, r8
 8003ff0:	f000 f85e 	bl	80040b0 <ZbZclAttrDefaultWrite>
 8003ff4:	f88d 0010 	strb.w	r0, [sp, #16]
 8003ff8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d11b      	bne.n	8004038 <??ZbZclAttrWrite_7>
 8004000:	68b0      	ldr	r0, [r6, #8]
 8004002:	7900      	ldrb	r0, [r0, #4]
 8004004:	0640      	lsls	r0, r0, #25
 8004006:	d517      	bpl.n	8004038 <??ZbZclAttrWrite_7>
 8004008:	2420      	movs	r4, #32
 800400a:	2500      	movs	r5, #0
 800400c:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8004010:	002a      	movs	r2, r5
 8004012:	0021      	movs	r1, r4
 8004014:	4658      	mov	r0, fp
 8004016:	f003 fc5f 	bl	80078d8 <__aeabi_memset>
 800401a:	68b0      	ldr	r0, [r6, #8]
 800401c:	900e      	str	r0, [sp, #56]	; 0x38
 800401e:	2002      	movs	r0, #2
 8004020:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
 8004024:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004026:	9014      	str	r0, [sp, #80]	; 0x50
 8004028:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 800402c:	9015      	str	r0, [sp, #84]	; 0x54
 800402e:	aa0e      	add	r2, sp, #56	; 0x38
 8004030:	0031      	movs	r1, r6
 8004032:	4640      	mov	r0, r8
 8004034:	f000 fdea 	bl	8004c0c <ZbZclAttrCallbackExec>

08004038 <??ZbZclAttrWrite_7>:
 8004038:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800403c:	2800      	cmp	r0, #0
 800403e:	d002      	beq.n	8004046 <??ZbZclAttrWrite_8>
 8004040:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8004044:	e004      	b.n	8004050 <??ZbZclAttrWrite_1>

08004046 <??ZbZclAttrWrite_8>:
 8004046:	0031      	movs	r1, r6
 8004048:	4640      	mov	r0, r8
 800404a:	f000 f804 	bl	8004056 <ZbZclAttrPostWrite>
 800404e:	2000      	movs	r0, #0

08004050 <??ZbZclAttrWrite_1>:
 8004050:	b019      	add	sp, #100	; 0x64
 8004052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004056 <ZbZclAttrPostWrite>:
 8004056:	b538      	push	{r3, r4, r5, lr}
 8004058:	0005      	movs	r5, r0
 800405a:	000c      	movs	r4, r1
 800405c:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800405e:	2800      	cmp	r0, #0
 8004060:	d004      	beq.n	800406c <??ZbZclAttrPostWrite_0>
 8004062:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004066:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004068:	f010 fc3a 	bl	80148e0 <ZbTimerReset>

0800406c <??ZbZclAttrPostWrite_0>:
 800406c:	2c00      	cmp	r4, #0
 800406e:	d005      	beq.n	800407c <??ZbZclAttrPostWrite_1>
 8004070:	2200      	movs	r2, #0
 8004072:	68a0      	ldr	r0, [r4, #8]
 8004074:	8801      	ldrh	r1, [r0, #0]
 8004076:	0028      	movs	r0, r5
 8004078:	f001 fa83 	bl	8005582 <zcl_attr_reporting_check>

0800407c <??ZbZclAttrPostWrite_1>:
 800407c:	bd31      	pop	{r0, r4, r5, pc}

0800407e <ZbZclAttrPersist>:
 800407e:	b570      	push	{r4, r5, r6, lr}
 8004080:	0005      	movs	r5, r0
 8004082:	000e      	movs	r6, r1
 8004084:	0031      	movs	r1, r6
 8004086:	b289      	uxth	r1, r1
 8004088:	0028      	movs	r0, r5
 800408a:	f7ff fcd6 	bl	8003a3a <ZbZclAttrFind>
 800408e:	0004      	movs	r4, r0
 8004090:	2c00      	cmp	r4, #0
 8004092:	d101      	bne.n	8004098 <??ZbZclAttrPersist_0>
 8004094:	2000      	movs	r0, #0
 8004096:	e00a      	b.n	80040ae <??ZbZclAttrPersist_1>

08004098 <??ZbZclAttrPersist_0>:
 8004098:	68a0      	ldr	r0, [r4, #8]
 800409a:	7900      	ldrb	r0, [r0, #4]
 800409c:	0740      	lsls	r0, r0, #29
 800409e:	d401      	bmi.n	80040a4 <??ZbZclAttrPersist_2>
 80040a0:	2000      	movs	r0, #0
 80040a2:	e004      	b.n	80040ae <??ZbZclAttrPersist_1>

080040a4 <??ZbZclAttrPersist_2>:
 80040a4:	0021      	movs	r1, r4
 80040a6:	0028      	movs	r0, r5
 80040a8:	f7ff ffd5 	bl	8004056 <ZbZclAttrPostWrite>
 80040ac:	2001      	movs	r0, #1

080040ae <??ZbZclAttrPersist_1>:
 80040ae:	bd70      	pop	{r4, r5, r6, pc}

080040b0 <ZbZclAttrDefaultWrite>:
 80040b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	0006      	movs	r6, r0
 80040b6:	000f      	movs	r7, r1
 80040b8:	0014      	movs	r4, r2
 80040ba:	4698      	mov	r8, r3
 80040bc:	2500      	movs	r5, #0
 80040be:	f05f 0900 	movs.w	r9, #0
 80040c2:	2c00      	cmp	r4, #0
 80040c4:	d101      	bne.n	80040ca <??ZbZclAttrDefaultWrite_0>
 80040c6:	2001      	movs	r0, #1
 80040c8:	e0d6      	b.n	8004278 <??ZbZclAttrDefaultWrite_1>

080040ca <??ZbZclAttrDefaultWrite_0>:
 80040ca:	68b8      	ldr	r0, [r7, #8]
 80040cc:	7880      	ldrb	r0, [r0, #2]
 80040ce:	2808      	cmp	r0, #8
 80040d0:	d062      	beq.n	8004198 <??ZbZclAttrDefaultWrite_2>
 80040d2:	2809      	cmp	r0, #9
 80040d4:	d063      	beq.n	800419e <??ZbZclAttrDefaultWrite_3>
 80040d6:	280a      	cmp	r0, #10
 80040d8:	d064      	beq.n	80041a4 <??ZbZclAttrDefaultWrite_4>
 80040da:	280b      	cmp	r0, #11
 80040dc:	d065      	beq.n	80041aa <??ZbZclAttrDefaultWrite_5>
 80040de:	280c      	cmp	r0, #12
 80040e0:	d066      	beq.n	80041b0 <??ZbZclAttrDefaultWrite_6>
 80040e2:	280d      	cmp	r0, #13
 80040e4:	d067      	beq.n	80041b6 <??ZbZclAttrDefaultWrite_7>
 80040e6:	280e      	cmp	r0, #14
 80040e8:	d068      	beq.n	80041bc <??ZbZclAttrDefaultWrite_8>
 80040ea:	280f      	cmp	r0, #15
 80040ec:	d069      	beq.n	80041c2 <??ZbZclAttrDefaultWrite_9>
 80040ee:	2810      	cmp	r0, #16
 80040f0:	d052      	beq.n	8004198 <??ZbZclAttrDefaultWrite_2>
 80040f2:	2818      	cmp	r0, #24
 80040f4:	d050      	beq.n	8004198 <??ZbZclAttrDefaultWrite_2>
 80040f6:	2819      	cmp	r0, #25
 80040f8:	d051      	beq.n	800419e <??ZbZclAttrDefaultWrite_3>
 80040fa:	281a      	cmp	r0, #26
 80040fc:	d052      	beq.n	80041a4 <??ZbZclAttrDefaultWrite_4>
 80040fe:	281b      	cmp	r0, #27
 8004100:	d053      	beq.n	80041aa <??ZbZclAttrDefaultWrite_5>
 8004102:	281c      	cmp	r0, #28
 8004104:	d054      	beq.n	80041b0 <??ZbZclAttrDefaultWrite_6>
 8004106:	281d      	cmp	r0, #29
 8004108:	d055      	beq.n	80041b6 <??ZbZclAttrDefaultWrite_7>
 800410a:	281e      	cmp	r0, #30
 800410c:	d056      	beq.n	80041bc <??ZbZclAttrDefaultWrite_8>
 800410e:	281f      	cmp	r0, #31
 8004110:	d057      	beq.n	80041c2 <??ZbZclAttrDefaultWrite_9>
 8004112:	2820      	cmp	r0, #32
 8004114:	d040      	beq.n	8004198 <??ZbZclAttrDefaultWrite_2>
 8004116:	2821      	cmp	r0, #33	; 0x21
 8004118:	d041      	beq.n	800419e <??ZbZclAttrDefaultWrite_3>
 800411a:	2822      	cmp	r0, #34	; 0x22
 800411c:	d042      	beq.n	80041a4 <??ZbZclAttrDefaultWrite_4>
 800411e:	2823      	cmp	r0, #35	; 0x23
 8004120:	d043      	beq.n	80041aa <??ZbZclAttrDefaultWrite_5>
 8004122:	2824      	cmp	r0, #36	; 0x24
 8004124:	d044      	beq.n	80041b0 <??ZbZclAttrDefaultWrite_6>
 8004126:	2825      	cmp	r0, #37	; 0x25
 8004128:	d045      	beq.n	80041b6 <??ZbZclAttrDefaultWrite_7>
 800412a:	2826      	cmp	r0, #38	; 0x26
 800412c:	d046      	beq.n	80041bc <??ZbZclAttrDefaultWrite_8>
 800412e:	2827      	cmp	r0, #39	; 0x27
 8004130:	d047      	beq.n	80041c2 <??ZbZclAttrDefaultWrite_9>
 8004132:	2828      	cmp	r0, #40	; 0x28
 8004134:	d030      	beq.n	8004198 <??ZbZclAttrDefaultWrite_2>
 8004136:	2829      	cmp	r0, #41	; 0x29
 8004138:	d031      	beq.n	800419e <??ZbZclAttrDefaultWrite_3>
 800413a:	282a      	cmp	r0, #42	; 0x2a
 800413c:	d032      	beq.n	80041a4 <??ZbZclAttrDefaultWrite_4>
 800413e:	282b      	cmp	r0, #43	; 0x2b
 8004140:	d033      	beq.n	80041aa <??ZbZclAttrDefaultWrite_5>
 8004142:	282c      	cmp	r0, #44	; 0x2c
 8004144:	d034      	beq.n	80041b0 <??ZbZclAttrDefaultWrite_6>
 8004146:	282d      	cmp	r0, #45	; 0x2d
 8004148:	d035      	beq.n	80041b6 <??ZbZclAttrDefaultWrite_7>
 800414a:	282e      	cmp	r0, #46	; 0x2e
 800414c:	d036      	beq.n	80041bc <??ZbZclAttrDefaultWrite_8>
 800414e:	282f      	cmp	r0, #47	; 0x2f
 8004150:	d037      	beq.n	80041c2 <??ZbZclAttrDefaultWrite_9>
 8004152:	2830      	cmp	r0, #48	; 0x30
 8004154:	d020      	beq.n	8004198 <??ZbZclAttrDefaultWrite_2>
 8004156:	2831      	cmp	r0, #49	; 0x31
 8004158:	d021      	beq.n	800419e <??ZbZclAttrDefaultWrite_3>
 800415a:	2838      	cmp	r0, #56	; 0x38
 800415c:	d01f      	beq.n	800419e <??ZbZclAttrDefaultWrite_3>
 800415e:	2839      	cmp	r0, #57	; 0x39
 8004160:	d023      	beq.n	80041aa <??ZbZclAttrDefaultWrite_5>
 8004162:	283a      	cmp	r0, #58	; 0x3a
 8004164:	d02d      	beq.n	80041c2 <??ZbZclAttrDefaultWrite_9>
 8004166:	2841      	cmp	r0, #65	; 0x41
 8004168:	d031      	beq.n	80041ce <??ZbZclAttrDefaultWrite_10>
 800416a:	2842      	cmp	r0, #66	; 0x42
 800416c:	d02f      	beq.n	80041ce <??ZbZclAttrDefaultWrite_10>
 800416e:	2843      	cmp	r0, #67	; 0x43
 8004170:	d049      	beq.n	8004206 <??ZbZclAttrDefaultWrite_11>
 8004172:	2844      	cmp	r0, #68	; 0x44
 8004174:	d047      	beq.n	8004206 <??ZbZclAttrDefaultWrite_11>
 8004176:	28e0      	cmp	r0, #224	; 0xe0
 8004178:	d017      	beq.n	80041aa <??ZbZclAttrDefaultWrite_5>
 800417a:	28e1      	cmp	r0, #225	; 0xe1
 800417c:	d015      	beq.n	80041aa <??ZbZclAttrDefaultWrite_5>
 800417e:	28e2      	cmp	r0, #226	; 0xe2
 8004180:	d013      	beq.n	80041aa <??ZbZclAttrDefaultWrite_5>
 8004182:	28e8      	cmp	r0, #232	; 0xe8
 8004184:	d00b      	beq.n	800419e <??ZbZclAttrDefaultWrite_3>
 8004186:	28e9      	cmp	r0, #233	; 0xe9
 8004188:	d009      	beq.n	800419e <??ZbZclAttrDefaultWrite_3>
 800418a:	28ea      	cmp	r0, #234	; 0xea
 800418c:	d00d      	beq.n	80041aa <??ZbZclAttrDefaultWrite_5>
 800418e:	28f0      	cmp	r0, #240	; 0xf0
 8004190:	d017      	beq.n	80041c2 <??ZbZclAttrDefaultWrite_9>
 8004192:	28f1      	cmp	r0, #241	; 0xf1
 8004194:	d018      	beq.n	80041c8 <??ZbZclAttrDefaultWrite_12>
 8004196:	e058      	b.n	800424a <??ZbZclAttrDefaultWrite_13>

08004198 <??ZbZclAttrDefaultWrite_2>:
 8004198:	2001      	movs	r0, #1
 800419a:	0005      	movs	r5, r0
 800419c:	e057      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

0800419e <??ZbZclAttrDefaultWrite_3>:
 800419e:	2002      	movs	r0, #2
 80041a0:	0005      	movs	r5, r0
 80041a2:	e054      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

080041a4 <??ZbZclAttrDefaultWrite_4>:
 80041a4:	2003      	movs	r0, #3
 80041a6:	0005      	movs	r5, r0
 80041a8:	e051      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

080041aa <??ZbZclAttrDefaultWrite_5>:
 80041aa:	2004      	movs	r0, #4
 80041ac:	0005      	movs	r5, r0
 80041ae:	e04e      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

080041b0 <??ZbZclAttrDefaultWrite_6>:
 80041b0:	2005      	movs	r0, #5
 80041b2:	0005      	movs	r5, r0
 80041b4:	e04b      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

080041b6 <??ZbZclAttrDefaultWrite_7>:
 80041b6:	2006      	movs	r0, #6
 80041b8:	0005      	movs	r5, r0
 80041ba:	e048      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

080041bc <??ZbZclAttrDefaultWrite_8>:
 80041bc:	2007      	movs	r0, #7
 80041be:	0005      	movs	r5, r0
 80041c0:	e045      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

080041c2 <??ZbZclAttrDefaultWrite_9>:
 80041c2:	2008      	movs	r0, #8
 80041c4:	0005      	movs	r5, r0
 80041c6:	e042      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

080041c8 <??ZbZclAttrDefaultWrite_12>:
 80041c8:	2010      	movs	r0, #16
 80041ca:	0005      	movs	r5, r0
 80041cc:	e03f      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

080041ce <??ZbZclAttrDefaultWrite_10>:
 80041ce:	6938      	ldr	r0, [r7, #16]
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d102      	bne.n	80041da <??ZbZclAttrDefaultWrite_15>
 80041d4:	2089      	movs	r0, #137	; 0x89
 80041d6:	4681      	mov	r9, r0
 80041d8:	e039      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

080041da <??ZbZclAttrDefaultWrite_15>:
 80041da:	7820      	ldrb	r0, [r4, #0]
 80041dc:	0001      	movs	r1, r0
 80041de:	b2c9      	uxtb	r1, r1
 80041e0:	29ff      	cmp	r1, #255	; 0xff
 80041e2:	d105      	bne.n	80041f0 <??ZbZclAttrDefaultWrite_16>
 80041e4:	21ff      	movs	r1, #255	; 0xff
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	7011      	strb	r1, [r2, #0]
 80041ea:	2100      	movs	r1, #0
 80041ec:	000d      	movs	r5, r1
 80041ee:	e02e      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

080041f0 <??ZbZclAttrDefaultWrite_16>:
 80041f0:	0001      	movs	r1, r0
 80041f2:	b2c9      	uxtb	r1, r1
 80041f4:	1c49      	adds	r1, r1, #1
 80041f6:	000d      	movs	r5, r1
 80041f8:	6939      	ldr	r1, [r7, #16]
 80041fa:	42a9      	cmp	r1, r5
 80041fc:	d202      	bcs.n	8004204 <??ZbZclAttrDefaultWrite_17>
 80041fe:	2189      	movs	r1, #137	; 0x89
 8004200:	4689      	mov	r9, r1
 8004202:	e024      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

08004204 <??ZbZclAttrDefaultWrite_17>:
 8004204:	e023      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

08004206 <??ZbZclAttrDefaultWrite_11>:
 8004206:	6938      	ldr	r0, [r7, #16]
 8004208:	2802      	cmp	r0, #2
 800420a:	d202      	bcs.n	8004212 <??ZbZclAttrDefaultWrite_18>
 800420c:	2089      	movs	r0, #137	; 0x89
 800420e:	4681      	mov	r9, r0
 8004210:	e01d      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

08004212 <??ZbZclAttrDefaultWrite_18>:
 8004212:	0020      	movs	r0, r4
 8004214:	f7ff fb42 	bl	800389c <pletoh16>
 8004218:	4682      	mov	sl, r0
 800421a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800421e:	4650      	mov	r0, sl
 8004220:	000a      	movs	r2, r1
 8004222:	b280      	uxth	r0, r0
 8004224:	4290      	cmp	r0, r2
 8004226:	d105      	bne.n	8004234 <??ZbZclAttrDefaultWrite_19>
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fb83 	bl	8003934 <putle16>
 800422e:	2000      	movs	r0, #0
 8004230:	0005      	movs	r5, r0
 8004232:	e00c      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

08004234 <??ZbZclAttrDefaultWrite_19>:
 8004234:	4650      	mov	r0, sl
 8004236:	b280      	uxth	r0, r0
 8004238:	1c80      	adds	r0, r0, #2
 800423a:	0005      	movs	r5, r0
 800423c:	6938      	ldr	r0, [r7, #16]
 800423e:	42a8      	cmp	r0, r5
 8004240:	d202      	bcs.n	8004248 <??ZbZclAttrDefaultWrite_20>
 8004242:	2089      	movs	r0, #137	; 0x89
 8004244:	4681      	mov	r9, r0
 8004246:	e002      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

08004248 <??ZbZclAttrDefaultWrite_20>:
 8004248:	e001      	b.n	800424e <??ZbZclAttrDefaultWrite_14>

0800424a <??ZbZclAttrDefaultWrite_13>:
 800424a:	2086      	movs	r0, #134	; 0x86
 800424c:	4681      	mov	r9, r0

0800424e <??ZbZclAttrDefaultWrite_14>:
 800424e:	4648      	mov	r0, r9
 8004250:	b2c0      	uxtb	r0, r0
 8004252:	2800      	cmp	r0, #0
 8004254:	d10e      	bne.n	8004274 <??ZbZclAttrDefaultWrite_21>
 8004256:	4640      	mov	r0, r8
 8004258:	b280      	uxth	r0, r0
 800425a:	07c0      	lsls	r0, r0, #31
 800425c:	d40a      	bmi.n	8004274 <??ZbZclAttrDefaultWrite_21>
 800425e:	2d00      	cmp	r5, #0
 8004260:	d008      	beq.n	8004274 <??ZbZclAttrDefaultWrite_21>
 8004262:	9500      	str	r5, [sp, #0]
 8004264:	46a2      	mov	sl, r4
 8004266:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 800426a:	9a00      	ldr	r2, [sp, #0]
 800426c:	4651      	mov	r1, sl
 800426e:	4658      	mov	r0, fp
 8004270:	f013 fbf6 	bl	8017a60 <__aeabi_memcpy>

08004274 <??ZbZclAttrDefaultWrite_21>:
 8004274:	4648      	mov	r0, r9
 8004276:	b2c0      	uxtb	r0, r0

08004278 <??ZbZclAttrDefaultWrite_1>:
 8004278:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800427c <ZbZclAttrDefaultValue>:
 800427c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004280:	0004      	movs	r4, r0
 8004282:	4688      	mov	r8, r1
 8004284:	0015      	movs	r5, r2
 8004286:	2600      	movs	r6, #0
 8004288:	f05f 37ff 	movs.w	r7, #4294967295
 800428c:	0020      	movs	r0, r4
 800428e:	b2c0      	uxtb	r0, r0
 8004290:	2800      	cmp	r0, #0
 8004292:	f000 80a1 	beq.w	80043d8 <??ZbZclAttrDefaultValue_0>
 8004296:	2808      	cmp	r0, #8
 8004298:	f000 80e7 	beq.w	800446a <??ZbZclAttrDefaultValue_1>
 800429c:	2809      	cmp	r0, #9
 800429e:	f000 80da 	beq.w	8004456 <??ZbZclAttrDefaultValue_2>
 80042a2:	280a      	cmp	r0, #10
 80042a4:	f000 80cd 	beq.w	8004442 <??ZbZclAttrDefaultValue_3>
 80042a8:	280b      	cmp	r0, #11
 80042aa:	f000 80c0 	beq.w	800442e <??ZbZclAttrDefaultValue_4>
 80042ae:	280c      	cmp	r0, #12
 80042b0:	f000 80b3 	beq.w	800441a <??ZbZclAttrDefaultValue_5>
 80042b4:	280d      	cmp	r0, #13
 80042b6:	f000 80a6 	beq.w	8004406 <??ZbZclAttrDefaultValue_6>
 80042ba:	280e      	cmp	r0, #14
 80042bc:	f000 8099 	beq.w	80043f2 <??ZbZclAttrDefaultValue_7>
 80042c0:	280f      	cmp	r0, #15
 80042c2:	f000 808c 	beq.w	80043de <??ZbZclAttrDefaultValue_8>
 80042c6:	2810      	cmp	r0, #16
 80042c8:	f000 80db 	beq.w	8004482 <??ZbZclAttrDefaultValue_9>
 80042cc:	2818      	cmp	r0, #24
 80042ce:	f000 8126 	beq.w	800451e <??ZbZclAttrDefaultValue_10>
 80042d2:	2819      	cmp	r0, #25
 80042d4:	f000 8119 	beq.w	800450a <??ZbZclAttrDefaultValue_11>
 80042d8:	281a      	cmp	r0, #26
 80042da:	f000 810c 	beq.w	80044f6 <??ZbZclAttrDefaultValue_12>
 80042de:	281b      	cmp	r0, #27
 80042e0:	f000 80ff 	beq.w	80044e2 <??ZbZclAttrDefaultValue_13>
 80042e4:	281c      	cmp	r0, #28
 80042e6:	f000 80f2 	beq.w	80044ce <??ZbZclAttrDefaultValue_14>
 80042ea:	281d      	cmp	r0, #29
 80042ec:	f000 80e5 	beq.w	80044ba <??ZbZclAttrDefaultValue_15>
 80042f0:	281e      	cmp	r0, #30
 80042f2:	f000 80d8 	beq.w	80044a6 <??ZbZclAttrDefaultValue_16>
 80042f6:	281f      	cmp	r0, #31
 80042f8:	f000 80cb 	beq.w	8004492 <??ZbZclAttrDefaultValue_17>
 80042fc:	2820      	cmp	r0, #32
 80042fe:	f000 80b4 	beq.w	800446a <??ZbZclAttrDefaultValue_1>
 8004302:	2821      	cmp	r0, #33	; 0x21
 8004304:	f000 80a7 	beq.w	8004456 <??ZbZclAttrDefaultValue_2>
 8004308:	2822      	cmp	r0, #34	; 0x22
 800430a:	f000 809a 	beq.w	8004442 <??ZbZclAttrDefaultValue_3>
 800430e:	2823      	cmp	r0, #35	; 0x23
 8004310:	f000 808d 	beq.w	800442e <??ZbZclAttrDefaultValue_4>
 8004314:	2824      	cmp	r0, #36	; 0x24
 8004316:	f000 8080 	beq.w	800441a <??ZbZclAttrDefaultValue_5>
 800431a:	2825      	cmp	r0, #37	; 0x25
 800431c:	d073      	beq.n	8004406 <??ZbZclAttrDefaultValue_6>
 800431e:	2826      	cmp	r0, #38	; 0x26
 8004320:	d067      	beq.n	80043f2 <??ZbZclAttrDefaultValue_7>
 8004322:	2827      	cmp	r0, #39	; 0x27
 8004324:	d05b      	beq.n	80043de <??ZbZclAttrDefaultValue_8>
 8004326:	2828      	cmp	r0, #40	; 0x28
 8004328:	f000 814b 	beq.w	80045c2 <??ZbZclAttrDefaultValue_18>
 800432c:	2829      	cmp	r0, #41	; 0x29
 800432e:	f000 813e 	beq.w	80045ae <??ZbZclAttrDefaultValue_19>
 8004332:	282a      	cmp	r0, #42	; 0x2a
 8004334:	f000 8131 	beq.w	800459a <??ZbZclAttrDefaultValue_20>
 8004338:	282b      	cmp	r0, #43	; 0x2b
 800433a:	f000 8124 	beq.w	8004586 <??ZbZclAttrDefaultValue_21>
 800433e:	282c      	cmp	r0, #44	; 0x2c
 8004340:	f000 8117 	beq.w	8004572 <??ZbZclAttrDefaultValue_22>
 8004344:	282d      	cmp	r0, #45	; 0x2d
 8004346:	f000 810a 	beq.w	800455e <??ZbZclAttrDefaultValue_23>
 800434a:	282e      	cmp	r0, #46	; 0x2e
 800434c:	f000 80fd 	beq.w	800454a <??ZbZclAttrDefaultValue_24>
 8004350:	282f      	cmp	r0, #47	; 0x2f
 8004352:	f000 80f0 	beq.w	8004536 <??ZbZclAttrDefaultValue_25>
 8004356:	2830      	cmp	r0, #48	; 0x30
 8004358:	f000 8087 	beq.w	800446a <??ZbZclAttrDefaultValue_1>
 800435c:	2831      	cmp	r0, #49	; 0x31
 800435e:	d07a      	beq.n	8004456 <??ZbZclAttrDefaultValue_2>
 8004360:	2838      	cmp	r0, #56	; 0x38
 8004362:	f000 813a 	beq.w	80045da <??ZbZclAttrDefaultValue_26>
 8004366:	2839      	cmp	r0, #57	; 0x39
 8004368:	f000 8142 	beq.w	80045f0 <??ZbZclAttrDefaultValue_27>
 800436c:	283a      	cmp	r0, #58	; 0x3a
 800436e:	f000 8149 	beq.w	8004604 <??ZbZclAttrDefaultValue_28>
 8004372:	2841      	cmp	r0, #65	; 0x41
 8004374:	f000 8152 	beq.w	800461c <??ZbZclAttrDefaultValue_29>
 8004378:	2842      	cmp	r0, #66	; 0x42
 800437a:	f000 8159 	beq.w	8004630 <??ZbZclAttrDefaultValue_30>
 800437e:	2843      	cmp	r0, #67	; 0x43
 8004380:	f000 8160 	beq.w	8004644 <??ZbZclAttrDefaultValue_31>
 8004384:	2844      	cmp	r0, #68	; 0x44
 8004386:	f000 8168 	beq.w	800465a <??ZbZclAttrDefaultValue_32>
 800438a:	2848      	cmp	r0, #72	; 0x48
 800438c:	f000 818b 	beq.w	80046a6 <??ZbZclAttrDefaultValue_33>
 8004390:	284c      	cmp	r0, #76	; 0x4c
 8004392:	f000 8192 	beq.w	80046ba <??ZbZclAttrDefaultValue_34>
 8004396:	2850      	cmp	r0, #80	; 0x50
 8004398:	f000 8199 	beq.w	80046ce <??ZbZclAttrDefaultValue_35>
 800439c:	2851      	cmp	r0, #81	; 0x51
 800439e:	f000 81a0 	beq.w	80046e2 <??ZbZclAttrDefaultValue_36>
 80043a2:	28e0      	cmp	r0, #224	; 0xe0
 80043a4:	f000 81a7 	beq.w	80046f6 <??ZbZclAttrDefaultValue_37>
 80043a8:	28e1      	cmp	r0, #225	; 0xe1
 80043aa:	f000 81ae 	beq.w	800470a <??ZbZclAttrDefaultValue_38>
 80043ae:	28e2      	cmp	r0, #226	; 0xe2
 80043b0:	f000 81b5 	beq.w	800471e <??ZbZclAttrDefaultValue_39>
 80043b4:	28e8      	cmp	r0, #232	; 0xe8
 80043b6:	f000 81bc 	beq.w	8004732 <??ZbZclAttrDefaultValue_40>
 80043ba:	28e9      	cmp	r0, #233	; 0xe9
 80043bc:	f000 81c3 	beq.w	8004746 <??ZbZclAttrDefaultValue_41>
 80043c0:	28ea      	cmp	r0, #234	; 0xea
 80043c2:	f000 81ca 	beq.w	800475a <??ZbZclAttrDefaultValue_42>
 80043c6:	28f0      	cmp	r0, #240	; 0xf0
 80043c8:	f000 8152 	beq.w	8004670 <??ZbZclAttrDefaultValue_43>
 80043cc:	28f1      	cmp	r0, #241	; 0xf1
 80043ce:	f000 815b 	beq.w	8004688 <??ZbZclAttrDefaultValue_44>
 80043d2:	28ff      	cmp	r0, #255	; 0xff
 80043d4:	f040 81cb 	bne.w	800476e <??ZbZclAttrDefaultValue_45>

080043d8 <??ZbZclAttrDefaultValue_0>:
 80043d8:	2000      	movs	r0, #0
 80043da:	0007      	movs	r7, r0
 80043dc:	e1c7      	b.n	800476e <??ZbZclAttrDefaultValue_45>

080043de <??ZbZclAttrDefaultValue_8>:
 80043de:	1c70      	adds	r0, r6, #1
 80043e0:	4285      	cmp	r5, r0
 80043e2:	f0c0 81c4 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080043e6 <??ZbZclAttrDefaultValue_47>:
 80043e6:	20ff      	movs	r0, #255	; 0xff
 80043e8:	f888 0000 	strb.w	r0, [r8]
 80043ec:	f118 0801 	adds.w	r8, r8, #1
 80043f0:	1c76      	adds	r6, r6, #1

080043f2 <??ZbZclAttrDefaultValue_7>:
 80043f2:	1c70      	adds	r0, r6, #1
 80043f4:	4285      	cmp	r5, r0
 80043f6:	f0c0 81ba 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080043fa <??ZbZclAttrDefaultValue_48>:
 80043fa:	20ff      	movs	r0, #255	; 0xff
 80043fc:	f888 0000 	strb.w	r0, [r8]
 8004400:	f118 0801 	adds.w	r8, r8, #1
 8004404:	1c76      	adds	r6, r6, #1

08004406 <??ZbZclAttrDefaultValue_6>:
 8004406:	1c70      	adds	r0, r6, #1
 8004408:	4285      	cmp	r5, r0
 800440a:	f0c0 81b0 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

0800440e <??ZbZclAttrDefaultValue_49>:
 800440e:	20ff      	movs	r0, #255	; 0xff
 8004410:	f888 0000 	strb.w	r0, [r8]
 8004414:	f118 0801 	adds.w	r8, r8, #1
 8004418:	1c76      	adds	r6, r6, #1

0800441a <??ZbZclAttrDefaultValue_5>:
 800441a:	1c70      	adds	r0, r6, #1
 800441c:	4285      	cmp	r5, r0
 800441e:	f0c0 81a6 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

08004422 <??ZbZclAttrDefaultValue_50>:
 8004422:	20ff      	movs	r0, #255	; 0xff
 8004424:	f888 0000 	strb.w	r0, [r8]
 8004428:	f118 0801 	adds.w	r8, r8, #1
 800442c:	1c76      	adds	r6, r6, #1

0800442e <??ZbZclAttrDefaultValue_4>:
 800442e:	1c70      	adds	r0, r6, #1
 8004430:	4285      	cmp	r5, r0
 8004432:	f0c0 819c 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

08004436 <??ZbZclAttrDefaultValue_51>:
 8004436:	20ff      	movs	r0, #255	; 0xff
 8004438:	f888 0000 	strb.w	r0, [r8]
 800443c:	f118 0801 	adds.w	r8, r8, #1
 8004440:	1c76      	adds	r6, r6, #1

08004442 <??ZbZclAttrDefaultValue_3>:
 8004442:	1c70      	adds	r0, r6, #1
 8004444:	4285      	cmp	r5, r0
 8004446:	f0c0 8192 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

0800444a <??ZbZclAttrDefaultValue_52>:
 800444a:	20ff      	movs	r0, #255	; 0xff
 800444c:	f888 0000 	strb.w	r0, [r8]
 8004450:	f118 0801 	adds.w	r8, r8, #1
 8004454:	1c76      	adds	r6, r6, #1

08004456 <??ZbZclAttrDefaultValue_2>:
 8004456:	1c70      	adds	r0, r6, #1
 8004458:	4285      	cmp	r5, r0
 800445a:	f0c0 8188 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

0800445e <??ZbZclAttrDefaultValue_53>:
 800445e:	20ff      	movs	r0, #255	; 0xff
 8004460:	f888 0000 	strb.w	r0, [r8]
 8004464:	f118 0801 	adds.w	r8, r8, #1
 8004468:	1c76      	adds	r6, r6, #1

0800446a <??ZbZclAttrDefaultValue_1>:
 800446a:	1c70      	adds	r0, r6, #1
 800446c:	4285      	cmp	r5, r0
 800446e:	f0c0 817e 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

08004472 <??ZbZclAttrDefaultValue_54>:
 8004472:	20ff      	movs	r0, #255	; 0xff
 8004474:	f888 0000 	strb.w	r0, [r8]
 8004478:	f118 0801 	adds.w	r8, r8, #1
 800447c:	1c76      	adds	r6, r6, #1
 800447e:	0037      	movs	r7, r6
 8004480:	e175      	b.n	800476e <??ZbZclAttrDefaultValue_45>

08004482 <??ZbZclAttrDefaultValue_9>:
 8004482:	2000      	movs	r0, #0
 8004484:	f888 0000 	strb.w	r0, [r8]
 8004488:	f118 0801 	adds.w	r8, r8, #1
 800448c:	2001      	movs	r0, #1
 800448e:	0007      	movs	r7, r0
 8004490:	e16d      	b.n	800476e <??ZbZclAttrDefaultValue_45>

08004492 <??ZbZclAttrDefaultValue_17>:
 8004492:	1c70      	adds	r0, r6, #1
 8004494:	4285      	cmp	r5, r0
 8004496:	f0c0 816a 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

0800449a <??ZbZclAttrDefaultValue_55>:
 800449a:	2000      	movs	r0, #0
 800449c:	f888 0000 	strb.w	r0, [r8]
 80044a0:	f118 0801 	adds.w	r8, r8, #1
 80044a4:	1c76      	adds	r6, r6, #1

080044a6 <??ZbZclAttrDefaultValue_16>:
 80044a6:	1c70      	adds	r0, r6, #1
 80044a8:	4285      	cmp	r5, r0
 80044aa:	f0c0 8160 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080044ae <??ZbZclAttrDefaultValue_56>:
 80044ae:	2000      	movs	r0, #0
 80044b0:	f888 0000 	strb.w	r0, [r8]
 80044b4:	f118 0801 	adds.w	r8, r8, #1
 80044b8:	1c76      	adds	r6, r6, #1

080044ba <??ZbZclAttrDefaultValue_15>:
 80044ba:	1c70      	adds	r0, r6, #1
 80044bc:	4285      	cmp	r5, r0
 80044be:	f0c0 8156 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080044c2 <??ZbZclAttrDefaultValue_57>:
 80044c2:	2000      	movs	r0, #0
 80044c4:	f888 0000 	strb.w	r0, [r8]
 80044c8:	f118 0801 	adds.w	r8, r8, #1
 80044cc:	1c76      	adds	r6, r6, #1

080044ce <??ZbZclAttrDefaultValue_14>:
 80044ce:	1c70      	adds	r0, r6, #1
 80044d0:	4285      	cmp	r5, r0
 80044d2:	f0c0 814c 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080044d6 <??ZbZclAttrDefaultValue_58>:
 80044d6:	2000      	movs	r0, #0
 80044d8:	f888 0000 	strb.w	r0, [r8]
 80044dc:	f118 0801 	adds.w	r8, r8, #1
 80044e0:	1c76      	adds	r6, r6, #1

080044e2 <??ZbZclAttrDefaultValue_13>:
 80044e2:	1c70      	adds	r0, r6, #1
 80044e4:	4285      	cmp	r5, r0
 80044e6:	f0c0 8142 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080044ea <??ZbZclAttrDefaultValue_59>:
 80044ea:	2000      	movs	r0, #0
 80044ec:	f888 0000 	strb.w	r0, [r8]
 80044f0:	f118 0801 	adds.w	r8, r8, #1
 80044f4:	1c76      	adds	r6, r6, #1

080044f6 <??ZbZclAttrDefaultValue_12>:
 80044f6:	1c70      	adds	r0, r6, #1
 80044f8:	4285      	cmp	r5, r0
 80044fa:	f0c0 8138 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080044fe <??ZbZclAttrDefaultValue_60>:
 80044fe:	2000      	movs	r0, #0
 8004500:	f888 0000 	strb.w	r0, [r8]
 8004504:	f118 0801 	adds.w	r8, r8, #1
 8004508:	1c76      	adds	r6, r6, #1

0800450a <??ZbZclAttrDefaultValue_11>:
 800450a:	1c70      	adds	r0, r6, #1
 800450c:	4285      	cmp	r5, r0
 800450e:	f0c0 812e 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

08004512 <??ZbZclAttrDefaultValue_61>:
 8004512:	2000      	movs	r0, #0
 8004514:	f888 0000 	strb.w	r0, [r8]
 8004518:	f118 0801 	adds.w	r8, r8, #1
 800451c:	1c76      	adds	r6, r6, #1

0800451e <??ZbZclAttrDefaultValue_10>:
 800451e:	1c70      	adds	r0, r6, #1
 8004520:	4285      	cmp	r5, r0
 8004522:	f0c0 8124 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

08004526 <??ZbZclAttrDefaultValue_62>:
 8004526:	2000      	movs	r0, #0
 8004528:	f888 0000 	strb.w	r0, [r8]
 800452c:	f118 0801 	adds.w	r8, r8, #1
 8004530:	1c76      	adds	r6, r6, #1
 8004532:	0037      	movs	r7, r6
 8004534:	e11b      	b.n	800476e <??ZbZclAttrDefaultValue_45>

08004536 <??ZbZclAttrDefaultValue_25>:
 8004536:	1c70      	adds	r0, r6, #1
 8004538:	4285      	cmp	r5, r0
 800453a:	f0c0 8118 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

0800453e <??ZbZclAttrDefaultValue_63>:
 800453e:	2000      	movs	r0, #0
 8004540:	f888 0000 	strb.w	r0, [r8]
 8004544:	f118 0801 	adds.w	r8, r8, #1
 8004548:	1c76      	adds	r6, r6, #1

0800454a <??ZbZclAttrDefaultValue_24>:
 800454a:	1c70      	adds	r0, r6, #1
 800454c:	4285      	cmp	r5, r0
 800454e:	f0c0 810e 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

08004552 <??ZbZclAttrDefaultValue_64>:
 8004552:	2000      	movs	r0, #0
 8004554:	f888 0000 	strb.w	r0, [r8]
 8004558:	f118 0801 	adds.w	r8, r8, #1
 800455c:	1c76      	adds	r6, r6, #1

0800455e <??ZbZclAttrDefaultValue_23>:
 800455e:	1c70      	adds	r0, r6, #1
 8004560:	4285      	cmp	r5, r0
 8004562:	f0c0 8104 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

08004566 <??ZbZclAttrDefaultValue_65>:
 8004566:	2000      	movs	r0, #0
 8004568:	f888 0000 	strb.w	r0, [r8]
 800456c:	f118 0801 	adds.w	r8, r8, #1
 8004570:	1c76      	adds	r6, r6, #1

08004572 <??ZbZclAttrDefaultValue_22>:
 8004572:	1c70      	adds	r0, r6, #1
 8004574:	4285      	cmp	r5, r0
 8004576:	f0c0 80fa 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

0800457a <??ZbZclAttrDefaultValue_66>:
 800457a:	2000      	movs	r0, #0
 800457c:	f888 0000 	strb.w	r0, [r8]
 8004580:	f118 0801 	adds.w	r8, r8, #1
 8004584:	1c76      	adds	r6, r6, #1

08004586 <??ZbZclAttrDefaultValue_21>:
 8004586:	1c70      	adds	r0, r6, #1
 8004588:	4285      	cmp	r5, r0
 800458a:	f0c0 80f0 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

0800458e <??ZbZclAttrDefaultValue_67>:
 800458e:	2000      	movs	r0, #0
 8004590:	f888 0000 	strb.w	r0, [r8]
 8004594:	f118 0801 	adds.w	r8, r8, #1
 8004598:	1c76      	adds	r6, r6, #1

0800459a <??ZbZclAttrDefaultValue_20>:
 800459a:	1c70      	adds	r0, r6, #1
 800459c:	4285      	cmp	r5, r0
 800459e:	f0c0 80e6 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080045a2 <??ZbZclAttrDefaultValue_68>:
 80045a2:	2000      	movs	r0, #0
 80045a4:	f888 0000 	strb.w	r0, [r8]
 80045a8:	f118 0801 	adds.w	r8, r8, #1
 80045ac:	1c76      	adds	r6, r6, #1

080045ae <??ZbZclAttrDefaultValue_19>:
 80045ae:	1c70      	adds	r0, r6, #1
 80045b0:	4285      	cmp	r5, r0
 80045b2:	f0c0 80dc 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080045b6 <??ZbZclAttrDefaultValue_69>:
 80045b6:	2000      	movs	r0, #0
 80045b8:	f888 0000 	strb.w	r0, [r8]
 80045bc:	f118 0801 	adds.w	r8, r8, #1
 80045c0:	1c76      	adds	r6, r6, #1

080045c2 <??ZbZclAttrDefaultValue_18>:
 80045c2:	1c70      	adds	r0, r6, #1
 80045c4:	4285      	cmp	r5, r0
 80045c6:	f0c0 80d2 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080045ca <??ZbZclAttrDefaultValue_70>:
 80045ca:	2080      	movs	r0, #128	; 0x80
 80045cc:	f888 0000 	strb.w	r0, [r8]
 80045d0:	f118 0801 	adds.w	r8, r8, #1
 80045d4:	1c76      	adds	r6, r6, #1
 80045d6:	0037      	movs	r7, r6
 80045d8:	e0c9      	b.n	800476e <??ZbZclAttrDefaultValue_45>

080045da <??ZbZclAttrDefaultValue_26>:
 80045da:	2d02      	cmp	r5, #2
 80045dc:	f0c0 80c7 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080045e0 <??ZbZclAttrDefaultValue_71>:
 80045e0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80045e4:	4640      	mov	r0, r8
 80045e6:	f7ff f9a5 	bl	8003934 <putle16>
 80045ea:	2002      	movs	r0, #2
 80045ec:	0007      	movs	r7, r0
 80045ee:	e0be      	b.n	800476e <??ZbZclAttrDefaultValue_45>

080045f0 <??ZbZclAttrDefaultValue_27>:
 80045f0:	2d04      	cmp	r5, #4
 80045f2:	f0c0 80bc 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

080045f6 <??ZbZclAttrDefaultValue_72>:
 80045f6:	495f      	ldr	r1, [pc, #380]	; (8004774 <??DataTable1>)
 80045f8:	4640      	mov	r0, r8
 80045fa:	f7ff f9ad 	bl	8003958 <putle32>
 80045fe:	2004      	movs	r0, #4
 8004600:	0007      	movs	r7, r0
 8004602:	e0b4      	b.n	800476e <??ZbZclAttrDefaultValue_45>

08004604 <??ZbZclAttrDefaultValue_28>:
 8004604:	2d08      	cmp	r5, #8
 8004606:	f0c0 80b2 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

0800460a <??ZbZclAttrDefaultValue_73>:
 800460a:	f07f 0201 	mvns.w	r2, #1
 800460e:	4b5a      	ldr	r3, [pc, #360]	; (8004778 <??DataTable1_1>)
 8004610:	4640      	mov	r0, r8
 8004612:	f7ff f9d4 	bl	80039be <putle64>
 8004616:	2008      	movs	r0, #8
 8004618:	0007      	movs	r7, r0
 800461a:	e0a8      	b.n	800476e <??ZbZclAttrDefaultValue_45>

0800461c <??ZbZclAttrDefaultValue_29>:
 800461c:	2d02      	cmp	r5, #2
 800461e:	f0c0 80a6 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

08004622 <??ZbZclAttrDefaultValue_74>:
 8004622:	21ff      	movs	r1, #255	; 0xff
 8004624:	4640      	mov	r0, r8
 8004626:	f7ff f985 	bl	8003934 <putle16>
 800462a:	2002      	movs	r0, #2
 800462c:	0007      	movs	r7, r0
 800462e:	e09e      	b.n	800476e <??ZbZclAttrDefaultValue_45>

08004630 <??ZbZclAttrDefaultValue_30>:
 8004630:	2d02      	cmp	r5, #2
 8004632:	f0c0 809c 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

08004636 <??ZbZclAttrDefaultValue_75>:
 8004636:	21ff      	movs	r1, #255	; 0xff
 8004638:	4640      	mov	r0, r8
 800463a:	f7ff f97b 	bl	8003934 <putle16>
 800463e:	2002      	movs	r0, #2
 8004640:	0007      	movs	r7, r0
 8004642:	e094      	b.n	800476e <??ZbZclAttrDefaultValue_45>

08004644 <??ZbZclAttrDefaultValue_31>:
 8004644:	2d04      	cmp	r5, #4
 8004646:	f0c0 8092 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

0800464a <??ZbZclAttrDefaultValue_76>:
 800464a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800464e:	4640      	mov	r0, r8
 8004650:	f7ff f982 	bl	8003958 <putle32>
 8004654:	2004      	movs	r0, #4
 8004656:	0007      	movs	r7, r0
 8004658:	e089      	b.n	800476e <??ZbZclAttrDefaultValue_45>

0800465a <??ZbZclAttrDefaultValue_32>:
 800465a:	2d04      	cmp	r5, #4
 800465c:	f0c0 8087 	bcc.w	800476e <??ZbZclAttrDefaultValue_45>

08004660 <??ZbZclAttrDefaultValue_77>:
 8004660:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004664:	4640      	mov	r0, r8
 8004666:	f7ff f977 	bl	8003958 <putle32>
 800466a:	2004      	movs	r0, #4
 800466c:	0007      	movs	r7, r0
 800466e:	e07e      	b.n	800476e <??ZbZclAttrDefaultValue_45>

08004670 <??ZbZclAttrDefaultValue_43>:
 8004670:	2d08      	cmp	r5, #8
 8004672:	d37c      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

08004674 <??ZbZclAttrDefaultValue_78>:
 8004674:	f05f 32ff 	movs.w	r2, #4294967295
 8004678:	f05f 33ff 	movs.w	r3, #4294967295
 800467c:	4640      	mov	r0, r8
 800467e:	f7ff f99e 	bl	80039be <putle64>
 8004682:	2008      	movs	r0, #8
 8004684:	0007      	movs	r7, r0
 8004686:	e072      	b.n	800476e <??ZbZclAttrDefaultValue_45>

08004688 <??ZbZclAttrDefaultValue_44>:
 8004688:	2d10      	cmp	r5, #16
 800468a:	d370      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

0800468c <??ZbZclAttrDefaultValue_79>:
 800468c:	f05f 0910 	movs.w	r9, #16
 8004690:	f05f 0a00 	movs.w	sl, #0
 8004694:	46c3      	mov	fp, r8
 8004696:	4652      	mov	r2, sl
 8004698:	4649      	mov	r1, r9
 800469a:	4658      	mov	r0, fp
 800469c:	f003 f91c 	bl	80078d8 <__aeabi_memset>
 80046a0:	2010      	movs	r0, #16
 80046a2:	0007      	movs	r7, r0
 80046a4:	e063      	b.n	800476e <??ZbZclAttrDefaultValue_45>

080046a6 <??ZbZclAttrDefaultValue_33>:
 80046a6:	2d02      	cmp	r5, #2
 80046a8:	d361      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

080046aa <??ZbZclAttrDefaultValue_80>:
 80046aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046ae:	4640      	mov	r0, r8
 80046b0:	f7ff f940 	bl	8003934 <putle16>
 80046b4:	2002      	movs	r0, #2
 80046b6:	0007      	movs	r7, r0
 80046b8:	e059      	b.n	800476e <??ZbZclAttrDefaultValue_45>

080046ba <??ZbZclAttrDefaultValue_34>:
 80046ba:	2d02      	cmp	r5, #2
 80046bc:	d357      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

080046be <??ZbZclAttrDefaultValue_81>:
 80046be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046c2:	4640      	mov	r0, r8
 80046c4:	f7ff f936 	bl	8003934 <putle16>
 80046c8:	2002      	movs	r0, #2
 80046ca:	0007      	movs	r7, r0
 80046cc:	e04f      	b.n	800476e <??ZbZclAttrDefaultValue_45>

080046ce <??ZbZclAttrDefaultValue_35>:
 80046ce:	2d02      	cmp	r5, #2
 80046d0:	d34d      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

080046d2 <??ZbZclAttrDefaultValue_82>:
 80046d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046d6:	4640      	mov	r0, r8
 80046d8:	f7ff f92c 	bl	8003934 <putle16>
 80046dc:	2002      	movs	r0, #2
 80046de:	0007      	movs	r7, r0
 80046e0:	e045      	b.n	800476e <??ZbZclAttrDefaultValue_45>

080046e2 <??ZbZclAttrDefaultValue_36>:
 80046e2:	2d02      	cmp	r5, #2
 80046e4:	d343      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

080046e6 <??ZbZclAttrDefaultValue_83>:
 80046e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046ea:	4640      	mov	r0, r8
 80046ec:	f7ff f922 	bl	8003934 <putle16>
 80046f0:	2002      	movs	r0, #2
 80046f2:	0007      	movs	r7, r0
 80046f4:	e03b      	b.n	800476e <??ZbZclAttrDefaultValue_45>

080046f6 <??ZbZclAttrDefaultValue_37>:
 80046f6:	2d04      	cmp	r5, #4
 80046f8:	d339      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

080046fa <??ZbZclAttrDefaultValue_84>:
 80046fa:	f05f 31ff 	movs.w	r1, #4294967295
 80046fe:	4640      	mov	r0, r8
 8004700:	f7ff f92a 	bl	8003958 <putle32>
 8004704:	2004      	movs	r0, #4
 8004706:	0007      	movs	r7, r0
 8004708:	e031      	b.n	800476e <??ZbZclAttrDefaultValue_45>

0800470a <??ZbZclAttrDefaultValue_38>:
 800470a:	2d04      	cmp	r5, #4
 800470c:	d32f      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

0800470e <??ZbZclAttrDefaultValue_85>:
 800470e:	f05f 31ff 	movs.w	r1, #4294967295
 8004712:	4640      	mov	r0, r8
 8004714:	f7ff f920 	bl	8003958 <putle32>
 8004718:	2004      	movs	r0, #4
 800471a:	0007      	movs	r7, r0
 800471c:	e027      	b.n	800476e <??ZbZclAttrDefaultValue_45>

0800471e <??ZbZclAttrDefaultValue_39>:
 800471e:	2d04      	cmp	r5, #4
 8004720:	d325      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

08004722 <??ZbZclAttrDefaultValue_86>:
 8004722:	f05f 31ff 	movs.w	r1, #4294967295
 8004726:	4640      	mov	r0, r8
 8004728:	f7ff f916 	bl	8003958 <putle32>
 800472c:	2004      	movs	r0, #4
 800472e:	0007      	movs	r7, r0
 8004730:	e01d      	b.n	800476e <??ZbZclAttrDefaultValue_45>

08004732 <??ZbZclAttrDefaultValue_40>:
 8004732:	2d02      	cmp	r5, #2
 8004734:	d31b      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

08004736 <??ZbZclAttrDefaultValue_87>:
 8004736:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800473a:	4640      	mov	r0, r8
 800473c:	f7ff f8fa 	bl	8003934 <putle16>
 8004740:	2002      	movs	r0, #2
 8004742:	0007      	movs	r7, r0
 8004744:	e013      	b.n	800476e <??ZbZclAttrDefaultValue_45>

08004746 <??ZbZclAttrDefaultValue_41>:
 8004746:	2d02      	cmp	r5, #2
 8004748:	d311      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

0800474a <??ZbZclAttrDefaultValue_88>:
 800474a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800474e:	4640      	mov	r0, r8
 8004750:	f7ff f8f0 	bl	8003934 <putle16>
 8004754:	2002      	movs	r0, #2
 8004756:	0007      	movs	r7, r0
 8004758:	e009      	b.n	800476e <??ZbZclAttrDefaultValue_45>

0800475a <??ZbZclAttrDefaultValue_42>:
 800475a:	2d04      	cmp	r5, #4
 800475c:	d307      	bcc.n	800476e <??ZbZclAttrDefaultValue_45>

0800475e <??ZbZclAttrDefaultValue_89>:
 800475e:	f05f 31ff 	movs.w	r1, #4294967295
 8004762:	4640      	mov	r0, r8
 8004764:	f7ff f8f8 	bl	8003958 <putle32>
 8004768:	2004      	movs	r0, #4
 800476a:	0007      	movs	r7, r0
 800476c:	e7ff      	b.n	800476e <??ZbZclAttrDefaultValue_45>

0800476e <??ZbZclAttrDefaultValue_45>:
 800476e:	0038      	movs	r0, r7
 8004770:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004774 <??DataTable1>:
 8004774:	fffe 00ff                                   ....

08004778 <??DataTable1_1>:
 8004778:	ffff 001f                                   ....

0800477c <ZbZclAttrTypeLength>:
 800477c:	0001      	movs	r1, r0
 800477e:	0008      	movs	r0, r1
 8004780:	b2c0      	uxtb	r0, r0
 8004782:	2800      	cmp	r0, #0
 8004784:	f000 8081 	beq.w	800488a <??ZbZclAttrTypeLength_0>
 8004788:	2808      	cmp	r0, #8
 800478a:	d06c      	beq.n	8004866 <??ZbZclAttrTypeLength_1>
 800478c:	2809      	cmp	r0, #9
 800478e:	d06c      	beq.n	800486a <??ZbZclAttrTypeLength_2>
 8004790:	280a      	cmp	r0, #10
 8004792:	d06c      	beq.n	800486e <??ZbZclAttrTypeLength_3>
 8004794:	280b      	cmp	r0, #11
 8004796:	d06c      	beq.n	8004872 <??ZbZclAttrTypeLength_4>
 8004798:	280c      	cmp	r0, #12
 800479a:	d06c      	beq.n	8004876 <??ZbZclAttrTypeLength_5>
 800479c:	280d      	cmp	r0, #13
 800479e:	d06c      	beq.n	800487a <??ZbZclAttrTypeLength_6>
 80047a0:	280e      	cmp	r0, #14
 80047a2:	d06c      	beq.n	800487e <??ZbZclAttrTypeLength_7>
 80047a4:	280f      	cmp	r0, #15
 80047a6:	d06c      	beq.n	8004882 <??ZbZclAttrTypeLength_8>
 80047a8:	2810      	cmp	r0, #16
 80047aa:	d05c      	beq.n	8004866 <??ZbZclAttrTypeLength_1>
 80047ac:	2818      	cmp	r0, #24
 80047ae:	d05a      	beq.n	8004866 <??ZbZclAttrTypeLength_1>
 80047b0:	2819      	cmp	r0, #25
 80047b2:	d05a      	beq.n	800486a <??ZbZclAttrTypeLength_2>
 80047b4:	281a      	cmp	r0, #26
 80047b6:	d05a      	beq.n	800486e <??ZbZclAttrTypeLength_3>
 80047b8:	281b      	cmp	r0, #27
 80047ba:	d05a      	beq.n	8004872 <??ZbZclAttrTypeLength_4>
 80047bc:	281c      	cmp	r0, #28
 80047be:	d05a      	beq.n	8004876 <??ZbZclAttrTypeLength_5>
 80047c0:	281d      	cmp	r0, #29
 80047c2:	d05a      	beq.n	800487a <??ZbZclAttrTypeLength_6>
 80047c4:	281e      	cmp	r0, #30
 80047c6:	d05a      	beq.n	800487e <??ZbZclAttrTypeLength_7>
 80047c8:	281f      	cmp	r0, #31
 80047ca:	d05a      	beq.n	8004882 <??ZbZclAttrTypeLength_8>
 80047cc:	2820      	cmp	r0, #32
 80047ce:	d04a      	beq.n	8004866 <??ZbZclAttrTypeLength_1>
 80047d0:	2821      	cmp	r0, #33	; 0x21
 80047d2:	d04a      	beq.n	800486a <??ZbZclAttrTypeLength_2>
 80047d4:	2822      	cmp	r0, #34	; 0x22
 80047d6:	d04a      	beq.n	800486e <??ZbZclAttrTypeLength_3>
 80047d8:	2823      	cmp	r0, #35	; 0x23
 80047da:	d04a      	beq.n	8004872 <??ZbZclAttrTypeLength_4>
 80047dc:	2824      	cmp	r0, #36	; 0x24
 80047de:	d04a      	beq.n	8004876 <??ZbZclAttrTypeLength_5>
 80047e0:	2825      	cmp	r0, #37	; 0x25
 80047e2:	d04a      	beq.n	800487a <??ZbZclAttrTypeLength_6>
 80047e4:	2826      	cmp	r0, #38	; 0x26
 80047e6:	d04a      	beq.n	800487e <??ZbZclAttrTypeLength_7>
 80047e8:	2827      	cmp	r0, #39	; 0x27
 80047ea:	d04a      	beq.n	8004882 <??ZbZclAttrTypeLength_8>
 80047ec:	2828      	cmp	r0, #40	; 0x28
 80047ee:	d03a      	beq.n	8004866 <??ZbZclAttrTypeLength_1>
 80047f0:	2829      	cmp	r0, #41	; 0x29
 80047f2:	d03a      	beq.n	800486a <??ZbZclAttrTypeLength_2>
 80047f4:	282a      	cmp	r0, #42	; 0x2a
 80047f6:	d03a      	beq.n	800486e <??ZbZclAttrTypeLength_3>
 80047f8:	282b      	cmp	r0, #43	; 0x2b
 80047fa:	d03a      	beq.n	8004872 <??ZbZclAttrTypeLength_4>
 80047fc:	282c      	cmp	r0, #44	; 0x2c
 80047fe:	d03a      	beq.n	8004876 <??ZbZclAttrTypeLength_5>
 8004800:	282d      	cmp	r0, #45	; 0x2d
 8004802:	d03a      	beq.n	800487a <??ZbZclAttrTypeLength_6>
 8004804:	282e      	cmp	r0, #46	; 0x2e
 8004806:	d03a      	beq.n	800487e <??ZbZclAttrTypeLength_7>
 8004808:	282f      	cmp	r0, #47	; 0x2f
 800480a:	d03a      	beq.n	8004882 <??ZbZclAttrTypeLength_8>
 800480c:	2830      	cmp	r0, #48	; 0x30
 800480e:	d02a      	beq.n	8004866 <??ZbZclAttrTypeLength_1>
 8004810:	2831      	cmp	r0, #49	; 0x31
 8004812:	d02a      	beq.n	800486a <??ZbZclAttrTypeLength_2>
 8004814:	2838      	cmp	r0, #56	; 0x38
 8004816:	d028      	beq.n	800486a <??ZbZclAttrTypeLength_2>
 8004818:	2839      	cmp	r0, #57	; 0x39
 800481a:	d02a      	beq.n	8004872 <??ZbZclAttrTypeLength_4>
 800481c:	283a      	cmp	r0, #58	; 0x3a
 800481e:	d030      	beq.n	8004882 <??ZbZclAttrTypeLength_8>
 8004820:	2841      	cmp	r0, #65	; 0x41
 8004822:	d032      	beq.n	800488a <??ZbZclAttrTypeLength_0>
 8004824:	2842      	cmp	r0, #66	; 0x42
 8004826:	d030      	beq.n	800488a <??ZbZclAttrTypeLength_0>
 8004828:	2843      	cmp	r0, #67	; 0x43
 800482a:	d02e      	beq.n	800488a <??ZbZclAttrTypeLength_0>
 800482c:	2844      	cmp	r0, #68	; 0x44
 800482e:	d02c      	beq.n	800488a <??ZbZclAttrTypeLength_0>
 8004830:	2848      	cmp	r0, #72	; 0x48
 8004832:	d02a      	beq.n	800488a <??ZbZclAttrTypeLength_0>
 8004834:	284c      	cmp	r0, #76	; 0x4c
 8004836:	d028      	beq.n	800488a <??ZbZclAttrTypeLength_0>
 8004838:	2850      	cmp	r0, #80	; 0x50
 800483a:	d026      	beq.n	800488a <??ZbZclAttrTypeLength_0>
 800483c:	2851      	cmp	r0, #81	; 0x51
 800483e:	d024      	beq.n	800488a <??ZbZclAttrTypeLength_0>
 8004840:	28e0      	cmp	r0, #224	; 0xe0
 8004842:	d016      	beq.n	8004872 <??ZbZclAttrTypeLength_4>
 8004844:	28e1      	cmp	r0, #225	; 0xe1
 8004846:	d014      	beq.n	8004872 <??ZbZclAttrTypeLength_4>
 8004848:	28e2      	cmp	r0, #226	; 0xe2
 800484a:	d012      	beq.n	8004872 <??ZbZclAttrTypeLength_4>
 800484c:	28e8      	cmp	r0, #232	; 0xe8
 800484e:	d00c      	beq.n	800486a <??ZbZclAttrTypeLength_2>
 8004850:	28e9      	cmp	r0, #233	; 0xe9
 8004852:	d00a      	beq.n	800486a <??ZbZclAttrTypeLength_2>
 8004854:	28ea      	cmp	r0, #234	; 0xea
 8004856:	d00c      	beq.n	8004872 <??ZbZclAttrTypeLength_4>
 8004858:	28f0      	cmp	r0, #240	; 0xf0
 800485a:	d012      	beq.n	8004882 <??ZbZclAttrTypeLength_8>
 800485c:	28f1      	cmp	r0, #241	; 0xf1
 800485e:	d012      	beq.n	8004886 <??ZbZclAttrTypeLength_9>
 8004860:	28ff      	cmp	r0, #255	; 0xff
 8004862:	d012      	beq.n	800488a <??ZbZclAttrTypeLength_0>
 8004864:	e013      	b.n	800488e <??ZbZclAttrTypeLength_10>

08004866 <??ZbZclAttrTypeLength_1>:
 8004866:	2001      	movs	r0, #1
 8004868:	e012      	b.n	8004890 <??ZbZclAttrTypeLength_11>

0800486a <??ZbZclAttrTypeLength_2>:
 800486a:	2002      	movs	r0, #2
 800486c:	e010      	b.n	8004890 <??ZbZclAttrTypeLength_11>

0800486e <??ZbZclAttrTypeLength_3>:
 800486e:	2003      	movs	r0, #3
 8004870:	e00e      	b.n	8004890 <??ZbZclAttrTypeLength_11>

08004872 <??ZbZclAttrTypeLength_4>:
 8004872:	2004      	movs	r0, #4
 8004874:	e00c      	b.n	8004890 <??ZbZclAttrTypeLength_11>

08004876 <??ZbZclAttrTypeLength_5>:
 8004876:	2005      	movs	r0, #5
 8004878:	e00a      	b.n	8004890 <??ZbZclAttrTypeLength_11>

0800487a <??ZbZclAttrTypeLength_6>:
 800487a:	2006      	movs	r0, #6
 800487c:	e008      	b.n	8004890 <??ZbZclAttrTypeLength_11>

0800487e <??ZbZclAttrTypeLength_7>:
 800487e:	2007      	movs	r0, #7
 8004880:	e006      	b.n	8004890 <??ZbZclAttrTypeLength_11>

08004882 <??ZbZclAttrTypeLength_8>:
 8004882:	2008      	movs	r0, #8
 8004884:	e004      	b.n	8004890 <??ZbZclAttrTypeLength_11>

08004886 <??ZbZclAttrTypeLength_9>:
 8004886:	2010      	movs	r0, #16
 8004888:	e002      	b.n	8004890 <??ZbZclAttrTypeLength_11>

0800488a <??ZbZclAttrTypeLength_0>:
 800488a:	2000      	movs	r0, #0
 800488c:	e000      	b.n	8004890 <??ZbZclAttrTypeLength_11>

0800488e <??ZbZclAttrTypeLength_10>:
 800488e:	2000      	movs	r0, #0

08004890 <??ZbZclAttrTypeLength_11>:
 8004890:	4770      	bx	lr

08004892 <ZbZclAttrParseLength>:
 8004892:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004896:	0006      	movs	r6, r0
 8004898:	000c      	movs	r4, r1
 800489a:	0015      	movs	r5, r2
 800489c:	001f      	movs	r7, r3
 800489e:	0038      	movs	r0, r7
 80048a0:	b2c0      	uxtb	r0, r0
 80048a2:	280f      	cmp	r0, #15
 80048a4:	d302      	bcc.n	80048ac <??ZbZclAttrParseLength_0>
 80048a6:	f05f 30ff 	movs.w	r0, #4294967295
 80048aa:	e0a1      	b.n	80049f0 <??ZbZclAttrParseLength_1>

080048ac <??ZbZclAttrParseLength_0>:
 80048ac:	0030      	movs	r0, r6
 80048ae:	b2c0      	uxtb	r0, r0
 80048b0:	f7ff ff64 	bl	800477c <ZbZclAttrTypeLength>
 80048b4:	0001      	movs	r1, r0
 80048b6:	2901      	cmp	r1, #1
 80048b8:	db06      	blt.n	80048c8 <??ZbZclAttrParseLength_2>
 80048ba:	428d      	cmp	r5, r1
 80048bc:	d202      	bcs.n	80048c4 <??ZbZclAttrParseLength_3>
 80048be:	f05f 30ff 	movs.w	r0, #4294967295
 80048c2:	e095      	b.n	80049f0 <??ZbZclAttrParseLength_1>

080048c4 <??ZbZclAttrParseLength_3>:
 80048c4:	0008      	movs	r0, r1
 80048c6:	e093      	b.n	80049f0 <??ZbZclAttrParseLength_1>

080048c8 <??ZbZclAttrParseLength_2>:
 80048c8:	2c00      	cmp	r4, #0
 80048ca:	d101      	bne.n	80048d0 <??ZbZclAttrParseLength_4>
 80048cc:	0028      	movs	r0, r5
 80048ce:	e08f      	b.n	80049f0 <??ZbZclAttrParseLength_1>

080048d0 <??ZbZclAttrParseLength_4>:
 80048d0:	f05f 39ff 	movs.w	r9, #4294967295
 80048d4:	0030      	movs	r0, r6
 80048d6:	b2c0      	uxtb	r0, r0
 80048d8:	3841      	subs	r0, #65	; 0x41
 80048da:	2801      	cmp	r0, #1
 80048dc:	d90a      	bls.n	80048f4 <??ZbZclAttrParseLength_5>
 80048de:	1e80      	subs	r0, r0, #2
 80048e0:	2801      	cmp	r0, #1
 80048e2:	d914      	bls.n	800490e <??ZbZclAttrParseLength_6>
 80048e4:	1f40      	subs	r0, r0, #5
 80048e6:	d027      	beq.n	8004938 <??ZbZclAttrParseLength_7>
 80048e8:	1f00      	subs	r0, r0, #4
 80048ea:	d04b      	beq.n	8004984 <??ZbZclAttrParseLength_8>
 80048ec:	1f00      	subs	r0, r0, #4
 80048ee:	2801      	cmp	r0, #1
 80048f0:	d922      	bls.n	8004938 <??ZbZclAttrParseLength_7>
 80048f2:	e074      	b.n	80049de <??ZbZclAttrParseLength_10>

080048f4 <??ZbZclAttrParseLength_5>:
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	d072      	beq.n	80049de <??ZbZclAttrParseLength_10>

080048f8 <??ZbZclAttrParseLength_11>:
 80048f8:	7820      	ldrb	r0, [r4, #0]
 80048fa:	28ff      	cmp	r0, #255	; 0xff
 80048fc:	d102      	bne.n	8004904 <??ZbZclAttrParseLength_12>
 80048fe:	f05f 0901 	movs.w	r9, #1
 8004902:	e003      	b.n	800490c <??ZbZclAttrParseLength_13>

08004904 <??ZbZclAttrParseLength_12>:
 8004904:	f894 9000 	ldrb.w	r9, [r4]
 8004908:	f119 0901 	adds.w	r9, r9, #1

0800490c <??ZbZclAttrParseLength_13>:
 800490c:	e067      	b.n	80049de <??ZbZclAttrParseLength_10>

0800490e <??ZbZclAttrParseLength_6>:
 800490e:	2d02      	cmp	r5, #2
 8004910:	d365      	bcc.n	80049de <??ZbZclAttrParseLength_10>

08004912 <??ZbZclAttrParseLength_14>:
 8004912:	0020      	movs	r0, r4
 8004914:	f7fe ffc2 	bl	800389c <pletoh16>
 8004918:	4680      	mov	r8, r0
 800491a:	4640      	mov	r0, r8
 800491c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004920:	b280      	uxth	r0, r0
 8004922:	4288      	cmp	r0, r1
 8004924:	d102      	bne.n	800492c <??ZbZclAttrParseLength_15>
 8004926:	f05f 0902 	movs.w	r9, #2
 800492a:	e004      	b.n	8004936 <??ZbZclAttrParseLength_16>

0800492c <??ZbZclAttrParseLength_15>:
 800492c:	46c1      	mov	r9, r8
 800492e:	fa1f f989 	uxth.w	r9, r9
 8004932:	f119 0902 	adds.w	r9, r9, #2

08004936 <??ZbZclAttrParseLength_16>:
 8004936:	e052      	b.n	80049de <??ZbZclAttrParseLength_10>

08004938 <??ZbZclAttrParseLength_7>:
 8004938:	2d03      	cmp	r5, #3
 800493a:	d350      	bcc.n	80049de <??ZbZclAttrParseLength_10>

0800493c <??ZbZclAttrParseLength_17>:
 800493c:	7820      	ldrb	r0, [r4, #0]
 800493e:	4683      	mov	fp, r0
 8004940:	1c60      	adds	r0, r4, #1
 8004942:	f7fe ffab 	bl	800389c <pletoh16>
 8004946:	4680      	mov	r8, r0
 8004948:	2003      	movs	r0, #3
 800494a:	4681      	mov	r9, r0

0800494c <??ZbZclAttrParseLength_18>:
 800494c:	4640      	mov	r0, r8
 800494e:	b280      	uxth	r0, r0
 8004950:	2800      	cmp	r0, #0
 8004952:	d016      	beq.n	8004982 <??ZbZclAttrParseLength_19>
 8004954:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8004958:	4640      	mov	r0, r8
 800495a:	b280      	uxth	r0, r0
 800495c:	4550      	cmp	r0, sl
 800495e:	d010      	beq.n	8004982 <??ZbZclAttrParseLength_19>
 8004960:	1c7b      	adds	r3, r7, #1
 8004962:	b2db      	uxtb	r3, r3
 8004964:	ebb5 0209 	subs.w	r2, r5, r9
 8004968:	eb04 0109 	add.w	r1, r4, r9
 800496c:	4658      	mov	r0, fp
 800496e:	b2c0      	uxtb	r0, r0
 8004970:	f7ff ff8f 	bl	8004892 <ZbZclAttrParseLength>
 8004974:	2800      	cmp	r0, #0
 8004976:	d43b      	bmi.n	80049f0 <??ZbZclAttrParseLength_1>

08004978 <??ZbZclAttrParseLength_20>:
 8004978:	eb10 0909 	adds.w	r9, r0, r9
 800497c:	eb1a 0808 	adds.w	r8, sl, r8
 8004980:	e7e4      	b.n	800494c <??ZbZclAttrParseLength_18>

08004982 <??ZbZclAttrParseLength_19>:
 8004982:	e02c      	b.n	80049de <??ZbZclAttrParseLength_10>

08004984 <??ZbZclAttrParseLength_8>:
 8004984:	2d02      	cmp	r5, #2
 8004986:	d32a      	bcc.n	80049de <??ZbZclAttrParseLength_10>

08004988 <??ZbZclAttrParseLength_21>:
 8004988:	0020      	movs	r0, r4
 800498a:	f7fe ff87 	bl	800389c <pletoh16>
 800498e:	4680      	mov	r8, r0
 8004990:	2002      	movs	r0, #2
 8004992:	4681      	mov	r9, r0

08004994 <??ZbZclAttrParseLength_22>:
 8004994:	4640      	mov	r0, r8
 8004996:	b280      	uxth	r0, r0
 8004998:	2800      	cmp	r0, #0
 800499a:	d01f      	beq.n	80049dc <??ZbZclAttrParseLength_23>
 800499c:	f64f 7aff 	movw	sl, #65535	; 0xffff
 80049a0:	4640      	mov	r0, r8
 80049a2:	b280      	uxth	r0, r0
 80049a4:	4550      	cmp	r0, sl
 80049a6:	d019      	beq.n	80049dc <??ZbZclAttrParseLength_23>
 80049a8:	f119 0001 	adds.w	r0, r9, #1
 80049ac:	4285      	cmp	r5, r0
 80049ae:	d315      	bcc.n	80049dc <??ZbZclAttrParseLength_23>

080049b0 <??ZbZclAttrParseLength_24>:
 80049b0:	f814 0009 	ldrb.w	r0, [r4, r9]
 80049b4:	4683      	mov	fp, r0
 80049b6:	f119 0901 	adds.w	r9, r9, #1
 80049ba:	1c7b      	adds	r3, r7, #1
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	ebb5 0209 	subs.w	r2, r5, r9
 80049c2:	eb04 0109 	add.w	r1, r4, r9
 80049c6:	4658      	mov	r0, fp
 80049c8:	b2c0      	uxtb	r0, r0
 80049ca:	f7ff ff62 	bl	8004892 <ZbZclAttrParseLength>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d404      	bmi.n	80049dc <??ZbZclAttrParseLength_23>

080049d2 <??ZbZclAttrParseLength_25>:
 80049d2:	eb10 0909 	adds.w	r9, r0, r9
 80049d6:	eb1a 0808 	adds.w	r8, sl, r8
 80049da:	e7db      	b.n	8004994 <??ZbZclAttrParseLength_22>

080049dc <??ZbZclAttrParseLength_23>:
 80049dc:	e7ff      	b.n	80049de <??ZbZclAttrParseLength_10>

080049de <??ZbZclAttrParseLength_10>:
 80049de:	f1b9 0f00 	cmp.w	r9, #0
 80049e2:	d401      	bmi.n	80049e8 <??ZbZclAttrParseLength_26>
 80049e4:	454d      	cmp	r5, r9
 80049e6:	d202      	bcs.n	80049ee <??ZbZclAttrParseLength_27>

080049e8 <??ZbZclAttrParseLength_26>:
 80049e8:	f05f 30ff 	movs.w	r0, #4294967295
 80049ec:	e000      	b.n	80049f0 <??ZbZclAttrParseLength_1>

080049ee <??ZbZclAttrParseLength_27>:
 80049ee:	4648      	mov	r0, r9

080049f0 <??ZbZclAttrParseLength_1>:
 80049f0:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080049f4 <ZbZclAttrIsAnalog>:
 80049f4:	0001      	movs	r1, r0
 80049f6:	0008      	movs	r0, r1
 80049f8:	b2c0      	uxtb	r0, r0
 80049fa:	2820      	cmp	r0, #32
 80049fc:	db05      	blt.n	8004a0a <??ZbZclAttrIsAnalog_0>
 80049fe:	0008      	movs	r0, r1
 8004a00:	b2c0      	uxtb	r0, r0
 8004a02:	2828      	cmp	r0, #40	; 0x28
 8004a04:	da01      	bge.n	8004a0a <??ZbZclAttrIsAnalog_0>
 8004a06:	2001      	movs	r0, #1
 8004a08:	e026      	b.n	8004a58 <??ZbZclAttrIsAnalog_1>

08004a0a <??ZbZclAttrIsAnalog_0>:
 8004a0a:	0008      	movs	r0, r1
 8004a0c:	b2c0      	uxtb	r0, r0
 8004a0e:	2828      	cmp	r0, #40	; 0x28
 8004a10:	db05      	blt.n	8004a1e <??ZbZclAttrIsAnalog_2>
 8004a12:	0008      	movs	r0, r1
 8004a14:	b2c0      	uxtb	r0, r0
 8004a16:	2830      	cmp	r0, #48	; 0x30
 8004a18:	da01      	bge.n	8004a1e <??ZbZclAttrIsAnalog_2>
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	e01c      	b.n	8004a58 <??ZbZclAttrIsAnalog_1>

08004a1e <??ZbZclAttrIsAnalog_2>:
 8004a1e:	0008      	movs	r0, r1
 8004a20:	b2c0      	uxtb	r0, r0
 8004a22:	2838      	cmp	r0, #56	; 0x38
 8004a24:	d007      	beq.n	8004a36 <??ZbZclAttrIsAnalog_3>
 8004a26:	0008      	movs	r0, r1
 8004a28:	b2c0      	uxtb	r0, r0
 8004a2a:	2839      	cmp	r0, #57	; 0x39
 8004a2c:	d003      	beq.n	8004a36 <??ZbZclAttrIsAnalog_3>
 8004a2e:	0008      	movs	r0, r1
 8004a30:	b2c0      	uxtb	r0, r0
 8004a32:	283a      	cmp	r0, #58	; 0x3a
 8004a34:	d101      	bne.n	8004a3a <??ZbZclAttrIsAnalog_4>

08004a36 <??ZbZclAttrIsAnalog_3>:
 8004a36:	2001      	movs	r0, #1
 8004a38:	e00e      	b.n	8004a58 <??ZbZclAttrIsAnalog_1>

08004a3a <??ZbZclAttrIsAnalog_4>:
 8004a3a:	0008      	movs	r0, r1
 8004a3c:	b2c0      	uxtb	r0, r0
 8004a3e:	28e0      	cmp	r0, #224	; 0xe0
 8004a40:	d007      	beq.n	8004a52 <??ZbZclAttrIsAnalog_5>
 8004a42:	0008      	movs	r0, r1
 8004a44:	b2c0      	uxtb	r0, r0
 8004a46:	28e1      	cmp	r0, #225	; 0xe1
 8004a48:	d003      	beq.n	8004a52 <??ZbZclAttrIsAnalog_5>
 8004a4a:	0008      	movs	r0, r1
 8004a4c:	b2c0      	uxtb	r0, r0
 8004a4e:	28e2      	cmp	r0, #226	; 0xe2
 8004a50:	d101      	bne.n	8004a56 <??ZbZclAttrIsAnalog_6>

08004a52 <??ZbZclAttrIsAnalog_5>:
 8004a52:	2001      	movs	r0, #1
 8004a54:	e000      	b.n	8004a58 <??ZbZclAttrIsAnalog_1>

08004a56 <??ZbZclAttrIsAnalog_6>:
 8004a56:	2000      	movs	r0, #0

08004a58 <??ZbZclAttrIsAnalog_1>:
 8004a58:	4770      	bx	lr
	...

08004a5c <ZbZclAttrAppendList>:
 8004a5c:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	b089      	sub	sp, #36	; 0x24
 8004a62:	0007      	movs	r7, r0
 8004a64:	000e      	movs	r6, r1
 8004a66:	68b8      	ldr	r0, [r7, #8]
 8004a68:	9008      	str	r0, [sp, #32]
 8004a6a:	2e00      	cmp	r6, #0
 8004a6c:	d002      	beq.n	8004a74 <??ZbZclAttrAppendList_0>
 8004a6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d101      	bne.n	8004a78 <??ZbZclAttrAppendList_1>

08004a74 <??ZbZclAttrAppendList_0>:
 8004a74:	2000      	movs	r0, #0
 8004a76:	e0c6      	b.n	8004c06 <??ZbZclAttrAppendList_2>

08004a78 <??ZbZclAttrAppendList_1>:
 8004a78:	f05f 0800 	movs.w	r8, #0

08004a7c <??ZbZclAttrAppendList_3>:
 8004a7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a7e:	4580      	cmp	r8, r0
 8004a80:	f080 80bd 	bcs.w	8004bfe <??ZbZclAttrAppendList_4>
 8004a84:	f05f 0928 	movs.w	r9, #40	; 0x28
 8004a88:	fb09 f008 	mul.w	r0, r9, r8
 8004a8c:	4430      	add	r0, r6
 8004a8e:	7900      	ldrb	r0, [r0, #4]
 8004a90:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8004a94:	d007      	beq.n	8004aa6 <??ZbZclAttrAppendList_5>
 8004a96:	fb09 f008 	mul.w	r0, r9, r8
 8004a9a:	4430      	add	r0, r6
 8004a9c:	68c0      	ldr	r0, [r0, #12]
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d101      	bne.n	8004aa6 <??ZbZclAttrAppendList_5>
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	e0af      	b.n	8004c06 <??ZbZclAttrAppendList_2>

08004aa6 <??ZbZclAttrAppendList_5>:
 8004aa6:	fb09 f008 	mul.w	r0, r9, r8
 8004aaa:	5a31      	ldrh	r1, [r6, r0]
 8004aac:	0038      	movs	r0, r7
 8004aae:	f7fe ffc4 	bl	8003a3a <ZbZclAttrFind>
 8004ab2:	0005      	movs	r5, r0
 8004ab4:	2d00      	cmp	r5, #0
 8004ab6:	d003      	beq.n	8004ac0 <??ZbZclAttrAppendList_6>
 8004ab8:	0029      	movs	r1, r5
 8004aba:	0038      	movs	r0, r7
 8004abc:	f000 f8b6 	bl	8004c2c <ZbZclAttrFreeAttr>

08004ac0 <??ZbZclAttrAppendList_6>:
 8004ac0:	2418      	movs	r4, #24
 8004ac2:	f05f 0a00 	movs.w	sl, #0
 8004ac6:	f10d 0b04 	add.w	fp, sp, #4
 8004aca:	4652      	mov	r2, sl
 8004acc:	0021      	movs	r1, r4
 8004ace:	4658      	mov	r0, fp
 8004ad0:	f002 ff02 	bl	80078d8 <__aeabi_memset>
 8004ad4:	a801      	add	r0, sp, #4
 8004ad6:	9001      	str	r0, [sp, #4]
 8004ad8:	a801      	add	r0, sp, #4
 8004ada:	9002      	str	r0, [sp, #8]
 8004adc:	fb09 f008 	mul.w	r0, r9, r8
 8004ae0:	4430      	add	r0, r6
 8004ae2:	9003      	str	r0, [sp, #12]
 8004ae4:	fb09 f008 	mul.w	r0, r9, r8
 8004ae8:	4430      	add	r0, r6
 8004aea:	7900      	ldrb	r0, [r0, #4]
 8004aec:	0780      	lsls	r0, r0, #30
 8004aee:	d50b      	bpl.n	8004b08 <??ZbZclAttrAppendList_7>
 8004af0:	fb09 f008 	mul.w	r0, r9, r8
 8004af4:	4430      	add	r0, r6
 8004af6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8004af8:	f8ad 001a 	strh.w	r0, [sp, #26]
 8004afc:	fb09 f008 	mul.w	r0, r9, r8
 8004b00:	4430      	add	r0, r6
 8004b02:	8c00      	ldrh	r0, [r0, #32]
 8004b04:	f8ad 0018 	strh.w	r0, [sp, #24]

08004b08 <??ZbZclAttrAppendList_7>:
 8004b08:	fb09 f008 	mul.w	r0, r9, r8
 8004b0c:	4430      	add	r0, r6
 8004b0e:	7900      	ldrb	r0, [r0, #4]
 8004b10:	f010 0030 	ands.w	r0, r0, #48	; 0x30
 8004b14:	2830      	cmp	r0, #48	; 0x30
 8004b16:	d108      	bne.n	8004b2a <??ZbZclAttrAppendList_8>
 8004b18:	2000      	movs	r0, #0
 8004b1a:	9000      	str	r0, [sp, #0]
 8004b1c:	fb09 f908 	mul.w	r9, r9, r8
 8004b20:	eb06 0009 	add.w	r0, r6, r9
 8004b24:	6880      	ldr	r0, [r0, #8]
 8004b26:	9005      	str	r0, [sp, #20]
 8004b28:	e034      	b.n	8004b94 <??ZbZclAttrAppendList_9>

08004b2a <??ZbZclAttrAppendList_8>:
 8004b2a:	fb09 f008 	mul.w	r0, r9, r8
 8004b2e:	4430      	add	r0, r6
 8004b30:	6880      	ldr	r0, [r0, #8]
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d01f      	beq.n	8004b76 <??ZbZclAttrAppendList_10>
 8004b36:	fb09 f908 	mul.w	r9, r9, r8
 8004b3a:	eb06 0009 	add.w	r0, r6, r9
 8004b3e:	6880      	ldr	r0, [r0, #8]
 8004b40:	9005      	str	r0, [sp, #20]
 8004b42:	9803      	ldr	r0, [sp, #12]
 8004b44:	7880      	ldrb	r0, [r0, #2]
 8004b46:	2841      	cmp	r0, #65	; 0x41
 8004b48:	d003      	beq.n	8004b52 <??ZbZclAttrAppendList_11>
 8004b4a:	9803      	ldr	r0, [sp, #12]
 8004b4c:	7880      	ldrb	r0, [r0, #2]
 8004b4e:	2842      	cmp	r0, #66	; 0x42
 8004b50:	d103      	bne.n	8004b5a <??ZbZclAttrAppendList_12>

08004b52 <??ZbZclAttrAppendList_11>:
 8004b52:	9805      	ldr	r0, [sp, #20]
 8004b54:	1c40      	adds	r0, r0, #1
 8004b56:	9005      	str	r0, [sp, #20]
 8004b58:	e00a      	b.n	8004b70 <??ZbZclAttrAppendList_13>

08004b5a <??ZbZclAttrAppendList_12>:
 8004b5a:	9803      	ldr	r0, [sp, #12]
 8004b5c:	7880      	ldrb	r0, [r0, #2]
 8004b5e:	2843      	cmp	r0, #67	; 0x43
 8004b60:	d003      	beq.n	8004b6a <??ZbZclAttrAppendList_14>
 8004b62:	9803      	ldr	r0, [sp, #12]
 8004b64:	7880      	ldrb	r0, [r0, #2]
 8004b66:	2844      	cmp	r0, #68	; 0x44
 8004b68:	d102      	bne.n	8004b70 <??ZbZclAttrAppendList_13>

08004b6a <??ZbZclAttrAppendList_14>:
 8004b6a:	9805      	ldr	r0, [sp, #20]
 8004b6c:	1c80      	adds	r0, r0, #2
 8004b6e:	9005      	str	r0, [sp, #20]

08004b70 <??ZbZclAttrAppendList_13>:
 8004b70:	9805      	ldr	r0, [sp, #20]
 8004b72:	9000      	str	r0, [sp, #0]
 8004b74:	e00e      	b.n	8004b94 <??ZbZclAttrAppendList_9>

08004b76 <??ZbZclAttrAppendList_10>:
 8004b76:	fb09 f908 	mul.w	r9, r9, r8
 8004b7a:	eb06 0009 	add.w	r0, r6, r9
 8004b7e:	7880      	ldrb	r0, [r0, #2]
 8004b80:	f7ff fdfc 	bl	800477c <ZbZclAttrTypeLength>
 8004b84:	9005      	str	r0, [sp, #20]
 8004b86:	9805      	ldr	r0, [sp, #20]
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d101      	bne.n	8004b90 <??ZbZclAttrAppendList_15>
 8004b8c:	208d      	movs	r0, #141	; 0x8d
 8004b8e:	e03a      	b.n	8004c06 <??ZbZclAttrAppendList_2>

08004b90 <??ZbZclAttrAppendList_15>:
 8004b90:	9805      	ldr	r0, [sp, #20]
 8004b92:	9000      	str	r0, [sp, #0]

08004b94 <??ZbZclAttrAppendList_9>:
 8004b94:	2300      	movs	r3, #0
 8004b96:	a236      	add	r2, pc, #216	; (adr r2, 8004c70 <??DataTable1>)
 8004b98:	9900      	ldr	r1, [sp, #0]
 8004b9a:	3118      	adds	r1, #24
 8004b9c:	9808      	ldr	r0, [sp, #32]
 8004b9e:	f010 fb66 	bl	801526e <zb_heap_alloc>
 8004ba2:	0004      	movs	r4, r0
 8004ba4:	2c00      	cmp	r4, #0
 8004ba6:	d101      	bne.n	8004bac <??ZbZclAttrAppendList_16>
 8004ba8:	2089      	movs	r0, #137	; 0x89
 8004baa:	e02c      	b.n	8004c06 <??ZbZclAttrAppendList_2>

08004bac <??ZbZclAttrAppendList_16>:
 8004bac:	2518      	movs	r5, #24
 8004bae:	f10d 0904 	add.w	r9, sp, #4
 8004bb2:	46a2      	mov	sl, r4
 8004bb4:	002a      	movs	r2, r5
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	4650      	mov	r0, sl
 8004bba:	f012 ff51 	bl	8017a60 <__aeabi_memcpy>
 8004bbe:	9800      	ldr	r0, [sp, #0]
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d00c      	beq.n	8004bde <??ZbZclAttrAppendList_17>
 8004bc4:	f114 0018 	adds.w	r0, r4, #24
 8004bc8:	60e0      	str	r0, [r4, #12]
 8004bca:	9800      	ldr	r0, [sp, #0]
 8004bcc:	9007      	str	r0, [sp, #28]
 8004bce:	2500      	movs	r5, #0
 8004bd0:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8004bd4:	002a      	movs	r2, r5
 8004bd6:	9907      	ldr	r1, [sp, #28]
 8004bd8:	4648      	mov	r0, r9
 8004bda:	f002 fe7d 	bl	80078d8 <__aeabi_memset>

08004bde <??ZbZclAttrAppendList_17>:
 8004bde:	0021      	movs	r1, r4
 8004be0:	0038      	movs	r0, r7
 8004be2:	f7fe fefb 	bl	80039dc <ZbZclAttrAddSorted>
 8004be6:	68e0      	ldr	r0, [r4, #12]
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d005      	beq.n	8004bf8 <??ZbZclAttrAppendList_18>
 8004bec:	6922      	ldr	r2, [r4, #16]
 8004bee:	68e1      	ldr	r1, [r4, #12]
 8004bf0:	68a0      	ldr	r0, [r4, #8]
 8004bf2:	7880      	ldrb	r0, [r0, #2]
 8004bf4:	f7ff fb42 	bl	800427c <ZbZclAttrDefaultValue>

08004bf8 <??ZbZclAttrAppendList_18>:
 8004bf8:	f118 0801 	adds.w	r8, r8, #1
 8004bfc:	e73e      	b.n	8004a7c <??ZbZclAttrAppendList_3>

08004bfe <??ZbZclAttrAppendList_4>:
 8004bfe:	0038      	movs	r0, r7
 8004c00:	f000 ff3a 	bl	8005a78 <zcl_reporting_create_default_reports>
 8004c04:	2000      	movs	r0, #0

08004c06 <??ZbZclAttrAppendList_2>:
 8004c06:	b00b      	add	sp, #44	; 0x2c
 8004c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004c0c <ZbZclAttrCallbackExec>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	0004      	movs	r4, r0
 8004c10:	000d      	movs	r5, r1
 8004c12:	0016      	movs	r6, r2
 8004c14:	68a8      	ldr	r0, [r5, #8]
 8004c16:	68c0      	ldr	r0, [r0, #12]
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d005      	beq.n	8004c28 <??ZbZclAttrCallbackExec_0>
 8004c1c:	0031      	movs	r1, r6
 8004c1e:	0020      	movs	r0, r4
 8004c20:	68aa      	ldr	r2, [r5, #8]
 8004c22:	68d2      	ldr	r2, [r2, #12]
 8004c24:	4790      	blx	r2
 8004c26:	e000      	b.n	8004c2a <??ZbZclAttrCallbackExec_1>

08004c28 <??ZbZclAttrCallbackExec_0>:
 8004c28:	2001      	movs	r0, #1

08004c2a <??ZbZclAttrCallbackExec_1>:
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}

08004c2c <ZbZclAttrFreeAttr>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	0004      	movs	r4, r0
 8004c30:	000d      	movs	r5, r1
 8004c32:	68a8      	ldr	r0, [r5, #8]
 8004c34:	7900      	ldrb	r0, [r0, #4]
 8004c36:	0780      	lsls	r0, r0, #30
 8004c38:	d50b      	bpl.n	8004c52 <??ZbZclAttrFreeAttr_0>
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	68a8      	ldr	r0, [r5, #8]
 8004c3e:	8801      	ldrh	r1, [r0, #0]
 8004c40:	0020      	movs	r0, r4
 8004c42:	f000 fdfd 	bl	8005840 <zcl_cluster_attr_report_delete>
 8004c46:	2201      	movs	r2, #1
 8004c48:	68a8      	ldr	r0, [r5, #8]
 8004c4a:	8801      	ldrh	r1, [r0, #0]
 8004c4c:	0020      	movs	r0, r4
 8004c4e:	f000 fdf7 	bl	8005840 <zcl_cluster_attr_report_delete>

08004c52 <??ZbZclAttrFreeAttr_0>:
 8004c52:	6868      	ldr	r0, [r5, #4]
 8004c54:	6829      	ldr	r1, [r5, #0]
 8004c56:	6048      	str	r0, [r1, #4]
 8004c58:	6828      	ldr	r0, [r5, #0]
 8004c5a:	6869      	ldr	r1, [r5, #4]
 8004c5c:	6008      	str	r0, [r1, #0]
 8004c5e:	602d      	str	r5, [r5, #0]
 8004c60:	606d      	str	r5, [r5, #4]
 8004c62:	2300      	movs	r3, #0
 8004c64:	a202      	add	r2, pc, #8	; (adr r2, 8004c70 <??DataTable1>)
 8004c66:	0029      	movs	r1, r5
 8004c68:	68a0      	ldr	r0, [r4, #8]
 8004c6a:	f010 fb0f 	bl	801528c <zb_heap_free>
 8004c6e:	bd31      	pop	{r0, r4, r5, pc}

08004c70 <??DataTable1>:
 8004c70:	0000 0000                                   ....

08004c74 <ZbZclAttrFreeList>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	0005      	movs	r5, r0

08004c78 <??ZbZclAttrFreeList_0>:
 8004c78:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c7a:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8004c7e:	4288      	cmp	r0, r1
 8004c80:	d001      	beq.n	8004c86 <??ZbZclAttrFreeList_1>
 8004c82:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004c84:	e000      	b.n	8004c88 <??ZbZclAttrFreeList_2>

08004c86 <??ZbZclAttrFreeList_1>:
 8004c86:	2400      	movs	r4, #0

08004c88 <??ZbZclAttrFreeList_2>:
 8004c88:	2c00      	cmp	r4, #0
 8004c8a:	d005      	beq.n	8004c98 <??ZbZclAttrFreeList_3>

08004c8c <??ZbZclAttrFreeList_4>:
 8004c8c:	0026      	movs	r6, r4
 8004c8e:	0031      	movs	r1, r6
 8004c90:	0028      	movs	r0, r5
 8004c92:	f7ff ffcb 	bl	8004c2c <ZbZclAttrFreeAttr>
 8004c96:	e7ef      	b.n	8004c78 <??ZbZclAttrFreeList_0>

08004c98 <??ZbZclAttrFreeList_3>:
 8004c98:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c9c <zcl_reporting_send_conf>:
 8004c9c:	000b      	movs	r3, r1
 8004c9e:	7e02      	ldrb	r2, [r0, #24]
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	d004      	beq.n	8004cae <??zcl_reporting_send_conf_0>
 8004ca4:	7e02      	ldrb	r2, [r0, #24]
 8004ca6:	2aa4      	cmp	r2, #164	; 0xa4
 8004ca8:	d001      	beq.n	8004cae <??zcl_reporting_send_conf_0>
 8004caa:	7e02      	ldrb	r2, [r0, #24]
 8004cac:	2aa3      	cmp	r2, #163	; 0xa3

08004cae <??zcl_reporting_send_conf_0>:
 8004cae:	4770      	bx	lr

08004cb0 <report_command_timer>:
 8004cb0:	b570      	push	{r4, r5, r6, lr}
 8004cb2:	0004      	movs	r4, r0
 8004cb4:	000d      	movs	r5, r1
 8004cb6:	002e      	movs	r6, r5
 8004cb8:	f116 0108 	adds.w	r1, r6, #8
 8004cbc:	6830      	ldr	r0, [r6, #0]
 8004cbe:	f000 f852 	bl	8004d66 <zcl_reporting_send_report>
 8004cc2:	6870      	ldr	r0, [r6, #4]
 8004cc4:	f00f fdd8 	bl	8014878 <ZbTimerFree>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	a2cf      	add	r2, pc, #828	; (adr r2, 8005008 <??DataTable4>)
 8004ccc:	0031      	movs	r1, r6
 8004cce:	6830      	ldr	r0, [r6, #0]
 8004cd0:	6880      	ldr	r0, [r0, #8]
 8004cd2:	f010 fadb 	bl	801528c <zb_heap_free>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}

08004cd8 <zcl_reporting_queue_report>:
 8004cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	0006      	movs	r6, r0
 8004cde:	000f      	movs	r7, r1
 8004ce0:	0014      	movs	r4, r2
 8004ce2:	2c00      	cmp	r4, #0
 8004ce4:	d104      	bne.n	8004cf0 <??zcl_reporting_queue_report_0>
 8004ce6:	0039      	movs	r1, r7
 8004ce8:	0030      	movs	r0, r6
 8004cea:	f000 f83c 	bl	8004d66 <zcl_reporting_send_report>
 8004cee:	e037      	b.n	8004d60 <??zcl_reporting_queue_report_1>

08004cf0 <??zcl_reporting_queue_report_0>:
 8004cf0:	f20f 3814 	addw	r8, pc, #788	; 0x314
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	4642      	mov	r2, r8
 8004cf8:	2198      	movs	r1, #152	; 0x98
 8004cfa:	68b0      	ldr	r0, [r6, #8]
 8004cfc:	f010 fab7 	bl	801526e <zb_heap_alloc>
 8004d00:	0005      	movs	r5, r0
 8004d02:	2d00      	cmp	r5, #0
 8004d04:	d101      	bne.n	8004d0a <??zcl_reporting_queue_report_2>
 8004d06:	2000      	movs	r0, #0
 8004d08:	e02b      	b.n	8004d62 <??zcl_reporting_queue_report_3>

08004d0a <??zcl_reporting_queue_report_2>:
 8004d0a:	f05f 0998 	movs.w	r9, #152	; 0x98
 8004d0e:	f05f 0a00 	movs.w	sl, #0
 8004d12:	46ab      	mov	fp, r5
 8004d14:	4652      	mov	r2, sl
 8004d16:	4649      	mov	r1, r9
 8004d18:	4658      	mov	r0, fp
 8004d1a:	f002 fddd 	bl	80078d8 <__aeabi_memset>
 8004d1e:	002a      	movs	r2, r5
 8004d20:	f8df 1c98 	ldr.w	r1, [pc, #3224]	; 80059bc <??DataTable9>
 8004d24:	68b0      	ldr	r0, [r6, #8]
 8004d26:	f00f fd55 	bl	80147d4 <ZbTimerAlloc>
 8004d2a:	6068      	str	r0, [r5, #4]
 8004d2c:	6868      	ldr	r0, [r5, #4]
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d107      	bne.n	8004d42 <??zcl_reporting_queue_report_4>
 8004d32:	2300      	movs	r3, #0
 8004d34:	4642      	mov	r2, r8
 8004d36:	0029      	movs	r1, r5
 8004d38:	68b0      	ldr	r0, [r6, #8]
 8004d3a:	f010 faa7 	bl	801528c <zb_heap_free>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e00f      	b.n	8004d62 <??zcl_reporting_queue_report_3>

08004d42 <??zcl_reporting_queue_report_4>:
 8004d42:	602e      	str	r6, [r5, #0]
 8004d44:	f05f 0890 	movs.w	r8, #144	; 0x90
 8004d48:	46b9      	mov	r9, r7
 8004d4a:	f115 0a08 	adds.w	sl, r5, #8
 8004d4e:	4642      	mov	r2, r8
 8004d50:	4649      	mov	r1, r9
 8004d52:	4650      	mov	r0, sl
 8004d54:	f012 fe84 	bl	8017a60 <__aeabi_memcpy>
 8004d58:	0021      	movs	r1, r4
 8004d5a:	6868      	ldr	r0, [r5, #4]
 8004d5c:	f00f fdc0 	bl	80148e0 <ZbTimerReset>

08004d60 <??zcl_reporting_queue_report_1>:
 8004d60:	2001      	movs	r0, #1

08004d62 <??zcl_reporting_queue_report_3>:
 8004d62:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004d66 <zcl_reporting_send_report>:
 8004d66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	b0cc      	sub	sp, #304	; 0x130
 8004d6c:	0005      	movs	r5, r0
 8004d6e:	000e      	movs	r6, r1
 8004d70:	2400      	movs	r4, #0
 8004d72:	2000      	movs	r0, #0
 8004d74:	f88d 0004 	strb.w	r0, [sp, #4]
 8004d78:	8a28      	ldrh	r0, [r5, #16]
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d001      	beq.n	8004d82 <??zcl_reporting_send_report_0>
 8004d7e:	2001      	movs	r0, #1
 8004d80:	e000      	b.n	8004d84 <??zcl_reporting_send_report_1>

08004d82 <??zcl_reporting_send_report_0>:
 8004d82:	2000      	movs	r0, #0

08004d84 <??zcl_reporting_send_report_1>:
 8004d84:	f88d 0005 	strb.w	r0, [sp, #5]
 8004d88:	8a28      	ldrh	r0, [r5, #16]
 8004d8a:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004d8e:	7f28      	ldrb	r0, [r5, #28]
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d103      	bne.n	8004d9c <??zcl_reporting_send_report_2>
 8004d94:	2001      	movs	r0, #1
 8004d96:	f88d 0006 	strb.w	r0, [sp, #6]
 8004d9a:	e002      	b.n	8004da2 <??zcl_reporting_send_report_3>

08004d9c <??zcl_reporting_send_report_2>:
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f88d 0006 	strb.w	r0, [sp, #6]

08004da2 <??zcl_reporting_send_report_3>:
 8004da2:	2001      	movs	r0, #1
 8004da4:	f88d 0007 	strb.w	r0, [sp, #7]
 8004da8:	f00f ffe3 	bl	8014d72 <ZbZclGetNextSeqnum>
 8004dac:	f88d 000a 	strb.w	r0, [sp, #10]
 8004db0:	200a      	movs	r0, #10
 8004db2:	f88d 000b 	strb.w	r0, [sp, #11]
 8004db6:	2205      	movs	r2, #5
 8004db8:	a903      	add	r1, sp, #12
 8004dba:	a801      	add	r0, sp, #4
 8004dbc:	f7fc fde8 	bl	8001990 <ZbZclAppendHeader>
 8004dc0:	0007      	movs	r7, r0
 8004dc2:	2f01      	cmp	r7, #1
 8004dc4:	f2c0 8093 	blt.w	8004eee <??zcl_reporting_send_report_4>

08004dc8 <??zcl_reporting_send_report_5>:
 8004dc8:	a91a      	add	r1, sp, #104	; 0x68
 8004dca:	a803      	add	r0, sp, #12
 8004dcc:	0022      	movs	r2, r4
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8004dd4:	0038      	movs	r0, r7
 8004dd6:	b2c0      	uxtb	r0, r0
 8004dd8:	aa1a      	add	r2, sp, #104	; 0x68
 8004dda:	0023      	movs	r3, r4
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004de2:	6050      	str	r0, [r2, #4]
 8004de4:	1c64      	adds	r4, r4, #1
 8004de6:	2000      	movs	r0, #0
 8004de8:	4680      	mov	r8, r0

08004dea <??zcl_reporting_send_report_6>:
 8004dea:	f1b8 0f0c 	cmp.w	r8, #12
 8004dee:	d22e      	bcs.n	8004e4e <??zcl_reporting_send_report_7>
 8004df0:	220c      	movs	r2, #12
 8004df2:	fb02 f008 	mul.w	r0, r2, r8
 8004df6:	4430      	add	r0, r6
 8004df8:	7a00      	ldrb	r0, [r0, #8]
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d027      	beq.n	8004e4e <??zcl_reporting_send_report_7>

08004dfe <??zcl_reporting_send_report_8>:
 8004dfe:	fb02 f008 	mul.w	r0, r2, r8
 8004e02:	4430      	add	r0, r6
 8004e04:	3009      	adds	r0, #9
 8004e06:	0023      	movs	r3, r4
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8004e0e:	2003      	movs	r0, #3
 8004e10:	ab1a      	add	r3, sp, #104	; 0x68
 8004e12:	46a4      	mov	ip, r4
 8004e14:	fa5f fc8c 	uxtb.w	ip, ip
 8004e18:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8004e1c:	6058      	str	r0, [r3, #4]
 8004e1e:	1c64      	adds	r4, r4, #1
 8004e20:	fb02 f008 	mul.w	r0, r2, r8
 8004e24:	4430      	add	r0, r6
 8004e26:	6840      	ldr	r0, [r0, #4]
 8004e28:	0023      	movs	r3, r4
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8004e30:	fb02 f208 	mul.w	r2, r2, r8
 8004e34:	eb06 0002 	add.w	r0, r6, r2
 8004e38:	7a00      	ldrb	r0, [r0, #8]
 8004e3a:	aa1a      	add	r2, sp, #104	; 0x68
 8004e3c:	0023      	movs	r3, r4
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004e44:	6050      	str	r0, [r2, #4]
 8004e46:	1c64      	adds	r4, r4, #1
 8004e48:	f118 0801 	adds.w	r8, r8, #1
 8004e4c:	e7cd      	b.n	8004dea <??zcl_reporting_send_report_6>

08004e4e <??zcl_reporting_send_report_7>:
 8004e4e:	2200      	movs	r2, #0
 8004e50:	a906      	add	r1, sp, #24
 8004e52:	0028      	movs	r0, r5
 8004e54:	f7fc f83b 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8004e58:	a806      	add	r0, sp, #24
 8004e5a:	f8df 1b68 	ldr.w	r1, [pc, #2920]	; 80059c4 <??DataTable9_2>
 8004e5e:	6809      	ldr	r1, [r1, #0]
 8004e60:	2210      	movs	r2, #16
 8004e62:	f012 fdfd 	bl	8017a60 <__aeabi_memcpy>
 8004e66:	2001      	movs	r0, #1
 8004e68:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8004e6c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8004e70:	f050 0004 	orrs.w	r0, r0, #4
 8004e74:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8004e78:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8004e7c:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8004e80:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8004e84:	7ca8      	ldrb	r0, [r5, #18]
 8004e86:	28ab      	cmp	r0, #171	; 0xab
 8004e88:	d005      	beq.n	8004e96 <??zcl_reporting_send_report_9>
 8004e8a:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8004e8e:	f050 0002 	orrs.w	r0, r0, #2
 8004e92:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c

08004e96 <??zcl_reporting_send_report_9>:
 8004e96:	2001      	movs	r0, #1
 8004e98:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8004ea2:	a81a      	add	r0, sp, #104	; 0x68
 8004ea4:	900c      	str	r0, [sp, #48]	; 0x30
 8004ea6:	0020      	movs	r0, r4
 8004ea8:	b2c0      	uxtb	r0, r0
 8004eaa:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8004eae:	68ab      	ldr	r3, [r5, #8]
 8004eb0:	f8df 2b14 	ldr.w	r2, [pc, #2836]	; 80059c8 <??DataTable9_3>
 8004eb4:	a906      	add	r1, sp, #24
 8004eb6:	68a8      	ldr	r0, [r5, #8]
 8004eb8:	f00f fa3c 	bl	8014334 <ZbApsdeDataReqCallback>
 8004ebc:	f88d 0000 	strb.w	r0, [sp]
 8004ec0:	f89d 0000 	ldrb.w	r0, [sp]
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d012      	beq.n	8004eee <??zcl_reporting_send_report_4>
 8004ec8:	f05f 0920 	movs.w	r9, #32
 8004ecc:	f05f 0a00 	movs.w	sl, #0
 8004ed0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8004ed4:	4652      	mov	r2, sl
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	4658      	mov	r0, fp
 8004eda:	f002 fcfd 	bl	80078d8 <__aeabi_memset>
 8004ede:	f89d 0000 	ldrb.w	r0, [sp]
 8004ee2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 8004ee6:	68a9      	ldr	r1, [r5, #8]
 8004ee8:	a812      	add	r0, sp, #72	; 0x48
 8004eea:	f7ff fed7 	bl	8004c9c <zcl_reporting_send_conf>

08004eee <??zcl_reporting_send_report_4>:
 8004eee:	f05f 0900 	movs.w	r9, #0

08004ef2 <??zcl_reporting_send_report_10>:
 8004ef2:	f1b9 0f0c 	cmp.w	r9, #12
 8004ef6:	d21e      	bcs.n	8004f36 <??zcl_reporting_send_report_11>
 8004ef8:	f05f 080c 	movs.w	r8, #12
 8004efc:	fb08 f009 	mul.w	r0, r8, r9
 8004f00:	4430      	add	r0, r6
 8004f02:	6840      	ldr	r0, [r0, #4]
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d016      	beq.n	8004f36 <??zcl_reporting_send_report_11>

08004f08 <??zcl_reporting_send_report_12>:
 8004f08:	2300      	movs	r3, #0
 8004f0a:	a23f      	add	r2, pc, #252	; (adr r2, 8005008 <??DataTable4>)
 8004f0c:	fb08 f009 	mul.w	r0, r8, r9
 8004f10:	4430      	add	r0, r6
 8004f12:	6841      	ldr	r1, [r0, #4]
 8004f14:	68a8      	ldr	r0, [r5, #8]
 8004f16:	f010 f9b9 	bl	801528c <zb_heap_free>
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	fb08 f109 	mul.w	r1, r8, r9
 8004f20:	4431      	add	r1, r6
 8004f22:	6048      	str	r0, [r1, #4]
 8004f24:	2000      	movs	r0, #0
 8004f26:	fb08 f809 	mul.w	r8, r8, r9
 8004f2a:	eb06 0108 	add.w	r1, r6, r8
 8004f2e:	7208      	strb	r0, [r1, #8]
 8004f30:	f119 0901 	adds.w	r9, r9, #1
 8004f34:	e7dd      	b.n	8004ef2 <??zcl_reporting_send_report_10>

08004f36 <??zcl_reporting_send_report_11>:
 8004f36:	b04d      	add	sp, #308	; 0x134
 8004f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f3c <zcl_report_check_time>:
 8004f3c:	4281      	cmp	r1, r0
 8004f3e:	d201      	bcs.n	8004f44 <??zcl_report_check_time_0>
 8004f40:	0008      	movs	r0, r1
 8004f42:	e7ff      	b.n	8004f44 <??zcl_report_check_time_0>

08004f44 <??zcl_report_check_time_0>:
 8004f44:	4770      	bx	lr

08004f46 <zcl_report_kick>:
 8004f46:	b538      	push	{r3, r4, r5, lr}
 8004f48:	0004      	movs	r4, r0
 8004f4a:	000d      	movs	r5, r1
 8004f4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d101      	bne.n	8004f56 <??zcl_report_kick_0>
 8004f52:	2000      	movs	r0, #0
 8004f54:	e00d      	b.n	8004f72 <??zcl_report_kick_1>

08004f56 <??zcl_report_kick_0>:
 8004f56:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d001      	beq.n	8004f62 <??zcl_report_kick_2>
 8004f5e:	2001      	movs	r0, #1
 8004f60:	e007      	b.n	8004f72 <??zcl_report_kick_1>

08004f62 <??zcl_report_kick_2>:
 8004f62:	2001      	movs	r0, #1
 8004f64:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8004f68:	0029      	movs	r1, r5
 8004f6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f6c:	f00f fcb8 	bl	80148e0 <ZbTimerReset>
 8004f70:	2001      	movs	r0, #1

08004f72 <??zcl_report_kick_1>:
 8004f72:	bd32      	pop	{r1, r4, r5, pc}

08004f74 <ZbZclAttrReportKick>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	0004      	movs	r4, r0
 8004f78:	000d      	movs	r5, r1
 8004f7a:	0016      	movs	r6, r2
 8004f7c:	001f      	movs	r7, r3
 8004f7e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d001      	beq.n	8004f88 <??ZbZclAttrReportKick_0>
 8004f84:	2001      	movs	r0, #1
 8004f86:	e010      	b.n	8004faa <??ZbZclAttrReportKick_1>

08004f88 <??ZbZclAttrReportKick_0>:
 8004f88:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8004f8c:	6426      	str	r6, [r4, #64]	; 0x40
 8004f8e:	6467      	str	r7, [r4, #68]	; 0x44
 8004f90:	2100      	movs	r1, #0
 8004f92:	0020      	movs	r0, r4
 8004f94:	f7ff ffd7 	bl	8004f46 <zcl_report_kick>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d105      	bne.n	8004fa8 <??ZbZclAttrReportKick_2>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	6420      	str	r0, [r4, #64]	; 0x40
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	6460      	str	r0, [r4, #68]	; 0x44
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	e000      	b.n	8004faa <??ZbZclAttrReportKick_1>

08004fa8 <??ZbZclAttrReportKick_2>:
 8004fa8:	2000      	movs	r0, #0

08004faa <??ZbZclAttrReportKick_1>:
 8004faa:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004fac <zcl_report_append_attr>:
 8004fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	0004      	movs	r4, r0
 8004fb2:	000d      	movs	r5, r1
 8004fb4:	0016      	movs	r6, r2
 8004fb6:	001f      	movs	r7, r3
 8004fb8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8004fbc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	a211      	add	r2, pc, #68	; (adr r2, 8005008 <??DataTable4>)
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	0020      	movs	r0, r4
 8004fc8:	f010 f951 	bl	801526e <zb_heap_alloc>
 8004fcc:	6068      	str	r0, [r5, #4]
 8004fce:	6868      	ldr	r0, [r5, #4]
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d101      	bne.n	8004fd8 <??zcl_report_append_attr_0>
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	e014      	b.n	8005002 <??zcl_report_append_attr_1>

08004fd8 <??zcl_report_append_attr_0>:
 8004fd8:	f8cd 9000 	str.w	r9, [sp]
 8004fdc:	46c2      	mov	sl, r8
 8004fde:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8004fe2:	9a00      	ldr	r2, [sp, #0]
 8004fe4:	4651      	mov	r1, sl
 8004fe6:	4658      	mov	r0, fp
 8004fe8:	f012 fd3a 	bl	8017a60 <__aeabi_memcpy>
 8004fec:	f885 9008 	strb.w	r9, [r5, #8]
 8004ff0:	802e      	strh	r6, [r5, #0]
 8004ff2:	0031      	movs	r1, r6
 8004ff4:	b289      	uxth	r1, r1
 8004ff6:	f115 0009 	adds.w	r0, r5, #9
 8004ffa:	f7fe fc9b 	bl	8003934 <putle16>
 8004ffe:	72ef      	strb	r7, [r5, #11]
 8005000:	2001      	movs	r0, #1

08005002 <??zcl_report_append_attr_1>:
 8005002:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005008 <??DataTable4>:
 8005008:	0000 0000                                   ....

0800500c <zcl_cluster_report_check_timeout>:
 800500c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005010:	0006      	movs	r6, r0
 8005012:	000f      	movs	r7, r1
 8005014:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8005016:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 800501a:	4288      	cmp	r0, r1
 800501c:	d001      	beq.n	8005022 <??zcl_cluster_report_check_timeout_0>
 800501e:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8005020:	e000      	b.n	8005024 <??zcl_cluster_report_check_timeout_1>

08005022 <??zcl_cluster_report_check_timeout_0>:
 8005022:	2000      	movs	r0, #0

08005024 <??zcl_cluster_report_check_timeout_1>:
 8005024:	2800      	cmp	r0, #0
 8005026:	d101      	bne.n	800502c <??zcl_cluster_report_check_timeout_2>
 8005028:	2000      	movs	r0, #0
 800502a:	e042      	b.n	80050b2 <??zcl_cluster_report_check_timeout_3>

0800502c <??zcl_cluster_report_check_timeout_2>:
 800502c:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800502e:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 8005032:	4288      	cmp	r0, r1
 8005034:	d001      	beq.n	800503a <??zcl_cluster_report_check_timeout_4>
 8005036:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8005038:	e000      	b.n	800503c <??zcl_cluster_report_check_timeout_5>

0800503a <??zcl_cluster_report_check_timeout_4>:
 800503a:	2500      	movs	r5, #0

0800503c <??zcl_cluster_report_check_timeout_5>:
 800503c:	2d00      	cmp	r5, #0
 800503e:	d037      	beq.n	80050b0 <??zcl_cluster_report_check_timeout_6>
 8005040:	46a8      	mov	r8, r5
 8005042:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 8005046:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800504a:	4288      	cmp	r0, r1
 800504c:	d027      	beq.n	800509e <??zcl_cluster_report_check_timeout_7>

0800504e <??zcl_cluster_report_check_timeout_8>:
 800504e:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 8005052:	2800      	cmp	r0, #0
 8005054:	d00e      	beq.n	8005074 <??zcl_cluster_report_check_timeout_9>
 8005056:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800505a:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 800505e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005062:	fb00 1909 	mla	r9, r0, r9, r1
 8005066:	4649      	mov	r1, r9
 8005068:	0038      	movs	r0, r7
 800506a:	f00f fc69 	bl	8014940 <ZbTimeoutRemaining>
 800506e:	0004      	movs	r4, r0
 8005070:	2c00      	cmp	r4, #0
 8005072:	d114      	bne.n	800509e <??zcl_cluster_report_check_timeout_7>

08005074 <??zcl_cluster_report_check_timeout_9>:
 8005074:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 8005078:	2800      	cmp	r0, #0
 800507a:	d010      	beq.n	800509e <??zcl_cluster_report_check_timeout_7>

0800507c <??zcl_cluster_report_check_timeout_10>:
 800507c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8005080:	f8b8 9022 	ldrh.w	r9, [r8, #34]	; 0x22
 8005084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005088:	fb00 1909 	mla	r9, r0, r9, r1
 800508c:	4649      	mov	r1, r9
 800508e:	0038      	movs	r0, r7
 8005090:	f00f fc56 	bl	8014940 <ZbTimeoutRemaining>
 8005094:	0004      	movs	r4, r0
 8005096:	2c00      	cmp	r4, #0
 8005098:	d101      	bne.n	800509e <??zcl_cluster_report_check_timeout_7>

0800509a <??zcl_cluster_report_check_timeout_11>:
 800509a:	2001      	movs	r0, #1
 800509c:	e009      	b.n	80050b2 <??zcl_cluster_report_check_timeout_3>

0800509e <??zcl_cluster_report_check_timeout_7>:
 800509e:	6828      	ldr	r0, [r5, #0]
 80050a0:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 80050a4:	4288      	cmp	r0, r1
 80050a6:	d001      	beq.n	80050ac <??zcl_cluster_report_check_timeout_12>
 80050a8:	682d      	ldr	r5, [r5, #0]
 80050aa:	e7c7      	b.n	800503c <??zcl_cluster_report_check_timeout_5>

080050ac <??zcl_cluster_report_check_timeout_12>:
 80050ac:	2500      	movs	r5, #0
 80050ae:	e7c5      	b.n	800503c <??zcl_cluster_report_check_timeout_5>

080050b0 <??zcl_cluster_report_check_timeout_6>:
 80050b0:	2000      	movs	r0, #0

080050b2 <??zcl_cluster_report_check_timeout_3>:
 80050b2:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080050b8 <zcl_cluster_reports_timer>:
 80050b8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	b081      	sub	sp, #4
 80050be:	ed2d 8b04 	vpush	{d8-d9}
 80050c2:	b0b0      	sub	sp, #192	; 0xc0
 80050c4:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80050c6:	9003      	str	r0, [sp, #12]
 80050c8:	2000      	movs	r0, #0
 80050ca:	9005      	str	r0, [sp, #20]
 80050cc:	2000      	movs	r0, #0
 80050ce:	9007      	str	r0, [sp, #28]
 80050d0:	f8df 08f8 	ldr.w	r0, [pc, #2296]	; 80059cc <??DataTable9_4>
 80050d4:	9006      	str	r0, [sp, #24]
 80050d6:	2000      	movs	r0, #0
 80050d8:	f88d 0010 	strb.w	r0, [sp, #16]
 80050dc:	f05f 0b00 	movs.w	fp, #0
 80050e0:	9803      	ldr	r0, [sp, #12]
 80050e2:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80050e6:	f88d 000b 	strb.w	r0, [sp, #11]
 80050ea:	2000      	movs	r0, #0
 80050ec:	f88d 000a 	strb.w	r0, [sp, #10]
 80050f0:	2000      	movs	r0, #0
 80050f2:	9903      	ldr	r1, [sp, #12]
 80050f4:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
 80050f8:	2000      	movs	r0, #0
 80050fa:	9903      	ldr	r1, [sp, #12]
 80050fc:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 8005100:	9803      	ldr	r0, [sp, #12]
 8005102:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005104:	9903      	ldr	r1, [sp, #12]
 8005106:	3130      	adds	r1, #48	; 0x30
 8005108:	4288      	cmp	r0, r1
 800510a:	d002      	beq.n	8005112 <??zcl_cluster_reports_timer_1>
 800510c:	9803      	ldr	r0, [sp, #12]
 800510e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005110:	e000      	b.n	8005114 <??zcl_cluster_reports_timer_2>

08005112 <??zcl_cluster_reports_timer_1>:
 8005112:	2000      	movs	r0, #0

08005114 <??zcl_cluster_reports_timer_2>:
 8005114:	2800      	cmp	r0, #0
 8005116:	f000 81f7 	beq.w	8005508 <??zcl_cluster_reports_timer_3>

0800511a <??zcl_cluster_reports_timer_4>:
 800511a:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800511c:	f00f fdad 	bl	8014c7a <ZbZclUptime>
 8005120:	9009      	str	r0, [sp, #36]	; 0x24
 8005122:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005124:	9803      	ldr	r0, [sp, #12]
 8005126:	f7ff ff71 	bl	800500c <zcl_cluster_report_check_timeout>
 800512a:	2800      	cmp	r0, #0
 800512c:	d004      	beq.n	8005138 <??zcl_cluster_reports_timer_5>
 800512e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005130:	f510 707a 	adds.w	r0, r0, #1000	; 0x3e8
 8005134:	900b      	str	r0, [sp, #44]	; 0x2c
 8005136:	e001      	b.n	800513c <??zcl_cluster_reports_timer_6>

08005138 <??zcl_cluster_reports_timer_5>:
 8005138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800513a:	900b      	str	r0, [sp, #44]	; 0x2c

0800513c <??zcl_cluster_reports_timer_6>:
 800513c:	2490      	movs	r4, #144	; 0x90
 800513e:	2500      	movs	r5, #0
 8005140:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005144:	002a      	movs	r2, r5
 8005146:	0021      	movs	r1, r4
 8005148:	4640      	mov	r0, r8
 800514a:	f002 fbc5 	bl	80078d8 <__aeabi_memset>
 800514e:	2000      	movs	r0, #0
 8005150:	4682      	mov	sl, r0
 8005152:	2000      	movs	r0, #0
 8005154:	f88d 0008 	strb.w	r0, [sp, #8]
 8005158:	9803      	ldr	r0, [sp, #12]
 800515a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800515c:	9903      	ldr	r1, [sp, #12]
 800515e:	3130      	adds	r1, #48	; 0x30
 8005160:	4288      	cmp	r0, r1
 8005162:	d002      	beq.n	800516a <??zcl_cluster_reports_timer_7>
 8005164:	9803      	ldr	r0, [sp, #12]
 8005166:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005168:	e000      	b.n	800516c <??zcl_cluster_reports_timer_8>

0800516a <??zcl_cluster_reports_timer_7>:
 800516a:	2600      	movs	r6, #0

0800516c <??zcl_cluster_reports_timer_8>:
 800516c:	2e00      	cmp	r6, #0
 800516e:	f000 817b 	beq.w	8005468 <??zcl_cluster_reports_timer_9>
 8005172:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8005176:	f88d 0009 	strb.w	r0, [sp, #9]
 800517a:	f8df 0850 	ldr.w	r0, [pc, #2128]	; 80059cc <??DataTable9_4>
 800517e:	900a      	str	r0, [sp, #40]	; 0x28
 8005180:	0037      	movs	r7, r6
 8005182:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8005184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005188:	4288      	cmp	r0, r1
 800518a:	f000 8164 	beq.w	8005456 <??zcl_cluster_reports_timer_10>

0800518e <??zcl_cluster_reports_timer_11>:
 800518e:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8005192:	2800      	cmp	r0, #0
 8005194:	d116      	bne.n	80051c4 <??zcl_cluster_reports_timer_12>
 8005196:	8c38      	ldrh	r0, [r7, #32]
 8005198:	2800      	cmp	r0, #0
 800519a:	d013      	beq.n	80051c4 <??zcl_cluster_reports_timer_12>
 800519c:	6939      	ldr	r1, [r7, #16]
 800519e:	8c3c      	ldrh	r4, [r7, #32]
 80051a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051a4:	fb00 1404 	mla	r4, r0, r4, r1
 80051a8:	0021      	movs	r1, r4
 80051aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80051ac:	f00f fbc8 	bl	8014940 <ZbTimeoutRemaining>
 80051b0:	9008      	str	r0, [sp, #32]
 80051b2:	9808      	ldr	r0, [sp, #32]
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d005      	beq.n	80051c4 <??zcl_cluster_reports_timer_12>
 80051b8:	9908      	ldr	r1, [sp, #32]
 80051ba:	9806      	ldr	r0, [sp, #24]
 80051bc:	f7ff febe 	bl	8004f3c <zcl_report_check_time>
 80051c0:	9006      	str	r0, [sp, #24]
 80051c2:	e148      	b.n	8005456 <??zcl_cluster_reports_timer_10>

080051c4 <??zcl_cluster_reports_timer_12>:
 80051c4:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d115      	bne.n	80051f8 <??zcl_cluster_reports_timer_13>
 80051cc:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d012      	beq.n	80051f8 <??zcl_cluster_reports_timer_13>
 80051d2:	6939      	ldr	r1, [r7, #16]
 80051d4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80051d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051da:	fb00 1404 	mla	r4, r0, r4, r1
 80051de:	0021      	movs	r1, r4
 80051e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80051e2:	f00f fbad 	bl	8014940 <ZbTimeoutRemaining>
 80051e6:	900a      	str	r0, [sp, #40]	; 0x28
 80051e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d104      	bne.n	80051f8 <??zcl_cluster_reports_timer_13>
 80051ee:	2001      	movs	r0, #1
 80051f0:	f88d 0009 	strb.w	r0, [sp, #9]
 80051f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051f6:	6138      	str	r0, [r7, #16]

080051f8 <??zcl_cluster_reports_timer_13>:
 80051f8:	9803      	ldr	r0, [sp, #12]
 80051fa:	8982      	ldrh	r2, [r0, #12]
 80051fc:	9803      	ldr	r0, [sp, #12]
 80051fe:	7b81      	ldrb	r1, [r0, #14]
 8005200:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8005202:	f00f f9e4 	bl	80145ce <ZbApsBindSrcExists>
 8005206:	2800      	cmp	r0, #0
 8005208:	d105      	bne.n	8005216 <??zcl_cluster_reports_timer_14>
 800520a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800520c:	9806      	ldr	r0, [sp, #24]
 800520e:	f7ff fe95 	bl	8004f3c <zcl_report_check_time>
 8005212:	9006      	str	r0, [sp, #24]
 8005214:	e11f      	b.n	8005456 <??zcl_cluster_reports_timer_10>

08005216 <??zcl_cluster_reports_timer_14>:
 8005216:	9805      	ldr	r0, [sp, #20]
 8005218:	2800      	cmp	r0, #0
 800521a:	d10b      	bne.n	8005234 <??zcl_cluster_reports_timer_15>
 800521c:	2300      	movs	r3, #0
 800521e:	a28a      	add	r2, pc, #552	; (adr r2, 8005448 <??zcl_cluster_reports_timer_0>)
 8005220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005224:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8005226:	f010 f822 	bl	801526e <zb_heap_alloc>
 800522a:	9005      	str	r0, [sp, #20]
 800522c:	9805      	ldr	r0, [sp, #20]
 800522e:	2800      	cmp	r0, #0
 8005230:	f000 816a 	beq.w	8005508 <??zcl_cluster_reports_timer_3>

08005234 <??zcl_cluster_reports_timer_15>:
 8005234:	2000      	movs	r0, #0
 8005236:	9001      	str	r0, [sp, #4]
 8005238:	f44f 7080 	mov.w	r0, #256	; 0x100
 800523c:	9000      	str	r0, [sp, #0]
 800523e:	9b05      	ldr	r3, [sp, #20]
 8005240:	f10d 0211 	add.w	r2, sp, #17
 8005244:	89b9      	ldrh	r1, [r7, #12]
 8005246:	9803      	ldr	r0, [sp, #12]
 8005248:	f7fe fcfb 	bl	8003c42 <ZbZclAttrRead>
 800524c:	2800      	cmp	r0, #0
 800524e:	d003      	beq.n	8005258 <??zcl_cluster_reports_timer_16>
 8005250:	0038      	movs	r0, r7
 8005252:	f000 fb0a 	bl	800586a <zcl_reporting_disable>
 8005256:	e094      	b.n	8005382 <??zcl_cluster_reports_timer_17>

08005258 <??zcl_cluster_reports_timer_16>:
 8005258:	2300      	movs	r3, #0
 800525a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800525e:	9905      	ldr	r1, [sp, #20]
 8005260:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8005264:	f7ff fb15 	bl	8004892 <ZbZclAttrParseLength>
 8005268:	9007      	str	r0, [sp, #28]
 800526a:	9807      	ldr	r0, [sp, #28]
 800526c:	2800      	cmp	r0, #0
 800526e:	d503      	bpl.n	8005278 <??zcl_cluster_reports_timer_18>
 8005270:	0038      	movs	r0, r7
 8005272:	f000 fafa 	bl	800586a <zcl_reporting_disable>
 8005276:	e084      	b.n	8005382 <??zcl_cluster_reports_timer_17>

08005278 <??zcl_cluster_reports_timer_18>:
 8005278:	9807      	ldr	r0, [sp, #28]
 800527a:	2800      	cmp	r0, #0
 800527c:	f000 8081 	beq.w	8005382 <??zcl_cluster_reports_timer_17>

08005280 <??zcl_cluster_reports_timer_19>:
 8005280:	7bb8      	ldrb	r0, [r7, #14]
 8005282:	2838      	cmp	r0, #56	; 0x38
 8005284:	db37      	blt.n	80052f6 <??zcl_cluster_reports_timer_20>
 8005286:	7bb8      	ldrb	r0, [r7, #14]
 8005288:	283b      	cmp	r0, #59	; 0x3b
 800528a:	da34      	bge.n	80052f6 <??zcl_cluster_reports_timer_20>
 800528c:	f10d 0201 	add.w	r2, sp, #1
 8005290:	9905      	ldr	r1, [sp, #20]
 8005292:	7bb8      	ldrb	r0, [r7, #14]
 8005294:	f001 ffd1 	bl	800723a <ZbZclParseFloat>
 8005298:	eeb0 8a40 	vmov.f32	s16, s0
 800529c:	eef0 8a60 	vmov.f32	s17, s1
 80052a0:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d003      	beq.n	80052b0 <??zcl_cluster_reports_timer_21>
 80052a8:	0038      	movs	r0, r7
 80052aa:	f000 fade 	bl	800586a <zcl_reporting_disable>
 80052ae:	e068      	b.n	8005382 <??zcl_cluster_reports_timer_17>

080052b0 <??zcl_cluster_reports_timer_21>:
 80052b0:	ec51 0b18 	vmov	r0, r1, d8
 80052b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b8:	f002 fbca 	bl	8007a50 <__aeabi_dsub>
 80052bc:	ec41 0b19 	vmov	d9, r0, r1
 80052c0:	ec51 0b19 	vmov	r0, r1, d9
 80052c4:	2200      	movs	r2, #0
 80052c6:	2300      	movs	r3, #0
 80052c8:	f002 ffda 	bl	8008280 <__aeabi_cdcmpeq>
 80052cc:	d205      	bcs.n	80052da <??zcl_cluster_reports_timer_22>
 80052ce:	ec51 0b19 	vmov	r0, r1, d9
 80052d2:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80052d6:	ec41 0b19 	vmov	d9, r0, r1

080052da <??zcl_cluster_reports_timer_22>:
 80052da:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80052de:	2800      	cmp	r0, #0
 80052e0:	d106      	bne.n	80052f0 <??zcl_cluster_reports_timer_23>
 80052e2:	ec51 0b19 	vmov	r0, r1, d9
 80052e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ea:	f002 ffc9 	bl	8008280 <__aeabi_cdcmpeq>
 80052ee:	d348      	bcc.n	8005382 <??zcl_cluster_reports_timer_17>

080052f0 <??zcl_cluster_reports_timer_23>:
 80052f0:	ed87 8b06 	vstr	d8, [r7, #24]
 80052f4:	e040      	b.n	8005378 <??zcl_cluster_reports_timer_24>

080052f6 <??zcl_cluster_reports_timer_20>:
 80052f6:	7bb8      	ldrb	r0, [r7, #14]
 80052f8:	f7ff fb7c 	bl	80049f4 <ZbZclAttrIsAnalog>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d02b      	beq.n	8005358 <??zcl_cluster_reports_timer_25>
 8005300:	466a      	mov	r2, sp
 8005302:	9905      	ldr	r1, [sp, #20]
 8005304:	7bb8      	ldrb	r0, [r7, #14]
 8005306:	f7fb f805 	bl	8000314 <ZbZclParseInteger>
 800530a:	0004      	movs	r4, r0
 800530c:	000d      	movs	r5, r1
 800530e:	f89d 0000 	ldrb.w	r0, [sp]
 8005312:	2800      	cmp	r0, #0
 8005314:	d003      	beq.n	800531e <??zcl_cluster_reports_timer_26>
 8005316:	0038      	movs	r0, r7
 8005318:	f000 faa7 	bl	800586a <zcl_reporting_disable>
 800531c:	e031      	b.n	8005382 <??zcl_cluster_reports_timer_17>

0800531e <??zcl_cluster_reports_timer_26>:
 800531e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005322:	ebb4 0800 	subs.w	r8, r4, r0
 8005326:	eb75 0901 	sbcs.w	r9, r5, r1
 800532a:	f1b9 0f00 	cmp.w	r9, #0
 800532e:	d503      	bpl.n	8005338 <??zcl_cluster_reports_timer_27>
 8005330:	f1d8 0800 	rsbs	r8, r8, #0
 8005334:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

08005338 <??zcl_cluster_reports_timer_27>:
 8005338:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800533c:	2800      	cmp	r0, #0
 800533e:	d108      	bne.n	8005352 <??zcl_cluster_reports_timer_28>
 8005340:	4640      	mov	r0, r8
 8005342:	4649      	mov	r1, r9
 8005344:	f002 fd0e 	bl	8007d64 <__aeabi_l2d>
 8005348:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800534c:	f002 ff98 	bl	8008280 <__aeabi_cdcmpeq>
 8005350:	d317      	bcc.n	8005382 <??zcl_cluster_reports_timer_17>

08005352 <??zcl_cluster_reports_timer_28>:
 8005352:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8005356:	e00f      	b.n	8005378 <??zcl_cluster_reports_timer_24>

08005358 <??zcl_cluster_reports_timer_25>:
 8005358:	9a07      	ldr	r2, [sp, #28]
 800535a:	9905      	ldr	r1, [sp, #20]
 800535c:	2000      	movs	r0, #0
 800535e:	f00f ffa3 	bl	80152a8 <WpanCrc>
 8005362:	0001      	movs	r1, r0
 8005364:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8005368:	2800      	cmp	r0, #0
 800536a:	d104      	bne.n	8005376 <??zcl_cluster_reports_timer_29>
 800536c:	8b38      	ldrh	r0, [r7, #24]
 800536e:	000a      	movs	r2, r1
 8005370:	b292      	uxth	r2, r2
 8005372:	4290      	cmp	r0, r2
 8005374:	d005      	beq.n	8005382 <??zcl_cluster_reports_timer_17>

08005376 <??zcl_cluster_reports_timer_29>:
 8005376:	8339      	strh	r1, [r7, #24]

08005378 <??zcl_cluster_reports_timer_24>:
 8005378:	2001      	movs	r0, #1
 800537a:	f88d 0009 	strb.w	r0, [sp, #9]
 800537e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005380:	6138      	str	r0, [r7, #16]

08005382 <??zcl_cluster_reports_timer_17>:
 8005382:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8005386:	2800      	cmp	r0, #0
 8005388:	d060      	beq.n	800544c <??zcl_cluster_reports_timer_30>
 800538a:	9807      	ldr	r0, [sp, #28]
 800538c:	2800      	cmp	r0, #0
 800538e:	d05d      	beq.n	800544c <??zcl_cluster_reports_timer_30>
 8005390:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8005394:	1c40      	adds	r0, r0, #1
 8005396:	f88d 0010 	strb.w	r0, [sp, #16]
 800539a:	4650      	mov	r0, sl
 800539c:	b2c0      	uxtb	r0, r0
 800539e:	280c      	cmp	r0, #12
 80053a0:	d007      	beq.n	80053b2 <??zcl_cluster_reports_timer_31>
 80053a2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80053a6:	9907      	ldr	r1, [sp, #28]
 80053a8:	fa51 f080 	uxtab	r0, r1, r0
 80053ac:	1cc0      	adds	r0, r0, #3
 80053ae:	2837      	cmp	r0, #55	; 0x37
 80053b0:	d314      	bcc.n	80053dc <??zcl_cluster_reports_timer_32>

080053b2 <??zcl_cluster_reports_timer_31>:
 80053b2:	465a      	mov	r2, fp
 80053b4:	a90c      	add	r1, sp, #48	; 0x30
 80053b6:	9803      	ldr	r0, [sp, #12]
 80053b8:	f7ff fc8e 	bl	8004cd8 <zcl_reporting_queue_report>
 80053bc:	f11b 0bc8 	adds.w	fp, fp, #200	; 0xc8
 80053c0:	2490      	movs	r4, #144	; 0x90
 80053c2:	2500      	movs	r5, #0
 80053c4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80053c8:	002a      	movs	r2, r5
 80053ca:	0021      	movs	r1, r4
 80053cc:	4640      	mov	r0, r8
 80053ce:	f002 fa83 	bl	80078d8 <__aeabi_memset>
 80053d2:	2000      	movs	r0, #0
 80053d4:	4682      	mov	sl, r0
 80053d6:	2000      	movs	r0, #0
 80053d8:	f88d 0008 	strb.w	r0, [sp, #8]

080053dc <??zcl_cluster_reports_timer_32>:
 80053dc:	9807      	ldr	r0, [sp, #28]
 80053de:	9001      	str	r0, [sp, #4]
 80053e0:	9805      	ldr	r0, [sp, #20]
 80053e2:	9000      	str	r0, [sp, #0]
 80053e4:	7bbb      	ldrb	r3, [r7, #14]
 80053e6:	89ba      	ldrh	r2, [r7, #12]
 80053e8:	a90c      	add	r1, sp, #48	; 0x30
 80053ea:	4654      	mov	r4, sl
 80053ec:	b2e4      	uxtb	r4, r4
 80053ee:	200c      	movs	r0, #12
 80053f0:	4344      	muls	r4, r0
 80053f2:	4421      	add	r1, r4
 80053f4:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80053f6:	f7ff fdd9 	bl	8004fac <zcl_report_append_attr>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d02b      	beq.n	8005456 <??zcl_cluster_reports_timer_10>

080053fe <??zcl_cluster_reports_timer_33>:
 80053fe:	f11a 0a01 	adds.w	sl, sl, #1
 8005402:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8005406:	9807      	ldr	r0, [sp, #28]
 8005408:	1841      	adds	r1, r0, r1
 800540a:	1cc9      	adds	r1, r1, #3
 800540c:	f88d 1008 	strb.w	r1, [sp, #8]
 8005410:	8c38      	ldrh	r0, [r7, #32]
 8005412:	2800      	cmp	r0, #0
 8005414:	d005      	beq.n	8005422 <??zcl_cluster_reports_timer_34>
 8005416:	8c39      	ldrh	r1, [r7, #32]
 8005418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800541c:	4341      	muls	r1, r0
 800541e:	9108      	str	r1, [sp, #32]
 8005420:	e00b      	b.n	800543a <??zcl_cluster_reports_timer_35>

08005422 <??zcl_cluster_reports_timer_34>:
 8005422:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8005424:	2800      	cmp	r0, #0
 8005426:	d005      	beq.n	8005434 <??zcl_cluster_reports_timer_36>
 8005428:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800542a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800542e:	4341      	muls	r1, r0
 8005430:	9108      	str	r1, [sp, #32]
 8005432:	e002      	b.n	800543a <??zcl_cluster_reports_timer_35>

08005434 <??zcl_cluster_reports_timer_36>:
 8005434:	f8df 0594 	ldr.w	r0, [pc, #1428]	; 80059cc <??DataTable9_4>
 8005438:	9008      	str	r0, [sp, #32]

0800543a <??zcl_cluster_reports_timer_35>:
 800543a:	9908      	ldr	r1, [sp, #32]
 800543c:	9806      	ldr	r0, [sp, #24]
 800543e:	f7ff fd7d 	bl	8004f3c <zcl_report_check_time>
 8005442:	9006      	str	r0, [sp, #24]
 8005444:	e007      	b.n	8005456 <??zcl_cluster_reports_timer_10>
 8005446:	bf00      	nop

08005448 <??zcl_cluster_reports_timer_0>:
 8005448:	0000 0000                                   ....

0800544c <??zcl_cluster_reports_timer_30>:
 800544c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800544e:	9806      	ldr	r0, [sp, #24]
 8005450:	f7ff fd74 	bl	8004f3c <zcl_report_check_time>
 8005454:	9006      	str	r0, [sp, #24]

08005456 <??zcl_cluster_reports_timer_10>:
 8005456:	6830      	ldr	r0, [r6, #0]
 8005458:	9903      	ldr	r1, [sp, #12]
 800545a:	3130      	adds	r1, #48	; 0x30
 800545c:	4288      	cmp	r0, r1
 800545e:	d001      	beq.n	8005464 <??zcl_cluster_reports_timer_37>
 8005460:	6836      	ldr	r6, [r6, #0]
 8005462:	e683      	b.n	800516c <??zcl_cluster_reports_timer_8>

08005464 <??zcl_cluster_reports_timer_37>:
 8005464:	2600      	movs	r6, #0
 8005466:	e681      	b.n	800516c <??zcl_cluster_reports_timer_8>

08005468 <??zcl_cluster_reports_timer_9>:
 8005468:	9805      	ldr	r0, [sp, #20]
 800546a:	2800      	cmp	r0, #0
 800546c:	d04c      	beq.n	8005508 <??zcl_cluster_reports_timer_3>
 800546e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8005472:	2800      	cmp	r0, #0
 8005474:	d042      	beq.n	80054fc <??zcl_cluster_reports_timer_38>
 8005476:	2001      	movs	r0, #1
 8005478:	9007      	str	r0, [sp, #28]
 800547a:	2001      	movs	r0, #1
 800547c:	9905      	ldr	r1, [sp, #20]
 800547e:	7008      	strb	r0, [r1, #0]
 8005480:	4650      	mov	r0, sl
 8005482:	b2c0      	uxtb	r0, r0
 8005484:	280c      	cmp	r0, #12
 8005486:	d007      	beq.n	8005498 <??zcl_cluster_reports_timer_39>
 8005488:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800548c:	9907      	ldr	r1, [sp, #28]
 800548e:	fa51 f080 	uxtab	r0, r1, r0
 8005492:	1cc0      	adds	r0, r0, #3
 8005494:	2837      	cmp	r0, #55	; 0x37
 8005496:	d314      	bcc.n	80054c2 <??zcl_cluster_reports_timer_40>

08005498 <??zcl_cluster_reports_timer_39>:
 8005498:	465a      	mov	r2, fp
 800549a:	a90c      	add	r1, sp, #48	; 0x30
 800549c:	9803      	ldr	r0, [sp, #12]
 800549e:	f7ff fc1b 	bl	8004cd8 <zcl_reporting_queue_report>
 80054a2:	f11b 0bc8 	adds.w	fp, fp, #200	; 0xc8
 80054a6:	2490      	movs	r4, #144	; 0x90
 80054a8:	2500      	movs	r5, #0
 80054aa:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80054ae:	002a      	movs	r2, r5
 80054b0:	0021      	movs	r1, r4
 80054b2:	4640      	mov	r0, r8
 80054b4:	f002 fa10 	bl	80078d8 <__aeabi_memset>
 80054b8:	2000      	movs	r0, #0
 80054ba:	4682      	mov	sl, r0
 80054bc:	2000      	movs	r0, #0
 80054be:	f88d 0008 	strb.w	r0, [sp, #8]

080054c2 <??zcl_cluster_reports_timer_40>:
 80054c2:	9807      	ldr	r0, [sp, #28]
 80054c4:	9001      	str	r0, [sp, #4]
 80054c6:	9805      	ldr	r0, [sp, #20]
 80054c8:	9000      	str	r0, [sp, #0]
 80054ca:	2330      	movs	r3, #48	; 0x30
 80054cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054d0:	a90c      	add	r1, sp, #48	; 0x30
 80054d2:	4654      	mov	r4, sl
 80054d4:	b2e4      	uxtb	r4, r4
 80054d6:	200c      	movs	r0, #12
 80054d8:	4344      	muls	r4, r0
 80054da:	4421      	add	r1, r4
 80054dc:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80054de:	f7ff fd65 	bl	8004fac <zcl_report_append_attr>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d001      	beq.n	80054ea <??zcl_cluster_reports_timer_41>
 80054e6:	f11a 0a01 	adds.w	sl, sl, #1

080054ea <??zcl_cluster_reports_timer_41>:
 80054ea:	4650      	mov	r0, sl
 80054ec:	b2c0      	uxtb	r0, r0
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d004      	beq.n	80054fc <??zcl_cluster_reports_timer_38>
 80054f2:	465a      	mov	r2, fp
 80054f4:	a90c      	add	r1, sp, #48	; 0x30
 80054f6:	9803      	ldr	r0, [sp, #12]
 80054f8:	f7ff fbee 	bl	8004cd8 <zcl_reporting_queue_report>

080054fc <??zcl_cluster_reports_timer_38>:
 80054fc:	2300      	movs	r3, #0
 80054fe:	a2ba      	add	r2, pc, #744	; (adr r2, 80057e8 <??DataTable7>)
 8005500:	9905      	ldr	r1, [sp, #20]
 8005502:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8005504:	f00f fec2 	bl	801528c <zb_heap_free>

08005508 <??zcl_cluster_reports_timer_3>:
 8005508:	9806      	ldr	r0, [sp, #24]
 800550a:	28c8      	cmp	r0, #200	; 0xc8
 800550c:	d201      	bcs.n	8005512 <??zcl_cluster_reports_timer_42>
 800550e:	20c8      	movs	r0, #200	; 0xc8
 8005510:	9006      	str	r0, [sp, #24]

08005512 <??zcl_cluster_reports_timer_42>:
 8005512:	9803      	ldr	r0, [sp, #12]
 8005514:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8005516:	2800      	cmp	r0, #0
 8005518:	d00c      	beq.n	8005534 <??zcl_cluster_reports_timer_43>
 800551a:	9803      	ldr	r0, [sp, #12]
 800551c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800551e:	9906      	ldr	r1, [sp, #24]
 8005520:	9803      	ldr	r0, [sp, #12]
 8005522:	9b03      	ldr	r3, [sp, #12]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	4798      	blx	r3
 8005528:	2000      	movs	r0, #0
 800552a:	9903      	ldr	r1, [sp, #12]
 800552c:	6408      	str	r0, [r1, #64]	; 0x40
 800552e:	2000      	movs	r0, #0
 8005530:	9903      	ldr	r1, [sp, #12]
 8005532:	6448      	str	r0, [r1, #68]	; 0x44

08005534 <??zcl_cluster_reports_timer_43>:
 8005534:	2301      	movs	r3, #1
 8005536:	f10d 020a 	add.w	r2, sp, #10
 800553a:	f240 410c 	movw	r1, #1036	; 0x40c
 800553e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8005540:	f00f fab0 	bl	8014aa4 <ZbNwkGet>
 8005544:	2800      	cmp	r0, #0
 8005546:	d002      	beq.n	800554e <??zcl_cluster_reports_timer_44>
 8005548:	2000      	movs	r0, #0
 800554a:	f88d 000a 	strb.w	r0, [sp, #10]

0800554e <??zcl_cluster_reports_timer_44>:
 800554e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8005552:	2800      	cmp	r0, #0
 8005554:	d110      	bne.n	8005578 <??zcl_cluster_reports_timer_45>
 8005556:	9803      	ldr	r0, [sp, #12]
 8005558:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800555a:	9903      	ldr	r1, [sp, #12]
 800555c:	3130      	adds	r1, #48	; 0x30
 800555e:	4288      	cmp	r0, r1
 8005560:	d002      	beq.n	8005568 <??zcl_cluster_reports_timer_46>
 8005562:	9803      	ldr	r0, [sp, #12]
 8005564:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005566:	e000      	b.n	800556a <??zcl_cluster_reports_timer_47>

08005568 <??zcl_cluster_reports_timer_46>:
 8005568:	2000      	movs	r0, #0

0800556a <??zcl_cluster_reports_timer_47>:
 800556a:	2800      	cmp	r0, #0
 800556c:	d004      	beq.n	8005578 <??zcl_cluster_reports_timer_45>
 800556e:	9906      	ldr	r1, [sp, #24]
 8005570:	9803      	ldr	r0, [sp, #12]
 8005572:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005574:	f00f f9b4 	bl	80148e0 <ZbTimerReset>

08005578 <??zcl_cluster_reports_timer_45>:
 8005578:	b030      	add	sp, #192	; 0xc0
 800557a:	ecbd 8b04 	vpop	{d8-d9}
 800557e:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005582 <zcl_attr_reporting_check>:
 8005582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005584:	0005      	movs	r5, r0
 8005586:	000e      	movs	r6, r1
 8005588:	0017      	movs	r7, r2
 800558a:	2000      	movs	r0, #0
 800558c:	f88d 0000 	strb.w	r0, [sp]
 8005590:	2301      	movs	r3, #1
 8005592:	466a      	mov	r2, sp
 8005594:	f240 410c 	movw	r1, #1036	; 0x40c
 8005598:	68a8      	ldr	r0, [r5, #8]
 800559a:	f00f fa83 	bl	8014aa4 <ZbNwkGet>
 800559e:	2800      	cmp	r0, #0
 80055a0:	d002      	beq.n	80055a8 <??zcl_attr_reporting_check_0>
 80055a2:	2000      	movs	r0, #0
 80055a4:	f88d 0000 	strb.w	r0, [sp]

080055a8 <??zcl_attr_reporting_check_0>:
 80055a8:	f89d 0000 	ldrb.w	r0, [sp]
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d10d      	bne.n	80055cc <??zcl_attr_reporting_check_1>
 80055b0:	003a      	movs	r2, r7
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	0031      	movs	r1, r6
 80055b6:	b289      	uxth	r1, r1
 80055b8:	0028      	movs	r0, r5
 80055ba:	f000 f81a 	bl	80055f2 <zcl_reporting_find>
 80055be:	0004      	movs	r4, r0
 80055c0:	2c00      	cmp	r4, #0
 80055c2:	d003      	beq.n	80055cc <??zcl_attr_reporting_check_1>
 80055c4:	21c8      	movs	r1, #200	; 0xc8
 80055c6:	0028      	movs	r0, r5
 80055c8:	f7ff fcbd 	bl	8004f46 <zcl_report_kick>

080055cc <??zcl_attr_reporting_check_1>:
 80055cc:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080055ce <ZbZclReportCleanup>:
 80055ce:	b570      	push	{r4, r5, r6, lr}
 80055d0:	0005      	movs	r5, r0

080055d2 <??ZbZclReportCleanup_0>:
 80055d2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80055d4:	f115 0130 	adds.w	r1, r5, #48	; 0x30
 80055d8:	4288      	cmp	r0, r1
 80055da:	d001      	beq.n	80055e0 <??ZbZclReportCleanup_1>
 80055dc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80055de:	e000      	b.n	80055e2 <??ZbZclReportCleanup_2>

080055e0 <??ZbZclReportCleanup_1>:
 80055e0:	2400      	movs	r4, #0

080055e2 <??ZbZclReportCleanup_2>:
 80055e2:	2c00      	cmp	r4, #0
 80055e4:	d004      	beq.n	80055f0 <??ZbZclReportCleanup_3>

080055e6 <??ZbZclReportCleanup_4>:
 80055e6:	0026      	movs	r6, r4
 80055e8:	0030      	movs	r0, r6
 80055ea:	f000 f8ff 	bl	80057ec <zcl_reporting_delete>
 80055ee:	e7f0      	b.n	80055d2 <??ZbZclReportCleanup_0>

080055f0 <??ZbZclReportCleanup_3>:
 80055f0:	bd70      	pop	{r4, r5, r6, pc}

080055f2 <zcl_reporting_find>:
 80055f2:	b470      	push	{r4, r5, r6}
 80055f4:	0004      	movs	r4, r0
 80055f6:	000b      	movs	r3, r1
 80055f8:	0010      	movs	r0, r2
 80055fa:	b2c0      	uxtb	r0, r0
 80055fc:	2801      	cmp	r0, #1
 80055fe:	d101      	bne.n	8005604 <??zcl_reporting_find_0>
 8005600:	2000      	movs	r0, #0
 8005602:	e01c      	b.n	800563e <??zcl_reporting_find_1>

08005604 <??zcl_reporting_find_0>:
 8005604:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005606:	f114 0130 	adds.w	r1, r4, #48	; 0x30
 800560a:	4288      	cmp	r0, r1
 800560c:	d001      	beq.n	8005612 <??zcl_reporting_find_2>
 800560e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005610:	e000      	b.n	8005614 <??zcl_reporting_find_3>

08005612 <??zcl_reporting_find_2>:
 8005612:	2100      	movs	r1, #0

08005614 <??zcl_reporting_find_3>:
 8005614:	2900      	cmp	r1, #0
 8005616:	d011      	beq.n	800563c <??zcl_reporting_find_4>
 8005618:	000d      	movs	r5, r1
 800561a:	89a8      	ldrh	r0, [r5, #12]
 800561c:	001e      	movs	r6, r3
 800561e:	b2b6      	uxth	r6, r6
 8005620:	42b0      	cmp	r0, r6
 8005622:	d005      	beq.n	8005630 <??zcl_reporting_find_5>
 8005624:	6808      	ldr	r0, [r1, #0]
 8005626:	f114 0630 	adds.w	r6, r4, #48	; 0x30
 800562a:	42b0      	cmp	r0, r6
 800562c:	d004      	beq.n	8005638 <??zcl_reporting_find_6>
 800562e:	e001      	b.n	8005634 <??zcl_reporting_find_7>

08005630 <??zcl_reporting_find_5>:
 8005630:	0028      	movs	r0, r5
 8005632:	e004      	b.n	800563e <??zcl_reporting_find_1>

08005634 <??zcl_reporting_find_7>:
 8005634:	6809      	ldr	r1, [r1, #0]
 8005636:	e7ed      	b.n	8005614 <??zcl_reporting_find_3>

08005638 <??zcl_reporting_find_6>:
 8005638:	2100      	movs	r1, #0
 800563a:	e7eb      	b.n	8005614 <??zcl_reporting_find_3>

0800563c <??zcl_reporting_find_4>:
 800563c:	2000      	movs	r0, #0

0800563e <??zcl_reporting_find_1>:
 800563e:	bc70      	pop	{r4, r5, r6}
 8005640:	4770      	bx	lr

08005642 <zcl_reporting_stack_event>:
 8005642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005646:	0006      	movs	r6, r0
 8005648:	000f      	movs	r7, r1
 800564a:	4690      	mov	r8, r2
 800564c:	4699      	mov	r9, r3
 800564e:	46ca      	mov	sl, r9
 8005650:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8005654:	d001      	beq.n	800565a <??zcl_reporting_stack_event_0>
 8005656:	2000      	movs	r0, #0
 8005658:	e01b      	b.n	8005692 <??zcl_reporting_stack_event_1>

0800565a <??zcl_reporting_stack_event_0>:
 800565a:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 800565e:	f11a 0130 	adds.w	r1, sl, #48	; 0x30
 8005662:	4288      	cmp	r0, r1
 8005664:	d002      	beq.n	800566c <??zcl_reporting_stack_event_2>
 8005666:	f8da 4030 	ldr.w	r4, [sl, #48]	; 0x30
 800566a:	e000      	b.n	800566e <??zcl_reporting_stack_event_3>

0800566c <??zcl_reporting_stack_event_2>:
 800566c:	2400      	movs	r4, #0

0800566e <??zcl_reporting_stack_event_3>:
 800566e:	2c00      	cmp	r4, #0
 8005670:	d00e      	beq.n	8005690 <??zcl_reporting_stack_event_4>
 8005672:	0025      	movs	r5, r4
 8005674:	2201      	movs	r2, #1
 8005676:	0029      	movs	r1, r5
 8005678:	0030      	movs	r0, r6
 800567a:	f000 f947 	bl	800590c <zcl_reporting_reset_defaults>
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	f11a 0130 	adds.w	r1, sl, #48	; 0x30
 8005684:	4288      	cmp	r0, r1
 8005686:	d001      	beq.n	800568c <??zcl_reporting_stack_event_5>
 8005688:	6824      	ldr	r4, [r4, #0]
 800568a:	e7f0      	b.n	800566e <??zcl_reporting_stack_event_3>

0800568c <??zcl_reporting_stack_event_5>:
 800568c:	2400      	movs	r4, #0
 800568e:	e7ee      	b.n	800566e <??zcl_reporting_stack_event_3>

08005690 <??zcl_reporting_stack_event_4>:
 8005690:	2000      	movs	r0, #0

08005692 <??zcl_reporting_stack_event_1>:
 8005692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005696 <zcl_reporting_save_curr_val>:
 8005696:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 800569a:	0005      	movs	r5, r0
 800569c:	000e      	movs	r6, r1
 800569e:	68af      	ldr	r7, [r5, #8]
 80056a0:	f20f 1944 	addw	r9, pc, #324	; 0x144
 80056a4:	2300      	movs	r3, #0
 80056a6:	464a      	mov	r2, r9
 80056a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056ac:	0038      	movs	r0, r7
 80056ae:	f00f fdde 	bl	801526e <zb_heap_alloc>
 80056b2:	0004      	movs	r4, r0
 80056b4:	2c00      	cmp	r4, #0
 80056b6:	d101      	bne.n	80056bc <??zcl_reporting_save_curr_val_0>
 80056b8:	2089      	movs	r0, #137	; 0x89
 80056ba:	e05d      	b.n	8005778 <??zcl_reporting_save_curr_val_1>

080056bc <??zcl_reporting_save_curr_val_0>:
 80056bc:	2001      	movs	r0, #1
 80056be:	9001      	str	r0, [sp, #4]
 80056c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056c4:	9000      	str	r0, [sp, #0]
 80056c6:	0023      	movs	r3, r4
 80056c8:	f10d 0209 	add.w	r2, sp, #9
 80056cc:	89b1      	ldrh	r1, [r6, #12]
 80056ce:	0028      	movs	r0, r5
 80056d0:	f7fe fab7 	bl	8003c42 <ZbZclAttrRead>
 80056d4:	f88d 0008 	strb.w	r0, [sp, #8]
 80056d8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80056dc:	2800      	cmp	r0, #0
 80056de:	d002      	beq.n	80056e6 <??zcl_reporting_save_curr_val_2>
 80056e0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80056e4:	e048      	b.n	8005778 <??zcl_reporting_save_curr_val_1>

080056e6 <??zcl_reporting_save_curr_val_2>:
 80056e6:	7bb0      	ldrb	r0, [r6, #14]
 80056e8:	f89d 1009 	ldrb.w	r1, [sp, #9]
 80056ec:	4288      	cmp	r0, r1
 80056ee:	d001      	beq.n	80056f4 <??zcl_reporting_save_curr_val_3>
 80056f0:	208d      	movs	r0, #141	; 0x8d
 80056f2:	e041      	b.n	8005778 <??zcl_reporting_save_curr_val_1>

080056f4 <??zcl_reporting_save_curr_val_3>:
 80056f4:	2300      	movs	r3, #0
 80056f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056fa:	0021      	movs	r1, r4
 80056fc:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8005700:	f7ff f8c7 	bl	8004892 <ZbZclAttrParseLength>
 8005704:	4680      	mov	r8, r0
 8005706:	f1b8 0f00 	cmp.w	r8, #0
 800570a:	d501      	bpl.n	8005710 <??zcl_reporting_save_curr_val_4>
 800570c:	2089      	movs	r0, #137	; 0x89
 800570e:	e033      	b.n	8005778 <??zcl_reporting_save_curr_val_1>

08005710 <??zcl_reporting_save_curr_val_4>:
 8005710:	7bb0      	ldrb	r0, [r6, #14]
 8005712:	f7ff f96f 	bl	80049f4 <ZbZclAttrIsAnalog>
 8005716:	2800      	cmp	r0, #0
 8005718:	d106      	bne.n	8005728 <??zcl_reporting_save_curr_val_5>
 800571a:	4642      	mov	r2, r8
 800571c:	0021      	movs	r1, r4
 800571e:	2000      	movs	r0, #0
 8005720:	f00f fdc2 	bl	80152a8 <WpanCrc>
 8005724:	8330      	strh	r0, [r6, #24]
 8005726:	e020      	b.n	800576a <??zcl_reporting_save_curr_val_6>

08005728 <??zcl_reporting_save_curr_val_5>:
 8005728:	7bb0      	ldrb	r0, [r6, #14]
 800572a:	f002 f8ab 	bl	8007884 <ZbZclAttrIsFloat>
 800572e:	2800      	cmp	r0, #0
 8005730:	d00d      	beq.n	800574e <??zcl_reporting_save_curr_val_7>
 8005732:	aa02      	add	r2, sp, #8
 8005734:	0021      	movs	r1, r4
 8005736:	7bb0      	ldrb	r0, [r6, #14]
 8005738:	f001 fd7f 	bl	800723a <ZbZclParseFloat>
 800573c:	ed86 0b06 	vstr	d0, [r6, #24]
 8005740:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005744:	2800      	cmp	r0, #0
 8005746:	d010      	beq.n	800576a <??zcl_reporting_save_curr_val_6>
 8005748:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800574c:	e014      	b.n	8005778 <??zcl_reporting_save_curr_val_1>

0800574e <??zcl_reporting_save_curr_val_7>:
 800574e:	aa02      	add	r2, sp, #8
 8005750:	0021      	movs	r1, r4
 8005752:	7bb0      	ldrb	r0, [r6, #14]
 8005754:	f7fa fdde 	bl	8000314 <ZbZclParseInteger>
 8005758:	e9c6 0106 	strd	r0, r1, [r6, #24]
 800575c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005760:	2800      	cmp	r0, #0
 8005762:	d002      	beq.n	800576a <??zcl_reporting_save_curr_val_6>
 8005764:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005768:	e006      	b.n	8005778 <??zcl_reporting_save_curr_val_1>

0800576a <??zcl_reporting_save_curr_val_6>:
 800576a:	2300      	movs	r3, #0
 800576c:	464a      	mov	r2, r9
 800576e:	0021      	movs	r1, r4
 8005770:	0038      	movs	r0, r7
 8005772:	f00f fd8b 	bl	801528c <zb_heap_free>
 8005776:	2000      	movs	r0, #0

08005778 <??zcl_reporting_save_curr_val_1>:
 8005778:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0800577c <zcl_reporting_create_new>:
 800577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	0006      	movs	r6, r0
 8005782:	000f      	movs	r7, r1
 8005784:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8005788:	2200      	movs	r2, #0
 800578a:	89b9      	ldrh	r1, [r7, #12]
 800578c:	0030      	movs	r0, r6
 800578e:	f7ff ff30 	bl	80055f2 <zcl_reporting_find>
 8005792:	0005      	movs	r5, r0
 8005794:	2d00      	cmp	r5, #0
 8005796:	d001      	beq.n	800579c <??zcl_reporting_create_new_0>
 8005798:	0028      	movs	r0, r5
 800579a:	e023      	b.n	80057e4 <??zcl_reporting_create_new_1>

0800579c <??zcl_reporting_create_new_0>:
 800579c:	2300      	movs	r3, #0
 800579e:	a212      	add	r2, pc, #72	; (adr r2, 80057e8 <??DataTable7>)
 80057a0:	2138      	movs	r1, #56	; 0x38
 80057a2:	4640      	mov	r0, r8
 80057a4:	f00f fd63 	bl	801526e <zb_heap_alloc>
 80057a8:	0004      	movs	r4, r0
 80057aa:	2c00      	cmp	r4, #0
 80057ac:	d101      	bne.n	80057b2 <??zcl_reporting_create_new_2>
 80057ae:	2000      	movs	r0, #0
 80057b0:	e018      	b.n	80057e4 <??zcl_reporting_create_new_1>

080057b2 <??zcl_reporting_create_new_2>:
 80057b2:	2538      	movs	r5, #56	; 0x38
 80057b4:	46b9      	mov	r9, r7
 80057b6:	46a2      	mov	sl, r4
 80057b8:	002a      	movs	r2, r5
 80057ba:	4649      	mov	r1, r9
 80057bc:	4650      	mov	r0, sl
 80057be:	f012 f94f 	bl	8017a60 <__aeabi_memcpy>
 80057c2:	6024      	str	r4, [r4, #0]
 80057c4:	6064      	str	r4, [r4, #4]
 80057c6:	f116 0030 	adds.w	r0, r6, #48	; 0x30
 80057ca:	6020      	str	r0, [r4, #0]
 80057cc:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80057ce:	6060      	str	r0, [r4, #4]
 80057d0:	6820      	ldr	r0, [r4, #0]
 80057d2:	6044      	str	r4, [r0, #4]
 80057d4:	6860      	ldr	r0, [r4, #4]
 80057d6:	6004      	str	r4, [r0, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	0021      	movs	r1, r4
 80057dc:	4640      	mov	r0, r8
 80057de:	f000 f895 	bl	800590c <zcl_reporting_reset_defaults>
 80057e2:	0020      	movs	r0, r4

080057e4 <??zcl_reporting_create_new_1>:
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080057e8 <??DataTable7>:
 80057e8:	0000 0000                                   ....

080057ec <zcl_reporting_delete>:
 80057ec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80057ee:	0004      	movs	r4, r0
 80057f0:	68a5      	ldr	r5, [r4, #8]
 80057f2:	68ae      	ldr	r6, [r5, #8]
 80057f4:	2000      	movs	r0, #0
 80057f6:	f88d 0000 	strb.w	r0, [sp]
 80057fa:	6860      	ldr	r0, [r4, #4]
 80057fc:	6821      	ldr	r1, [r4, #0]
 80057fe:	6048      	str	r0, [r1, #4]
 8005800:	6820      	ldr	r0, [r4, #0]
 8005802:	6861      	ldr	r1, [r4, #4]
 8005804:	6008      	str	r0, [r1, #0]
 8005806:	6024      	str	r4, [r4, #0]
 8005808:	6064      	str	r4, [r4, #4]
 800580a:	2300      	movs	r3, #0
 800580c:	a26c      	add	r2, pc, #432	; (adr r2, 80059c0 <??DataTable9_1>)
 800580e:	0021      	movs	r1, r4
 8005810:	0030      	movs	r0, r6
 8005812:	f00f fd3b 	bl	801528c <zb_heap_free>
 8005816:	2301      	movs	r3, #1
 8005818:	466a      	mov	r2, sp
 800581a:	f240 410c 	movw	r1, #1036	; 0x40c
 800581e:	0030      	movs	r0, r6
 8005820:	f00f f940 	bl	8014aa4 <ZbNwkGet>
 8005824:	2800      	cmp	r0, #0
 8005826:	d002      	beq.n	800582e <??zcl_reporting_delete_0>
 8005828:	2000      	movs	r0, #0
 800582a:	f88d 0000 	strb.w	r0, [sp]

0800582e <??zcl_reporting_delete_0>:
 800582e:	f89d 0000 	ldrb.w	r0, [sp]
 8005832:	2800      	cmp	r0, #0
 8005834:	d103      	bne.n	800583e <??zcl_reporting_delete_1>
 8005836:	21c8      	movs	r1, #200	; 0xc8
 8005838:	0028      	movs	r0, r5
 800583a:	f7ff fb84 	bl	8004f46 <zcl_report_kick>

0800583e <??zcl_reporting_delete_1>:
 800583e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08005840 <zcl_cluster_attr_report_delete>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	0005      	movs	r5, r0
 8005844:	000e      	movs	r6, r1
 8005846:	0017      	movs	r7, r2
 8005848:	003a      	movs	r2, r7
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	0031      	movs	r1, r6
 800584e:	b289      	uxth	r1, r1
 8005850:	0028      	movs	r0, r5
 8005852:	f7ff fece 	bl	80055f2 <zcl_reporting_find>
 8005856:	0004      	movs	r4, r0
 8005858:	2c00      	cmp	r4, #0
 800585a:	d101      	bne.n	8005860 <??zcl_cluster_attr_report_delete_0>
 800585c:	2000      	movs	r0, #0
 800585e:	e003      	b.n	8005868 <??zcl_cluster_attr_report_delete_1>

08005860 <??zcl_cluster_attr_report_delete_0>:
 8005860:	0020      	movs	r0, r4
 8005862:	f7ff ffc3 	bl	80057ec <zcl_reporting_delete>
 8005866:	2001      	movs	r0, #1

08005868 <??zcl_cluster_attr_report_delete_1>:
 8005868:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800586a <zcl_reporting_disable>:
 800586a:	b538      	push	{r3, r4, r5, lr}
 800586c:	0004      	movs	r4, r0
 800586e:	68a0      	ldr	r0, [r4, #8]
 8005870:	6885      	ldr	r5, [r0, #8]
 8005872:	2000      	movs	r0, #0
 8005874:	f88d 0000 	strb.w	r0, [sp]
 8005878:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800587c:	8460      	strh	r0, [r4, #34]	; 0x22
 800587e:	2000      	movs	r0, #0
 8005880:	8420      	strh	r0, [r4, #32]
 8005882:	2301      	movs	r3, #1
 8005884:	466a      	mov	r2, sp
 8005886:	f240 410c 	movw	r1, #1036	; 0x40c
 800588a:	0028      	movs	r0, r5
 800588c:	f00f f90a 	bl	8014aa4 <ZbNwkGet>
 8005890:	2800      	cmp	r0, #0
 8005892:	d002      	beq.n	800589a <??zcl_reporting_disable_0>
 8005894:	2000      	movs	r0, #0
 8005896:	f88d 0000 	strb.w	r0, [sp]

0800589a <??zcl_reporting_disable_0>:
 800589a:	f89d 0000 	ldrb.w	r0, [sp]
 800589e:	2800      	cmp	r0, #0
 80058a0:	d103      	bne.n	80058aa <??zcl_reporting_disable_1>
 80058a2:	21c8      	movs	r1, #200	; 0xc8
 80058a4:	68a0      	ldr	r0, [r4, #8]
 80058a6:	f7ff fb4e 	bl	8004f46 <zcl_report_kick>

080058aa <??zcl_reporting_disable_1>:
 80058aa:	bd31      	pop	{r0, r4, r5, pc}

080058ac <zcl_reporting_check_default_intvl>:
 80058ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058b0:	880a      	ldrh	r2, [r1, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d00e      	beq.n	80058d4 <??zcl_reporting_check_default_intvl_0>
 80058b6:	880a      	ldrh	r2, [r1, #0]
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	d00b      	beq.n	80058d4 <??zcl_reporting_check_default_intvl_0>
 80058bc:	880a      	ldrh	r2, [r1, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d102      	bne.n	80058c8 <??zcl_reporting_check_default_intvl_1>
 80058c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058c6:	800a      	strh	r2, [r1, #0]

080058c8 <??zcl_reporting_check_default_intvl_1>:
 80058c8:	880a      	ldrh	r2, [r1, #0]
 80058ca:	8803      	ldrh	r3, [r0, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d201      	bcs.n	80058d4 <??zcl_reporting_check_default_intvl_0>
 80058d0:	2200      	movs	r2, #0
 80058d2:	8002      	strh	r2, [r0, #0]

080058d4 <??zcl_reporting_check_default_intvl_0>:
 80058d4:	4770      	bx	lr

080058d6 <zcl_reporting_config_attr_defaults>:
 80058d6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80058d8:	0004      	movs	r4, r0
 80058da:	000d      	movs	r5, r1
 80058dc:	0016      	movs	r6, r2
 80058de:	8aa8      	ldrh	r0, [r5, #20]
 80058e0:	f8ad 0002 	strh.w	r0, [sp, #2]
 80058e4:	8ae8      	ldrh	r0, [r5, #22]
 80058e6:	f8ad 0000 	strh.w	r0, [sp]
 80058ea:	4669      	mov	r1, sp
 80058ec:	f10d 0002 	add.w	r0, sp, #2
 80058f0:	f7ff ffdc 	bl	80058ac <zcl_reporting_check_default_intvl>
 80058f4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80058f8:	84b0      	strh	r0, [r6, #36]	; 0x24
 80058fa:	f8bd 0000 	ldrh.w	r0, [sp]
 80058fe:	84f0      	strh	r0, [r6, #38]	; 0x26
 8005900:	2200      	movs	r2, #0
 8005902:	0031      	movs	r1, r6
 8005904:	0020      	movs	r0, r4
 8005906:	f000 f801 	bl	800590c <zcl_reporting_reset_defaults>
 800590a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

0800590c <zcl_reporting_reset_defaults>:
 800590c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800590e:	0004      	movs	r4, r0
 8005910:	000d      	movs	r5, r1
 8005912:	0016      	movs	r6, r2
 8005914:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8005916:	8428      	strh	r0, [r5, #32]
 8005918:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 800591a:	8468      	strh	r0, [r5, #34]	; 0x22
 800591c:	8c28      	ldrh	r0, [r5, #32]
 800591e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005922:	4288      	cmp	r0, r1
 8005924:	d106      	bne.n	8005934 <??zcl_reporting_reset_defaults_0>
 8005926:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8005928:	2800      	cmp	r0, #0
 800592a:	d103      	bne.n	8005934 <??zcl_reporting_reset_defaults_0>
 800592c:	203d      	movs	r0, #61	; 0x3d
 800592e:	8468      	strh	r0, [r5, #34]	; 0x22
 8005930:	2000      	movs	r0, #0
 8005932:	8428      	strh	r0, [r5, #32]

08005934 <??zcl_reporting_reset_defaults_0>:
 8005934:	ed95 0b0c 	vldr	d0, [r5, #48]	; 0x30
 8005938:	ed85 0b0a 	vstr	d0, [r5, #40]	; 0x28
 800593c:	0020      	movs	r0, r4
 800593e:	f00f f99c 	bl	8014c7a <ZbZclUptime>
 8005942:	6128      	str	r0, [r5, #16]
 8005944:	0030      	movs	r0, r6
 8005946:	b2c0      	uxtb	r0, r0
 8005948:	2800      	cmp	r0, #0
 800594a:	d013      	beq.n	8005974 <??zcl_reporting_reset_defaults_1>
 800594c:	2301      	movs	r3, #1
 800594e:	466a      	mov	r2, sp
 8005950:	f240 410c 	movw	r1, #1036	; 0x40c
 8005954:	0020      	movs	r0, r4
 8005956:	f00f f8a5 	bl	8014aa4 <ZbNwkGet>
 800595a:	2800      	cmp	r0, #0
 800595c:	d002      	beq.n	8005964 <??zcl_reporting_reset_defaults_2>
 800595e:	2000      	movs	r0, #0
 8005960:	f88d 0000 	strb.w	r0, [sp]

08005964 <??zcl_reporting_reset_defaults_2>:
 8005964:	f89d 0000 	ldrb.w	r0, [sp]
 8005968:	2800      	cmp	r0, #0
 800596a:	d103      	bne.n	8005974 <??zcl_reporting_reset_defaults_1>
 800596c:	21c8      	movs	r1, #200	; 0xc8
 800596e:	68a8      	ldr	r0, [r5, #8]
 8005970:	f7ff fae9 	bl	8004f46 <zcl_report_kick>

08005974 <??zcl_reporting_reset_defaults_1>:
 8005974:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08005976 <zcl_reporting_epsilon_default>:
 8005976:	b538      	push	{r3, r4, r5, lr}
 8005978:	0004      	movs	r4, r0
 800597a:	000d      	movs	r5, r1
 800597c:	0028      	movs	r0, r5
 800597e:	b2c0      	uxtb	r0, r0
 8005980:	2838      	cmp	r0, #56	; 0x38
 8005982:	db09      	blt.n	8005998 <??zcl_reporting_epsilon_default_0>
 8005984:	0028      	movs	r0, r5
 8005986:	b2c0      	uxtb	r0, r0
 8005988:	283b      	cmp	r0, #59	; 0x3b
 800598a:	da05      	bge.n	8005998 <??zcl_reporting_epsilon_default_0>
 800598c:	2000      	movs	r0, #0
 800598e:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	; 8006560 <??DataTable11>
 8005992:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8005996:	e00f      	b.n	80059b8 <??zcl_reporting_epsilon_default_1>

08005998 <??zcl_reporting_epsilon_default_0>:
 8005998:	0028      	movs	r0, r5
 800599a:	b2c0      	uxtb	r0, r0
 800599c:	f7ff f82a 	bl	80049f4 <ZbZclAttrIsAnalog>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d005      	beq.n	80059b0 <??zcl_reporting_epsilon_default_2>
 80059a4:	2000      	movs	r0, #0
 80059a6:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	; 8006560 <??DataTable11>
 80059aa:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 80059ae:	e003      	b.n	80059b8 <??zcl_reporting_epsilon_default_1>

080059b0 <??zcl_reporting_epsilon_default_2>:
 80059b0:	2000      	movs	r0, #0
 80059b2:	2100      	movs	r1, #0
 80059b4:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

080059b8 <??zcl_reporting_epsilon_default_1>:
 80059b8:	bd31      	pop	{r0, r4, r5, pc}
	...

080059bc <??DataTable9>:
 80059bc:	4cb1 0800                                   .L..

080059c0 <??DataTable9_1>:
 80059c0:	0000 0000                                   ....

080059c4 <??DataTable9_2>:
 80059c4:	00c4 2000                                   ... 

080059c8 <??DataTable9_3>:
 80059c8:	4c9d 0800                                   .L..

080059cc <??DataTable9_4>:
 80059cc:	ee80 0036                                   ..6.

080059d0 <zcl_reporting_epsilon_check>:
 80059d0:	b510      	push	{r4, lr}
 80059d2:	0004      	movs	r4, r0
 80059d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80059d8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80059da:	4281      	cmp	r1, r0
 80059dc:	d101      	bne.n	80059e2 <??zcl_reporting_epsilon_check_0>
 80059de:	2001      	movs	r0, #1
 80059e0:	e049      	b.n	8005a76 <??zcl_reporting_epsilon_check_1>

080059e2 <??zcl_reporting_epsilon_check_0>:
 80059e2:	8c21      	ldrh	r1, [r4, #32]
 80059e4:	4281      	cmp	r1, r0
 80059e6:	d104      	bne.n	80059f2 <??zcl_reporting_epsilon_check_2>
 80059e8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d101      	bne.n	80059f2 <??zcl_reporting_epsilon_check_2>
 80059ee:	2001      	movs	r0, #1
 80059f0:	e041      	b.n	8005a76 <??zcl_reporting_epsilon_check_1>

080059f2 <??zcl_reporting_epsilon_check_2>:
 80059f2:	7ba0      	ldrb	r0, [r4, #14]
 80059f4:	2838      	cmp	r0, #56	; 0x38
 80059f6:	db1d      	blt.n	8005a34 <??zcl_reporting_epsilon_check_3>
 80059f8:	7ba0      	ldrb	r0, [r4, #14]
 80059fa:	283b      	cmp	r0, #59	; 0x3b
 80059fc:	da1a      	bge.n	8005a34 <??zcl_reporting_epsilon_check_3>
 80059fe:	8c20      	ldrh	r0, [r4, #32]
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d108      	bne.n	8005a16 <??zcl_reporting_epsilon_check_4>
 8005a04:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8005a08:	2000      	movs	r0, #0
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	f002 fc38 	bl	8008280 <__aeabi_cdcmpeq>
 8005a10:	d101      	bne.n	8005a16 <??zcl_reporting_epsilon_check_4>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e02f      	b.n	8005a76 <??zcl_reporting_epsilon_check_1>

08005a16 <??zcl_reporting_epsilon_check_4>:
 8005a16:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f002 fc2f 	bl	8008280 <__aeabi_cdcmpeq>
 8005a22:	d205      	bcs.n	8005a30 <??zcl_reporting_epsilon_check_5>
 8005a24:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8005a28:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005a2c:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08005a30 <??zcl_reporting_epsilon_check_5>:
 8005a30:	2001      	movs	r0, #1
 8005a32:	e020      	b.n	8005a76 <??zcl_reporting_epsilon_check_1>

08005a34 <??zcl_reporting_epsilon_check_3>:
 8005a34:	7ba0      	ldrb	r0, [r4, #14]
 8005a36:	f7fe ffdd 	bl	80049f4 <ZbZclAttrIsAnalog>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d01a      	beq.n	8005a74 <??zcl_reporting_epsilon_check_6>
 8005a3e:	8c20      	ldrh	r0, [r4, #32]
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d108      	bne.n	8005a56 <??zcl_reporting_epsilon_check_7>
 8005a44:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8005a48:	2000      	movs	r0, #0
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	f002 fc18 	bl	8008280 <__aeabi_cdcmpeq>
 8005a50:	d101      	bne.n	8005a56 <??zcl_reporting_epsilon_check_7>
 8005a52:	2000      	movs	r0, #0
 8005a54:	e00f      	b.n	8005a76 <??zcl_reporting_epsilon_check_1>

08005a56 <??zcl_reporting_epsilon_check_7>:
 8005a56:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f002 fc0f 	bl	8008280 <__aeabi_cdcmpeq>
 8005a62:	d205      	bcs.n	8005a70 <??zcl_reporting_epsilon_check_8>
 8005a64:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8005a68:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005a6c:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08005a70 <??zcl_reporting_epsilon_check_8>:
 8005a70:	2001      	movs	r0, #1
 8005a72:	e000      	b.n	8005a76 <??zcl_reporting_epsilon_check_1>

08005a74 <??zcl_reporting_epsilon_check_6>:
 8005a74:	2001      	movs	r0, #1

08005a76 <??zcl_reporting_epsilon_check_1>:
 8005a76:	bd10      	pop	{r4, pc}

08005a78 <zcl_reporting_create_default_reports>:
 8005a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	b090      	sub	sp, #64	; 0x40
 8005a7e:	0005      	movs	r5, r0
 8005a80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005a82:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8005a86:	4288      	cmp	r0, r1
 8005a88:	d001      	beq.n	8005a8e <??zcl_reporting_create_default_reports_0>
 8005a8a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005a8c:	e000      	b.n	8005a90 <??zcl_reporting_create_default_reports_1>

08005a8e <??zcl_reporting_create_default_reports_0>:
 8005a8e:	2400      	movs	r4, #0

08005a90 <??zcl_reporting_create_default_reports_1>:
 8005a90:	2c00      	cmp	r4, #0
 8005a92:	d054      	beq.n	8005b3e <??zcl_reporting_create_default_reports_2>
 8005a94:	0026      	movs	r6, r4
 8005a96:	68b0      	ldr	r0, [r6, #8]
 8005a98:	7900      	ldrb	r0, [r0, #4]
 8005a9a:	0780      	lsls	r0, r0, #30
 8005a9c:	d546      	bpl.n	8005b2c <??zcl_reporting_create_default_reports_3>

08005a9e <??zcl_reporting_create_default_reports_4>:
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	68b0      	ldr	r0, [r6, #8]
 8005aa2:	8801      	ldrh	r1, [r0, #0]
 8005aa4:	0028      	movs	r0, r5
 8005aa6:	f7ff fda4 	bl	80055f2 <zcl_reporting_find>
 8005aaa:	9001      	str	r0, [sp, #4]
 8005aac:	9801      	ldr	r0, [sp, #4]
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d13c      	bne.n	8005b2c <??zcl_reporting_create_default_reports_3>

08005ab2 <??zcl_reporting_create_default_reports_5>:
 8005ab2:	2738      	movs	r7, #56	; 0x38
 8005ab4:	f05f 0800 	movs.w	r8, #0
 8005ab8:	f10d 0908 	add.w	r9, sp, #8
 8005abc:	4642      	mov	r2, r8
 8005abe:	0039      	movs	r1, r7
 8005ac0:	4648      	mov	r0, r9
 8005ac2:	f001 ff09 	bl	80078d8 <__aeabi_memset>
 8005ac6:	68b0      	ldr	r0, [r6, #8]
 8005ac8:	8800      	ldrh	r0, [r0, #0]
 8005aca:	f8ad 0014 	strh.w	r0, [sp, #20]
 8005ace:	9504      	str	r5, [sp, #16]
 8005ad0:	68b0      	ldr	r0, [r6, #8]
 8005ad2:	7880      	ldrb	r0, [r0, #2]
 8005ad4:	f88d 0016 	strb.w	r0, [sp, #22]
 8005ad8:	68b0      	ldr	r0, [r6, #8]
 8005ada:	7881      	ldrb	r1, [r0, #2]
 8005adc:	a802      	add	r0, sp, #8
 8005ade:	f7ff ff4a 	bl	8005976 <zcl_reporting_epsilon_default>
 8005ae2:	f05f 0908 	movs.w	r9, #8
 8005ae6:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8005aea:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8005aee:	464a      	mov	r2, r9
 8005af0:	4651      	mov	r1, sl
 8005af2:	4658      	mov	r0, fp
 8005af4:	f011 ffb4 	bl	8017a60 <__aeabi_memcpy>
 8005af8:	aa02      	add	r2, sp, #8
 8005afa:	0031      	movs	r1, r6
 8005afc:	68a8      	ldr	r0, [r5, #8]
 8005afe:	f7ff feea 	bl	80058d6 <zcl_reporting_config_attr_defaults>
 8005b02:	a902      	add	r1, sp, #8
 8005b04:	0028      	movs	r0, r5
 8005b06:	f7ff fdc6 	bl	8005696 <zcl_reporting_save_curr_val>
 8005b0a:	f88d 0000 	strb.w	r0, [sp]
 8005b0e:	f89d 0000 	ldrb.w	r0, [sp]
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d002      	beq.n	8005b1c <??zcl_reporting_create_default_reports_6>
 8005b16:	f89d 0000 	ldrb.w	r0, [sp]
 8005b1a:	e011      	b.n	8005b40 <??zcl_reporting_create_default_reports_7>

08005b1c <??zcl_reporting_create_default_reports_6>:
 8005b1c:	a902      	add	r1, sp, #8
 8005b1e:	0028      	movs	r0, r5
 8005b20:	f7ff fe2c 	bl	800577c <zcl_reporting_create_new>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d101      	bne.n	8005b2c <??zcl_reporting_create_default_reports_3>
 8005b28:	2089      	movs	r0, #137	; 0x89
 8005b2a:	e009      	b.n	8005b40 <??zcl_reporting_create_default_reports_7>

08005b2c <??zcl_reporting_create_default_reports_3>:
 8005b2c:	6820      	ldr	r0, [r4, #0]
 8005b2e:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8005b32:	4288      	cmp	r0, r1
 8005b34:	d001      	beq.n	8005b3a <??zcl_reporting_create_default_reports_8>
 8005b36:	6824      	ldr	r4, [r4, #0]
 8005b38:	e7aa      	b.n	8005a90 <??zcl_reporting_create_default_reports_1>

08005b3a <??zcl_reporting_create_default_reports_8>:
 8005b3a:	2400      	movs	r4, #0
 8005b3c:	e7a8      	b.n	8005a90 <??zcl_reporting_create_default_reports_1>

08005b3e <??zcl_reporting_create_default_reports_2>:
 8005b3e:	2000      	movs	r0, #0

08005b40 <??zcl_reporting_create_default_reports_7>:
 8005b40:	b011      	add	sp, #68	; 0x44
 8005b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b46 <ZbZclHandleConfigReport>:
 8005b46:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	b0c8      	sub	sp, #288	; 0x120
 8005b4c:	0004      	movs	r4, r0
 8005b4e:	0015      	movs	r5, r2
 8005b50:	68a0      	ldr	r0, [r4, #8]
 8005b52:	9001      	str	r0, [sp, #4]
 8005b54:	2700      	movs	r7, #0
 8005b56:	2000      	movs	r0, #0
 8005b58:	f88d 0003 	strb.w	r0, [sp, #3]
 8005b5c:	2600      	movs	r6, #0
 8005b5e:	2000      	movs	r0, #0
 8005b60:	f88d 0002 	strb.w	r0, [sp, #2]
 8005b64:	f05f 0808 	movs.w	r8, #8
 8005b68:	f05f 0900 	movs.w	r9, #0
 8005b6c:	f10d 0a0c 	add.w	sl, sp, #12
 8005b70:	464a      	mov	r2, r9
 8005b72:	4641      	mov	r1, r8
 8005b74:	4650      	mov	r0, sl
 8005b76:	f001 feaf 	bl	80078d8 <__aeabi_memset>
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	f88d 000c 	strb.w	r0, [sp, #12]
 8005b80:	9848      	ldr	r0, [sp, #288]	; 0x120
 8005b82:	7840      	ldrb	r0, [r0, #1]
 8005b84:	f88d 000d 	strb.w	r0, [sp, #13]
 8005b88:	9848      	ldr	r0, [sp, #288]	; 0x120
 8005b8a:	7880      	ldrb	r0, [r0, #2]
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d003      	beq.n	8005b98 <??ZbZclHandleConfigReport_0>
 8005b90:	2000      	movs	r0, #0
 8005b92:	f88d 000e 	strb.w	r0, [sp, #14]
 8005b96:	e002      	b.n	8005b9e <??ZbZclHandleConfigReport_1>

08005b98 <??ZbZclHandleConfigReport_0>:
 8005b98:	2001      	movs	r0, #1
 8005b9a:	f88d 000e 	strb.w	r0, [sp, #14]

08005b9e <??ZbZclHandleConfigReport_1>:
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	f88d 000f 	strb.w	r0, [sp, #15]
 8005ba4:	9848      	ldr	r0, [sp, #288]	; 0x120
 8005ba6:	8880      	ldrh	r0, [r0, #4]
 8005ba8:	f8ad 0010 	strh.w	r0, [sp, #16]
 8005bac:	9848      	ldr	r0, [sp, #288]	; 0x120
 8005bae:	7980      	ldrb	r0, [r0, #6]
 8005bb0:	f88d 0012 	strb.w	r0, [sp, #18]
 8005bb4:	2007      	movs	r0, #7
 8005bb6:	f88d 0013 	strb.w	r0, [sp, #19]
 8005bba:	2205      	movs	r2, #5
 8005bbc:	a916      	add	r1, sp, #88	; 0x58
 8005bbe:	a803      	add	r0, sp, #12
 8005bc0:	f7fb fee6 	bl	8001990 <ZbZclAppendHeader>
 8005bc4:	9005      	str	r0, [sp, #20]
 8005bc6:	9805      	ldr	r0, [sp, #20]
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d506      	bpl.n	8005bda <??ZbZclHandleConfigReport_2>
 8005bcc:	2380      	movs	r3, #128	; 0x80
 8005bce:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8005bd0:	0029      	movs	r1, r5
 8005bd2:	0020      	movs	r0, r4
 8005bd4:	f00f f948 	bl	8014e68 <ZbZclSendDefaultResponse>
 8005bd8:	e236      	b.n	8006048 <??ZbZclHandleConfigReport_3>

08005bda <??ZbZclHandleConfigReport_2>:
 8005bda:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8005bdc:	4286      	cmp	r6, r0
 8005bde:	f080 81b4 	bcs.w	8005f4a <??ZbZclHandleConfigReport_4>
 8005be2:	f05f 0900 	movs.w	r9, #0
 8005be6:	f05f 0838 	movs.w	r8, #56	; 0x38
 8005bea:	f05f 0a00 	movs.w	sl, #0
 8005bee:	f10d 0b18 	add.w	fp, sp, #24
 8005bf2:	4652      	mov	r2, sl
 8005bf4:	4641      	mov	r1, r8
 8005bf6:	4658      	mov	r0, fp
 8005bf8:	f001 fe6e 	bl	80078d8 <__aeabi_memset>
 8005bfc:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8005bfe:	1cf1      	adds	r1, r6, #3
 8005c00:	4288      	cmp	r0, r1
 8005c02:	d206      	bcs.n	8005c12 <??ZbZclHandleConfigReport_5>
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8005c08:	0029      	movs	r1, r5
 8005c0a:	0020      	movs	r0, r4
 8005c0c:	f00f f92c 	bl	8014e68 <ZbZclSendDefaultResponse>
 8005c10:	e21a      	b.n	8006048 <??ZbZclHandleConfigReport_3>

08005c12 <??ZbZclHandleConfigReport_5>:
 8005c12:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005c14:	5d80      	ldrb	r0, [r0, r6]
 8005c16:	f88d 0001 	strb.w	r0, [sp, #1]
 8005c1a:	1c76      	adds	r6, r6, #1
 8005c1c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005c1e:	4430      	add	r0, r6
 8005c20:	f7fd fe3c 	bl	800389c <pletoh16>
 8005c24:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8005c28:	1cb6      	adds	r6, r6, #2
 8005c2a:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	f040 8159 	bne.w	8005ee6 <??ZbZclHandleConfigReport_6>
 8005c34:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8005c36:	1cb1      	adds	r1, r6, #2
 8005c38:	4288      	cmp	r0, r1
 8005c3a:	d206      	bcs.n	8005c4a <??ZbZclHandleConfigReport_7>
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8005c40:	0029      	movs	r1, r5
 8005c42:	0020      	movs	r0, r4
 8005c44:	f00f f910 	bl	8014e68 <ZbZclSendDefaultResponse>
 8005c48:	e1fe      	b.n	8006048 <??ZbZclHandleConfigReport_3>

08005c4a <??ZbZclHandleConfigReport_7>:
 8005c4a:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8005c4c:	1c71      	adds	r1, r6, #1
 8005c4e:	4288      	cmp	r0, r1
 8005c50:	f0c0 808f 	bcc.w	8005d72 <??ZbZclHandleConfigReport_19>

08005c54 <??ZbZclHandleConfigReport_9>:
 8005c54:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005c56:	5d80      	ldrb	r0, [r0, r6]
 8005c58:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8005c5c:	1c76      	adds	r6, r6, #1
 8005c5e:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8005c60:	1cb1      	adds	r1, r6, #2
 8005c62:	4288      	cmp	r0, r1
 8005c64:	f0c0 8085 	bcc.w	8005d72 <??ZbZclHandleConfigReport_19>

08005c68 <??ZbZclHandleConfigReport_10>:
 8005c68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005c6a:	4430      	add	r0, r6
 8005c6c:	f7fd fe16 	bl	800389c <pletoh16>
 8005c70:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8005c74:	1cb6      	adds	r6, r6, #2
 8005c76:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8005c78:	1cb1      	adds	r1, r6, #2
 8005c7a:	4288      	cmp	r0, r1
 8005c7c:	d379      	bcc.n	8005d72 <??ZbZclHandleConfigReport_19>

08005c7e <??ZbZclHandleConfigReport_11>:
 8005c7e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005c80:	4430      	add	r0, r6
 8005c82:	f7fd fe0b 	bl	800389c <pletoh16>
 8005c86:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8005c8a:	1cb6      	adds	r6, r6, #2
 8005c8c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8005c8e:	1c71      	adds	r1, r6, #1
 8005c90:	4288      	cmp	r0, r1
 8005c92:	d36e      	bcc.n	8005d72 <??ZbZclHandleConfigReport_19>

08005c94 <??ZbZclHandleConfigReport_12>:
 8005c94:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005c98:	2848      	cmp	r0, #72	; 0x48
 8005c9a:	d00b      	beq.n	8005cb4 <??ZbZclHandleConfigReport_13>
 8005c9c:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005ca0:	284c      	cmp	r0, #76	; 0x4c
 8005ca2:	d007      	beq.n	8005cb4 <??ZbZclHandleConfigReport_13>
 8005ca4:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005ca8:	2850      	cmp	r0, #80	; 0x50
 8005caa:	d003      	beq.n	8005cb4 <??ZbZclHandleConfigReport_13>
 8005cac:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005cb0:	2851      	cmp	r0, #81	; 0x51
 8005cb2:	d103      	bne.n	8005cbc <??ZbZclHandleConfigReport_14>

08005cb4 <??ZbZclHandleConfigReport_13>:
 8005cb4:	208c      	movs	r0, #140	; 0x8c
 8005cb6:	f88d 0000 	strb.w	r0, [sp]
 8005cba:	e12e      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005cbc <??ZbZclHandleConfigReport_14>:
 8005cbc:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005cc0:	2838      	cmp	r0, #56	; 0x38
 8005cc2:	db29      	blt.n	8005d18 <??ZbZclHandleConfigReport_16>
 8005cc4:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005cc8:	283b      	cmp	r0, #59	; 0x3b
 8005cca:	da25      	bge.n	8005d18 <??ZbZclHandleConfigReport_16>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8005cd0:	1b92      	subs	r2, r2, r6
 8005cd2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005cd4:	eb00 0106 	add.w	r1, r0, r6
 8005cd8:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005cdc:	f7fe fdd9 	bl	8004892 <ZbZclAttrParseLength>
 8005ce0:	9002      	str	r0, [sp, #8]
 8005ce2:	9802      	ldr	r0, [sp, #8]
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d503      	bpl.n	8005cf0 <??ZbZclHandleConfigReport_17>
 8005ce8:	2085      	movs	r0, #133	; 0x85
 8005cea:	f88d 0000 	strb.w	r0, [sp]
 8005cee:	e114      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005cf0 <??ZbZclHandleConfigReport_17>:
 8005cf0:	466a      	mov	r2, sp
 8005cf2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005cf4:	eb00 0106 	add.w	r1, r0, r6
 8005cf8:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005cfc:	f001 fa9d 	bl	800723a <ZbZclParseFloat>
 8005d00:	ed8d 0b10 	vstr	d0, [sp, #64]	; 0x40
 8005d04:	f89d 0000 	ldrb.w	r0, [sp]
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f040 8106 	bne.w	8005f1a <??ZbZclHandleConfigReport_15>

08005d0e <??ZbZclHandleConfigReport_18>:
 8005d0e:	9802      	ldr	r0, [sp, #8]
 8005d10:	1986      	adds	r6, r0, r6
 8005d12:	2001      	movs	r0, #1
 8005d14:	4681      	mov	r9, r0
 8005d16:	e02c      	b.n	8005d72 <??ZbZclHandleConfigReport_19>

08005d18 <??ZbZclHandleConfigReport_16>:
 8005d18:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005d1c:	f7fe fe6a 	bl	80049f4 <ZbZclAttrIsAnalog>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d026      	beq.n	8005d72 <??ZbZclHandleConfigReport_19>
 8005d24:	2300      	movs	r3, #0
 8005d26:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8005d28:	1b92      	subs	r2, r2, r6
 8005d2a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005d2c:	eb00 0106 	add.w	r1, r0, r6
 8005d30:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005d34:	f7fe fdad 	bl	8004892 <ZbZclAttrParseLength>
 8005d38:	9002      	str	r0, [sp, #8]
 8005d3a:	9802      	ldr	r0, [sp, #8]
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d503      	bpl.n	8005d48 <??ZbZclHandleConfigReport_20>
 8005d40:	2085      	movs	r0, #133	; 0x85
 8005d42:	f88d 0000 	strb.w	r0, [sp]
 8005d46:	e0e8      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005d48 <??ZbZclHandleConfigReport_20>:
 8005d48:	466a      	mov	r2, sp
 8005d4a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005d4c:	eb00 0106 	add.w	r1, r0, r6
 8005d50:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005d54:	f7fa fade 	bl	8000314 <ZbZclParseInteger>
 8005d58:	f002 f804 	bl	8007d64 <__aeabi_l2d>
 8005d5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d60:	f89d 0000 	ldrb.w	r0, [sp]
 8005d64:	2800      	cmp	r0, #0
 8005d66:	f040 80d8 	bne.w	8005f1a <??ZbZclHandleConfigReport_15>

08005d6a <??ZbZclHandleConfigReport_21>:
 8005d6a:	9802      	ldr	r0, [sp, #8]
 8005d6c:	1986      	adds	r6, r0, r6
 8005d6e:	2001      	movs	r0, #1
 8005d70:	4681      	mov	r9, r0

08005d72 <??ZbZclHandleConfigReport_19>:
 8005d72:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8005d76:	0020      	movs	r0, r4
 8005d78:	f7fd fe5f 	bl	8003a3a <ZbZclAttrFind>
 8005d7c:	4682      	mov	sl, r0
 8005d7e:	f1ba 0f00 	cmp.w	sl, #0
 8005d82:	d103      	bne.n	8005d8c <??ZbZclHandleConfigReport_22>
 8005d84:	2086      	movs	r0, #134	; 0x86
 8005d86:	f88d 0000 	strb.w	r0, [sp]
 8005d8a:	e0c6      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005d8c <??ZbZclHandleConfigReport_22>:
 8005d8c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8005d90:	8880      	ldrh	r0, [r0, #4]
 8005d92:	0400      	lsls	r0, r0, #16
 8005d94:	d503      	bpl.n	8005d9e <??ZbZclHandleConfigReport_23>
 8005d96:	2086      	movs	r0, #134	; 0x86
 8005d98:	f88d 0000 	strb.w	r0, [sp]
 8005d9c:	e0bd      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005d9e <??ZbZclHandleConfigReport_23>:
 8005d9e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8005da2:	7900      	ldrb	r0, [r0, #4]
 8005da4:	0780      	lsls	r0, r0, #30
 8005da6:	d403      	bmi.n	8005db0 <??ZbZclHandleConfigReport_24>
 8005da8:	208c      	movs	r0, #140	; 0x8c
 8005daa:	f88d 0000 	strb.w	r0, [sp]
 8005dae:	e0b4      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005db0 <??ZbZclHandleConfigReport_24>:
 8005db0:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8005db4:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 8005db8:	4558      	cmp	r0, fp
 8005dba:	d101      	bne.n	8005dc0 <??ZbZclHandleConfigReport_25>
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	4681      	mov	r9, r0

08005dc0 <??ZbZclHandleConfigReport_25>:
 8005dc0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005dc4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8005dc8:	0020      	movs	r0, r4
 8005dca:	f7ff fc12 	bl	80055f2 <zcl_reporting_find>
 8005dce:	4680      	mov	r8, r0
 8005dd0:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8005dd4:	4558      	cmp	r0, fp
 8005dd6:	d11b      	bne.n	8005e10 <??ZbZclHandleConfigReport_26>
 8005dd8:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d117      	bne.n	8005e10 <??ZbZclHandleConfigReport_26>
 8005de0:	2000      	movs	r0, #0
 8005de2:	4681      	mov	r9, r0
 8005de4:	f1b8 0f00 	cmp.w	r8, #0
 8005de8:	d00d      	beq.n	8005e06 <??ZbZclHandleConfigReport_27>
 8005dea:	f8b8 0024 	ldrh.w	r0, [r8, #36]	; 0x24
 8005dee:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8005df2:	f8b8 0026 	ldrh.w	r0, [r8, #38]	; 0x26
 8005df6:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	a906      	add	r1, sp, #24
 8005dfe:	9801      	ldr	r0, [sp, #4]
 8005e00:	f7ff fd84 	bl	800590c <zcl_reporting_reset_defaults>
 8005e04:	e004      	b.n	8005e10 <??ZbZclHandleConfigReport_26>

08005e06 <??ZbZclHandleConfigReport_27>:
 8005e06:	aa06      	add	r2, sp, #24
 8005e08:	4651      	mov	r1, sl
 8005e0a:	9801      	ldr	r0, [sp, #4]
 8005e0c:	f7ff fd63 	bl	80058d6 <zcl_reporting_config_attr_defaults>

08005e10 <??ZbZclHandleConfigReport_26>:
 8005e10:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005e14:	f8da 1008 	ldr.w	r1, [sl, #8]
 8005e18:	7889      	ldrb	r1, [r1, #2]
 8005e1a:	4288      	cmp	r0, r1
 8005e1c:	d003      	beq.n	8005e26 <??ZbZclHandleConfigReport_28>
 8005e1e:	208d      	movs	r0, #141	; 0x8d
 8005e20:	f88d 0000 	strb.w	r0, [sp]
 8005e24:	e079      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005e26 <??ZbZclHandleConfigReport_28>:
 8005e26:	f1b8 0f00 	cmp.w	r8, #0
 8005e2a:	d021      	beq.n	8005e70 <??ZbZclHandleConfigReport_29>
 8005e2c:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8005e30:	f8a8 0020 	strh.w	r0, [r8, #32]
 8005e34:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 8005e38:	f8a8 0022 	strh.w	r0, [r8, #34]	; 0x22
 8005e3c:	4648      	mov	r0, r9
 8005e3e:	b2c0      	uxtb	r0, r0
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d00c      	beq.n	8005e5e <??ZbZclHandleConfigReport_30>
 8005e44:	a806      	add	r0, sp, #24
 8005e46:	f7ff fdc3 	bl	80059d0 <zcl_reporting_epsilon_check>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d103      	bne.n	8005e56 <??ZbZclHandleConfigReport_31>
 8005e4e:	2085      	movs	r0, #133	; 0x85
 8005e50:	f88d 0000 	strb.w	r0, [sp]
 8005e54:	e061      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005e56 <??ZbZclHandleConfigReport_31>:
 8005e56:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8005e5a:	ed88 0b0a 	vstr	d0, [r8, #40]	; 0x28

08005e5e <??ZbZclHandleConfigReport_30>:
 8005e5e:	9801      	ldr	r0, [sp, #4]
 8005e60:	f00e ff0b 	bl	8014c7a <ZbZclUptime>
 8005e64:	f8c8 0010 	str.w	r0, [r8, #16]
 8005e68:	2001      	movs	r0, #1
 8005e6a:	f88d 0002 	strb.w	r0, [sp, #2]
 8005e6e:	e6b4      	b.n	8005bda <??ZbZclHandleConfigReport_2>

08005e70 <??ZbZclHandleConfigReport_29>:
 8005e70:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 8005e74:	4558      	cmp	r0, fp
 8005e76:	f43f aeb0 	beq.w	8005bda <??ZbZclHandleConfigReport_2>

08005e7a <??ZbZclHandleConfigReport_32>:
 8005e7a:	9408      	str	r4, [sp, #32]
 8005e7c:	4648      	mov	r0, r9
 8005e7e:	b2c0      	uxtb	r0, r0
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d008      	beq.n	8005e96 <??ZbZclHandleConfigReport_33>
 8005e84:	a806      	add	r0, sp, #24
 8005e86:	f7ff fda3 	bl	80059d0 <zcl_reporting_epsilon_check>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d108      	bne.n	8005ea0 <??ZbZclHandleConfigReport_34>
 8005e8e:	2085      	movs	r0, #133	; 0x85
 8005e90:	f88d 0000 	strb.w	r0, [sp]
 8005e94:	e041      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005e96 <??ZbZclHandleConfigReport_33>:
 8005e96:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 8005e9a:	a806      	add	r0, sp, #24
 8005e9c:	f7ff fd6b 	bl	8005976 <zcl_reporting_epsilon_default>

08005ea0 <??ZbZclHandleConfigReport_34>:
 8005ea0:	2008      	movs	r0, #8
 8005ea2:	9015      	str	r0, [sp, #84]	; 0x54
 8005ea4:	a810      	add	r0, sp, #64	; 0x40
 8005ea6:	9014      	str	r0, [sp, #80]	; 0x50
 8005ea8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8005eac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005eae:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005eb0:	4658      	mov	r0, fp
 8005eb2:	f011 fdd5 	bl	8017a60 <__aeabi_memcpy>
 8005eb6:	a906      	add	r1, sp, #24
 8005eb8:	0020      	movs	r0, r4
 8005eba:	f7ff fbec 	bl	8005696 <zcl_reporting_save_curr_val>
 8005ebe:	f88d 0000 	strb.w	r0, [sp]
 8005ec2:	f89d 0000 	ldrb.w	r0, [sp]
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d127      	bne.n	8005f1a <??ZbZclHandleConfigReport_15>

08005eca <??ZbZclHandleConfigReport_35>:
 8005eca:	a906      	add	r1, sp, #24
 8005ecc:	0020      	movs	r0, r4
 8005ece:	f7ff fc55 	bl	800577c <zcl_reporting_create_new>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d103      	bne.n	8005ede <??ZbZclHandleConfigReport_36>
 8005ed6:	2189      	movs	r1, #137	; 0x89
 8005ed8:	f88d 1000 	strb.w	r1, [sp]
 8005edc:	e01d      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005ede <??ZbZclHandleConfigReport_36>:
 8005ede:	2101      	movs	r1, #1
 8005ee0:	f88d 1002 	strb.w	r1, [sp, #2]
 8005ee4:	e679      	b.n	8005bda <??ZbZclHandleConfigReport_2>

08005ee6 <??ZbZclHandleConfigReport_6>:
 8005ee6:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8005eea:	2801      	cmp	r0, #1
 8005eec:	d10e      	bne.n	8005f0c <??ZbZclHandleConfigReport_37>
 8005eee:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8005ef0:	1cb1      	adds	r1, r6, #2
 8005ef2:	4288      	cmp	r0, r1
 8005ef4:	d206      	bcs.n	8005f04 <??ZbZclHandleConfigReport_38>
 8005ef6:	2380      	movs	r3, #128	; 0x80
 8005ef8:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8005efa:	0029      	movs	r1, r5
 8005efc:	0020      	movs	r0, r4
 8005efe:	f00e ffb3 	bl	8014e68 <ZbZclSendDefaultResponse>
 8005f02:	e0a1      	b.n	8006048 <??ZbZclHandleConfigReport_3>

08005f04 <??ZbZclHandleConfigReport_38>:
 8005f04:	208c      	movs	r0, #140	; 0x8c
 8005f06:	f88d 0000 	strb.w	r0, [sp]
 8005f0a:	e006      	b.n	8005f1a <??ZbZclHandleConfigReport_15>

08005f0c <??ZbZclHandleConfigReport_37>:
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8005f10:	0029      	movs	r1, r5
 8005f12:	0020      	movs	r0, r4
 8005f14:	f00e ffa8 	bl	8014e68 <ZbZclSendDefaultResponse>
 8005f18:	e096      	b.n	8006048 <??ZbZclHandleConfigReport_3>

08005f1a <??ZbZclHandleConfigReport_15>:
 8005f1a:	f89d 0000 	ldrb.w	r0, [sp]
 8005f1e:	f88d 0003 	strb.w	r0, [sp, #3]
 8005f22:	1d38      	adds	r0, r7, #4
 8005f24:	2837      	cmp	r0, #55	; 0x37
 8005f26:	d210      	bcs.n	8005f4a <??ZbZclHandleConfigReport_4>

08005f28 <??ZbZclHandleConfigReport_39>:
 8005f28:	a83a      	add	r0, sp, #232	; 0xe8
 8005f2a:	f89d 1000 	ldrb.w	r1, [sp]
 8005f2e:	55c1      	strb	r1, [r0, r7]
 8005f30:	1c7f      	adds	r7, r7, #1
 8005f32:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8005f36:	55c1      	strb	r1, [r0, r7]
 8005f38:	1c7f      	adds	r7, r7, #1
 8005f3a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8005f3e:	a83a      	add	r0, sp, #232	; 0xe8
 8005f40:	4438      	add	r0, r7
 8005f42:	f7fd fcf7 	bl	8003934 <putle16>
 8005f46:	1cbf      	adds	r7, r7, #2
 8005f48:	e647      	b.n	8005bda <??ZbZclHandleConfigReport_2>

08005f4a <??ZbZclHandleConfigReport_4>:
 8005f4a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d105      	bne.n	8005f5e <??ZbZclHandleConfigReport_40>
 8005f52:	2000      	movs	r0, #0
 8005f54:	2100      	movs	r1, #0
 8005f56:	aa3a      	add	r2, sp, #232	; 0xe8
 8005f58:	5411      	strb	r1, [r2, r0]
 8005f5a:	1c40      	adds	r0, r0, #1
 8005f5c:	0007      	movs	r7, r0

08005f5e <??ZbZclHandleConfigReport_40>:
 8005f5e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d127      	bne.n	8005fb6 <??ZbZclHandleConfigReport_41>
 8005f66:	f05f 0920 	movs.w	r9, #32
 8005f6a:	f05f 0800 	movs.w	r8, #0
 8005f6e:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 8005f72:	4642      	mov	r2, r8
 8005f74:	4649      	mov	r1, r9
 8005f76:	4650      	mov	r0, sl
 8005f78:	f001 fcae 	bl	80078d8 <__aeabi_memset>
 8005f7c:	9801      	ldr	r0, [sp, #4]
 8005f7e:	f00d ff99 	bl	8013eb4 <ZbExtendedAddress>
 8005f82:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8005f86:	8868      	ldrh	r0, [r5, #2]
 8005f88:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
 8005f8c:	89a0      	ldrh	r0, [r4, #12]
 8005f8e:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
 8005f92:	2003      	movs	r0, #3
 8005f94:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
 8005f98:	8a68      	ldrh	r0, [r5, #18]
 8005f9a:	f8ad 0072 	strh.w	r0, [sp, #114]	; 0x72
 8005f9e:	8ae8      	ldrh	r0, [r5, #22]
 8005fa0:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
 8005fa4:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 8005fa8:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8005fac:	aa30      	add	r2, sp, #192	; 0xc0
 8005fae:	a918      	add	r1, sp, #96	; 0x60
 8005fb0:	9801      	ldr	r0, [sp, #4]
 8005fb2:	f00e fadb 	bl	801456c <ZbApsmeBindReq>

08005fb6 <??ZbZclHandleConfigReport_41>:
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	a924      	add	r1, sp, #144	; 0x90
 8005fba:	0020      	movs	r0, r4
 8005fbc:	f7fa ff87 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8005fc0:	a824      	add	r0, sp, #144	; 0x90
 8005fc2:	f115 0110 	adds.w	r1, r5, #16
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	f011 fd4a 	bl	8017a60 <__aeabi_memcpy>
 8005fcc:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8005fd0:	f7fa ff15 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 8005fd4:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 8005fd8:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
 8005fdc:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8005fe0:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
 8005fea:	2000      	movs	r0, #0
 8005fec:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
 8005ff0:	a816      	add	r0, sp, #88	; 0x58
 8005ff2:	9020      	str	r0, [sp, #128]	; 0x80
 8005ff4:	a820      	add	r0, sp, #128	; 0x80
 8005ff6:	9905      	ldr	r1, [sp, #20]
 8005ff8:	6041      	str	r1, [r0, #4]
 8005ffa:	a93a      	add	r1, sp, #232	; 0xe8
 8005ffc:	6081      	str	r1, [r0, #8]
 8005ffe:	60c7      	str	r7, [r0, #12]
 8006000:	a820      	add	r0, sp, #128	; 0x80
 8006002:	902a      	str	r0, [sp, #168]	; 0xa8
 8006004:	2002      	movs	r0, #2
 8006006:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800600a:	2300      	movs	r3, #0
 800600c:	2200      	movs	r2, #0
 800600e:	a924      	add	r1, sp, #144	; 0x90
 8006010:	9801      	ldr	r0, [sp, #4]
 8006012:	f00e f98f 	bl	8014334 <ZbApsdeDataReqCallback>
 8006016:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800601a:	2800      	cmp	r0, #0
 800601c:	d014      	beq.n	8006048 <??ZbZclHandleConfigReport_3>
 800601e:	2301      	movs	r3, #1
 8006020:	f10d 0201 	add.w	r2, sp, #1
 8006024:	f240 410c 	movw	r1, #1036	; 0x40c
 8006028:	9801      	ldr	r0, [sp, #4]
 800602a:	f00e fd3b 	bl	8014aa4 <ZbNwkGet>
 800602e:	2800      	cmp	r0, #0
 8006030:	d002      	beq.n	8006038 <??ZbZclHandleConfigReport_43>
 8006032:	2000      	movs	r0, #0
 8006034:	f88d 0001 	strb.w	r0, [sp, #1]

08006038 <??ZbZclHandleConfigReport_43>:
 8006038:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800603c:	2800      	cmp	r0, #0
 800603e:	d103      	bne.n	8006048 <??ZbZclHandleConfigReport_3>
 8006040:	21c8      	movs	r1, #200	; 0xc8
 8006042:	0020      	movs	r0, r4
 8006044:	f7fe ff7f 	bl	8004f46 <zcl_report_kick>

08006048 <??ZbZclHandleConfigReport_3>:
 8006048:	b049      	add	sp, #292	; 0x124
 800604a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800604e <ZbZclHandleReadReport>:
 800604e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006052:	b09a      	sub	sp, #104	; 0x68
 8006054:	4680      	mov	r8, r0
 8006056:	4691      	mov	r9, r2
 8006058:	f05f 0a00 	movs.w	sl, #0
 800605c:	2300      	movs	r3, #0
 800605e:	a28d      	add	r2, pc, #564	; (adr r2, 8006294 <??DataTable10>)
 8006060:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 8006064:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006068:	f00f f901 	bl	801526e <zb_heap_alloc>
 800606c:	0007      	movs	r7, r0
 800606e:	2f00      	cmp	r7, #0
 8006070:	d106      	bne.n	8006080 <??ZbZclHandleReadReport_0>
 8006072:	2389      	movs	r3, #137	; 0x89
 8006074:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006076:	4649      	mov	r1, r9
 8006078:	4640      	mov	r0, r8
 800607a:	f00e fef5 	bl	8014e68 <ZbZclSendDefaultResponse>
 800607e:	e105      	b.n	800628c <??ZbZclHandleReadReport_1>

08006080 <??ZbZclHandleReadReport_0>:
 8006080:	2408      	movs	r4, #8
 8006082:	2500      	movs	r5, #0
 8006084:	ae01      	add	r6, sp, #4
 8006086:	002a      	movs	r2, r5
 8006088:	0021      	movs	r1, r4
 800608a:	0030      	movs	r0, r6
 800608c:	f001 fc24 	bl	80078d8 <__aeabi_memset>
 8006090:	2000      	movs	r0, #0
 8006092:	f88d 0004 	strb.w	r0, [sp, #4]
 8006096:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006098:	7840      	ldrb	r0, [r0, #1]
 800609a:	f88d 0005 	strb.w	r0, [sp, #5]
 800609e:	981a      	ldr	r0, [sp, #104]	; 0x68
 80060a0:	7880      	ldrb	r0, [r0, #2]
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d103      	bne.n	80060ae <??ZbZclHandleReadReport_2>
 80060a6:	2001      	movs	r0, #1
 80060a8:	f88d 0006 	strb.w	r0, [sp, #6]
 80060ac:	e002      	b.n	80060b4 <??ZbZclHandleReadReport_3>

080060ae <??ZbZclHandleReadReport_2>:
 80060ae:	2000      	movs	r0, #0
 80060b0:	f88d 0006 	strb.w	r0, [sp, #6]

080060b4 <??ZbZclHandleReadReport_3>:
 80060b4:	2001      	movs	r0, #1
 80060b6:	f88d 0007 	strb.w	r0, [sp, #7]
 80060ba:	981a      	ldr	r0, [sp, #104]	; 0x68
 80060bc:	8880      	ldrh	r0, [r0, #4]
 80060be:	f8ad 0008 	strh.w	r0, [sp, #8]
 80060c2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80060c4:	7980      	ldrb	r0, [r0, #6]
 80060c6:	f88d 000a 	strb.w	r0, [sp, #10]
 80060ca:	2009      	movs	r0, #9
 80060cc:	f88d 000b 	strb.w	r0, [sp, #11]
 80060d0:	2205      	movs	r2, #5
 80060d2:	0039      	movs	r1, r7
 80060d4:	a801      	add	r0, sp, #4
 80060d6:	f7fb fc5b 	bl	8001990 <ZbZclAppendHeader>
 80060da:	0004      	movs	r4, r0
 80060dc:	2c00      	cmp	r4, #0
 80060de:	d506      	bpl.n	80060ee <??ZbZclHandleReadReport_4>
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80060e4:	4649      	mov	r1, r9
 80060e6:	4640      	mov	r0, r8
 80060e8:	f00e febe 	bl	8014e68 <ZbZclSendDefaultResponse>
 80060ec:	e0ce      	b.n	800628c <??ZbZclHandleReadReport_1>

080060ee <??ZbZclHandleReadReport_4>:
 80060ee:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 80060f2:	4582      	cmp	sl, r0
 80060f4:	f080 80a1 	bcs.w	800623a <??ZbZclHandleReadReport_5>
 80060f8:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 80060fc:	f11a 0103 	adds.w	r1, sl, #3
 8006100:	4288      	cmp	r0, r1
 8006102:	d206      	bcs.n	8006112 <??ZbZclHandleReadReport_6>
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006108:	4649      	mov	r1, r9
 800610a:	4640      	mov	r0, r8
 800610c:	f00e feac 	bl	8014e68 <ZbZclSendDefaultResponse>
 8006110:	e0bc      	b.n	800628c <??ZbZclHandleReadReport_1>

08006112 <??ZbZclHandleReadReport_6>:
 8006112:	4650      	mov	r0, sl
 8006114:	f110 0a01 	adds.w	sl, r0, #1
 8006118:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
 800611c:	5c08      	ldrb	r0, [r1, r0]
 800611e:	2800      	cmp	r0, #0
 8006120:	d003      	beq.n	800612a <??ZbZclHandleReadReport_7>
 8006122:	2001      	movs	r0, #1
 8006124:	f88d 0000 	strb.w	r0, [sp]
 8006128:	e002      	b.n	8006130 <??ZbZclHandleReadReport_8>

0800612a <??ZbZclHandleReadReport_7>:
 800612a:	2000      	movs	r0, #0
 800612c:	f88d 0000 	strb.w	r0, [sp]

08006130 <??ZbZclHandleReadReport_8>:
 8006130:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 8006134:	4450      	add	r0, sl
 8006136:	f7fd fbb1 	bl	800389c <pletoh16>
 800613a:	f8ad 0002 	strh.w	r0, [sp, #2]
 800613e:	f11a 0a02 	adds.w	sl, sl, #2
 8006142:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8006146:	4640      	mov	r0, r8
 8006148:	f7fd fc77 	bl	8003a3a <ZbZclAttrFind>
 800614c:	0006      	movs	r6, r0
 800614e:	2e00      	cmp	r6, #0
 8006150:	d102      	bne.n	8006158 <??ZbZclHandleReadReport_9>
 8006152:	f05f 0b86 	movs.w	fp, #134	; 0x86
 8006156:	e05c      	b.n	8006212 <??ZbZclHandleReadReport_10>

08006158 <??ZbZclHandleReadReport_9>:
 8006158:	68b0      	ldr	r0, [r6, #8]
 800615a:	7900      	ldrb	r0, [r0, #4]
 800615c:	0780      	lsls	r0, r0, #30
 800615e:	d402      	bmi.n	8006166 <??ZbZclHandleReadReport_11>
 8006160:	f05f 0b8c 	movs.w	fp, #140	; 0x8c
 8006164:	e055      	b.n	8006212 <??ZbZclHandleReadReport_10>

08006166 <??ZbZclHandleReadReport_11>:
 8006166:	f89d 2000 	ldrb.w	r2, [sp]
 800616a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800616e:	4640      	mov	r0, r8
 8006170:	f7ff fa3f 	bl	80055f2 <zcl_reporting_find>
 8006174:	0005      	movs	r5, r0
 8006176:	2d00      	cmp	r5, #0
 8006178:	d102      	bne.n	8006180 <??ZbZclHandleReadReport_12>
 800617a:	f05f 0b8b 	movs.w	fp, #139	; 0x8b
 800617e:	e048      	b.n	8006212 <??ZbZclHandleReadReport_10>

08006180 <??ZbZclHandleReadReport_12>:
 8006180:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8006182:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006186:	4288      	cmp	r0, r1
 8006188:	d102      	bne.n	8006190 <??ZbZclHandleReadReport_13>
 800618a:	f05f 0b8b 	movs.w	fp, #139	; 0x8b
 800618e:	e040      	b.n	8006212 <??ZbZclHandleReadReport_10>

08006190 <??ZbZclHandleReadReport_13>:
 8006190:	2020      	movs	r0, #32
 8006192:	9005      	str	r0, [sp, #20]
 8006194:	2000      	movs	r0, #0
 8006196:	9004      	str	r0, [sp, #16]
 8006198:	f10d 0b18 	add.w	fp, sp, #24
 800619c:	9a04      	ldr	r2, [sp, #16]
 800619e:	9905      	ldr	r1, [sp, #20]
 80061a0:	4658      	mov	r0, fp
 80061a2:	f001 fb99 	bl	80078d8 <__aeabi_memset>
 80061a6:	f89d 0000 	ldrb.w	r0, [sp]
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d003      	beq.n	80061b6 <??ZbZclHandleReadReport_14>
 80061ae:	2001      	movs	r0, #1
 80061b0:	f88d 0018 	strb.w	r0, [sp, #24]
 80061b4:	e002      	b.n	80061bc <??ZbZclHandleReadReport_15>

080061b6 <??ZbZclHandleReadReport_14>:
 80061b6:	2000      	movs	r0, #0
 80061b8:	f88d 0018 	strb.w	r0, [sp, #24]

080061bc <??ZbZclHandleReadReport_15>:
 80061bc:	89a8      	ldrh	r0, [r5, #12]
 80061be:	f8ad 001a 	strh.w	r0, [sp, #26]
 80061c2:	7ba8      	ldrb	r0, [r5, #14]
 80061c4:	f88d 001c 	strb.w	r0, [sp, #28]
 80061c8:	8c28      	ldrh	r0, [r5, #32]
 80061ca:	f8ad 001e 	strh.w	r0, [sp, #30]
 80061ce:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80061d0:	f8ad 0020 	strh.w	r0, [sp, #32]
 80061d4:	ed95 0b0a 	vldr	d0, [r5, #40]	; 0x28
 80061d8:	ed8d 0b0a 	vstr	d0, [sp, #40]	; 0x28
 80061dc:	2000      	movs	r0, #0
 80061de:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80061e2:	2000      	movs	r0, #0
 80061e4:	5538      	strb	r0, [r7, r4]
 80061e6:	1c64      	adds	r4, r4, #1
 80061e8:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 80061ec:	0020      	movs	r0, r4
 80061ee:	b280      	uxth	r0, r0
 80061f0:	1a12      	subs	r2, r2, r0
 80061f2:	eb07 0104 	add.w	r1, r7, r4
 80061f6:	a806      	add	r0, sp, #24
 80061f8:	f000 f896 	bl	8006328 <zcl_append_report_config_record>
 80061fc:	9003      	str	r0, [sp, #12]
 80061fe:	9803      	ldr	r0, [sp, #12]
 8006200:	2800      	cmp	r0, #0
 8006202:	d503      	bpl.n	800620c <??ZbZclHandleReadReport_16>
 8006204:	1e64      	subs	r4, r4, #1
 8006206:	f05f 0b01 	movs.w	fp, #1
 800620a:	e002      	b.n	8006212 <??ZbZclHandleReadReport_10>

0800620c <??ZbZclHandleReadReport_16>:
 800620c:	9803      	ldr	r0, [sp, #12]
 800620e:	1904      	adds	r4, r0, r4
 8006210:	e76d      	b.n	80060ee <??ZbZclHandleReadReport_4>

08006212 <??ZbZclHandleReadReport_10>:
 8006212:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 8006216:	1ce1      	adds	r1, r4, #3
 8006218:	4288      	cmp	r0, r1
 800621a:	d30e      	bcc.n	800623a <??ZbZclHandleReadReport_5>

0800621c <??ZbZclHandleReadReport_17>:
 800621c:	f807 b004 	strb.w	fp, [r7, r4]
 8006220:	1c64      	adds	r4, r4, #1
 8006222:	f89d 0000 	ldrb.w	r0, [sp]
 8006226:	5538      	strb	r0, [r7, r4]
 8006228:	1c64      	adds	r4, r4, #1
 800622a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800622e:	eb07 0004 	add.w	r0, r7, r4
 8006232:	f7fd fb7f 	bl	8003934 <putle16>
 8006236:	1ca4      	adds	r4, r4, #2
 8006238:	e759      	b.n	80060ee <??ZbZclHandleReadReport_4>

0800623a <??ZbZclHandleReadReport_5>:
 800623a:	464a      	mov	r2, r9
 800623c:	a90e      	add	r1, sp, #56	; 0x38
 800623e:	4640      	mov	r0, r8
 8006240:	f7fa fe45 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8006244:	a80e      	add	r0, sp, #56	; 0x38
 8006246:	f119 0110 	adds.w	r1, r9, #16
 800624a:	2210      	movs	r2, #16
 800624c:	f011 fc08 	bl	8017a60 <__aeabi_memcpy>
 8006250:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
 8006254:	f7fa fdd3 	bl	8000dfe <ZbZclTxOptsFromSecurityStatus>
 8006258:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 800625c:	2001      	movs	r0, #1
 800625e:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
 8006262:	2000      	movs	r0, #0
 8006264:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
 8006268:	9714      	str	r7, [sp, #80]	; 0x50
 800626a:	0020      	movs	r0, r4
 800626c:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8006270:	2300      	movs	r3, #0
 8006272:	2200      	movs	r2, #0
 8006274:	a90e      	add	r1, sp, #56	; 0x38
 8006276:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800627a:	f00e f85b 	bl	8014334 <ZbApsdeDataReqCallback>
 800627e:	2300      	movs	r3, #0
 8006280:	a204      	add	r2, pc, #16	; (adr r2, 8006294 <??DataTable10>)
 8006282:	0039      	movs	r1, r7
 8006284:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006288:	f00f f800 	bl	801528c <zb_heap_free>

0800628c <??ZbZclHandleReadReport_1>:
 800628c:	b01b      	add	sp, #108	; 0x6c
 800628e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006294 <??DataTable10>:
 8006294:	0000 0000                                   ....

08006298 <ZbZclHandleReportAttr>:
 8006298:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800629c:	0004      	movs	r4, r0
 800629e:	000d      	movs	r5, r1
 80062a0:	0016      	movs	r6, r2
 80062a2:	f05f 0a00 	movs.w	sl, #0
 80062a6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d03b      	beq.n	8006324 <??ZbZclHandleReportAttr_0>

080062ac <??ZbZclHandleReportAttr_1>:
 80062ac:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80062ae:	4651      	mov	r1, sl
 80062b0:	b289      	uxth	r1, r1
 80062b2:	1cc9      	adds	r1, r1, #3
 80062b4:	4288      	cmp	r0, r1
 80062b6:	d335      	bcc.n	8006324 <??ZbZclHandleReportAttr_0>

080062b8 <??ZbZclHandleReportAttr_3>:
 80062b8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80062ba:	4651      	mov	r1, sl
 80062bc:	b289      	uxth	r1, r1
 80062be:	4408      	add	r0, r1
 80062c0:	f7fd faec 	bl	800389c <pletoh16>
 80062c4:	0007      	movs	r7, r0
 80062c6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80062c8:	4651      	mov	r1, sl
 80062ca:	b289      	uxth	r1, r1
 80062cc:	4408      	add	r0, r1
 80062ce:	7880      	ldrb	r0, [r0, #2]
 80062d0:	4680      	mov	r8, r0
 80062d2:	f11a 0a03 	adds.w	sl, sl, #3
 80062d6:	2300      	movs	r3, #0
 80062d8:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80062da:	4650      	mov	r0, sl
 80062dc:	b280      	uxth	r0, r0
 80062de:	1a12      	subs	r2, r2, r0
 80062e0:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80062e2:	4651      	mov	r1, sl
 80062e4:	b289      	uxth	r1, r1
 80062e6:	4401      	add	r1, r0
 80062e8:	4640      	mov	r0, r8
 80062ea:	b2c0      	uxtb	r0, r0
 80062ec:	f7fe fad1 	bl	8004892 <ZbZclAttrParseLength>
 80062f0:	4681      	mov	r9, r0
 80062f2:	f1b9 0f00 	cmp.w	r9, #0
 80062f6:	d415      	bmi.n	8006324 <??ZbZclHandleReportAttr_0>

080062f8 <??ZbZclHandleReportAttr_4>:
 80062f8:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80062fa:	ebb0 000a 	subs.w	r0, r0, sl
 80062fe:	b280      	uxth	r0, r0
 8006300:	9001      	str	r0, [sp, #4]
 8006302:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8006304:	4651      	mov	r1, sl
 8006306:	b289      	uxth	r1, r1
 8006308:	4408      	add	r0, r1
 800630a:	9000      	str	r0, [sp, #0]
 800630c:	4643      	mov	r3, r8
 800630e:	b2db      	uxtb	r3, r3
 8006310:	003a      	movs	r2, r7
 8006312:	b292      	uxth	r2, r2
 8006314:	0031      	movs	r1, r6
 8006316:	0020      	movs	r0, r4
 8006318:	f8d4 c05c 	ldr.w	ip, [r4, #92]	; 0x5c
 800631c:	47e0      	blx	ip
 800631e:	eb19 0a0a 	adds.w	sl, r9, sl
 8006322:	e7c3      	b.n	80062ac <??ZbZclHandleReportAttr_1>

08006324 <??ZbZclHandleReportAttr_0>:
 8006324:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

08006328 <zcl_append_report_config_record>:
 8006328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800632c:	0005      	movs	r5, r0
 800632e:	000e      	movs	r6, r1
 8006330:	4690      	mov	r8, r2
 8006332:	2700      	movs	r7, #0
 8006334:	7828      	ldrb	r0, [r5, #0]
 8006336:	2800      	cmp	r0, #0
 8006338:	d003      	beq.n	8006342 <??zcl_append_report_config_record_0>
 800633a:	2801      	cmp	r0, #1
 800633c:	f000 80f4 	beq.w	8006528 <??zcl_append_report_config_record_1>
 8006340:	e108      	b.n	8006554 <??zcl_append_report_config_record_2>

08006342 <??zcl_append_report_config_record_0>:
 8006342:	7928      	ldrb	r0, [r5, #4]
 8006344:	f001 fa9e 	bl	8007884 <ZbZclAttrIsFloat>
 8006348:	2800      	cmp	r0, #0
 800634a:	d002      	beq.n	8006352 <??zcl_append_report_config_record_3>
 800634c:	2001      	movs	r0, #1
 800634e:	4681      	mov	r9, r0
 8006350:	e009      	b.n	8006366 <??zcl_append_report_config_record_4>

08006352 <??zcl_append_report_config_record_3>:
 8006352:	7928      	ldrb	r0, [r5, #4]
 8006354:	f7fe fb4e 	bl	80049f4 <ZbZclAttrIsAnalog>
 8006358:	2800      	cmp	r0, #0
 800635a:	d002      	beq.n	8006362 <??zcl_append_report_config_record_5>
 800635c:	2001      	movs	r0, #1
 800635e:	4681      	mov	r9, r0
 8006360:	e001      	b.n	8006366 <??zcl_append_report_config_record_4>

08006362 <??zcl_append_report_config_record_5>:
 8006362:	2000      	movs	r0, #0
 8006364:	4681      	mov	r9, r0

08006366 <??zcl_append_report_config_record_4>:
 8006366:	f1b8 0f08 	cmp.w	r8, #8
 800636a:	d202      	bcs.n	8006372 <??zcl_append_report_config_record_6>
 800636c:	f05f 30ff 	movs.w	r0, #4294967295
 8006370:	e0f3      	b.n	800655a <??zcl_append_report_config_record_7>

08006372 <??zcl_append_report_config_record_6>:
 8006372:	7828      	ldrb	r0, [r5, #0]
 8006374:	55f0      	strb	r0, [r6, r7]
 8006376:	1c7f      	adds	r7, r7, #1
 8006378:	8869      	ldrh	r1, [r5, #2]
 800637a:	eb06 0007 	add.w	r0, r6, r7
 800637e:	f7fd fad9 	bl	8003934 <putle16>
 8006382:	1cbf      	adds	r7, r7, #2
 8006384:	7928      	ldrb	r0, [r5, #4]
 8006386:	55f0      	strb	r0, [r6, r7]
 8006388:	1c7f      	adds	r7, r7, #1
 800638a:	88e9      	ldrh	r1, [r5, #6]
 800638c:	eb06 0007 	add.w	r0, r6, r7
 8006390:	f7fd fad0 	bl	8003934 <putle16>
 8006394:	1cbf      	adds	r7, r7, #2
 8006396:	8929      	ldrh	r1, [r5, #8]
 8006398:	eb06 0007 	add.w	r0, r6, r7
 800639c:	f7fd faca 	bl	8003934 <putle16>
 80063a0:	1cbf      	adds	r7, r7, #2
 80063a2:	4648      	mov	r0, r9
 80063a4:	b2c0      	uxtb	r0, r0
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f000 80bd 	beq.w	8006526 <??zcl_append_report_config_record_8>
 80063ac:	7928      	ldrb	r0, [r5, #4]
 80063ae:	f7fe f9e5 	bl	800477c <ZbZclAttrTypeLength>
 80063b2:	0004      	movs	r4, r0
 80063b4:	2c00      	cmp	r4, #0
 80063b6:	d101      	bne.n	80063bc <??zcl_append_report_config_record_9>
 80063b8:	2001      	movs	r0, #1
 80063ba:	e0ce      	b.n	800655a <??zcl_append_report_config_record_7>

080063bc <??zcl_append_report_config_record_9>:
 80063bc:	2c01      	cmp	r4, #1
 80063be:	d00e      	beq.n	80063de <??zcl_append_report_config_record_10>
 80063c0:	f0c0 80af 	bcc.w	8006522 <??zcl_append_report_config_record_11>
 80063c4:	2c03      	cmp	r4, #3
 80063c6:	d02f      	beq.n	8006428 <??zcl_append_report_config_record_12>
 80063c8:	d319      	bcc.n	80063fe <??zcl_append_report_config_record_13>
 80063ca:	2c05      	cmp	r4, #5
 80063cc:	d054      	beq.n	8006478 <??zcl_append_report_config_record_14>
 80063ce:	d33f      	bcc.n	8006450 <??zcl_append_report_config_record_15>
 80063d0:	2c07      	cmp	r4, #7
 80063d2:	d07c      	beq.n	80064ce <??zcl_append_report_config_record_16>
 80063d4:	d365      	bcc.n	80064a2 <??zcl_append_report_config_record_17>
 80063d6:	2c08      	cmp	r4, #8
 80063d8:	f000 808e 	beq.w	80064f8 <??zcl_append_report_config_record_18>
 80063dc:	e0a1      	b.n	8006522 <??zcl_append_report_config_record_11>

080063de <??zcl_append_report_config_record_10>:
 80063de:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80063e2:	2201      	movs	r2, #1
 80063e4:	4b5f      	ldr	r3, [pc, #380]	; (8006564 <??DataTable11_1>)
 80063e6:	f001 ff43 	bl	8008270 <__aeabi_cdrcmple>
 80063ea:	d801      	bhi.n	80063f0 <??zcl_append_report_config_record_19>
 80063ec:	2001      	movs	r0, #1
 80063ee:	e0b4      	b.n	800655a <??zcl_append_report_config_record_7>

080063f0 <??zcl_append_report_config_record_19>:
 80063f0:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80063f4:	f001 ff7e 	bl	80082f4 <__aeabi_d2iz>
 80063f8:	55f0      	strb	r0, [r6, r7]
 80063fa:	1c7f      	adds	r7, r7, #1
 80063fc:	e093      	b.n	8006526 <??zcl_append_report_config_record_8>

080063fe <??zcl_append_report_config_record_13>:
 80063fe:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006402:	2201      	movs	r2, #1
 8006404:	4b58      	ldr	r3, [pc, #352]	; (8006568 <??DataTable11_2>)
 8006406:	f001 ff33 	bl	8008270 <__aeabi_cdrcmple>
 800640a:	d801      	bhi.n	8006410 <??zcl_append_report_config_record_20>
 800640c:	2001      	movs	r0, #1
 800640e:	e0a4      	b.n	800655a <??zcl_append_report_config_record_7>

08006410 <??zcl_append_report_config_record_20>:
 8006410:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006414:	f001 ff6e 	bl	80082f4 <__aeabi_d2iz>
 8006418:	0001      	movs	r1, r0
 800641a:	b289      	uxth	r1, r1
 800641c:	eb06 0007 	add.w	r0, r6, r7
 8006420:	f7fd fa88 	bl	8003934 <putle16>
 8006424:	1cbf      	adds	r7, r7, #2
 8006426:	e07e      	b.n	8006526 <??zcl_append_report_config_record_8>

08006428 <??zcl_append_report_config_record_12>:
 8006428:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800642c:	4a4f      	ldr	r2, [pc, #316]	; (800656c <??DataTable11_3>)
 800642e:	4b50      	ldr	r3, [pc, #320]	; (8006570 <??DataTable11_4>)
 8006430:	f001 ff1e 	bl	8008270 <__aeabi_cdrcmple>
 8006434:	d801      	bhi.n	800643a <??zcl_append_report_config_record_21>
 8006436:	2001      	movs	r0, #1
 8006438:	e08f      	b.n	800655a <??zcl_append_report_config_record_7>

0800643a <??zcl_append_report_config_record_21>:
 800643a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800643e:	f001 ff81 	bl	8008344 <__aeabi_d2uiz>
 8006442:	0001      	movs	r1, r0
 8006444:	eb06 0007 	add.w	r0, r6, r7
 8006448:	f7fd fa7a 	bl	8003940 <putle24>
 800644c:	1cff      	adds	r7, r7, #3
 800644e:	e06a      	b.n	8006526 <??zcl_append_report_config_record_8>

08006450 <??zcl_append_report_config_record_15>:
 8006450:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006454:	4a47      	ldr	r2, [pc, #284]	; (8006574 <??DataTable11_5>)
 8006456:	4b48      	ldr	r3, [pc, #288]	; (8006578 <??DataTable11_6>)
 8006458:	f001 ff0a 	bl	8008270 <__aeabi_cdrcmple>
 800645c:	d801      	bhi.n	8006462 <??zcl_append_report_config_record_22>
 800645e:	2001      	movs	r0, #1
 8006460:	e07b      	b.n	800655a <??zcl_append_report_config_record_7>

08006462 <??zcl_append_report_config_record_22>:
 8006462:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006466:	f001 ff6d 	bl	8008344 <__aeabi_d2uiz>
 800646a:	0001      	movs	r1, r0
 800646c:	eb06 0007 	add.w	r0, r6, r7
 8006470:	f7fd fa72 	bl	8003958 <putle32>
 8006474:	1d3f      	adds	r7, r7, #4
 8006476:	e056      	b.n	8006526 <??zcl_append_report_config_record_8>

08006478 <??zcl_append_report_config_record_14>:
 8006478:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800647c:	4a3f      	ldr	r2, [pc, #252]	; (800657c <??DataTable11_7>)
 800647e:	4b40      	ldr	r3, [pc, #256]	; (8006580 <??DataTable11_8>)
 8006480:	f001 fef6 	bl	8008270 <__aeabi_cdrcmple>
 8006484:	d801      	bhi.n	800648a <??zcl_append_report_config_record_23>
 8006486:	2001      	movs	r0, #1
 8006488:	e067      	b.n	800655a <??zcl_append_report_config_record_7>

0800648a <??zcl_append_report_config_record_23>:
 800648a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800648e:	f001 ffa9 	bl	80083e4 <__aeabi_d2ulz>
 8006492:	0002      	movs	r2, r0
 8006494:	000b      	movs	r3, r1
 8006496:	eb06 0007 	add.w	r0, r6, r7
 800649a:	f7fd fa68 	bl	800396e <putle40>
 800649e:	1d7f      	adds	r7, r7, #5
 80064a0:	e041      	b.n	8006526 <??zcl_append_report_config_record_8>

080064a2 <??zcl_append_report_config_record_17>:
 80064a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80064a6:	f07f 021e 	mvns.w	r2, #30
 80064aa:	4b36      	ldr	r3, [pc, #216]	; (8006584 <??DataTable11_9>)
 80064ac:	f001 fee0 	bl	8008270 <__aeabi_cdrcmple>
 80064b0:	d801      	bhi.n	80064b6 <??zcl_append_report_config_record_24>
 80064b2:	2001      	movs	r0, #1
 80064b4:	e051      	b.n	800655a <??zcl_append_report_config_record_7>

080064b6 <??zcl_append_report_config_record_24>:
 80064b6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80064ba:	f001 ff93 	bl	80083e4 <__aeabi_d2ulz>
 80064be:	0002      	movs	r2, r0
 80064c0:	000b      	movs	r3, r1
 80064c2:	eb06 0007 	add.w	r0, r6, r7
 80064c6:	f7fd fa5c 	bl	8003982 <putle48>
 80064ca:	1dbf      	adds	r7, r7, #6
 80064cc:	e02b      	b.n	8006526 <??zcl_append_report_config_record_8>

080064ce <??zcl_append_report_config_record_16>:
 80064ce:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80064d2:	2201      	movs	r2, #1
 80064d4:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <??DataTable11_10>)
 80064d6:	f001 fecb 	bl	8008270 <__aeabi_cdrcmple>
 80064da:	d801      	bhi.n	80064e0 <??zcl_append_report_config_record_25>
 80064dc:	2001      	movs	r0, #1
 80064de:	e03c      	b.n	800655a <??zcl_append_report_config_record_7>

080064e0 <??zcl_append_report_config_record_25>:
 80064e0:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80064e4:	f001 ff7e 	bl	80083e4 <__aeabi_d2ulz>
 80064e8:	0002      	movs	r2, r0
 80064ea:	000b      	movs	r3, r1
 80064ec:	eb06 0007 	add.w	r0, r6, r7
 80064f0:	f7fd fa56 	bl	80039a0 <putle56>
 80064f4:	1dff      	adds	r7, r7, #7
 80064f6:	e016      	b.n	8006526 <??zcl_append_report_config_record_8>

080064f8 <??zcl_append_report_config_record_18>:
 80064f8:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80064fc:	2201      	movs	r2, #1
 80064fe:	4b23      	ldr	r3, [pc, #140]	; (800658c <??DataTable11_11>)
 8006500:	f001 feb6 	bl	8008270 <__aeabi_cdrcmple>
 8006504:	d801      	bhi.n	800650a <??zcl_append_report_config_record_26>
 8006506:	2001      	movs	r0, #1
 8006508:	e027      	b.n	800655a <??zcl_append_report_config_record_7>

0800650a <??zcl_append_report_config_record_26>:
 800650a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800650e:	f001 ff69 	bl	80083e4 <__aeabi_d2ulz>
 8006512:	0002      	movs	r2, r0
 8006514:	000b      	movs	r3, r1
 8006516:	eb06 0007 	add.w	r0, r6, r7
 800651a:	f7fd fa50 	bl	80039be <putle64>
 800651e:	3708      	adds	r7, #8
 8006520:	e001      	b.n	8006526 <??zcl_append_report_config_record_8>

08006522 <??zcl_append_report_config_record_11>:
 8006522:	2001      	movs	r0, #1
 8006524:	e019      	b.n	800655a <??zcl_append_report_config_record_7>

08006526 <??zcl_append_report_config_record_8>:
 8006526:	e017      	b.n	8006558 <??zcl_append_report_config_record_27>

08006528 <??zcl_append_report_config_record_1>:
 8006528:	f1b8 0f08 	cmp.w	r8, #8
 800652c:	d202      	bcs.n	8006534 <??zcl_append_report_config_record_28>
 800652e:	f05f 30ff 	movs.w	r0, #4294967295
 8006532:	e012      	b.n	800655a <??zcl_append_report_config_record_7>

08006534 <??zcl_append_report_config_record_28>:
 8006534:	7828      	ldrb	r0, [r5, #0]
 8006536:	55f0      	strb	r0, [r6, r7]
 8006538:	1c7f      	adds	r7, r7, #1
 800653a:	8869      	ldrh	r1, [r5, #2]
 800653c:	eb06 0007 	add.w	r0, r6, r7
 8006540:	f7fd f9f8 	bl	8003934 <putle16>
 8006544:	1cbf      	adds	r7, r7, #2
 8006546:	8b29      	ldrh	r1, [r5, #24]
 8006548:	eb06 0007 	add.w	r0, r6, r7
 800654c:	f7fd f9f2 	bl	8003934 <putle16>
 8006550:	1cbf      	adds	r7, r7, #2
 8006552:	e001      	b.n	8006558 <??zcl_append_report_config_record_27>

08006554 <??zcl_append_report_config_record_2>:
 8006554:	2001      	movs	r0, #1
 8006556:	e000      	b.n	800655a <??zcl_append_report_config_record_7>

08006558 <??zcl_append_report_config_record_27>:
 8006558:	0038      	movs	r0, r7

0800655a <??zcl_append_report_config_record_7>:
 800655a:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08006560 <??DataTable11>:
 8006560:	0000 3ff0                                   ...?

08006564 <??DataTable11_1>:
 8006564:	e000 406f                                   ..o@

08006568 <??DataTable11_2>:
 8006568:	ffe0 40ef                                   ...@

0800656c <??DataTable11_3>:
 800656c:	0001 e000                                   ....

08006570 <??DataTable11_4>:
 8006570:	ffff 416f                                   ..oA

08006574 <??DataTable11_5>:
 8006574:	0001 ffe0                                   ....

08006578 <??DataTable11_6>:
 8006578:	ffff 41ef                                   ...A

0800657c <??DataTable11_7>:
 800657c:	e001 ffff                                   ....

08006580 <??DataTable11_8>:
 8006580:	ffff 426f                                   ..oB

08006584 <??DataTable11_9>:
 8006584:	ffff 42ef                                   ...B

08006588 <??DataTable11_10>:
 8006588:	0000 4370                                   ..pC

0800658c <??DataTable11_11>:
 800658c:	0000 43f0                                   ...C

08006590 <ZbZclAttrReportConfigReq>:
 8006590:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	b09b      	sub	sp, #108	; 0x6c
 8006596:	0004      	movs	r4, r0
 8006598:	000d      	movs	r5, r1
 800659a:	001e      	movs	r6, r3
 800659c:	2700      	movs	r7, #0
 800659e:	7c28      	ldrb	r0, [r5, #16]
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d002      	beq.n	80065aa <??ZbZclAttrReportConfigReq_0>
 80065a4:	7c28      	ldrb	r0, [r5, #16]
 80065a6:	2807      	cmp	r0, #7
 80065a8:	d301      	bcc.n	80065ae <??ZbZclAttrReportConfigReq_1>

080065aa <??ZbZclAttrReportConfigReq_0>:
 80065aa:	2001      	movs	r0, #1
 80065ac:	e059      	b.n	8006662 <??ZbZclAttrReportConfigReq_2>

080065ae <??ZbZclAttrReportConfigReq_1>:
 80065ae:	f05f 0800 	movs.w	r8, #0

080065b2 <??ZbZclAttrReportConfigReq_3>:
 80065b2:	7c28      	ldrb	r0, [r5, #16]
 80065b4:	4580      	cmp	r8, r0
 80065b6:	d215      	bcs.n	80065e4 <??ZbZclAttrReportConfigReq_4>
 80065b8:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80065bc:	4428      	add	r0, r5
 80065be:	f110 0918 	adds.w	r9, r0, #24
 80065c2:	f1d7 0239 	rsbs	r2, r7, #57	; 0x39
 80065c6:	a80c      	add	r0, sp, #48	; 0x30
 80065c8:	eb00 0107 	add.w	r1, r0, r7
 80065cc:	4648      	mov	r0, r9
 80065ce:	f7ff feab 	bl	8006328 <zcl_append_report_config_record>
 80065d2:	0001      	movs	r1, r0
 80065d4:	2901      	cmp	r1, #1
 80065d6:	da01      	bge.n	80065dc <??ZbZclAttrReportConfigReq_5>
 80065d8:	2001      	movs	r0, #1
 80065da:	e042      	b.n	8006662 <??ZbZclAttrReportConfigReq_2>

080065dc <??ZbZclAttrReportConfigReq_5>:
 80065dc:	19cf      	adds	r7, r1, r7
 80065de:	f118 0801 	adds.w	r8, r8, #1
 80065e2:	e7e6      	b.n	80065b2 <??ZbZclAttrReportConfigReq_3>

080065e4 <??ZbZclAttrReportConfigReq_4>:
 80065e4:	f05f 0930 	movs.w	r9, #48	; 0x30
 80065e8:	f05f 0a00 	movs.w	sl, #0
 80065ec:	46eb      	mov	fp, sp
 80065ee:	4652      	mov	r2, sl
 80065f0:	4649      	mov	r1, r9
 80065f2:	4658      	mov	r0, fp
 80065f4:	f001 f970 	bl	80078d8 <__aeabi_memset>
 80065f8:	2000      	movs	r0, #0
 80065fa:	f88d 001a 	strb.w	r0, [sp, #26]
 80065fe:	8a20      	ldrh	r0, [r4, #16]
 8006600:	2800      	cmp	r0, #0
 8006602:	d001      	beq.n	8006608 <??ZbZclAttrReportConfigReq_6>
 8006604:	2001      	movs	r0, #1
 8006606:	e000      	b.n	800660a <??ZbZclAttrReportConfigReq_7>

08006608 <??ZbZclAttrReportConfigReq_6>:
 8006608:	2000      	movs	r0, #0

0800660a <??ZbZclAttrReportConfigReq_7>:
 800660a:	f88d 001b 	strb.w	r0, [sp, #27]
 800660e:	8a20      	ldrh	r0, [r4, #16]
 8006610:	f8ad 001e 	strh.w	r0, [sp, #30]
 8006614:	2006      	movs	r0, #6
 8006616:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800661a:	f00e fbaa 	bl	8014d72 <ZbZclGetNextSeqnum>
 800661e:	f88d 0020 	strb.w	r0, [sp, #32]
 8006622:	4668      	mov	r0, sp
 8006624:	0029      	movs	r1, r5
 8006626:	2210      	movs	r2, #16
 8006628:	f011 fa1a 	bl	8017a60 <__aeabi_memcpy>
 800662c:	8aa0      	ldrh	r0, [r4, #20]
 800662e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8006632:	89a0      	ldrh	r0, [r4, #12]
 8006634:	f8ad 0012 	strh.w	r0, [sp, #18]
 8006638:	7ba0      	ldrb	r0, [r4, #14]
 800663a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800663e:	8ae0      	ldrh	r0, [r4, #22]
 8006640:	f8ad 0016 	strh.w	r0, [sp, #22]
 8006644:	7e20      	ldrb	r0, [r4, #24]
 8006646:	f88d 0018 	strb.w	r0, [sp, #24]
 800664a:	7e60      	ldrb	r0, [r4, #25]
 800664c:	f88d 0019 	strb.w	r0, [sp, #25]
 8006650:	a80c      	add	r0, sp, #48	; 0x30
 8006652:	9009      	str	r0, [sp, #36]	; 0x24
 8006654:	970a      	str	r7, [sp, #40]	; 0x28
 8006656:	0033      	movs	r3, r6
 8006658:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800665a:	4669      	mov	r1, sp
 800665c:	68a0      	ldr	r0, [r4, #8]
 800665e:	f00e fbb3 	bl	8014dc8 <ZbZclCommandReq>

08006662 <??ZbZclAttrReportConfigReq_2>:
 8006662:	b01d      	add	sp, #116	; 0x74
 8006664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006668 <ZbZclAttrReportReadReq>:
 8006668:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	b09b      	sub	sp, #108	; 0x6c
 800666e:	0005      	movs	r5, r0
 8006670:	000e      	movs	r6, r1
 8006672:	001f      	movs	r7, r3
 8006674:	2400      	movs	r4, #0
 8006676:	7c30      	ldrb	r0, [r6, #16]
 8006678:	2800      	cmp	r0, #0
 800667a:	d002      	beq.n	8006682 <??ZbZclAttrReportReadReq_0>
 800667c:	7c30      	ldrb	r0, [r6, #16]
 800667e:	2807      	cmp	r0, #7
 8006680:	d301      	bcc.n	8006686 <??ZbZclAttrReportReadReq_1>

08006682 <??ZbZclAttrReportReadReq_0>:
 8006682:	2001      	movs	r0, #1
 8006684:	e050      	b.n	8006728 <??ZbZclAttrReportReadReq_2>

08006686 <??ZbZclAttrReportReadReq_1>:
 8006686:	f05f 0800 	movs.w	r8, #0

0800668a <??ZbZclAttrReportReadReq_3>:
 800668a:	7c30      	ldrb	r0, [r6, #16]
 800668c:	4580      	cmp	r8, r0
 800668e:	d217      	bcs.n	80066c0 <??ZbZclAttrReportReadReq_4>
 8006690:	1ce0      	adds	r0, r4, #3
 8006692:	283a      	cmp	r0, #58	; 0x3a
 8006694:	d301      	bcc.n	800669a <??ZbZclAttrReportReadReq_5>
 8006696:	2001      	movs	r0, #1
 8006698:	e046      	b.n	8006728 <??ZbZclAttrReportReadReq_2>

0800669a <??ZbZclAttrReportReadReq_5>:
 800669a:	ea5f 1048 	movs.w	r0, r8, lsl #5
 800669e:	4430      	add	r0, r6
 80066a0:	7e00      	ldrb	r0, [r0, #24]
 80066a2:	a90c      	add	r1, sp, #48	; 0x30
 80066a4:	5508      	strb	r0, [r1, r4]
 80066a6:	1c64      	adds	r4, r4, #1
 80066a8:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80066ac:	4430      	add	r0, r6
 80066ae:	8b41      	ldrh	r1, [r0, #26]
 80066b0:	a80c      	add	r0, sp, #48	; 0x30
 80066b2:	4420      	add	r0, r4
 80066b4:	f7fd f93e 	bl	8003934 <putle16>
 80066b8:	1ca4      	adds	r4, r4, #2
 80066ba:	f118 0801 	adds.w	r8, r8, #1
 80066be:	e7e4      	b.n	800668a <??ZbZclAttrReportReadReq_3>

080066c0 <??ZbZclAttrReportReadReq_4>:
 80066c0:	f05f 0930 	movs.w	r9, #48	; 0x30
 80066c4:	f05f 0a00 	movs.w	sl, #0
 80066c8:	46eb      	mov	fp, sp
 80066ca:	4652      	mov	r2, sl
 80066cc:	4649      	mov	r1, r9
 80066ce:	4658      	mov	r0, fp
 80066d0:	f001 f902 	bl	80078d8 <__aeabi_memset>
 80066d4:	2000      	movs	r0, #0
 80066d6:	f88d 001a 	strb.w	r0, [sp, #26]
 80066da:	2008      	movs	r0, #8
 80066dc:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80066e0:	f00e fb47 	bl	8014d72 <ZbZclGetNextSeqnum>
 80066e4:	f88d 0020 	strb.w	r0, [sp, #32]
 80066e8:	4668      	mov	r0, sp
 80066ea:	0031      	movs	r1, r6
 80066ec:	2210      	movs	r2, #16
 80066ee:	f011 f9b7 	bl	8017a60 <__aeabi_memcpy>
 80066f2:	8aa8      	ldrh	r0, [r5, #20]
 80066f4:	f8ad 0010 	strh.w	r0, [sp, #16]
 80066f8:	89a8      	ldrh	r0, [r5, #12]
 80066fa:	f8ad 0012 	strh.w	r0, [sp, #18]
 80066fe:	7ba8      	ldrb	r0, [r5, #14]
 8006700:	f8ad 0014 	strh.w	r0, [sp, #20]
 8006704:	8ae8      	ldrh	r0, [r5, #22]
 8006706:	f8ad 0016 	strh.w	r0, [sp, #22]
 800670a:	7e28      	ldrb	r0, [r5, #24]
 800670c:	f88d 0018 	strb.w	r0, [sp, #24]
 8006710:	7e68      	ldrb	r0, [r5, #25]
 8006712:	f88d 0019 	strb.w	r0, [sp, #25]
 8006716:	a80c      	add	r0, sp, #48	; 0x30
 8006718:	9009      	str	r0, [sp, #36]	; 0x24
 800671a:	940a      	str	r4, [sp, #40]	; 0x28
 800671c:	003b      	movs	r3, r7
 800671e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006720:	4669      	mov	r1, sp
 8006722:	68a8      	ldr	r0, [r5, #8]
 8006724:	f00e fb50 	bl	8014dc8 <ZbZclCommandReq>

08006728 <??ZbZclAttrReportReadReq_2>:
 8006728:	b01d      	add	sp, #116	; 0x74
 800672a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800672e <ZbZclAttrReportConfigDefault>:
 800672e:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006732:	0007      	movs	r7, r0
 8006734:	4688      	mov	r8, r1
 8006736:	4691      	mov	r9, r2
 8006738:	469a      	mov	sl, r3
 800673a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800673c:	4641      	mov	r1, r8
 800673e:	b289      	uxth	r1, r1
 8006740:	0038      	movs	r0, r7
 8006742:	f7fd f97a 	bl	8003a3a <ZbZclAttrFind>
 8006746:	0005      	movs	r5, r0
 8006748:	2d00      	cmp	r5, #0
 800674a:	d101      	bne.n	8006750 <??ZbZclAttrReportConfigDefault_0>
 800674c:	2086      	movs	r0, #134	; 0x86
 800674e:	e02b      	b.n	80067a8 <??ZbZclAttrReportConfigDefault_1>

08006750 <??ZbZclAttrReportConfigDefault_0>:
 8006750:	68a8      	ldr	r0, [r5, #8]
 8006752:	7900      	ldrb	r0, [r0, #4]
 8006754:	0780      	lsls	r0, r0, #30
 8006756:	d401      	bmi.n	800675c <??ZbZclAttrReportConfigDefault_2>
 8006758:	208c      	movs	r0, #140	; 0x8c
 800675a:	e025      	b.n	80067a8 <??ZbZclAttrReportConfigDefault_1>

0800675c <??ZbZclAttrReportConfigDefault_2>:
 800675c:	2200      	movs	r2, #0
 800675e:	4641      	mov	r1, r8
 8006760:	b289      	uxth	r1, r1
 8006762:	0038      	movs	r0, r7
 8006764:	f7fe ff45 	bl	80055f2 <zcl_reporting_find>
 8006768:	0006      	movs	r6, r0
 800676a:	2e00      	cmp	r6, #0
 800676c:	d101      	bne.n	8006772 <??ZbZclAttrReportConfigDefault_3>
 800676e:	208b      	movs	r0, #139	; 0x8b
 8006770:	e01a      	b.n	80067a8 <??ZbZclAttrReportConfigDefault_1>

08006772 <??ZbZclAttrReportConfigDefault_3>:
 8006772:	f8ad 9002 	strh.w	r9, [sp, #2]
 8006776:	f8ad a000 	strh.w	sl, [sp]
 800677a:	4669      	mov	r1, sp
 800677c:	f10d 0002 	add.w	r0, sp, #2
 8006780:	f7ff f894 	bl	80058ac <zcl_reporting_check_default_intvl>
 8006784:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8006788:	84b0      	strh	r0, [r6, #36]	; 0x24
 800678a:	f8bd 0000 	ldrh.w	r0, [sp]
 800678e:	84f0      	strh	r0, [r6, #38]	; 0x26
 8006790:	2c00      	cmp	r4, #0
 8006792:	d003      	beq.n	800679c <??ZbZclAttrReportConfigDefault_4>
 8006794:	ed94 0b00 	vldr	d0, [r4]
 8006798:	ed86 0b0c 	vstr	d0, [r6, #48]	; 0x30

0800679c <??ZbZclAttrReportConfigDefault_4>:
 800679c:	2201      	movs	r2, #1
 800679e:	0031      	movs	r1, r6
 80067a0:	68b8      	ldr	r0, [r7, #8]
 80067a2:	f7ff f8b3 	bl	800590c <zcl_reporting_reset_defaults>
 80067a6:	2000      	movs	r0, #0

080067a8 <??ZbZclAttrReportConfigDefault_1>:
 80067a8:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

080067ac <ZbZclClusterReportCallbackAttach>:
 80067ac:	65c1      	str	r1, [r0, #92]	; 0x5c
 80067ae:	4770      	bx	lr

080067b0 <zcl_cluster_command_dummy>:
 80067b0:	0003      	movs	r3, r0
 80067b2:	20ff      	movs	r0, #255	; 0xff
 80067b4:	4770      	bx	lr

080067b6 <ZbZclClusterAlloc>:
 80067b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ba:	0006      	movs	r6, r0
 80067bc:	000f      	movs	r7, r1
 80067be:	4698      	mov	r8, r3
 80067c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067c2:	2f6c      	cmp	r7, #108	; 0x6c
 80067c4:	d201      	bcs.n	80067ca <??ZbZclClusterAlloc_0>
 80067c6:	2000      	movs	r0, #0
 80067c8:	e083      	b.n	80068d2 <??ZbZclClusterAlloc_1>

080067ca <??ZbZclClusterAlloc_0>:
 80067ca:	f20f 2914 	addw	r9, pc, #532	; 0x214
 80067ce:	2300      	movs	r3, #0
 80067d0:	464a      	mov	r2, r9
 80067d2:	0039      	movs	r1, r7
 80067d4:	0030      	movs	r0, r6
 80067d6:	f00e fd4a 	bl	801526e <zb_heap_alloc>
 80067da:	0004      	movs	r4, r0
 80067dc:	2c00      	cmp	r4, #0
 80067de:	d101      	bne.n	80067e4 <??ZbZclClusterAlloc_2>
 80067e0:	2000      	movs	r0, #0
 80067e2:	e076      	b.n	80068d2 <??ZbZclClusterAlloc_1>

080067e4 <??ZbZclClusterAlloc_2>:
 80067e4:	9701      	str	r7, [sp, #4]
 80067e6:	f05f 0a00 	movs.w	sl, #0
 80067ea:	46a3      	mov	fp, r4
 80067ec:	4652      	mov	r2, sl
 80067ee:	9901      	ldr	r1, [sp, #4]
 80067f0:	4658      	mov	r0, fp
 80067f2:	f001 f871 	bl	80078d8 <__aeabi_memset>
 80067f6:	6024      	str	r4, [r4, #0]
 80067f8:	6064      	str	r4, [r4, #4]
 80067fa:	60a6      	str	r6, [r4, #8]
 80067fc:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8006800:	81a0      	strh	r0, [r4, #12]
 8006802:	f884 800e 	strb.w	r8, [r4, #14]
 8006806:	2000      	movs	r0, #0
 8006808:	8220      	strh	r0, [r4, #16]
 800680a:	f44f 7082 	mov.w	r0, #260	; 0x104
 800680e:	82a0      	strh	r0, [r4, #20]
 8006810:	200f      	movs	r0, #15
 8006812:	82e0      	strh	r0, [r4, #22]
 8006814:	2001      	movs	r0, #1
 8006816:	7620      	strb	r0, [r4, #24]
 8006818:	2000      	movs	r0, #0
 800681a:	7660      	strb	r0, [r4, #25]
 800681c:	2039      	movs	r0, #57	; 0x39
 800681e:	8360      	strh	r0, [r4, #26]
 8006820:	7725      	strb	r5, [r4, #28]
 8006822:	f114 0024 	adds.w	r0, r4, #36	; 0x24
 8006826:	6260      	str	r0, [r4, #36]	; 0x24
 8006828:	f114 0024 	adds.w	r0, r4, #36	; 0x24
 800682c:	62a0      	str	r0, [r4, #40]	; 0x28
 800682e:	f114 0030 	adds.w	r0, r4, #48	; 0x30
 8006832:	6320      	str	r0, [r4, #48]	; 0x30
 8006834:	f114 0030 	adds.w	r0, r4, #48	; 0x30
 8006838:	6360      	str	r0, [r4, #52]	; 0x34
 800683a:	9400      	str	r4, [sp, #0]
 800683c:	f8df 33d4 	ldr.w	r3, [pc, #980]	; 8006c14 <??DataTable5_1>
 8006840:	2281      	movs	r2, #129	; 0x81
 8006842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006846:	0030      	movs	r0, r6
 8006848:	f00d ff08 	bl	801465c <ZbMsgFilterRegister>
 800684c:	62e0      	str	r0, [r4, #44]	; 0x2c
 800684e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006850:	2800      	cmp	r0, #0
 8006852:	d104      	bne.n	800685e <??ZbZclClusterAlloc_3>
 8006854:	0020      	movs	r0, r4
 8006856:	f000 f870 	bl	800693a <ZbZclClusterFree>
 800685a:	2000      	movs	r0, #0
 800685c:	e039      	b.n	80068d2 <??ZbZclClusterAlloc_1>

0800685e <??ZbZclClusterAlloc_3>:
 800685e:	0022      	movs	r2, r4
 8006860:	f8df 13b4 	ldr.w	r1, [pc, #948]	; 8006c18 <??DataTable5_2>
 8006864:	0030      	movs	r0, r6
 8006866:	f00d ffb5 	bl	80147d4 <ZbTimerAlloc>
 800686a:	63a0      	str	r0, [r4, #56]	; 0x38
 800686c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800686e:	2800      	cmp	r0, #0
 8006870:	d104      	bne.n	800687c <??ZbZclClusterAlloc_4>
 8006872:	0020      	movs	r0, r4
 8006874:	f000 f861 	bl	800693a <ZbZclClusterFree>
 8006878:	2000      	movs	r0, #0
 800687a:	e02a      	b.n	80068d2 <??ZbZclClusterAlloc_1>

0800687c <??ZbZclClusterAlloc_4>:
 800687c:	0022      	movs	r2, r4
 800687e:	f20f 1125 	addw	r1, pc, #293	; 0x125
 8006882:	0030      	movs	r0, r6
 8006884:	f00d ffa6 	bl	80147d4 <ZbTimerAlloc>
 8006888:	6520      	str	r0, [r4, #80]	; 0x50
 800688a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800688c:	2800      	cmp	r0, #0
 800688e:	d104      	bne.n	800689a <??ZbZclClusterAlloc_5>
 8006890:	0020      	movs	r0, r4
 8006892:	f000 f852 	bl	800693a <ZbZclClusterFree>
 8006896:	2000      	movs	r0, #0
 8006898:	e01b      	b.n	80068d2 <??ZbZclClusterAlloc_1>

0800689a <??ZbZclClusterAlloc_5>:
 800689a:	21ac      	movs	r1, #172	; 0xac
 800689c:	0020      	movs	r0, r4
 800689e:	f7fa f9e0 	bl	8000c62 <ZbZclClusterSetMinSecurity>
 80068a2:	2201      	movs	r2, #1
 80068a4:	f8df 1374 	ldr.w	r1, [pc, #884]	; 8006c1c <??DataTable5_3>
 80068a8:	0020      	movs	r0, r4
 80068aa:	f7fe f8d7 	bl	8004a5c <ZbZclAttrAppendList>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d007      	beq.n	80068c2 <??ZbZclClusterAlloc_6>
 80068b2:	2300      	movs	r3, #0
 80068b4:	464a      	mov	r2, r9
 80068b6:	0021      	movs	r1, r4
 80068b8:	0030      	movs	r0, r6
 80068ba:	f00e fce7 	bl	801528c <zb_heap_free>
 80068be:	2000      	movs	r0, #0
 80068c0:	e007      	b.n	80068d2 <??ZbZclClusterAlloc_1>

080068c2 <??ZbZclClusterAlloc_6>:
 80068c2:	2201      	movs	r2, #1
 80068c4:	2300      	movs	r3, #0
 80068c6:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 80068ca:	0020      	movs	r0, r4
 80068cc:	f7fa f889 	bl	80009e2 <ZbZclAttrIntegerWrite>
 80068d0:	0020      	movs	r0, r4

080068d2 <??ZbZclClusterAlloc_1>:
 80068d2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068d6 <ZbZclClusterAttach>:
 80068d6:	b510      	push	{r4, lr}
 80068d8:	0004      	movs	r4, r0
 80068da:	7ba0      	ldrb	r0, [r4, #14]
 80068dc:	28ff      	cmp	r0, #255	; 0xff
 80068de:	d104      	bne.n	80068ea <??ZbZclClusterAttach_0>
 80068e0:	89a0      	ldrh	r0, [r4, #12]
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d001      	beq.n	80068ea <??ZbZclClusterAttach_0>
 80068e6:	89a0      	ldrh	r0, [r4, #12]
 80068e8:	280a      	cmp	r0, #10

080068ea <??ZbZclClusterAttach_0>:
 80068ea:	7ba0      	ldrb	r0, [r4, #14]
 80068ec:	28ff      	cmp	r0, #255	; 0xff
 80068ee:	d00b      	beq.n	8006908 <??ZbZclClusterAttach_1>
 80068f0:	7f23      	ldrb	r3, [r4, #28]
 80068f2:	8aa2      	ldrh	r2, [r4, #20]
 80068f4:	7ba1      	ldrb	r1, [r4, #14]
 80068f6:	0020      	movs	r0, r4
 80068f8:	f00e fba5 	bl	8015046 <ZbZclClusterBind>
 80068fc:	0001      	movs	r1, r0
 80068fe:	b2c9      	uxtb	r1, r1
 8006900:	2900      	cmp	r1, #0
 8006902:	d001      	beq.n	8006908 <??ZbZclClusterAttach_1>
 8006904:	b2c0      	uxtb	r0, r0
 8006906:	e005      	b.n	8006914 <??ZbZclClusterAttach_2>

08006908 <??ZbZclClusterAttach_1>:
 8006908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690a:	2800      	cmp	r0, #0
 800690c:	d101      	bne.n	8006912 <??ZbZclClusterAttach_3>
 800690e:	48c4      	ldr	r0, [pc, #784]	; (8006c20 <??DataTable5_4>)
 8006910:	65a0      	str	r0, [r4, #88]	; 0x58

08006912 <??ZbZclClusterAttach_3>:
 8006912:	2000      	movs	r0, #0

08006914 <??ZbZclClusterAttach_2>:
 8006914:	bd10      	pop	{r4, pc}

08006916 <ZbZclClusterDetach>:
 8006916:	b510      	push	{r4, lr}
 8006918:	0004      	movs	r4, r0
 800691a:	68a0      	ldr	r0, [r4, #8]
 800691c:	2800      	cmp	r0, #0
 800691e:	d00b      	beq.n	8006938 <??ZbZclClusterDetach_0>

08006920 <??ZbZclClusterDetach_1>:
 8006920:	0020      	movs	r0, r4
 8006922:	f00e fbd3 	bl	80150cc <ZbZclClusterUnbind>
 8006926:	0020      	movs	r0, r4
 8006928:	f00e fbfc 	bl	8015124 <ZbZclClusterRemoveAlarmResetHandler>
 800692c:	7ba0      	ldrb	r0, [r4, #14]
 800692e:	28ff      	cmp	r0, #255	; 0xff
 8006930:	d002      	beq.n	8006938 <??ZbZclClusterDetach_0>
 8006932:	0020      	movs	r0, r4
 8006934:	f00e fb51 	bl	8014fda <ZbZclClusterEndpointRemove>

08006938 <??ZbZclClusterDetach_0>:
 8006938:	bd10      	pop	{r4, pc}

0800693a <ZbZclClusterFree>:
 800693a:	b538      	push	{r3, r4, r5, lr}
 800693c:	0005      	movs	r5, r0
 800693e:	68ac      	ldr	r4, [r5, #8]
 8006940:	2c00      	cmp	r4, #0
 8006942:	d02d      	beq.n	80069a0 <??ZbZclClusterFree_0>

08006944 <??ZbZclClusterFree_1>:
 8006944:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8006946:	2800      	cmp	r0, #0
 8006948:	d004      	beq.n	8006954 <??ZbZclClusterFree_2>
 800694a:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800694c:	f00d ff94 	bl	8014878 <ZbTimerFree>
 8006950:	2000      	movs	r0, #0
 8006952:	6528      	str	r0, [r5, #80]	; 0x50

08006954 <??ZbZclClusterFree_2>:
 8006954:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8006956:	2800      	cmp	r0, #0
 8006958:	d004      	beq.n	8006964 <??ZbZclClusterFree_3>
 800695a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800695c:	f00d ff8c 	bl	8014878 <ZbTimerFree>
 8006960:	2000      	movs	r0, #0
 8006962:	63a8      	str	r0, [r5, #56]	; 0x38

08006964 <??ZbZclClusterFree_3>:
 8006964:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006966:	2800      	cmp	r0, #0
 8006968:	d005      	beq.n	8006976 <??ZbZclClusterFree_4>
 800696a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800696c:	0020      	movs	r0, r4
 800696e:	f00d fed9 	bl	8014724 <ZbMsgFilterRemove>
 8006972:	2000      	movs	r0, #0
 8006974:	62e8      	str	r0, [r5, #44]	; 0x2c

08006976 <??ZbZclClusterFree_4>:
 8006976:	0028      	movs	r0, r5
 8006978:	f7fe fe29 	bl	80055ce <ZbZclReportCleanup>
 800697c:	0028      	movs	r0, r5
 800697e:	f7ff ffca 	bl	8006916 <ZbZclClusterDetach>
 8006982:	0028      	movs	r0, r5
 8006984:	f7fe f976 	bl	8004c74 <ZbZclAttrFreeList>
 8006988:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800698a:	2800      	cmp	r0, #0
 800698c:	d002      	beq.n	8006994 <??ZbZclClusterFree_5>
 800698e:	0028      	movs	r0, r5
 8006990:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8006992:	4788      	blx	r1

08006994 <??ZbZclClusterFree_5>:
 8006994:	2300      	movs	r3, #0
 8006996:	a212      	add	r2, pc, #72	; (adr r2, 80069e0 <??DataTable4>)
 8006998:	0029      	movs	r1, r5
 800699a:	0020      	movs	r0, r4
 800699c:	f00e fc76 	bl	801528c <zb_heap_free>

080069a0 <??ZbZclClusterFree_0>:
 80069a0:	bd31      	pop	{r0, r4, r5, pc}
	...

080069a4 <zcl_cluster_persist_timer>:
 80069a4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80069a6:	0005      	movs	r5, r0
 80069a8:	000e      	movs	r6, r1
 80069aa:	0037      	movs	r7, r6
 80069ac:	a902      	add	r1, sp, #8
 80069ae:	0038      	movs	r0, r7
 80069b0:	f000 f818 	bl	80069e4 <zcl_persist_read_attrs>
 80069b4:	0004      	movs	r4, r0
 80069b6:	2c00      	cmp	r4, #0
 80069b8:	d010      	beq.n	80069dc <??zcl_cluster_persist_timer_0>
 80069ba:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80069be:	9001      	str	r0, [sp, #4]
 80069c0:	9400      	str	r4, [sp, #0]
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	7f3a      	ldrb	r2, [r7, #28]
 80069c8:	89b9      	ldrh	r1, [r7, #12]
 80069ca:	68b8      	ldr	r0, [r7, #8]
 80069cc:	f000 f92a 	bl	8006c24 <zcl_persist_send_cache>
 80069d0:	2300      	movs	r3, #0
 80069d2:	a203      	add	r2, pc, #12	; (adr r2, 80069e0 <??DataTable4>)
 80069d4:	0021      	movs	r1, r4
 80069d6:	68b8      	ldr	r0, [r7, #8]
 80069d8:	f00e fc58 	bl	801528c <zb_heap_free>

080069dc <??zcl_cluster_persist_timer_0>:
 80069dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

080069e0 <??DataTable4>:
 80069e0:	0000 0000                                   ....

080069e4 <zcl_persist_read_attrs>:
 80069e4:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	b08c      	sub	sp, #48	; 0x30
 80069ea:	0007      	movs	r7, r0
 80069ec:	f05f 0b00 	movs.w	fp, #0
 80069f0:	f05f 0900 	movs.w	r9, #0
 80069f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069f6:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 80069fa:	4288      	cmp	r0, r1
 80069fc:	d001      	beq.n	8006a02 <??zcl_persist_read_attrs_0>
 80069fe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006a00:	e000      	b.n	8006a04 <??zcl_persist_read_attrs_1>

08006a02 <??zcl_persist_read_attrs_0>:
 8006a02:	2400      	movs	r4, #0

08006a04 <??zcl_persist_read_attrs_1>:
 8006a04:	2c00      	cmp	r4, #0
 8006a06:	d01e      	beq.n	8006a46 <??zcl_persist_read_attrs_2>
 8006a08:	46a0      	mov	r8, r4
 8006a0a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006a0e:	7900      	ldrb	r0, [r0, #4]
 8006a10:	0740      	lsls	r0, r0, #29
 8006a12:	d50f      	bpl.n	8006a34 <??zcl_persist_read_attrs_3>

08006a14 <??zcl_persist_read_attrs_4>:
 8006a14:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d004      	beq.n	8006a26 <??zcl_persist_read_attrs_5>
 8006a1c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006a20:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8006a24:	d300      	bcc.n	8006a28 <??zcl_persist_read_attrs_6>

08006a26 <??zcl_persist_read_attrs_5>:
 8006a26:	e005      	b.n	8006a34 <??zcl_persist_read_attrs_3>

08006a28 <??zcl_persist_read_attrs_6>:
 8006a28:	f119 0904 	adds.w	r9, r9, #4
 8006a2c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006a30:	eb10 0909 	adds.w	r9, r0, r9

08006a34 <??zcl_persist_read_attrs_3>:
 8006a34:	6820      	ldr	r0, [r4, #0]
 8006a36:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8006a3a:	4288      	cmp	r0, r1
 8006a3c:	d001      	beq.n	8006a42 <??zcl_persist_read_attrs_7>
 8006a3e:	6824      	ldr	r4, [r4, #0]
 8006a40:	e7e0      	b.n	8006a04 <??zcl_persist_read_attrs_1>

08006a42 <??zcl_persist_read_attrs_7>:
 8006a42:	2400      	movs	r4, #0
 8006a44:	e7de      	b.n	8006a04 <??zcl_persist_read_attrs_1>

08006a46 <??zcl_persist_read_attrs_2>:
 8006a46:	4648      	mov	r0, r9
 8006a48:	b280      	uxth	r0, r0
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d101      	bne.n	8006a52 <??zcl_persist_read_attrs_8>
 8006a4e:	2000      	movs	r0, #0
 8006a50:	e0db      	b.n	8006c0a <??zcl_persist_read_attrs_9>

08006a52 <??zcl_persist_read_attrs_8>:
 8006a52:	2300      	movs	r3, #0
 8006a54:	a26e      	add	r2, pc, #440	; (adr r2, 8006c10 <??DataTable5>)
 8006a56:	4649      	mov	r1, r9
 8006a58:	b289      	uxth	r1, r1
 8006a5a:	68b8      	ldr	r0, [r7, #8]
 8006a5c:	f00e fc07 	bl	801526e <zb_heap_alloc>
 8006a60:	0005      	movs	r5, r0
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	d101      	bne.n	8006a6a <??zcl_persist_read_attrs_10>
 8006a66:	2000      	movs	r0, #0
 8006a68:	e0cf      	b.n	8006c0a <??zcl_persist_read_attrs_9>

08006a6a <??zcl_persist_read_attrs_10>:
 8006a6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a6c:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8006a70:	4288      	cmp	r0, r1
 8006a72:	d001      	beq.n	8006a78 <??zcl_persist_read_attrs_11>
 8006a74:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006a76:	e000      	b.n	8006a7a <??zcl_persist_read_attrs_12>

08006a78 <??zcl_persist_read_attrs_11>:
 8006a78:	2400      	movs	r4, #0

08006a7a <??zcl_persist_read_attrs_12>:
 8006a7a:	2c00      	cmp	r4, #0
 8006a7c:	f000 80c1 	beq.w	8006c02 <??zcl_persist_read_attrs_13>
 8006a80:	46a0      	mov	r8, r4
 8006a82:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006a86:	7900      	ldrb	r0, [r0, #4]
 8006a88:	0740      	lsls	r0, r0, #29
 8006a8a:	f140 80b1 	bpl.w	8006bf0 <??zcl_persist_read_attrs_14>

08006a8e <??zcl_persist_read_attrs_15>:
 8006a8e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006a92:	7900      	ldrb	r0, [r0, #4]
 8006a94:	06c0      	lsls	r0, r0, #27
 8006a96:	d566      	bpl.n	8006b66 <??zcl_persist_read_attrs_16>
 8006a98:	4658      	mov	r0, fp
 8006a9a:	b280      	uxth	r0, r0
 8006a9c:	4428      	add	r0, r5
 8006a9e:	1d00      	adds	r0, r0, #4
 8006aa0:	9001      	str	r0, [sp, #4]
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	b289      	uxth	r1, r1
 8006aa6:	4658      	mov	r0, fp
 8006aa8:	b280      	uxth	r0, r0
 8006aaa:	1a09      	subs	r1, r1, r0
 8006aac:	1f08      	subs	r0, r1, #4
 8006aae:	f8ad 0000 	strh.w	r0, [sp]
 8006ab2:	2020      	movs	r0, #32
 8006ab4:	9003      	str	r0, [sp, #12]
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	9002      	str	r0, [sp, #8]
 8006aba:	f10d 0a10 	add.w	sl, sp, #16
 8006abe:	9a02      	ldr	r2, [sp, #8]
 8006ac0:	9903      	ldr	r1, [sp, #12]
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	f000 ff08 	bl	80078d8 <__aeabi_memset>
 8006ac8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006acc:	9004      	str	r0, [sp, #16]
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f88d 0014 	strb.w	r0, [sp, #20]
 8006ad4:	9801      	ldr	r0, [sp, #4]
 8006ad6:	9006      	str	r0, [sp, #24]
 8006ad8:	f8bd 0000 	ldrh.w	r0, [sp]
 8006adc:	9007      	str	r0, [sp, #28]
 8006ade:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006ae0:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ae2:	aa04      	add	r2, sp, #16
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	0038      	movs	r0, r7
 8006ae8:	f7fe f890 	bl	8004c0c <ZbZclAttrCallbackExec>
 8006aec:	4682      	mov	sl, r0
 8006aee:	4650      	mov	r0, sl
 8006af0:	b2c0      	uxtb	r0, r0
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d17c      	bne.n	8006bf0 <??zcl_persist_read_attrs_14>

08006af6 <??zcl_persist_read_attrs_17>:
 8006af6:	2300      	movs	r3, #0
 8006af8:	f8bd 2000 	ldrh.w	r2, [sp]
 8006afc:	9901      	ldr	r1, [sp, #4]
 8006afe:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006b02:	7880      	ldrb	r0, [r0, #2]
 8006b04:	f7fd fec5 	bl	8004892 <ZbZclAttrParseLength>
 8006b08:	0006      	movs	r6, r0
 8006b0a:	2e01      	cmp	r6, #1
 8006b0c:	db02      	blt.n	8006b14 <??zcl_persist_read_attrs_18>
 8006b0e:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8006b12:	db00      	blt.n	8006b16 <??zcl_persist_read_attrs_19>

08006b14 <??zcl_persist_read_attrs_18>:
 8006b14:	e06c      	b.n	8006bf0 <??zcl_persist_read_attrs_14>

08006b16 <??zcl_persist_read_attrs_19>:
 8006b16:	4648      	mov	r0, r9
 8006b18:	b280      	uxth	r0, r0
 8006b1a:	4659      	mov	r1, fp
 8006b1c:	b289      	uxth	r1, r1
 8006b1e:	fa11 f186 	uxtah	r1, r1, r6
 8006b22:	1d09      	adds	r1, r1, #4
 8006b24:	4288      	cmp	r0, r1
 8006b26:	d207      	bcs.n	8006b38 <??zcl_persist_read_attrs_20>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	a239      	add	r2, pc, #228	; (adr r2, 8006c10 <??DataTable5>)
 8006b2c:	0029      	movs	r1, r5
 8006b2e:	68b8      	ldr	r0, [r7, #8]
 8006b30:	f00e fbac 	bl	801528c <zb_heap_free>
 8006b34:	2000      	movs	r0, #0
 8006b36:	e068      	b.n	8006c0a <??zcl_persist_read_attrs_9>

08006b38 <??zcl_persist_read_attrs_20>:
 8006b38:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006b3c:	8801      	ldrh	r1, [r0, #0]
 8006b3e:	4658      	mov	r0, fp
 8006b40:	b280      	uxth	r0, r0
 8006b42:	4428      	add	r0, r5
 8006b44:	f7fc fef6 	bl	8003934 <putle16>
 8006b48:	f11b 0b02 	adds.w	fp, fp, #2
 8006b4c:	0030      	movs	r0, r6
 8006b4e:	0001      	movs	r1, r0
 8006b50:	b289      	uxth	r1, r1
 8006b52:	4658      	mov	r0, fp
 8006b54:	b280      	uxth	r0, r0
 8006b56:	4428      	add	r0, r5
 8006b58:	f7fc feec 	bl	8003934 <putle16>
 8006b5c:	f11b 0b02 	adds.w	fp, fp, #2
 8006b60:	eb16 0b0b 	adds.w	fp, r6, fp
 8006b64:	e044      	b.n	8006bf0 <??zcl_persist_read_attrs_14>

08006b66 <??zcl_persist_read_attrs_16>:
 8006b66:	2300      	movs	r3, #0
 8006b68:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006b6c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8006b70:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006b74:	7880      	ldrb	r0, [r0, #2]
 8006b76:	f7fd fe8c 	bl	8004892 <ZbZclAttrParseLength>
 8006b7a:	0006      	movs	r6, r0
 8006b7c:	2e01      	cmp	r6, #1
 8006b7e:	db02      	blt.n	8006b86 <??zcl_persist_read_attrs_21>
 8006b80:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8006b84:	db00      	blt.n	8006b88 <??zcl_persist_read_attrs_22>

08006b86 <??zcl_persist_read_attrs_21>:
 8006b86:	e033      	b.n	8006bf0 <??zcl_persist_read_attrs_14>

08006b88 <??zcl_persist_read_attrs_22>:
 8006b88:	4648      	mov	r0, r9
 8006b8a:	b280      	uxth	r0, r0
 8006b8c:	4659      	mov	r1, fp
 8006b8e:	b289      	uxth	r1, r1
 8006b90:	fa11 f186 	uxtah	r1, r1, r6
 8006b94:	1d09      	adds	r1, r1, #4
 8006b96:	4288      	cmp	r0, r1
 8006b98:	d207      	bcs.n	8006baa <??zcl_persist_read_attrs_23>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	a21c      	add	r2, pc, #112	; (adr r2, 8006c10 <??DataTable5>)
 8006b9e:	0029      	movs	r1, r5
 8006ba0:	68b8      	ldr	r0, [r7, #8]
 8006ba2:	f00e fb73 	bl	801528c <zb_heap_free>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e02f      	b.n	8006c0a <??zcl_persist_read_attrs_9>

08006baa <??zcl_persist_read_attrs_23>:
 8006baa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006bae:	8801      	ldrh	r1, [r0, #0]
 8006bb0:	4658      	mov	r0, fp
 8006bb2:	b280      	uxth	r0, r0
 8006bb4:	4428      	add	r0, r5
 8006bb6:	f7fc febd 	bl	8003934 <putle16>
 8006bba:	f11b 0b02 	adds.w	fp, fp, #2
 8006bbe:	0030      	movs	r0, r6
 8006bc0:	0001      	movs	r1, r0
 8006bc2:	b289      	uxth	r1, r1
 8006bc4:	4658      	mov	r0, fp
 8006bc6:	b280      	uxth	r0, r0
 8006bc8:	4428      	add	r0, r5
 8006bca:	f7fc feb3 	bl	8003934 <putle16>
 8006bce:	f11b 0b02 	adds.w	fp, fp, #2
 8006bd2:	9601      	str	r6, [sp, #4]
 8006bd4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8006bd8:	9000      	str	r0, [sp, #0]
 8006bda:	4658      	mov	r0, fp
 8006bdc:	b280      	uxth	r0, r0
 8006bde:	eb05 0a00 	add.w	sl, r5, r0
 8006be2:	9a01      	ldr	r2, [sp, #4]
 8006be4:	9900      	ldr	r1, [sp, #0]
 8006be6:	4650      	mov	r0, sl
 8006be8:	f010 ff3a 	bl	8017a60 <__aeabi_memcpy>
 8006bec:	eb16 0b0b 	adds.w	fp, r6, fp

08006bf0 <??zcl_persist_read_attrs_14>:
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8006bf6:	4288      	cmp	r0, r1
 8006bf8:	d001      	beq.n	8006bfe <??zcl_persist_read_attrs_24>
 8006bfa:	6824      	ldr	r4, [r4, #0]
 8006bfc:	e73d      	b.n	8006a7a <??zcl_persist_read_attrs_12>

08006bfe <??zcl_persist_read_attrs_24>:
 8006bfe:	2400      	movs	r4, #0
 8006c00:	e73b      	b.n	8006a7a <??zcl_persist_read_attrs_12>

08006c02 <??zcl_persist_read_attrs_13>:
 8006c02:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006c04:	f8a0 b000 	strh.w	fp, [r0]
 8006c08:	0028      	movs	r0, r5

08006c0a <??zcl_persist_read_attrs_9>:
 8006c0a:	b00d      	add	sp, #52	; 0x34
 8006c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c10 <??DataTable5>:
 8006c10:	0000 0000                                   ....

08006c14 <??DataTable5_1>:
 8006c14:	5643 0800                                   CV..

08006c18 <??DataTable5_2>:
 8006c18:	50b9 0800                                   .P..

08006c1c <??DataTable5_3>:
 8006c1c:	a8a8 0801                                   ....

08006c20 <??DataTable5_4>:
 8006c20:	67b1 0800                                   .g..

08006c24 <zcl_persist_send_cache>:
 8006c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c28:	b098      	sub	sp, #96	; 0x60
 8006c2a:	0005      	movs	r5, r0
 8006c2c:	001e      	movs	r6, r3
 8006c2e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8006c30:	f05f 0900 	movs.w	r9, #0
 8006c34:	0030      	movs	r0, r6
 8006c36:	b280      	uxth	r0, r0
 8006c38:	28ff      	cmp	r0, #255	; 0xff
 8006c3a:	d101      	bne.n	8006c40 <??zcl_persist_send_cache_0>
 8006c3c:	2085      	movs	r0, #133	; 0x85
 8006c3e:	e0a1      	b.n	8006d84 <??zcl_persist_send_cache_1>

08006c40 <??zcl_persist_send_cache_0>:
 8006c40:	0020      	movs	r0, r4
 8006c42:	b280      	uxth	r0, r0
 8006c44:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 8006c48:	4288      	cmp	r0, r1
 8006c4a:	d301      	bcc.n	8006c50 <??zcl_persist_send_cache_2>
 8006c4c:	2089      	movs	r0, #137	; 0x89
 8006c4e:	e099      	b.n	8006d84 <??zcl_persist_send_cache_1>

08006c50 <??zcl_persist_send_cache_2>:
 8006c50:	f05f 0a08 	movs.w	sl, #8
 8006c54:	f05f 0b00 	movs.w	fp, #0
 8006c58:	466f      	mov	r7, sp
 8006c5a:	465a      	mov	r2, fp
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	0038      	movs	r0, r7
 8006c60:	f000 fe3a 	bl	80078d8 <__aeabi_memset>
 8006c64:	2001      	movs	r0, #1
 8006c66:	f88d 0000 	strb.w	r0, [sp]
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	f88d 0001 	strb.w	r0, [sp, #1]
 8006c70:	2000      	movs	r0, #0
 8006c72:	f88d 0002 	strb.w	r0, [sp, #2]
 8006c76:	2001      	movs	r0, #1
 8006c78:	f88d 0003 	strb.w	r0, [sp, #3]
 8006c7c:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 8006c80:	f8ad 8004 	strh.w	r8, [sp, #4]
 8006c84:	f00e f875 	bl	8014d72 <ZbZclGetNextSeqnum>
 8006c88:	f88d 0006 	strb.w	r0, [sp, #6]
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f88d 0007 	strb.w	r0, [sp, #7]
 8006c92:	2205      	movs	r2, #5
 8006c94:	a904      	add	r1, sp, #16
 8006c96:	4668      	mov	r0, sp
 8006c98:	f7fa fe7a 	bl	8001990 <ZbZclAppendHeader>
 8006c9c:	0007      	movs	r7, r0
 8006c9e:	2f00      	cmp	r7, #0
 8006ca0:	d501      	bpl.n	8006ca6 <??zcl_persist_send_cache_3>
 8006ca2:	2085      	movs	r0, #133	; 0x85
 8006ca4:	e06e      	b.n	8006d84 <??zcl_persist_send_cache_1>

08006ca6 <??zcl_persist_send_cache_3>:
 8006ca6:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
 8006caa:	a804      	add	r0, sp, #16
 8006cac:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8006cb0:	a812      	add	r0, sp, #72	; 0x48
 8006cb2:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 8006cb6:	6047      	str	r7, [r0, #4]
 8006cb8:	f119 0901 	adds.w	r9, r9, #1
 8006cbc:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8006cc0:	a802      	add	r0, sp, #8
 8006cc2:	f7fc fe37 	bl	8003934 <putle16>
 8006cc6:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 8006cca:	f88d 000a 	strb.w	r0, [sp, #10]
 8006cce:	a802      	add	r0, sp, #8
 8006cd0:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8006cd4:	2003      	movs	r0, #3
 8006cd6:	a912      	add	r1, sp, #72	; 0x48
 8006cd8:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8006cdc:	6048      	str	r0, [r1, #4]
 8006cde:	f119 0901 	adds.w	r9, r9, #1
 8006ce2:	9824      	ldr	r0, [sp, #144]	; 0x90
 8006ce4:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8006ce8:	0020      	movs	r0, r4
 8006cea:	b280      	uxth	r0, r0
 8006cec:	a912      	add	r1, sp, #72	; 0x48
 8006cee:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8006cf2:	6048      	str	r0, [r1, #4]
 8006cf4:	f119 0901 	adds.w	r9, r9, #1
 8006cf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006cfc:	f05f 0a30 	movs.w	sl, #48	; 0x30
 8006d00:	f05f 0900 	movs.w	r9, #0
 8006d04:	f10d 0b18 	add.w	fp, sp, #24
 8006d08:	464a      	mov	r2, r9
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	4658      	mov	r0, fp
 8006d0e:	f000 fde3 	bl	80078d8 <__aeabi_memset>
 8006d12:	2003      	movs	r0, #3
 8006d14:	f88d 0018 	strb.w	r0, [sp, #24]
 8006d18:	0028      	movs	r0, r5
 8006d1a:	f00d f8cb 	bl	8013eb4 <ZbExtendedAddress>
 8006d1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d22:	20ff      	movs	r0, #255	; 0xff
 8006d24:	f8ad 001a 	strh.w	r0, [sp, #26]
 8006d28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006d2c:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8006d30:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 8006d34:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8006d38:	a812      	add	r0, sp, #72	; 0x48
 8006d3a:	900c      	str	r0, [sp, #48]	; 0x30
 8006d3c:	9803      	ldr	r0, [sp, #12]
 8006d3e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8006d42:	2000      	movs	r0, #0
 8006d44:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 8006d48:	2000      	movs	r0, #0
 8006d4a:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8006d4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006d52:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8006d56:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8006d5a:	f050 0008 	orrs.w	r0, r0, #8
 8006d5e:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8006d62:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8006d66:	f050 0004 	orrs.w	r0, r0, #4
 8006d6a:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2200      	movs	r2, #0
 8006d72:	a906      	add	r1, sp, #24
 8006d74:	0028      	movs	r0, r5
 8006d76:	f00d fadd 	bl	8014334 <ZbApsdeDataReqCallback>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d001      	beq.n	8006d82 <??zcl_persist_send_cache_4>
 8006d7e:	2001      	movs	r0, #1
 8006d80:	e000      	b.n	8006d84 <??zcl_persist_send_cache_1>

08006d82 <??zcl_persist_send_cache_4>:
 8006d82:	2000      	movs	r0, #0

08006d84 <??zcl_persist_send_cache_1>:
 8006d84:	b01b      	add	sp, #108	; 0x6c
 8006d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d8a <ZbZclHandleGetSceneData>:
 8006d8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d8e:	b0a2      	sub	sp, #136	; 0x88
 8006d90:	0004      	movs	r4, r0
 8006d92:	000d      	movs	r5, r1
 8006d94:	0016      	movs	r6, r2
 8006d96:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d106      	bne.n	8006daa <??ZbZclHandleGetSceneData_0>
 8006d9c:	2381      	movs	r3, #129	; 0x81
 8006d9e:	002a      	movs	r2, r5
 8006da0:	0031      	movs	r1, r6
 8006da2:	0020      	movs	r0, r4
 8006da4:	f00e f860 	bl	8014e68 <ZbZclSendDefaultResponse>
 8006da8:	e06b      	b.n	8006e82 <??ZbZclHandleGetSceneData_1>

08006daa <??ZbZclHandleGetSceneData_0>:
 8006daa:	2708      	movs	r7, #8
 8006dac:	f05f 0800 	movs.w	r8, #0
 8006db0:	46e9      	mov	r9, sp
 8006db2:	4642      	mov	r2, r8
 8006db4:	0039      	movs	r1, r7
 8006db6:	4648      	mov	r0, r9
 8006db8:	f000 fd8e 	bl	80078d8 <__aeabi_memset>
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	f88d 0000 	strb.w	r0, [sp]
 8006dc2:	2001      	movs	r0, #1
 8006dc4:	f88d 0001 	strb.w	r0, [sp, #1]
 8006dc8:	78a8      	ldrb	r0, [r5, #2]
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d103      	bne.n	8006dd6 <??ZbZclHandleGetSceneData_2>
 8006dce:	2001      	movs	r0, #1
 8006dd0:	f88d 0002 	strb.w	r0, [sp, #2]
 8006dd4:	e002      	b.n	8006ddc <??ZbZclHandleGetSceneData_3>

08006dd6 <??ZbZclHandleGetSceneData_2>:
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	f88d 0002 	strb.w	r0, [sp, #2]

08006ddc <??ZbZclHandleGetSceneData_3>:
 8006ddc:	2001      	movs	r0, #1
 8006dde:	f88d 0003 	strb.w	r0, [sp, #3]
 8006de2:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8006de6:	f8ad 0004 	strh.w	r0, [sp, #4]
 8006dea:	79a8      	ldrb	r0, [r5, #6]
 8006dec:	f88d 0006 	strb.w	r0, [sp, #6]
 8006df0:	20f0      	movs	r0, #240	; 0xf0
 8006df2:	f88d 0007 	strb.w	r0, [sp, #7]
 8006df6:	8b62      	ldrh	r2, [r4, #26]
 8006df8:	a90e      	add	r1, sp, #56	; 0x38
 8006dfa:	4668      	mov	r0, sp
 8006dfc:	f7fa fdc8 	bl	8001990 <ZbZclAppendHeader>
 8006e00:	0007      	movs	r7, r0
 8006e02:	2f00      	cmp	r7, #0
 8006e04:	d506      	bpl.n	8006e14 <??ZbZclHandleGetSceneData_4>
 8006e06:	2380      	movs	r3, #128	; 0x80
 8006e08:	002a      	movs	r2, r5
 8006e0a:	0031      	movs	r1, r6
 8006e0c:	0020      	movs	r0, r4
 8006e0e:	f00e f82b 	bl	8014e68 <ZbZclSendDefaultResponse>
 8006e12:	e036      	b.n	8006e82 <??ZbZclHandleGetSceneData_1>

08006e14 <??ZbZclHandleGetSceneData_4>:
 8006e14:	46b9      	mov	r9, r7
 8006e16:	f1d9 024d 	rsbs	r2, r9, #77	; 0x4d
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	a80e      	add	r0, sp, #56	; 0x38
 8006e1e:	eb00 0109 	add.w	r1, r0, r9
 8006e22:	0020      	movs	r0, r4
 8006e24:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e26:	4798      	blx	r3
 8006e28:	4680      	mov	r8, r0
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	b2c0      	uxtb	r0, r0
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d106      	bne.n	8006e40 <??ZbZclHandleGetSceneData_5>
 8006e32:	2381      	movs	r3, #129	; 0x81
 8006e34:	002a      	movs	r2, r5
 8006e36:	0031      	movs	r1, r6
 8006e38:	0020      	movs	r0, r4
 8006e3a:	f00e f815 	bl	8014e68 <ZbZclSendDefaultResponse>
 8006e3e:	e020      	b.n	8006e82 <??ZbZclHandleGetSceneData_1>

08006e40 <??ZbZclHandleGetSceneData_5>:
 8006e40:	fa59 f988 	uxtab	r9, r9, r8
 8006e44:	0032      	movs	r2, r6
 8006e46:	a902      	add	r1, sp, #8
 8006e48:	0020      	movs	r0, r4
 8006e4a:	f7fa f840 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8006e4e:	a802      	add	r0, sp, #8
 8006e50:	f116 0110 	adds.w	r1, r6, #16
 8006e54:	2210      	movs	r2, #16
 8006e56:	f010 fe03 	bl	8017a60 <__aeabi_memcpy>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8006e60:	2000      	movs	r0, #0
 8006e62:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
 8006e66:	2000      	movs	r0, #0
 8006e68:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006e6c:	a80e      	add	r0, sp, #56	; 0x38
 8006e6e:	9008      	str	r0, [sp, #32]
 8006e70:	4648      	mov	r0, r9
 8006e72:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8006e76:	2300      	movs	r3, #0
 8006e78:	2200      	movs	r2, #0
 8006e7a:	a902      	add	r1, sp, #8
 8006e7c:	68a0      	ldr	r0, [r4, #8]
 8006e7e:	f00d fa59 	bl	8014334 <ZbApsdeDataReqCallback>

08006e82 <??ZbZclHandleGetSceneData_1>:
 8006e82:	b023      	add	sp, #140	; 0x8c
 8006e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006e88 <ZbZclHandleSetSceneData>:
 8006e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	b0a4      	sub	sp, #144	; 0x90
 8006e8e:	0004      	movs	r4, r0
 8006e90:	000d      	movs	r5, r1
 8006e92:	0016      	movs	r6, r2
 8006e94:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d106      	bne.n	8006ea8 <??ZbZclHandleSetSceneData_0>
 8006e9a:	2381      	movs	r3, #129	; 0x81
 8006e9c:	002a      	movs	r2, r5
 8006e9e:	0031      	movs	r1, r6
 8006ea0:	0020      	movs	r0, r4
 8006ea2:	f00d ffe1 	bl	8014e68 <ZbZclSendDefaultResponse>
 8006ea6:	e086      	b.n	8006fb6 <??ZbZclHandleSetSceneData_1>

08006ea8 <??ZbZclHandleSetSceneData_0>:
 8006ea8:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8006eaa:	2805      	cmp	r0, #5
 8006eac:	da06      	bge.n	8006ebc <??ZbZclHandleSetSceneData_2>
 8006eae:	2380      	movs	r3, #128	; 0x80
 8006eb0:	002a      	movs	r2, r5
 8006eb2:	0031      	movs	r1, r6
 8006eb4:	0020      	movs	r0, r4
 8006eb6:	f00d ffd7 	bl	8014e68 <ZbZclSendDefaultResponse>
 8006eba:	e07c      	b.n	8006fb6 <??ZbZclHandleSetSceneData_1>

08006ebc <??ZbZclHandleSetSceneData_2>:
 8006ebc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8006ebe:	f7fc fcfe 	bl	80038be <pletoh32>
 8006ec2:	0007      	movs	r7, r0
 8006ec4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8006ec6:	7900      	ldrb	r0, [r0, #4]
 8006ec8:	f88d 0000 	strb.w	r0, [sp]
 8006ecc:	f89d 0000 	ldrb.w	r0, [sp]
 8006ed0:	1d40      	adds	r0, r0, #5
 8006ed2:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8006ed4:	4288      	cmp	r0, r1
 8006ed6:	d206      	bcs.n	8006ee6 <??ZbZclHandleSetSceneData_3>
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	002a      	movs	r2, r5
 8006edc:	0031      	movs	r1, r6
 8006ede:	0020      	movs	r0, r4
 8006ee0:	f00d ffc2 	bl	8014e68 <ZbZclSendDefaultResponse>
 8006ee4:	e067      	b.n	8006fb6 <??ZbZclHandleSetSceneData_1>

08006ee6 <??ZbZclHandleSetSceneData_3>:
 8006ee6:	003b      	movs	r3, r7
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	f89d 2000 	ldrb.w	r2, [sp]
 8006eee:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8006ef0:	1d41      	adds	r1, r0, #5
 8006ef2:	0020      	movs	r0, r4
 8006ef4:	f8d4 c064 	ldr.w	ip, [r4, #100]	; 0x64
 8006ef8:	47e0      	blx	ip
 8006efa:	4680      	mov	r8, r0
 8006efc:	f05f 0908 	movs.w	r9, #8
 8006f00:	f05f 0a00 	movs.w	sl, #0
 8006f04:	f10d 0b04 	add.w	fp, sp, #4
 8006f08:	4652      	mov	r2, sl
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	4658      	mov	r0, fp
 8006f0e:	f000 fce3 	bl	80078d8 <__aeabi_memset>
 8006f12:	2000      	movs	r0, #0
 8006f14:	f88d 0004 	strb.w	r0, [sp, #4]
 8006f18:	2001      	movs	r0, #1
 8006f1a:	f88d 0005 	strb.w	r0, [sp, #5]
 8006f1e:	78a8      	ldrb	r0, [r5, #2]
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d103      	bne.n	8006f2c <??ZbZclHandleSetSceneData_4>
 8006f24:	2001      	movs	r0, #1
 8006f26:	f88d 0006 	strb.w	r0, [sp, #6]
 8006f2a:	e002      	b.n	8006f32 <??ZbZclHandleSetSceneData_5>

08006f2c <??ZbZclHandleSetSceneData_4>:
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	f88d 0006 	strb.w	r0, [sp, #6]

08006f32 <??ZbZclHandleSetSceneData_5>:
 8006f32:	2001      	movs	r0, #1
 8006f34:	f88d 0007 	strb.w	r0, [sp, #7]
 8006f38:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8006f3c:	f8ad 0008 	strh.w	r0, [sp, #8]
 8006f40:	79a8      	ldrb	r0, [r5, #6]
 8006f42:	f88d 000a 	strb.w	r0, [sp, #10]
 8006f46:	20f1      	movs	r0, #241	; 0xf1
 8006f48:	f88d 000b 	strb.w	r0, [sp, #11]
 8006f4c:	8b62      	ldrh	r2, [r4, #26]
 8006f4e:	a910      	add	r1, sp, #64	; 0x40
 8006f50:	a801      	add	r0, sp, #4
 8006f52:	f7fa fd1d 	bl	8001990 <ZbZclAppendHeader>
 8006f56:	4681      	mov	r9, r0
 8006f58:	f1b9 0f00 	cmp.w	r9, #0
 8006f5c:	d506      	bpl.n	8006f6c <??ZbZclHandleSetSceneData_6>
 8006f5e:	2380      	movs	r3, #128	; 0x80
 8006f60:	002a      	movs	r2, r5
 8006f62:	0031      	movs	r1, r6
 8006f64:	0020      	movs	r0, r4
 8006f66:	f00d ff7f 	bl	8014e68 <ZbZclSendDefaultResponse>
 8006f6a:	e024      	b.n	8006fb6 <??ZbZclHandleSetSceneData_1>

08006f6c <??ZbZclHandleSetSceneData_6>:
 8006f6c:	46ca      	mov	sl, r9
 8006f6e:	a810      	add	r0, sp, #64	; 0x40
 8006f70:	f800 800a 	strb.w	r8, [r0, sl]
 8006f74:	f11a 0a01 	adds.w	sl, sl, #1
 8006f78:	0032      	movs	r2, r6
 8006f7a:	a904      	add	r1, sp, #16
 8006f7c:	0020      	movs	r0, r4
 8006f7e:	f7f9 ffa6 	bl	8000ece <ZbZclClusterInitApsdeReq>
 8006f82:	a804      	add	r0, sp, #16
 8006f84:	f116 0110 	adds.w	r1, r6, #16
 8006f88:	2210      	movs	r2, #16
 8006f8a:	f010 fd69 	bl	8017a60 <__aeabi_memcpy>
 8006f8e:	2000      	movs	r0, #0
 8006f90:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8006f94:	2000      	movs	r0, #0
 8006f96:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8006fa0:	a810      	add	r0, sp, #64	; 0x40
 8006fa2:	900a      	str	r0, [sp, #40]	; 0x28
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8006faa:	2300      	movs	r3, #0
 8006fac:	2200      	movs	r2, #0
 8006fae:	a904      	add	r1, sp, #16
 8006fb0:	68a0      	ldr	r0, [r4, #8]
 8006fb2:	f00d f9bf 	bl	8014334 <ZbApsdeDataReqCallback>

08006fb6 <??ZbZclHandleSetSceneData_1>:
 8006fb6:	b025      	add	sp, #148	; 0x94
 8006fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fbc <ZbZclAppendFloat>:
 8006fbc:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc0:	b081      	sub	sp, #4
 8006fc2:	ed2d 8b04 	vpush	{d8-d9}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	eeb0 8a40 	vmov.f32	s16, s0
 8006fcc:	eef0 8a60 	vmov.f32	s17, s1
 8006fd0:	000e      	movs	r6, r1
 8006fd2:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8006fd6:	2838      	cmp	r0, #56	; 0x38
 8006fd8:	d149      	bne.n	800706e <??ZbZclAppendFloat_0>
 8006fda:	2400      	movs	r4, #0
 8006fdc:	2510      	movs	r5, #16
 8006fde:	f07f 070e 	mvns.w	r7, #14
 8006fe2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006fe4:	2802      	cmp	r0, #2
 8006fe6:	d202      	bcs.n	8006fee <??ZbZclAppendFloat_1>
 8006fe8:	f05f 30ff 	movs.w	r0, #4294967295
 8006fec:	e120      	b.n	8007230 <??ZbZclAppendFloat_2>

08006fee <??ZbZclAppendFloat_1>:
 8006fee:	003a      	movs	r2, r7
 8006ff0:	0029      	movs	r1, r5
 8006ff2:	4668      	mov	r0, sp
 8006ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ff8:	eef0 0a68 	vmov.f32	s1, s17
 8006ffc:	f000 fb08 	bl	8007610 <ZbZclFloatFrexp>
 8007000:	eeb0 9a40 	vmov.f32	s18, s0
 8007004:	eef0 9a60 	vmov.f32	s19, s1
 8007008:	f8dd 8000 	ldr.w	r8, [sp]
 800700c:	ebb8 0807 	subs.w	r8, r8, r7
 8007010:	ea5f 2888 	movs.w	r8, r8, lsl #10
 8007014:	f418 48f8 	ands.w	r8, r8, #31744	; 0x7c00
 8007018:	ec51 0b19 	vmov	r0, r1, d9
 800701c:	2200      	movs	r2, #0
 800701e:	2300      	movs	r3, #0
 8007020:	f001 f92e 	bl	8008280 <__aeabi_cdcmpeq>
 8007024:	d210      	bcs.n	8007048 <??ZbZclAppendFloat_3>
 8007026:	ec51 0b19 	vmov	r0, r1, d9
 800702a:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 800702e:	f001 f961 	bl	80082f4 <__aeabi_d2iz>
 8007032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007036:	fb10 f101 	smulbb	r1, r0, r1
 800703a:	0589      	lsls	r1, r1, #22
 800703c:	0d89      	lsrs	r1, r1, #22
 800703e:	ea58 0101 	orrs.w	r1, r8, r1
 8007042:	f451 4100 	orrs.w	r1, r1, #32768	; 0x8000
 8007046:	e00b      	b.n	8007060 <??ZbZclAppendFloat_4>

08007048 <??ZbZclAppendFloat_3>:
 8007048:	ec51 0b19 	vmov	r0, r1, d9
 800704c:	f001 f952 	bl	80082f4 <__aeabi_d2iz>
 8007050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007054:	fb10 f101 	smulbb	r1, r0, r1
 8007058:	0589      	lsls	r1, r1, #22
 800705a:	0d89      	lsrs	r1, r1, #22
 800705c:	ea58 0101 	orrs.w	r1, r8, r1

08007060 <??ZbZclAppendFloat_4>:
 8007060:	7031      	strb	r1, [r6, #0]
 8007062:	0008      	movs	r0, r1
 8007064:	b280      	uxth	r0, r0
 8007066:	0a00      	lsrs	r0, r0, #8
 8007068:	7070      	strb	r0, [r6, #1]
 800706a:	2002      	movs	r0, #2
 800706c:	e0e0      	b.n	8007230 <??ZbZclAppendFloat_2>

0800706e <??ZbZclAppendFloat_0>:
 800706e:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8007072:	2839      	cmp	r0, #57	; 0x39
 8007074:	d14e      	bne.n	8007114 <??ZbZclAppendFloat_5>
 8007076:	2400      	movs	r4, #0
 8007078:	2580      	movs	r5, #128	; 0x80
 800707a:	f07f 077e 	mvns.w	r7, #126	; 0x7e
 800707e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007080:	2804      	cmp	r0, #4
 8007082:	d202      	bcs.n	800708a <??ZbZclAppendFloat_6>
 8007084:	f05f 30ff 	movs.w	r0, #4294967295
 8007088:	e0d2      	b.n	8007230 <??ZbZclAppendFloat_2>

0800708a <??ZbZclAppendFloat_6>:
 800708a:	003a      	movs	r2, r7
 800708c:	0029      	movs	r1, r5
 800708e:	4668      	mov	r0, sp
 8007090:	eeb0 0a48 	vmov.f32	s0, s16
 8007094:	eef0 0a68 	vmov.f32	s1, s17
 8007098:	f000 faba 	bl	8007610 <ZbZclFloatFrexp>
 800709c:	eeb0 9a40 	vmov.f32	s18, s0
 80070a0:	eef0 9a60 	vmov.f32	s19, s1
 80070a4:	f8dd 8000 	ldr.w	r8, [sp]
 80070a8:	ebb8 0807 	subs.w	r8, r8, r7
 80070ac:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 80070b0:	f018 48ff 	ands.w	r8, r8, #2139095040	; 0x7f800000
 80070b4:	ec51 0b19 	vmov	r0, r1, d9
 80070b8:	2200      	movs	r2, #0
 80070ba:	2300      	movs	r3, #0
 80070bc:	f001 f8e0 	bl	8008280 <__aeabi_cdcmpeq>
 80070c0:	d210      	bcs.n	80070e4 <??ZbZclAppendFloat_7>
 80070c2:	ec51 0b19 	vmov	r0, r1, d9
 80070c6:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80070ca:	f001 f93b 	bl	8008344 <__aeabi_d2uiz>
 80070ce:	0001      	movs	r1, r0
 80070d0:	f45f 0000 	movs.w	r0, #8388608	; 0x800000
 80070d4:	4341      	muls	r1, r0
 80070d6:	0249      	lsls	r1, r1, #9
 80070d8:	0a49      	lsrs	r1, r1, #9
 80070da:	ea58 0101 	orrs.w	r1, r8, r1
 80070de:	f051 4100 	orrs.w	r1, r1, #2147483648	; 0x80000000
 80070e2:	e00b      	b.n	80070fc <??ZbZclAppendFloat_8>

080070e4 <??ZbZclAppendFloat_7>:
 80070e4:	ec51 0b19 	vmov	r0, r1, d9
 80070e8:	f001 f92c 	bl	8008344 <__aeabi_d2uiz>
 80070ec:	0001      	movs	r1, r0
 80070ee:	f45f 0000 	movs.w	r0, #8388608	; 0x800000
 80070f2:	4341      	muls	r1, r0
 80070f4:	0249      	lsls	r1, r1, #9
 80070f6:	0a49      	lsrs	r1, r1, #9
 80070f8:	ea58 0101 	orrs.w	r1, r8, r1

080070fc <??ZbZclAppendFloat_8>:
 80070fc:	7031      	strb	r1, [r6, #0]
 80070fe:	0008      	movs	r0, r1
 8007100:	0a00      	lsrs	r0, r0, #8
 8007102:	7070      	strb	r0, [r6, #1]
 8007104:	0008      	movs	r0, r1
 8007106:	0c00      	lsrs	r0, r0, #16
 8007108:	70b0      	strb	r0, [r6, #2]
 800710a:	0008      	movs	r0, r1
 800710c:	0e00      	lsrs	r0, r0, #24
 800710e:	70f0      	strb	r0, [r6, #3]
 8007110:	2004      	movs	r0, #4
 8007112:	e08d      	b.n	8007230 <??ZbZclAppendFloat_2>

08007114 <??ZbZclAppendFloat_5>:
 8007114:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8007118:	283a      	cmp	r0, #58	; 0x3a
 800711a:	f040 8087 	bne.w	800722c <??ZbZclAppendFloat_9>
 800711e:	2400      	movs	r4, #0
 8007120:	2500      	movs	r5, #0
 8007122:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8007126:	f8df 8744 	ldr.w	r8, [pc, #1860]	; 800786c <??DataTable3>
 800712a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800712c:	2808      	cmp	r0, #8
 800712e:	d202      	bcs.n	8007136 <??ZbZclAppendFloat_10>
 8007130:	f05f 30ff 	movs.w	r0, #4294967295
 8007134:	e07c      	b.n	8007230 <??ZbZclAppendFloat_2>

08007136 <??ZbZclAppendFloat_10>:
 8007136:	4642      	mov	r2, r8
 8007138:	0039      	movs	r1, r7
 800713a:	4668      	mov	r0, sp
 800713c:	eeb0 0a48 	vmov.f32	s0, s16
 8007140:	eef0 0a68 	vmov.f32	s1, s17
 8007144:	f000 fa64 	bl	8007610 <ZbZclFloatFrexp>
 8007148:	eeb0 9a40 	vmov.f32	s18, s0
 800714c:	eef0 9a60 	vmov.f32	s19, s1
 8007150:	9800      	ldr	r0, [sp, #0]
 8007152:	17c1      	asrs	r1, r0, #31
 8007154:	ea5f 79e8 	movs.w	r9, r8, asr #31
 8007158:	ebb0 0008 	subs.w	r0, r0, r8
 800715c:	eb71 0109 	sbcs.w	r1, r1, r9
 8007160:	0501      	lsls	r1, r0, #20
 8007162:	2000      	movs	r0, #0
 8007164:	2200      	movs	r2, #0
 8007166:	f8df 3708 	ldr.w	r3, [pc, #1800]	; 8007870 <??DataTable3_1>
 800716a:	4010      	ands	r0, r2
 800716c:	4019      	ands	r1, r3
 800716e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007172:	ec51 0b19 	vmov	r0, r1, d9
 8007176:	2200      	movs	r2, #0
 8007178:	2300      	movs	r3, #0
 800717a:	f001 f881 	bl	8008280 <__aeabi_cdcmpeq>
 800717e:	d21f      	bcs.n	80071c0 <??ZbZclAppendFloat_11>
 8007180:	ec51 0b19 	vmov	r0, r1, d9
 8007184:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8007188:	f001 f92c 	bl	80083e4 <__aeabi_d2ulz>
 800718c:	2200      	movs	r2, #0
 800718e:	f45f 1380 	movs.w	r3, #1048576	; 0x100000
 8007192:	fba2 ab00 	umull	sl, fp, r2, r0
 8007196:	fb02 bb01 	mla	fp, r2, r1, fp
 800719a:	fb03 bb00 	mla	fp, r3, r0, fp
 800719e:	f05f 30ff 	movs.w	r0, #4294967295
 80071a2:	f8df 16d0 	ldr.w	r1, [pc, #1744]	; 8007874 <??DataTable3_2>
 80071a6:	ea1a 0000 	ands.w	r0, sl, r0
 80071aa:	ea1b 0101 	ands.w	r1, fp, r1
 80071ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071b2:	4310      	orrs	r0, r2
 80071b4:	4319      	orrs	r1, r3
 80071b6:	f050 0200 	orrs.w	r2, r0, #0
 80071ba:	f051 4300 	orrs.w	r3, r1, #2147483648	; 0x80000000
 80071be:	e018      	b.n	80071f2 <??ZbZclAppendFloat_12>

080071c0 <??ZbZclAppendFloat_11>:
 80071c0:	ec51 0b19 	vmov	r0, r1, d9
 80071c4:	f001 f90e 	bl	80083e4 <__aeabi_d2ulz>
 80071c8:	2200      	movs	r2, #0
 80071ca:	f45f 1380 	movs.w	r3, #1048576	; 0x100000
 80071ce:	fba2 ab00 	umull	sl, fp, r2, r0
 80071d2:	fb02 bb01 	mla	fp, r2, r1, fp
 80071d6:	fb03 bb00 	mla	fp, r3, r0, fp
 80071da:	f05f 30ff 	movs.w	r0, #4294967295
 80071de:	f8df 1694 	ldr.w	r1, [pc, #1684]	; 8007874 <??DataTable3_2>
 80071e2:	ea1a 0000 	ands.w	r0, sl, r0
 80071e6:	ea1b 0101 	ands.w	r1, fp, r1
 80071ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ee:	4302      	orrs	r2, r0
 80071f0:	430b      	orrs	r3, r1

080071f2 <??ZbZclAppendFloat_12>:
 80071f2:	7032      	strb	r2, [r6, #0]
 80071f4:	0010      	movs	r0, r2
 80071f6:	b280      	uxth	r0, r0
 80071f8:	0a00      	lsrs	r0, r0, #8
 80071fa:	7070      	strb	r0, [r6, #1]
 80071fc:	0010      	movs	r0, r2
 80071fe:	0c00      	lsrs	r0, r0, #16
 8007200:	70b0      	strb	r0, [r6, #2]
 8007202:	0010      	movs	r0, r2
 8007204:	0e00      	lsrs	r0, r0, #24
 8007206:	70f0      	strb	r0, [r6, #3]
 8007208:	7133      	strb	r3, [r6, #4]
 800720a:	0010      	movs	r0, r2
 800720c:	0019      	movs	r1, r3
 800720e:	0a08      	lsrs	r0, r1, #8
 8007210:	2100      	movs	r1, #0
 8007212:	7170      	strb	r0, [r6, #5]
 8007214:	0010      	movs	r0, r2
 8007216:	0019      	movs	r1, r3
 8007218:	0c08      	lsrs	r0, r1, #16
 800721a:	2100      	movs	r1, #0
 800721c:	71b0      	strb	r0, [r6, #6]
 800721e:	0010      	movs	r0, r2
 8007220:	0019      	movs	r1, r3
 8007222:	0e08      	lsrs	r0, r1, #24
 8007224:	2100      	movs	r1, #0
 8007226:	71f0      	strb	r0, [r6, #7]
 8007228:	2008      	movs	r0, #8
 800722a:	e001      	b.n	8007230 <??ZbZclAppendFloat_2>

0800722c <??ZbZclAppendFloat_9>:
 800722c:	f05f 30ff 	movs.w	r0, #4294967295

08007230 <??ZbZclAppendFloat_2>:
 8007230:	b004      	add	sp, #16
 8007232:	ecbd 8b04 	vpop	{d8-d9}
 8007236:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800723a <ZbZclParseFloat>:
 800723a:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723e:	ed2d 8b02 	vpush	{d8}
 8007242:	000e      	movs	r6, r1
 8007244:	4691      	mov	r9, r2
 8007246:	2000      	movs	r0, #0
 8007248:	f889 0000 	strb.w	r0, [r9]
 800724c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8007250:	2838      	cmp	r0, #56	; 0x38
 8007252:	d006      	beq.n	8007262 <??ZbZclParseFloat_0>
 8007254:	f0c0 8138 	bcc.w	80074c8 <??ZbZclParseFloat_1>
 8007258:	283a      	cmp	r0, #58	; 0x3a
 800725a:	f000 80ad 	beq.w	80073b8 <??ZbZclParseFloat_2>
 800725e:	d354      	bcc.n	800730a <??ZbZclParseFloat_3>
 8007260:	e132      	b.n	80074c8 <??ZbZclParseFloat_1>

08007262 <??ZbZclParseFloat_0>:
 8007262:	0030      	movs	r0, r6
 8007264:	f7fc fb1a 	bl	800389c <pletoh16>
 8007268:	0004      	movs	r4, r0
 800726a:	0020      	movs	r0, r4
 800726c:	b280      	uxth	r0, r0
 800726e:	f410 40f8 	ands.w	r0, r0, #31744	; 0x7c00
 8007272:	f5b0 4ff8 	cmp.w	r0, #31744	; 0x7c00
 8007276:	d121      	bne.n	80072bc <??ZbZclParseFloat_4>
 8007278:	05a0      	lsls	r0, r4, #22
 800727a:	d008      	beq.n	800728e <??ZbZclParseFloat_5>
 800727c:	2000      	movs	r0, #0
 800727e:	2100      	movs	r1, #0
 8007280:	2200      	movs	r2, #0
 8007282:	2300      	movs	r3, #0
 8007284:	f000 fec6 	bl	8008014 <__aeabi_ddiv>
 8007288:	ec41 0b10 	vmov	d0, r0, r1
 800728c:	e127      	b.n	80074de <??ZbZclParseFloat_6>

0800728e <??ZbZclParseFloat_5>:
 800728e:	0420      	lsls	r0, r4, #16
 8007290:	d50a      	bpl.n	80072a8 <??ZbZclParseFloat_7>
 8007292:	2000      	movs	r0, #0
 8007294:	f8df 15e0 	ldr.w	r1, [pc, #1504]	; 8007878 <??DataTable3_3>
 8007298:	2200      	movs	r2, #0
 800729a:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 800729e:	f000 feb9 	bl	8008014 <__aeabi_ddiv>
 80072a2:	ec41 0b10 	vmov	d0, r0, r1
 80072a6:	e008      	b.n	80072ba <??ZbZclParseFloat_8>

080072a8 <??ZbZclParseFloat_7>:
 80072a8:	2000      	movs	r0, #0
 80072aa:	f8df 15cc 	ldr.w	r1, [pc, #1484]	; 8007878 <??DataTable3_3>
 80072ae:	2200      	movs	r2, #0
 80072b0:	2300      	movs	r3, #0
 80072b2:	f000 feaf 	bl	8008014 <__aeabi_ddiv>
 80072b6:	ec41 0b10 	vmov	d0, r0, r1

080072ba <??ZbZclParseFloat_8>:
 80072ba:	e110      	b.n	80074de <??ZbZclParseFloat_6>

080072bc <??ZbZclParseFloat_4>:
 80072bc:	f3c4 2884 	ubfx	r8, r4, #10, #5
 80072c0:	4645      	mov	r5, r8
 80072c2:	b2ad      	uxth	r5, r5
 80072c4:	3d0f      	subs	r5, #15
 80072c6:	3d0a      	subs	r5, #10
 80072c8:	f414 4ff8 	tst.w	r4, #31744	; 0x7c00
 80072cc:	d004      	beq.n	80072d8 <??ZbZclParseFloat_9>
 80072ce:	05a7      	lsls	r7, r4, #22
 80072d0:	0dbf      	lsrs	r7, r7, #22
 80072d2:	f517 6780 	adds.w	r7, r7, #1024	; 0x400
 80072d6:	e002      	b.n	80072de <??ZbZclParseFloat_10>

080072d8 <??ZbZclParseFloat_9>:
 80072d8:	1c6d      	adds	r5, r5, #1
 80072da:	05a7      	lsls	r7, r4, #22
 80072dc:	0dbf      	lsrs	r7, r7, #22

080072de <??ZbZclParseFloat_10>:
 80072de:	0038      	movs	r0, r7
 80072e0:	b280      	uxth	r0, r0
 80072e2:	f000 fcf3 	bl	8007ccc <__aeabi_ui2d>
 80072e6:	ec41 0b18 	vmov	d8, r0, r1
 80072ea:	0420      	lsls	r0, r4, #16
 80072ec:	d505      	bpl.n	80072fa <??ZbZclParseFloat_11>
 80072ee:	ec51 0b18 	vmov	r0, r1, d8
 80072f2:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80072f6:	ec41 0b18 	vmov	d8, r0, r1

080072fa <??ZbZclParseFloat_11>:
 80072fa:	0028      	movs	r0, r5
 80072fc:	eeb0 0a48 	vmov.f32	s0, s16
 8007300:	eef0 0a68 	vmov.f32	s1, s17
 8007304:	f000 f8ef 	bl	80074e6 <ZbZclFloatLdexp>
 8007308:	e0e9      	b.n	80074de <??ZbZclParseFloat_6>

0800730a <??ZbZclParseFloat_3>:
 800730a:	0030      	movs	r0, r6
 800730c:	f7fc fad7 	bl	80038be <pletoh32>
 8007310:	0004      	movs	r4, r0
 8007312:	f014 40ff 	ands.w	r0, r4, #2139095040	; 0x7f800000
 8007316:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800731a:	d121      	bne.n	8007360 <??ZbZclParseFloat_12>
 800731c:	0260      	lsls	r0, r4, #9
 800731e:	d008      	beq.n	8007332 <??ZbZclParseFloat_13>
 8007320:	2000      	movs	r0, #0
 8007322:	2100      	movs	r1, #0
 8007324:	2200      	movs	r2, #0
 8007326:	2300      	movs	r3, #0
 8007328:	f000 fe74 	bl	8008014 <__aeabi_ddiv>
 800732c:	ec41 0b10 	vmov	d0, r0, r1
 8007330:	e0d5      	b.n	80074de <??ZbZclParseFloat_6>

08007332 <??ZbZclParseFloat_13>:
 8007332:	2c00      	cmp	r4, #0
 8007334:	d50a      	bpl.n	800734c <??ZbZclParseFloat_14>
 8007336:	2000      	movs	r0, #0
 8007338:	f8df 153c 	ldr.w	r1, [pc, #1340]	; 8007878 <??DataTable3_3>
 800733c:	2200      	movs	r2, #0
 800733e:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8007342:	f000 fe67 	bl	8008014 <__aeabi_ddiv>
 8007346:	ec41 0b10 	vmov	d0, r0, r1
 800734a:	e008      	b.n	800735e <??ZbZclParseFloat_15>

0800734c <??ZbZclParseFloat_14>:
 800734c:	2000      	movs	r0, #0
 800734e:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 8007878 <??DataTable3_3>
 8007352:	2200      	movs	r2, #0
 8007354:	2300      	movs	r3, #0
 8007356:	f000 fe5d 	bl	8008014 <__aeabi_ddiv>
 800735a:	ec41 0b10 	vmov	d0, r0, r1

0800735e <??ZbZclParseFloat_15>:
 800735e:	e0be      	b.n	80074de <??ZbZclParseFloat_6>

08007360 <??ZbZclParseFloat_12>:
 8007360:	0025      	movs	r5, r4
 8007362:	0ded      	lsrs	r5, r5, #23
 8007364:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8007368:	002f      	movs	r7, r5
 800736a:	b2bf      	uxth	r7, r7
 800736c:	3f7f      	subs	r7, #127	; 0x7f
 800736e:	3f17      	subs	r7, #23
 8007370:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 8007374:	d006      	beq.n	8007384 <??ZbZclParseFloat_16>
 8007376:	ea5f 2844 	movs.w	r8, r4, lsl #9
 800737a:	ea5f 2858 	movs.w	r8, r8, lsr #9
 800737e:	f518 0800 	adds.w	r8, r8, #8388608	; 0x800000
 8007382:	e004      	b.n	800738e <??ZbZclParseFloat_17>

08007384 <??ZbZclParseFloat_16>:
 8007384:	1c7f      	adds	r7, r7, #1
 8007386:	ea5f 2844 	movs.w	r8, r4, lsl #9
 800738a:	ea5f 2858 	movs.w	r8, r8, lsr #9

0800738e <??ZbZclParseFloat_17>:
 800738e:	4640      	mov	r0, r8
 8007390:	f000 fc9c 	bl	8007ccc <__aeabi_ui2d>
 8007394:	ec41 0b18 	vmov	d8, r0, r1
 8007398:	2c00      	cmp	r4, #0
 800739a:	d505      	bpl.n	80073a8 <??ZbZclParseFloat_18>
 800739c:	ec51 0b18 	vmov	r0, r1, d8
 80073a0:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80073a4:	ec41 0b18 	vmov	d8, r0, r1

080073a8 <??ZbZclParseFloat_18>:
 80073a8:	0038      	movs	r0, r7
 80073aa:	eeb0 0a48 	vmov.f32	s0, s16
 80073ae:	eef0 0a68 	vmov.f32	s1, s17
 80073b2:	f000 f898 	bl	80074e6 <ZbZclFloatLdexp>
 80073b6:	e092      	b.n	80074de <??ZbZclParseFloat_6>

080073b8 <??ZbZclParseFloat_2>:
 80073b8:	0030      	movs	r0, r6
 80073ba:	f7fc faad 	bl	8003918 <pletoh64>
 80073be:	0004      	movs	r4, r0
 80073c0:	000d      	movs	r5, r1
 80073c2:	2000      	movs	r0, #0
 80073c4:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8007870 <??DataTable3_1>
 80073c8:	ea14 0200 	ands.w	r2, r4, r0
 80073cc:	ea15 0301 	ands.w	r3, r5, r1
 80073d0:	f05f 0a00 	movs.w	sl, #0
 80073d4:	f8df b498 	ldr.w	fp, [pc, #1176]	; 8007870 <??DataTable3_1>
 80073d8:	455b      	cmp	r3, fp
 80073da:	d131      	bne.n	8007440 <??ZbZclParseFloat_19>
 80073dc:	4552      	cmp	r2, sl
 80073de:	d12f      	bne.n	8007440 <??ZbZclParseFloat_19>
 80073e0:	f05f 30ff 	movs.w	r0, #4294967295
 80073e4:	f8df 148c 	ldr.w	r1, [pc, #1164]	; 8007874 <??DataTable3_2>
 80073e8:	4020      	ands	r0, r4
 80073ea:	4029      	ands	r1, r5
 80073ec:	2900      	cmp	r1, #0
 80073ee:	d101      	bne.n	80073f4 <??ZbZclParseFloat_20>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d008      	beq.n	8007406 <??ZbZclParseFloat_21>

080073f4 <??ZbZclParseFloat_20>:
 80073f4:	2000      	movs	r0, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	2200      	movs	r2, #0
 80073fa:	2300      	movs	r3, #0
 80073fc:	f000 fe0a 	bl	8008014 <__aeabi_ddiv>
 8007400:	ec41 0b10 	vmov	d0, r0, r1
 8007404:	e06b      	b.n	80074de <??ZbZclParseFloat_6>

08007406 <??ZbZclParseFloat_21>:
 8007406:	f014 0000 	ands.w	r0, r4, #0
 800740a:	f015 4100 	ands.w	r1, r5, #2147483648	; 0x80000000
 800740e:	2900      	cmp	r1, #0
 8007410:	d101      	bne.n	8007416 <??ZbZclParseFloat_22>
 8007412:	2800      	cmp	r0, #0
 8007414:	d00a      	beq.n	800742c <??ZbZclParseFloat_23>

08007416 <??ZbZclParseFloat_22>:
 8007416:	2000      	movs	r0, #0
 8007418:	f8df 145c 	ldr.w	r1, [pc, #1116]	; 8007878 <??DataTable3_3>
 800741c:	2200      	movs	r2, #0
 800741e:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8007422:	f000 fdf7 	bl	8008014 <__aeabi_ddiv>
 8007426:	ec41 0b10 	vmov	d0, r0, r1
 800742a:	e008      	b.n	800743e <??ZbZclParseFloat_24>

0800742c <??ZbZclParseFloat_23>:
 800742c:	2000      	movs	r0, #0
 800742e:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8007878 <??DataTable3_3>
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	f000 fded 	bl	8008014 <__aeabi_ddiv>
 800743a:	ec41 0b10 	vmov	d0, r0, r1

0800743e <??ZbZclParseFloat_24>:
 800743e:	e04e      	b.n	80074de <??ZbZclParseFloat_6>

08007440 <??ZbZclParseFloat_19>:
 8007440:	0022      	movs	r2, r4
 8007442:	002b      	movs	r3, r5
 8007444:	0d1a      	lsrs	r2, r3, #20
 8007446:	2300      	movs	r3, #0
 8007448:	4690      	mov	r8, r2
 800744a:	ea5f 5848 	movs.w	r8, r8, lsl #21
 800744e:	ea5f 5858 	movs.w	r8, r8, lsr #21
 8007452:	4647      	mov	r7, r8
 8007454:	b2bf      	uxth	r7, r7
 8007456:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 800745a:	3f34      	subs	r7, #52	; 0x34
 800745c:	4020      	ands	r0, r4
 800745e:	4029      	ands	r1, r5
 8007460:	2900      	cmp	r1, #0
 8007462:	d101      	bne.n	8007468 <??ZbZclParseFloat_25>
 8007464:	2800      	cmp	r0, #0
 8007466:	d00a      	beq.n	800747e <??ZbZclParseFloat_26>

08007468 <??ZbZclParseFloat_25>:
 8007468:	f05f 30ff 	movs.w	r0, #4294967295
 800746c:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 8007874 <??DataTable3_2>
 8007470:	4020      	ands	r0, r4
 8007472:	4029      	ands	r1, r5
 8007474:	f110 0a00 	adds.w	sl, r0, #0
 8007478:	f551 1b80 	adcs.w	fp, r1, #1048576	; 0x100000
 800747c:	e008      	b.n	8007490 <??ZbZclParseFloat_27>

0800747e <??ZbZclParseFloat_26>:
 800747e:	1c7f      	adds	r7, r7, #1
 8007480:	f05f 30ff 	movs.w	r0, #4294967295
 8007484:	f8df 13ec 	ldr.w	r1, [pc, #1004]	; 8007874 <??DataTable3_2>
 8007488:	ea14 0a00 	ands.w	sl, r4, r0
 800748c:	ea15 0b01 	ands.w	fp, r5, r1

08007490 <??ZbZclParseFloat_27>:
 8007490:	4650      	mov	r0, sl
 8007492:	4659      	mov	r1, fp
 8007494:	f000 fc5e 	bl	8007d54 <__aeabi_ul2d>
 8007498:	ec41 0b18 	vmov	d8, r0, r1
 800749c:	f014 0000 	ands.w	r0, r4, #0
 80074a0:	f015 4100 	ands.w	r1, r5, #2147483648	; 0x80000000
 80074a4:	2900      	cmp	r1, #0
 80074a6:	d101      	bne.n	80074ac <??ZbZclParseFloat_28>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d005      	beq.n	80074b8 <??ZbZclParseFloat_29>

080074ac <??ZbZclParseFloat_28>:
 80074ac:	ec51 0b18 	vmov	r0, r1, d8
 80074b0:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80074b4:	ec41 0b18 	vmov	d8, r0, r1

080074b8 <??ZbZclParseFloat_29>:
 80074b8:	0038      	movs	r0, r7
 80074ba:	eeb0 0a48 	vmov.f32	s0, s16
 80074be:	eef0 0a68 	vmov.f32	s1, s17
 80074c2:	f000 f810 	bl	80074e6 <ZbZclFloatLdexp>
 80074c6:	e00a      	b.n	80074de <??ZbZclParseFloat_6>

080074c8 <??ZbZclParseFloat_1>:
 80074c8:	208d      	movs	r0, #141	; 0x8d
 80074ca:	f889 0000 	strb.w	r0, [r9]
 80074ce:	2000      	movs	r0, #0
 80074d0:	2100      	movs	r1, #0
 80074d2:	2200      	movs	r2, #0
 80074d4:	2300      	movs	r3, #0
 80074d6:	f000 fd9d 	bl	8008014 <__aeabi_ddiv>
 80074da:	ec41 0b10 	vmov	d0, r0, r1

080074de <??ZbZclParseFloat_6>:
 80074de:	ecbd 8b02 	vpop	{d8}
 80074e2:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074e6 <ZbZclFloatLdexp>:
 80074e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ea:	ed2d 8b04 	vpush	{d8-d9}
 80074ee:	b084      	sub	sp, #16
 80074f0:	eeb0 8a40 	vmov.f32	s16, s0
 80074f4:	eef0 8a60 	vmov.f32	s17, s1
 80074f8:	0006      	movs	r6, r0
 80074fa:	2730      	movs	r7, #48	; 0x30
 80074fc:	ec53 2b18 	vmov	r2, r3, d8
 8007500:	ec51 0b18 	vmov	r0, r1, d8
 8007504:	f000 febc 	bl	8008280 <__aeabi_cdcmpeq>
 8007508:	d10c      	bne.n	8007524 <??ZbZclFloatLdexp_0>
 800750a:	ec53 2b18 	vmov	r2, r3, d8
 800750e:	ec51 0b18 	vmov	r0, r1, d8
 8007512:	f000 fa9f 	bl	8007a54 <__adddf3>
 8007516:	0002      	movs	r2, r0
 8007518:	000b      	movs	r3, r1
 800751a:	ec51 0b18 	vmov	r0, r1, d8
 800751e:	f000 feaf 	bl	8008280 <__aeabi_cdcmpeq>
 8007522:	d104      	bne.n	800752e <??ZbZclFloatLdexp_1>

08007524 <??ZbZclFloatLdexp_0>:
 8007524:	eeb0 0a48 	vmov.f32	s0, s16
 8007528:	eef0 0a68 	vmov.f32	s1, s17
 800752c:	e06b      	b.n	8007606 <??ZbZclFloatLdexp_2>

0800752e <??ZbZclFloatLdexp_1>:
 800752e:	2e01      	cmp	r6, #1
 8007530:	db2c      	blt.n	800758c <??ZbZclFloatLdexp_3>
 8007532:	2401      	movs	r4, #1
 8007534:	2500      	movs	r5, #0
 8007536:	0020      	movs	r0, r4
 8007538:	0029      	movs	r1, r5
 800753a:	003a      	movs	r2, r7
 800753c:	f000 fa78 	bl	8007a30 <__aeabi_llsl>
 8007540:	4680      	mov	r8, r0
 8007542:	4689      	mov	r9, r1
 8007544:	4640      	mov	r0, r8
 8007546:	4649      	mov	r1, r9
 8007548:	f000 fc04 	bl	8007d54 <__aeabi_ul2d>
 800754c:	ec41 0b19 	vmov	d9, r0, r1

08007550 <??ZbZclFloatLdexp_4>:
 8007550:	42be      	cmp	r6, r7
 8007552:	db09      	blt.n	8007568 <??ZbZclFloatLdexp_5>
 8007554:	ec51 0b18 	vmov	r0, r1, d8
 8007558:	ec53 2b19 	vmov	r2, r3, d9
 800755c:	f000 fc30 	bl	8007dc0 <__aeabi_dmul>
 8007560:	ec41 0b18 	vmov	d8, r0, r1
 8007564:	1bf6      	subs	r6, r6, r7
 8007566:	e7f3      	b.n	8007550 <??ZbZclFloatLdexp_4>

08007568 <??ZbZclFloatLdexp_5>:
 8007568:	0020      	movs	r0, r4
 800756a:	0029      	movs	r1, r5
 800756c:	0032      	movs	r2, r6
 800756e:	f000 fa5f 	bl	8007a30 <__aeabi_llsl>
 8007572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800757a:	f000 fbeb 	bl	8007d54 <__aeabi_ul2d>
 800757e:	ec53 2b18 	vmov	r2, r3, d8
 8007582:	f000 fc1d 	bl	8007dc0 <__aeabi_dmul>
 8007586:	ec41 0b18 	vmov	d8, r0, r1
 800758a:	e038      	b.n	80075fe <??ZbZclFloatLdexp_6>

0800758c <??ZbZclFloatLdexp_3>:
 800758c:	2e00      	cmp	r6, #0
 800758e:	d536      	bpl.n	80075fe <??ZbZclFloatLdexp_6>
 8007590:	2401      	movs	r4, #1
 8007592:	2500      	movs	r5, #0
 8007594:	0020      	movs	r0, r4
 8007596:	0029      	movs	r1, r5
 8007598:	003a      	movs	r2, r7
 800759a:	f000 fa49 	bl	8007a30 <__aeabi_llsl>
 800759e:	4682      	mov	sl, r0
 80075a0:	468b      	mov	fp, r1
 80075a2:	4650      	mov	r0, sl
 80075a4:	4659      	mov	r1, fp
 80075a6:	f000 fbd5 	bl	8007d54 <__aeabi_ul2d>
 80075aa:	0002      	movs	r2, r0
 80075ac:	000b      	movs	r3, r1
 80075ae:	2000      	movs	r0, #0
 80075b0:	49b1      	ldr	r1, [pc, #708]	; (8007878 <??DataTable3_3>)
 80075b2:	f000 fd2f 	bl	8008014 <__aeabi_ddiv>
 80075b6:	ec41 0b19 	vmov	d9, r0, r1
 80075ba:	f1d6 0800 	rsbs	r8, r6, #0

080075be <??ZbZclFloatLdexp_7>:
 80075be:	45b8      	cmp	r8, r7
 80075c0:	db0a      	blt.n	80075d8 <??ZbZclFloatLdexp_8>
 80075c2:	ec53 2b18 	vmov	r2, r3, d8
 80075c6:	ec51 0b19 	vmov	r0, r1, d9
 80075ca:	f000 fbf9 	bl	8007dc0 <__aeabi_dmul>
 80075ce:	ec41 0b18 	vmov	d8, r0, r1
 80075d2:	ebb8 0807 	subs.w	r8, r8, r7
 80075d6:	e7f2      	b.n	80075be <??ZbZclFloatLdexp_7>

080075d8 <??ZbZclFloatLdexp_8>:
 80075d8:	0020      	movs	r0, r4
 80075da:	0029      	movs	r1, r5
 80075dc:	4642      	mov	r2, r8
 80075de:	f000 fa27 	bl	8007a30 <__aeabi_llsl>
 80075e2:	e9cd 0100 	strd	r0, r1, [sp]
 80075e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ea:	f000 fbb3 	bl	8007d54 <__aeabi_ul2d>
 80075ee:	0002      	movs	r2, r0
 80075f0:	000b      	movs	r3, r1
 80075f2:	ec51 0b18 	vmov	r0, r1, d8
 80075f6:	f000 fd0d 	bl	8008014 <__aeabi_ddiv>
 80075fa:	ec41 0b18 	vmov	d8, r0, r1

080075fe <??ZbZclFloatLdexp_6>:
 80075fe:	eeb0 0a48 	vmov.f32	s0, s16
 8007602:	eef0 0a68 	vmov.f32	s1, s17

08007606 <??ZbZclFloatLdexp_2>:
 8007606:	b004      	add	sp, #16
 8007608:	ecbd 8b04 	vpop	{d8-d9}
 800760c:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007610 <ZbZclFloatFrexp>:
 8007610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	ed2d 8b06 	vpush	{d8-d10}
 8007618:	b086      	sub	sp, #24
 800761a:	eeb0 8a40 	vmov.f32	s16, s0
 800761e:	eef0 8a60 	vmov.f32	s17, s1
 8007622:	4682      	mov	sl, r0
 8007624:	000e      	movs	r6, r1
 8007626:	4693      	mov	fp, r2
 8007628:	2730      	movs	r7, #48	; 0x30
 800762a:	f05f 0800 	movs.w	r8, #0
 800762e:	f05f 0901 	movs.w	r9, #1
 8007632:	eeb0 9a48 	vmov.f32	s18, s16
 8007636:	eef0 9a68 	vmov.f32	s19, s17
 800763a:	ec51 0b18 	vmov	r0, r1, d8
 800763e:	2200      	movs	r2, #0
 8007640:	2300      	movs	r3, #0
 8007642:	f000 fe1d 	bl	8008280 <__aeabi_cdcmpeq>
 8007646:	d208      	bcs.n	800765a <??ZbZclFloatFrexp_0>
 8007648:	f05f 30ff 	movs.w	r0, #4294967295
 800764c:	4681      	mov	r9, r0
 800764e:	ec51 0b19 	vmov	r0, r1, d9
 8007652:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8007656:	ec41 0b19 	vmov	d9, r0, r1

0800765a <??ZbZclFloatFrexp_0>:
 800765a:	ec53 2b19 	vmov	r2, r3, d9
 800765e:	ec51 0b19 	vmov	r0, r1, d9
 8007662:	f000 fe0d 	bl	8008280 <__aeabi_cdcmpeq>
 8007666:	d00b      	beq.n	8007680 <??ZbZclFloatFrexp_1>
 8007668:	f8ca 6000 	str.w	r6, [sl]
 800766c:	4648      	mov	r0, r9
 800766e:	f000 fb3d 	bl	8007cec <__aeabi_i2d>
 8007672:	2200      	movs	r2, #0
 8007674:	4b81      	ldr	r3, [pc, #516]	; (800787c <??DataTable3_4>)
 8007676:	f000 fba3 	bl	8007dc0 <__aeabi_dmul>
 800767a:	ec41 0b10 	vmov	d0, r0, r1
 800767e:	e0ef      	b.n	8007860 <??ZbZclFloatFrexp_2>

08007680 <??ZbZclFloatFrexp_1>:
 8007680:	2000      	movs	r0, #0
 8007682:	497d      	ldr	r1, [pc, #500]	; (8007878 <??DataTable3_3>)
 8007684:	2200      	movs	r2, #0
 8007686:	2300      	movs	r3, #0
 8007688:	f000 fcc4 	bl	8008014 <__aeabi_ddiv>
 800768c:	ec53 2b19 	vmov	r2, r3, d9
 8007690:	f000 fdf6 	bl	8008280 <__aeabi_cdcmpeq>
 8007694:	d00b      	beq.n	80076ae <??ZbZclFloatFrexp_3>
 8007696:	2000      	movs	r0, #0
 8007698:	4977      	ldr	r1, [pc, #476]	; (8007878 <??DataTable3_3>)
 800769a:	2200      	movs	r2, #0
 800769c:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 80076a0:	f000 fcb8 	bl	8008014 <__aeabi_ddiv>
 80076a4:	ec53 2b19 	vmov	r2, r3, d9
 80076a8:	f000 fdea 	bl	8008280 <__aeabi_cdcmpeq>
 80076ac:	d107      	bne.n	80076be <??ZbZclFloatFrexp_4>

080076ae <??ZbZclFloatFrexp_3>:
 80076ae:	f8ca 6000 	str.w	r6, [sl]
 80076b2:	4648      	mov	r0, r9
 80076b4:	f000 fb1a 	bl	8007cec <__aeabi_i2d>
 80076b8:	ec41 0b10 	vmov	d0, r0, r1
 80076bc:	e0d0      	b.n	8007860 <??ZbZclFloatFrexp_2>

080076be <??ZbZclFloatFrexp_4>:
 80076be:	ec53 2b19 	vmov	r2, r3, d9
 80076c2:	ec51 0b19 	vmov	r0, r1, d9
 80076c6:	f000 f9c5 	bl	8007a54 <__adddf3>
 80076ca:	ec53 2b19 	vmov	r2, r3, d9
 80076ce:	f000 fdd7 	bl	8008280 <__aeabi_cdcmpeq>
 80076d2:	d10b      	bne.n	80076ec <??ZbZclFloatFrexp_5>
 80076d4:	f8ca b000 	str.w	fp, [sl]
 80076d8:	4648      	mov	r0, r9
 80076da:	f000 fb07 	bl	8007cec <__aeabi_i2d>
 80076de:	2200      	movs	r2, #0
 80076e0:	2300      	movs	r3, #0
 80076e2:	f000 fb6d 	bl	8007dc0 <__aeabi_dmul>
 80076e6:	ec41 0b10 	vmov	d0, r0, r1
 80076ea:	e0b9      	b.n	8007860 <??ZbZclFloatFrexp_2>

080076ec <??ZbZclFloatFrexp_5>:
 80076ec:	ec51 0b19 	vmov	r0, r1, d9
 80076f0:	2200      	movs	r2, #0
 80076f2:	f05f 4380 	movs.w	r3, #1073741824	; 0x40000000
 80076f6:	f000 fdbb 	bl	8008270 <__aeabi_cdrcmple>
 80076fa:	d854      	bhi.n	80077a6 <??ZbZclFloatFrexp_6>
 80076fc:	2001      	movs	r0, #1
 80076fe:	2100      	movs	r1, #0
 8007700:	003a      	movs	r2, r7
 8007702:	f000 f995 	bl	8007a30 <__aeabi_llsl>
 8007706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800770a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800770e:	f000 fb21 	bl	8007d54 <__aeabi_ul2d>
 8007712:	0002      	movs	r2, r0
 8007714:	000b      	movs	r3, r1
 8007716:	2000      	movs	r0, #0
 8007718:	4957      	ldr	r1, [pc, #348]	; (8007878 <??DataTable3_3>)
 800771a:	f000 fc7b 	bl	8008014 <__aeabi_ddiv>
 800771e:	ec41 0b1a 	vmov	d10, r0, r1
 8007722:	2002      	movs	r0, #2
 8007724:	2100      	movs	r1, #0
 8007726:	003a      	movs	r2, r7
 8007728:	f000 f982 	bl	8007a30 <__aeabi_llsl>
 800772c:	e9cd 0100 	strd	r0, r1, [sp]

08007730 <??ZbZclFloatFrexp_7>:
 8007730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007734:	f000 fb0e 	bl	8007d54 <__aeabi_ul2d>
 8007738:	0002      	movs	r2, r0
 800773a:	000b      	movs	r3, r1
 800773c:	ec51 0b19 	vmov	r0, r1, d9
 8007740:	f000 fd96 	bl	8008270 <__aeabi_cdrcmple>
 8007744:	d813      	bhi.n	800776e <??ZbZclFloatFrexp_8>
 8007746:	ec53 2b19 	vmov	r2, r3, d9
 800774a:	ec51 0b1a 	vmov	r0, r1, d10
 800774e:	f000 fb37 	bl	8007dc0 <__aeabi_dmul>
 8007752:	ec41 0b19 	vmov	d9, r0, r1
 8007756:	eb17 0808 	adds.w	r8, r7, r8
 800775a:	45b0      	cmp	r8, r6
 800775c:	dbe8      	blt.n	8007730 <??ZbZclFloatFrexp_7>
 800775e:	f8ca 6000 	str.w	r6, [sl]
 8007762:	4648      	mov	r0, r9
 8007764:	f000 fac2 	bl	8007cec <__aeabi_i2d>
 8007768:	ec41 0b10 	vmov	d0, r0, r1
 800776c:	e078      	b.n	8007860 <??ZbZclFloatFrexp_2>

0800776e <??ZbZclFloatFrexp_8>:
 800776e:	ec51 0b19 	vmov	r0, r1, d9
 8007772:	2200      	movs	r2, #0
 8007774:	f05f 4380 	movs.w	r3, #1073741824	; 0x40000000
 8007778:	f000 fd7a 	bl	8008270 <__aeabi_cdrcmple>
 800777c:	d865      	bhi.n	800784a <??ZbZclFloatFrexp_9>
 800777e:	ec53 2b19 	vmov	r2, r3, d9
 8007782:	2000      	movs	r0, #0
 8007784:	493e      	ldr	r1, [pc, #248]	; (8007880 <??DataTable3_5>)
 8007786:	f000 fb1b 	bl	8007dc0 <__aeabi_dmul>
 800778a:	ec41 0b19 	vmov	d9, r0, r1
 800778e:	f118 0801 	adds.w	r8, r8, #1
 8007792:	45b0      	cmp	r8, r6
 8007794:	dbeb      	blt.n	800776e <??ZbZclFloatFrexp_8>
 8007796:	f8ca 6000 	str.w	r6, [sl]
 800779a:	4648      	mov	r0, r9
 800779c:	f000 faa6 	bl	8007cec <__aeabi_i2d>
 80077a0:	ec41 0b10 	vmov	d0, r0, r1
 80077a4:	e05c      	b.n	8007860 <??ZbZclFloatFrexp_2>

080077a6 <??ZbZclFloatFrexp_6>:
 80077a6:	ec51 0b19 	vmov	r0, r1, d9
 80077aa:	2200      	movs	r2, #0
 80077ac:	4b32      	ldr	r3, [pc, #200]	; (8007878 <??DataTable3_3>)
 80077ae:	f000 fd67 	bl	8008280 <__aeabi_cdcmpeq>
 80077b2:	d24a      	bcs.n	800784a <??ZbZclFloatFrexp_9>
 80077b4:	2401      	movs	r4, #1
 80077b6:	2500      	movs	r5, #0
 80077b8:	0020      	movs	r0, r4
 80077ba:	0029      	movs	r1, r5
 80077bc:	003a      	movs	r2, r7
 80077be:	f000 f937 	bl	8007a30 <__aeabi_llsl>
 80077c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ca:	f000 fac3 	bl	8007d54 <__aeabi_ul2d>
 80077ce:	ec41 0b1a 	vmov	d10, r0, r1
 80077d2:	0020      	movs	r0, r4
 80077d4:	0029      	movs	r1, r5
 80077d6:	003a      	movs	r2, r7
 80077d8:	f000 f92a 	bl	8007a30 <__aeabi_llsl>
 80077dc:	e9cd 0100 	strd	r0, r1, [sp]

080077e0 <??ZbZclFloatFrexp_10>:
 80077e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077e4:	f000 fab6 	bl	8007d54 <__aeabi_ul2d>
 80077e8:	0002      	movs	r2, r0
 80077ea:	000b      	movs	r3, r1
 80077ec:	2000      	movs	r0, #0
 80077ee:	4922      	ldr	r1, [pc, #136]	; (8007878 <??DataTable3_3>)
 80077f0:	f000 fc10 	bl	8008014 <__aeabi_ddiv>
 80077f4:	0002      	movs	r2, r0
 80077f6:	000b      	movs	r3, r1
 80077f8:	ec51 0b18 	vmov	r0, r1, d8
 80077fc:	f000 fd40 	bl	8008280 <__aeabi_cdcmpeq>
 8007800:	d20e      	bcs.n	8007820 <??ZbZclFloatFrexp_11>
 8007802:	ebb8 0007 	subs.w	r0, r8, r7
 8007806:	4583      	cmp	fp, r0
 8007808:	da0a      	bge.n	8007820 <??ZbZclFloatFrexp_11>

0800780a <??ZbZclFloatFrexp_12>:
 800780a:	ec53 2b19 	vmov	r2, r3, d9
 800780e:	ec51 0b1a 	vmov	r0, r1, d10
 8007812:	f000 fad5 	bl	8007dc0 <__aeabi_dmul>
 8007816:	ec41 0b19 	vmov	d9, r0, r1
 800781a:	ebb8 0807 	subs.w	r8, r8, r7
 800781e:	e7df      	b.n	80077e0 <??ZbZclFloatFrexp_10>

08007820 <??ZbZclFloatFrexp_11>:
 8007820:	ec51 0b19 	vmov	r0, r1, d9
 8007824:	2200      	movs	r2, #0
 8007826:	4b14      	ldr	r3, [pc, #80]	; (8007878 <??DataTable3_3>)
 8007828:	f000 fd2a 	bl	8008280 <__aeabi_cdcmpeq>
 800782c:	d20d      	bcs.n	800784a <??ZbZclFloatFrexp_9>
 800782e:	f1b8 0801 	subs.w	r8, r8, #1
 8007832:	45d8      	cmp	r8, fp
 8007834:	d009      	beq.n	800784a <??ZbZclFloatFrexp_9>

08007836 <??ZbZclFloatFrexp_13>:
 8007836:	ec53 2b19 	vmov	r2, r3, d9
 800783a:	2000      	movs	r0, #0
 800783c:	f05f 4180 	movs.w	r1, #1073741824	; 0x40000000
 8007840:	f000 fabe 	bl	8007dc0 <__aeabi_dmul>
 8007844:	ec41 0b19 	vmov	d9, r0, r1
 8007848:	e7ea      	b.n	8007820 <??ZbZclFloatFrexp_11>

0800784a <??ZbZclFloatFrexp_9>:
 800784a:	f8ca 8000 	str.w	r8, [sl]
 800784e:	4648      	mov	r0, r9
 8007850:	f000 fa4c 	bl	8007cec <__aeabi_i2d>
 8007854:	ec53 2b19 	vmov	r2, r3, d9
 8007858:	f000 fab2 	bl	8007dc0 <__aeabi_dmul>
 800785c:	ec41 0b10 	vmov	d0, r0, r1

08007860 <??ZbZclFloatFrexp_2>:
 8007860:	b006      	add	sp, #24
 8007862:	ecbd 8b06 	vpop	{d8-d10}
 8007866:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800786c <??DataTable3>:
 800786c:	fc01 ffff                                   ....

08007870 <??DataTable3_1>:
 8007870:	0000 7ff0                                   ....

08007874 <??DataTable3_2>:
 8007874:	ffff 000f                                   ....

08007878 <??DataTable3_3>:
 8007878:	0000 3ff0                                   ...?

0800787c <??DataTable3_4>:
 800787c:	0000 3ff8                                   ...?

08007880 <??DataTable3_5>:
 8007880:	0000 3fe0                                   ...?

08007884 <ZbZclAttrIsFloat>:
 8007884:	0001      	movs	r1, r0
 8007886:	0008      	movs	r0, r1
 8007888:	b2c0      	uxtb	r0, r0
 800788a:	2838      	cmp	r0, #56	; 0x38
 800788c:	db05      	blt.n	800789a <??ZbZclAttrIsFloat_0>
 800788e:	0008      	movs	r0, r1
 8007890:	b2c0      	uxtb	r0, r0
 8007892:	283b      	cmp	r0, #59	; 0x3b
 8007894:	da01      	bge.n	800789a <??ZbZclAttrIsFloat_0>
 8007896:	2001      	movs	r0, #1
 8007898:	e000      	b.n	800789c <??ZbZclAttrIsFloat_1>

0800789a <??ZbZclAttrIsFloat_0>:
 800789a:	2000      	movs	r0, #0

0800789c <??ZbZclAttrIsFloat_1>:
 800789c:	4770      	bx	lr

0800789e <__aeabi_memmove>:
 800789e:	4288      	cmp	r0, r1
 80078a0:	b410      	push	{r4}
 80078a2:	d90d      	bls.n	80078c0 <__aeabi_memmove+0x22>
 80078a4:	188b      	adds	r3, r1, r2
 80078a6:	4298      	cmp	r0, r3
 80078a8:	d20a      	bcs.n	80078c0 <__aeabi_memmove+0x22>
 80078aa:	1881      	adds	r1, r0, r2
 80078ac:	b132      	cbz	r2, 80078bc <__aeabi_memmove+0x1e>
 80078ae:	1a9a      	subs	r2, r3, r2
 80078b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078b4:	429a      	cmp	r2, r3
 80078b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80078ba:	d1f9      	bne.n	80078b0 <__aeabi_memmove+0x12>
 80078bc:	bc10      	pop	{r4}
 80078be:	4770      	bx	lr
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	d0fb      	beq.n	80078bc <__aeabi_memmove+0x1e>
 80078c4:	440a      	add	r2, r1
 80078c6:	1e43      	subs	r3, r0, #1
 80078c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078cc:	428a      	cmp	r2, r1
 80078ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078d2:	d1f9      	bne.n	80078c8 <__aeabi_memmove+0x2a>
 80078d4:	bc10      	pop	{r4}
 80078d6:	4770      	bx	lr

080078d8 <__aeabi_memset>:
 80078d8:	b470      	push	{r4, r5, r6}
 80078da:	0784      	lsls	r4, r0, #30
 80078dc:	d046      	beq.n	800796c <__aeabi_memset+0x94>
 80078de:	1e4c      	subs	r4, r1, #1
 80078e0:	2900      	cmp	r1, #0
 80078e2:	d041      	beq.n	8007968 <__aeabi_memset+0x90>
 80078e4:	b2d5      	uxtb	r5, r2
 80078e6:	4603      	mov	r3, r0
 80078e8:	e002      	b.n	80078f0 <__aeabi_memset+0x18>
 80078ea:	1e61      	subs	r1, r4, #1
 80078ec:	b3e4      	cbz	r4, 8007968 <__aeabi_memset+0x90>
 80078ee:	460c      	mov	r4, r1
 80078f0:	f803 5b01 	strb.w	r5, [r3], #1
 80078f4:	0799      	lsls	r1, r3, #30
 80078f6:	d1f8      	bne.n	80078ea <__aeabi_memset+0x12>
 80078f8:	2c03      	cmp	r4, #3
 80078fa:	d92e      	bls.n	800795a <__aeabi_memset+0x82>
 80078fc:	b2d5      	uxtb	r5, r2
 80078fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007902:	2c0f      	cmp	r4, #15
 8007904:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007908:	d919      	bls.n	800793e <__aeabi_memset+0x66>
 800790a:	4626      	mov	r6, r4
 800790c:	f103 0110 	add.w	r1, r3, #16
 8007910:	3e10      	subs	r6, #16
 8007912:	2e0f      	cmp	r6, #15
 8007914:	f841 5c10 	str.w	r5, [r1, #-16]
 8007918:	f841 5c0c 	str.w	r5, [r1, #-12]
 800791c:	f841 5c08 	str.w	r5, [r1, #-8]
 8007920:	f841 5c04 	str.w	r5, [r1, #-4]
 8007924:	f101 0110 	add.w	r1, r1, #16
 8007928:	d8f2      	bhi.n	8007910 <__aeabi_memset+0x38>
 800792a:	f1a4 0110 	sub.w	r1, r4, #16
 800792e:	f021 010f 	bic.w	r1, r1, #15
 8007932:	f004 040f 	and.w	r4, r4, #15
 8007936:	3110      	adds	r1, #16
 8007938:	2c03      	cmp	r4, #3
 800793a:	440b      	add	r3, r1
 800793c:	d90d      	bls.n	800795a <__aeabi_memset+0x82>
 800793e:	461e      	mov	r6, r3
 8007940:	4621      	mov	r1, r4
 8007942:	3904      	subs	r1, #4
 8007944:	2903      	cmp	r1, #3
 8007946:	f846 5b04 	str.w	r5, [r6], #4
 800794a:	d8fa      	bhi.n	8007942 <__aeabi_memset+0x6a>
 800794c:	1f21      	subs	r1, r4, #4
 800794e:	f021 0103 	bic.w	r1, r1, #3
 8007952:	3104      	adds	r1, #4
 8007954:	440b      	add	r3, r1
 8007956:	f004 0403 	and.w	r4, r4, #3
 800795a:	b12c      	cbz	r4, 8007968 <__aeabi_memset+0x90>
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	441c      	add	r4, r3
 8007960:	f803 2b01 	strb.w	r2, [r3], #1
 8007964:	42a3      	cmp	r3, r4
 8007966:	d1fb      	bne.n	8007960 <__aeabi_memset+0x88>
 8007968:	bc70      	pop	{r4, r5, r6}
 800796a:	4770      	bx	lr
 800796c:	460c      	mov	r4, r1
 800796e:	4603      	mov	r3, r0
 8007970:	e7c2      	b.n	80078f8 <__aeabi_memset+0x20>

08007972 <strcmp>:
 8007972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800797a:	2a01      	cmp	r2, #1
 800797c:	bf28      	it	cs
 800797e:	429a      	cmpcs	r2, r3
 8007980:	d0f7      	beq.n	8007972 <strcmp>
 8007982:	1ad0      	subs	r0, r2, r3
 8007984:	4770      	bx	lr
	...

08007990 <memchr>:
 8007990:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007994:	2a10      	cmp	r2, #16
 8007996:	db2b      	blt.n	80079f0 <memchr+0x60>
 8007998:	f010 0f07 	tst.w	r0, #7
 800799c:	d008      	beq.n	80079b0 <memchr+0x20>
 800799e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80079a2:	3a01      	subs	r2, #1
 80079a4:	428b      	cmp	r3, r1
 80079a6:	d02d      	beq.n	8007a04 <memchr+0x74>
 80079a8:	f010 0f07 	tst.w	r0, #7
 80079ac:	b342      	cbz	r2, 8007a00 <memchr+0x70>
 80079ae:	d1f6      	bne.n	800799e <memchr+0xe>
 80079b0:	b4f0      	push	{r4, r5, r6, r7}
 80079b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80079b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80079ba:	f022 0407 	bic.w	r4, r2, #7
 80079be:	f07f 0700 	mvns.w	r7, #0
 80079c2:	2300      	movs	r3, #0
 80079c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80079c8:	3c08      	subs	r4, #8
 80079ca:	ea85 0501 	eor.w	r5, r5, r1
 80079ce:	ea86 0601 	eor.w	r6, r6, r1
 80079d2:	fa85 f547 	uadd8	r5, r5, r7
 80079d6:	faa3 f587 	sel	r5, r3, r7
 80079da:	fa86 f647 	uadd8	r6, r6, r7
 80079de:	faa5 f687 	sel	r6, r5, r7
 80079e2:	b98e      	cbnz	r6, 8007a08 <memchr+0x78>
 80079e4:	d1ee      	bne.n	80079c4 <memchr+0x34>
 80079e6:	bcf0      	pop	{r4, r5, r6, r7}
 80079e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80079ec:	f002 0207 	and.w	r2, r2, #7
 80079f0:	b132      	cbz	r2, 8007a00 <memchr+0x70>
 80079f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80079f6:	3a01      	subs	r2, #1
 80079f8:	ea83 0301 	eor.w	r3, r3, r1
 80079fc:	b113      	cbz	r3, 8007a04 <memchr+0x74>
 80079fe:	d1f8      	bne.n	80079f2 <memchr+0x62>
 8007a00:	2000      	movs	r0, #0
 8007a02:	4770      	bx	lr
 8007a04:	3801      	subs	r0, #1
 8007a06:	4770      	bx	lr
 8007a08:	2d00      	cmp	r5, #0
 8007a0a:	bf06      	itte	eq
 8007a0c:	4635      	moveq	r5, r6
 8007a0e:	3803      	subeq	r0, #3
 8007a10:	3807      	subne	r0, #7
 8007a12:	f015 0f01 	tst.w	r5, #1
 8007a16:	d107      	bne.n	8007a28 <memchr+0x98>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8007a1e:	bf02      	ittt	eq
 8007a20:	3001      	addeq	r0, #1
 8007a22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8007a26:	3001      	addeq	r0, #1
 8007a28:	bcf0      	pop	{r4, r5, r6, r7}
 8007a2a:	3801      	subs	r0, #1
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop

08007a30 <__aeabi_llsl>:
 8007a30:	4091      	lsls	r1, r2
 8007a32:	0003      	movs	r3, r0
 8007a34:	4090      	lsls	r0, r2
 8007a36:	469c      	mov	ip, r3
 8007a38:	3a20      	subs	r2, #32
 8007a3a:	4093      	lsls	r3, r2
 8007a3c:	4319      	orrs	r1, r3
 8007a3e:	4252      	negs	r2, r2
 8007a40:	4663      	mov	r3, ip
 8007a42:	40d3      	lsrs	r3, r2
 8007a44:	4319      	orrs	r1, r3
 8007a46:	4770      	bx	lr

08007a48 <__aeabi_drsub>:
 8007a48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007a4c:	e002      	b.n	8007a54 <__adddf3>
 8007a4e:	bf00      	nop

08007a50 <__aeabi_dsub>:
 8007a50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007a54 <__adddf3>:
 8007a54:	b530      	push	{r4, r5, lr}
 8007a56:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007a5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007a5e:	ea94 0f05 	teq	r4, r5
 8007a62:	bf08      	it	eq
 8007a64:	ea90 0f02 	teqeq	r0, r2
 8007a68:	bf1f      	itttt	ne
 8007a6a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007a6e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007a72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007a76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007a7a:	f000 80e2 	beq.w	8007c42 <__adddf3+0x1ee>
 8007a7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007a82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007a86:	bfb8      	it	lt
 8007a88:	426d      	neglt	r5, r5
 8007a8a:	dd0c      	ble.n	8007aa6 <__adddf3+0x52>
 8007a8c:	442c      	add	r4, r5
 8007a8e:	ea80 0202 	eor.w	r2, r0, r2
 8007a92:	ea81 0303 	eor.w	r3, r1, r3
 8007a96:	ea82 0000 	eor.w	r0, r2, r0
 8007a9a:	ea83 0101 	eor.w	r1, r3, r1
 8007a9e:	ea80 0202 	eor.w	r2, r0, r2
 8007aa2:	ea81 0303 	eor.w	r3, r1, r3
 8007aa6:	2d36      	cmp	r5, #54	; 0x36
 8007aa8:	bf88      	it	hi
 8007aaa:	bd30      	pophi	{r4, r5, pc}
 8007aac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007ab0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007ab4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007ab8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007abc:	d002      	beq.n	8007ac4 <__adddf3+0x70>
 8007abe:	4240      	negs	r0, r0
 8007ac0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007ac4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007ac8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007acc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007ad0:	d002      	beq.n	8007ad8 <__adddf3+0x84>
 8007ad2:	4252      	negs	r2, r2
 8007ad4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007ad8:	ea94 0f05 	teq	r4, r5
 8007adc:	f000 80a7 	beq.w	8007c2e <__adddf3+0x1da>
 8007ae0:	f1a4 0401 	sub.w	r4, r4, #1
 8007ae4:	f1d5 0e20 	rsbs	lr, r5, #32
 8007ae8:	db0d      	blt.n	8007b06 <__adddf3+0xb2>
 8007aea:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007aee:	fa22 f205 	lsr.w	r2, r2, r5
 8007af2:	1880      	adds	r0, r0, r2
 8007af4:	f141 0100 	adc.w	r1, r1, #0
 8007af8:	fa03 f20e 	lsl.w	r2, r3, lr
 8007afc:	1880      	adds	r0, r0, r2
 8007afe:	fa43 f305 	asr.w	r3, r3, r5
 8007b02:	4159      	adcs	r1, r3
 8007b04:	e00e      	b.n	8007b24 <__adddf3+0xd0>
 8007b06:	f1a5 0520 	sub.w	r5, r5, #32
 8007b0a:	f10e 0e20 	add.w	lr, lr, #32
 8007b0e:	2a01      	cmp	r2, #1
 8007b10:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007b14:	bf28      	it	cs
 8007b16:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007b1a:	fa43 f305 	asr.w	r3, r3, r5
 8007b1e:	18c0      	adds	r0, r0, r3
 8007b20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007b24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007b28:	d507      	bpl.n	8007b3a <__adddf3+0xe6>
 8007b2a:	f04f 0e00 	mov.w	lr, #0
 8007b2e:	f1dc 0c00 	rsbs	ip, ip, #0
 8007b32:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007b36:	eb6e 0101 	sbc.w	r1, lr, r1
 8007b3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007b3e:	d31b      	bcc.n	8007b78 <__adddf3+0x124>
 8007b40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007b44:	d30c      	bcc.n	8007b60 <__adddf3+0x10c>
 8007b46:	0849      	lsrs	r1, r1, #1
 8007b48:	ea5f 0030 	movs.w	r0, r0, rrx
 8007b4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007b50:	f104 0401 	add.w	r4, r4, #1
 8007b54:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007b58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007b5c:	f080 809a 	bcs.w	8007c94 <__adddf3+0x240>
 8007b60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007b64:	bf08      	it	eq
 8007b66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007b6a:	f150 0000 	adcs.w	r0, r0, #0
 8007b6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007b72:	ea41 0105 	orr.w	r1, r1, r5
 8007b76:	bd30      	pop	{r4, r5, pc}
 8007b78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007b7c:	4140      	adcs	r0, r0
 8007b7e:	eb41 0101 	adc.w	r1, r1, r1
 8007b82:	3c01      	subs	r4, #1
 8007b84:	bf28      	it	cs
 8007b86:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8007b8a:	d2e9      	bcs.n	8007b60 <__adddf3+0x10c>
 8007b8c:	f091 0f00 	teq	r1, #0
 8007b90:	bf04      	itt	eq
 8007b92:	4601      	moveq	r1, r0
 8007b94:	2000      	moveq	r0, #0
 8007b96:	fab1 f381 	clz	r3, r1
 8007b9a:	bf08      	it	eq
 8007b9c:	3320      	addeq	r3, #32
 8007b9e:	f1a3 030b 	sub.w	r3, r3, #11
 8007ba2:	f1b3 0220 	subs.w	r2, r3, #32
 8007ba6:	da0c      	bge.n	8007bc2 <__adddf3+0x16e>
 8007ba8:	320c      	adds	r2, #12
 8007baa:	dd08      	ble.n	8007bbe <__adddf3+0x16a>
 8007bac:	f102 0c14 	add.w	ip, r2, #20
 8007bb0:	f1c2 020c 	rsb	r2, r2, #12
 8007bb4:	fa01 f00c 	lsl.w	r0, r1, ip
 8007bb8:	fa21 f102 	lsr.w	r1, r1, r2
 8007bbc:	e00c      	b.n	8007bd8 <__adddf3+0x184>
 8007bbe:	f102 0214 	add.w	r2, r2, #20
 8007bc2:	bfd8      	it	le
 8007bc4:	f1c2 0c20 	rsble	ip, r2, #32
 8007bc8:	fa01 f102 	lsl.w	r1, r1, r2
 8007bcc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007bd0:	bfdc      	itt	le
 8007bd2:	ea41 010c 	orrle.w	r1, r1, ip
 8007bd6:	4090      	lslle	r0, r2
 8007bd8:	1ae4      	subs	r4, r4, r3
 8007bda:	bfa2      	ittt	ge
 8007bdc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007be0:	4329      	orrge	r1, r5
 8007be2:	bd30      	popge	{r4, r5, pc}
 8007be4:	ea6f 0404 	mvn.w	r4, r4
 8007be8:	3c1f      	subs	r4, #31
 8007bea:	da1c      	bge.n	8007c26 <__adddf3+0x1d2>
 8007bec:	340c      	adds	r4, #12
 8007bee:	dc0e      	bgt.n	8007c0e <__adddf3+0x1ba>
 8007bf0:	f104 0414 	add.w	r4, r4, #20
 8007bf4:	f1c4 0220 	rsb	r2, r4, #32
 8007bf8:	fa20 f004 	lsr.w	r0, r0, r4
 8007bfc:	fa01 f302 	lsl.w	r3, r1, r2
 8007c00:	ea40 0003 	orr.w	r0, r0, r3
 8007c04:	fa21 f304 	lsr.w	r3, r1, r4
 8007c08:	ea45 0103 	orr.w	r1, r5, r3
 8007c0c:	bd30      	pop	{r4, r5, pc}
 8007c0e:	f1c4 040c 	rsb	r4, r4, #12
 8007c12:	f1c4 0220 	rsb	r2, r4, #32
 8007c16:	fa20 f002 	lsr.w	r0, r0, r2
 8007c1a:	fa01 f304 	lsl.w	r3, r1, r4
 8007c1e:	ea40 0003 	orr.w	r0, r0, r3
 8007c22:	4629      	mov	r1, r5
 8007c24:	bd30      	pop	{r4, r5, pc}
 8007c26:	fa21 f004 	lsr.w	r0, r1, r4
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	bd30      	pop	{r4, r5, pc}
 8007c2e:	f094 0f00 	teq	r4, #0
 8007c32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007c36:	bf06      	itte	eq
 8007c38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007c3c:	3401      	addeq	r4, #1
 8007c3e:	3d01      	subne	r5, #1
 8007c40:	e74e      	b.n	8007ae0 <__adddf3+0x8c>
 8007c42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007c46:	bf18      	it	ne
 8007c48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007c4c:	d029      	beq.n	8007ca2 <__adddf3+0x24e>
 8007c4e:	ea94 0f05 	teq	r4, r5
 8007c52:	bf08      	it	eq
 8007c54:	ea90 0f02 	teqeq	r0, r2
 8007c58:	d005      	beq.n	8007c66 <__adddf3+0x212>
 8007c5a:	ea54 0c00 	orrs.w	ip, r4, r0
 8007c5e:	bf04      	itt	eq
 8007c60:	4619      	moveq	r1, r3
 8007c62:	4610      	moveq	r0, r2
 8007c64:	bd30      	pop	{r4, r5, pc}
 8007c66:	ea91 0f03 	teq	r1, r3
 8007c6a:	bf1e      	ittt	ne
 8007c6c:	2100      	movne	r1, #0
 8007c6e:	2000      	movne	r0, #0
 8007c70:	bd30      	popne	{r4, r5, pc}
 8007c72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007c76:	d105      	bne.n	8007c84 <__adddf3+0x230>
 8007c78:	0040      	lsls	r0, r0, #1
 8007c7a:	4149      	adcs	r1, r1
 8007c7c:	bf28      	it	cs
 8007c7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007c82:	bd30      	pop	{r4, r5, pc}
 8007c84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007c88:	bf3c      	itt	cc
 8007c8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007c8e:	bd30      	popcc	{r4, r5, pc}
 8007c90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007c94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007c98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c9c:	f04f 0000 	mov.w	r0, #0
 8007ca0:	bd30      	pop	{r4, r5, pc}
 8007ca2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007ca6:	bf1a      	itte	ne
 8007ca8:	4619      	movne	r1, r3
 8007caa:	4610      	movne	r0, r2
 8007cac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007cb0:	bf1c      	itt	ne
 8007cb2:	460b      	movne	r3, r1
 8007cb4:	4602      	movne	r2, r0
 8007cb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007cba:	bf06      	itte	eq
 8007cbc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007cc0:	ea91 0f03 	teqeq	r1, r3
 8007cc4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007cc8:	bd30      	pop	{r4, r5, pc}
 8007cca:	bf00      	nop

08007ccc <__aeabi_ui2d>:
 8007ccc:	f090 0f00 	teq	r0, #0
 8007cd0:	bf04      	itt	eq
 8007cd2:	2100      	moveq	r1, #0
 8007cd4:	4770      	bxeq	lr
 8007cd6:	b530      	push	{r4, r5, lr}
 8007cd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007cdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007ce0:	f04f 0500 	mov.w	r5, #0
 8007ce4:	f04f 0100 	mov.w	r1, #0
 8007ce8:	e750      	b.n	8007b8c <__adddf3+0x138>
 8007cea:	bf00      	nop

08007cec <__aeabi_i2d>:
 8007cec:	f090 0f00 	teq	r0, #0
 8007cf0:	bf04      	itt	eq
 8007cf2:	2100      	moveq	r1, #0
 8007cf4:	4770      	bxeq	lr
 8007cf6:	b530      	push	{r4, r5, lr}
 8007cf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007cfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007d00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007d04:	bf48      	it	mi
 8007d06:	4240      	negmi	r0, r0
 8007d08:	f04f 0100 	mov.w	r1, #0
 8007d0c:	e73e      	b.n	8007b8c <__adddf3+0x138>
 8007d0e:	bf00      	nop

08007d10 <__aeabi_f2d>:
 8007d10:	0042      	lsls	r2, r0, #1
 8007d12:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007d16:	ea4f 0131 	mov.w	r1, r1, rrx
 8007d1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007d1e:	bf1f      	itttt	ne
 8007d20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007d24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007d28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007d2c:	4770      	bxne	lr
 8007d2e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8007d32:	bf08      	it	eq
 8007d34:	4770      	bxeq	lr
 8007d36:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007d3a:	bf04      	itt	eq
 8007d3c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007d40:	4770      	bxeq	lr
 8007d42:	b530      	push	{r4, r5, lr}
 8007d44:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007d48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007d4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007d50:	e71c      	b.n	8007b8c <__adddf3+0x138>
 8007d52:	bf00      	nop

08007d54 <__aeabi_ul2d>:
 8007d54:	ea50 0201 	orrs.w	r2, r0, r1
 8007d58:	bf08      	it	eq
 8007d5a:	4770      	bxeq	lr
 8007d5c:	b530      	push	{r4, r5, lr}
 8007d5e:	f04f 0500 	mov.w	r5, #0
 8007d62:	e00a      	b.n	8007d7a <__aeabi_l2d+0x16>

08007d64 <__aeabi_l2d>:
 8007d64:	ea50 0201 	orrs.w	r2, r0, r1
 8007d68:	bf08      	it	eq
 8007d6a:	4770      	bxeq	lr
 8007d6c:	b530      	push	{r4, r5, lr}
 8007d6e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007d72:	d502      	bpl.n	8007d7a <__aeabi_l2d+0x16>
 8007d74:	4240      	negs	r0, r0
 8007d76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007d7e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007d82:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007d86:	f43f aed8 	beq.w	8007b3a <__adddf3+0xe6>
 8007d8a:	f04f 0203 	mov.w	r2, #3
 8007d8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007d92:	bf18      	it	ne
 8007d94:	3203      	addne	r2, #3
 8007d96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007d9a:	bf18      	it	ne
 8007d9c:	3203      	addne	r2, #3
 8007d9e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007da2:	f1c2 0320 	rsb	r3, r2, #32
 8007da6:	fa00 fc03 	lsl.w	ip, r0, r3
 8007daa:	fa20 f002 	lsr.w	r0, r0, r2
 8007dae:	fa01 fe03 	lsl.w	lr, r1, r3
 8007db2:	ea40 000e 	orr.w	r0, r0, lr
 8007db6:	fa21 f102 	lsr.w	r1, r1, r2
 8007dba:	4414      	add	r4, r2
 8007dbc:	e6bd      	b.n	8007b3a <__adddf3+0xe6>
 8007dbe:	bf00      	nop

08007dc0 <__aeabi_dmul>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007dc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007dca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007dce:	bf1d      	ittte	ne
 8007dd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007dd4:	ea94 0f0c 	teqne	r4, ip
 8007dd8:	ea95 0f0c 	teqne	r5, ip
 8007ddc:	f000 f8de 	bleq	8007f9c <__aeabi_dmul+0x1dc>
 8007de0:	442c      	add	r4, r5
 8007de2:	ea81 0603 	eor.w	r6, r1, r3
 8007de6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007dea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007dee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8007df2:	bf18      	it	ne
 8007df4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007df8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e00:	d038      	beq.n	8007e74 <__aeabi_dmul+0xb4>
 8007e02:	fba0 ce02 	umull	ip, lr, r0, r2
 8007e06:	f04f 0500 	mov.w	r5, #0
 8007e0a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007e0e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007e12:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007e16:	f04f 0600 	mov.w	r6, #0
 8007e1a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007e1e:	f09c 0f00 	teq	ip, #0
 8007e22:	bf18      	it	ne
 8007e24:	f04e 0e01 	orrne.w	lr, lr, #1
 8007e28:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007e2c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007e30:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007e34:	d204      	bcs.n	8007e40 <__aeabi_dmul+0x80>
 8007e36:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007e3a:	416d      	adcs	r5, r5
 8007e3c:	eb46 0606 	adc.w	r6, r6, r6
 8007e40:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007e44:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007e48:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007e4c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007e50:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007e54:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007e58:	bf88      	it	hi
 8007e5a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007e5e:	d81e      	bhi.n	8007e9e <__aeabi_dmul+0xde>
 8007e60:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007e64:	bf08      	it	eq
 8007e66:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007e6a:	f150 0000 	adcs.w	r0, r0, #0
 8007e6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007e72:	bd70      	pop	{r4, r5, r6, pc}
 8007e74:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007e78:	ea46 0101 	orr.w	r1, r6, r1
 8007e7c:	ea40 0002 	orr.w	r0, r0, r2
 8007e80:	ea81 0103 	eor.w	r1, r1, r3
 8007e84:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007e88:	bfc2      	ittt	gt
 8007e8a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007e8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007e92:	bd70      	popgt	{r4, r5, r6, pc}
 8007e94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007e98:	f04f 0e00 	mov.w	lr, #0
 8007e9c:	3c01      	subs	r4, #1
 8007e9e:	f300 80ab 	bgt.w	8007ff8 <__aeabi_dmul+0x238>
 8007ea2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007ea6:	bfde      	ittt	le
 8007ea8:	2000      	movle	r0, #0
 8007eaa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007eae:	bd70      	pople	{r4, r5, r6, pc}
 8007eb0:	f1c4 0400 	rsb	r4, r4, #0
 8007eb4:	3c20      	subs	r4, #32
 8007eb6:	da35      	bge.n	8007f24 <__aeabi_dmul+0x164>
 8007eb8:	340c      	adds	r4, #12
 8007eba:	dc1b      	bgt.n	8007ef4 <__aeabi_dmul+0x134>
 8007ebc:	f104 0414 	add.w	r4, r4, #20
 8007ec0:	f1c4 0520 	rsb	r5, r4, #32
 8007ec4:	fa00 f305 	lsl.w	r3, r0, r5
 8007ec8:	fa20 f004 	lsr.w	r0, r0, r4
 8007ecc:	fa01 f205 	lsl.w	r2, r1, r5
 8007ed0:	ea40 0002 	orr.w	r0, r0, r2
 8007ed4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007ed8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007edc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007ee0:	fa21 f604 	lsr.w	r6, r1, r4
 8007ee4:	eb42 0106 	adc.w	r1, r2, r6
 8007ee8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007eec:	bf08      	it	eq
 8007eee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
 8007ef4:	f1c4 040c 	rsb	r4, r4, #12
 8007ef8:	f1c4 0520 	rsb	r5, r4, #32
 8007efc:	fa00 f304 	lsl.w	r3, r0, r4
 8007f00:	fa20 f005 	lsr.w	r0, r0, r5
 8007f04:	fa01 f204 	lsl.w	r2, r1, r4
 8007f08:	ea40 0002 	orr.w	r0, r0, r2
 8007f0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007f10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007f14:	f141 0100 	adc.w	r1, r1, #0
 8007f18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007f1c:	bf08      	it	eq
 8007f1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	f1c4 0520 	rsb	r5, r4, #32
 8007f28:	fa00 f205 	lsl.w	r2, r0, r5
 8007f2c:	ea4e 0e02 	orr.w	lr, lr, r2
 8007f30:	fa20 f304 	lsr.w	r3, r0, r4
 8007f34:	fa01 f205 	lsl.w	r2, r1, r5
 8007f38:	ea43 0302 	orr.w	r3, r3, r2
 8007f3c:	fa21 f004 	lsr.w	r0, r1, r4
 8007f40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007f44:	fa21 f204 	lsr.w	r2, r1, r4
 8007f48:	ea20 0002 	bic.w	r0, r0, r2
 8007f4c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007f50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007f54:	bf08      	it	eq
 8007f56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	f094 0f00 	teq	r4, #0
 8007f60:	d10f      	bne.n	8007f82 <__aeabi_dmul+0x1c2>
 8007f62:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007f66:	0040      	lsls	r0, r0, #1
 8007f68:	eb41 0101 	adc.w	r1, r1, r1
 8007f6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007f70:	bf08      	it	eq
 8007f72:	3c01      	subeq	r4, #1
 8007f74:	d0f7      	beq.n	8007f66 <__aeabi_dmul+0x1a6>
 8007f76:	ea41 0106 	orr.w	r1, r1, r6
 8007f7a:	f095 0f00 	teq	r5, #0
 8007f7e:	bf18      	it	ne
 8007f80:	4770      	bxne	lr
 8007f82:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8007f86:	0052      	lsls	r2, r2, #1
 8007f88:	eb43 0303 	adc.w	r3, r3, r3
 8007f8c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007f90:	bf08      	it	eq
 8007f92:	3d01      	subeq	r5, #1
 8007f94:	d0f7      	beq.n	8007f86 <__aeabi_dmul+0x1c6>
 8007f96:	ea43 0306 	orr.w	r3, r3, r6
 8007f9a:	4770      	bx	lr
 8007f9c:	ea94 0f0c 	teq	r4, ip
 8007fa0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007fa4:	bf18      	it	ne
 8007fa6:	ea95 0f0c 	teqne	r5, ip
 8007faa:	d00c      	beq.n	8007fc6 <__aeabi_dmul+0x206>
 8007fac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007fb0:	bf18      	it	ne
 8007fb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007fb6:	d1d1      	bne.n	8007f5c <__aeabi_dmul+0x19c>
 8007fb8:	ea81 0103 	eor.w	r1, r1, r3
 8007fbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007fc0:	f04f 0000 	mov.w	r0, #0
 8007fc4:	bd70      	pop	{r4, r5, r6, pc}
 8007fc6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007fca:	bf06      	itte	eq
 8007fcc:	4610      	moveq	r0, r2
 8007fce:	4619      	moveq	r1, r3
 8007fd0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007fd4:	d019      	beq.n	800800a <__aeabi_dmul+0x24a>
 8007fd6:	ea94 0f0c 	teq	r4, ip
 8007fda:	d102      	bne.n	8007fe2 <__aeabi_dmul+0x222>
 8007fdc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007fe0:	d113      	bne.n	800800a <__aeabi_dmul+0x24a>
 8007fe2:	ea95 0f0c 	teq	r5, ip
 8007fe6:	d105      	bne.n	8007ff4 <__aeabi_dmul+0x234>
 8007fe8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007fec:	bf1c      	itt	ne
 8007fee:	4610      	movne	r0, r2
 8007ff0:	4619      	movne	r1, r3
 8007ff2:	d10a      	bne.n	800800a <__aeabi_dmul+0x24a>
 8007ff4:	ea81 0103 	eor.w	r1, r1, r3
 8007ff8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007ffc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008000:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008004:	f04f 0000 	mov.w	r0, #0
 8008008:	bd70      	pop	{r4, r5, r6, pc}
 800800a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800800e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008012:	bd70      	pop	{r4, r5, r6, pc}

08008014 <__aeabi_ddiv>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800801a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800801e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008022:	bf1d      	ittte	ne
 8008024:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008028:	ea94 0f0c 	teqne	r4, ip
 800802c:	ea95 0f0c 	teqne	r5, ip
 8008030:	f000 f8a7 	bleq	8008182 <__aeabi_ddiv+0x16e>
 8008034:	eba4 0405 	sub.w	r4, r4, r5
 8008038:	ea81 0e03 	eor.w	lr, r1, r3
 800803c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008040:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008044:	f000 8088 	beq.w	8008158 <__aeabi_ddiv+0x144>
 8008048:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800804c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008050:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008054:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008058:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800805c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008060:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008064:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008068:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800806c:	429d      	cmp	r5, r3
 800806e:	bf08      	it	eq
 8008070:	4296      	cmpeq	r6, r2
 8008072:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008076:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800807a:	d202      	bcs.n	8008082 <__aeabi_ddiv+0x6e>
 800807c:	085b      	lsrs	r3, r3, #1
 800807e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008082:	1ab6      	subs	r6, r6, r2
 8008084:	eb65 0503 	sbc.w	r5, r5, r3
 8008088:	085b      	lsrs	r3, r3, #1
 800808a:	ea4f 0232 	mov.w	r2, r2, rrx
 800808e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008092:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008096:	ebb6 0e02 	subs.w	lr, r6, r2
 800809a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800809e:	bf22      	ittt	cs
 80080a0:	1ab6      	subcs	r6, r6, r2
 80080a2:	4675      	movcs	r5, lr
 80080a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80080a8:	085b      	lsrs	r3, r3, #1
 80080aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80080ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80080b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80080b6:	bf22      	ittt	cs
 80080b8:	1ab6      	subcs	r6, r6, r2
 80080ba:	4675      	movcs	r5, lr
 80080bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80080c0:	085b      	lsrs	r3, r3, #1
 80080c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80080c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80080ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80080ce:	bf22      	ittt	cs
 80080d0:	1ab6      	subcs	r6, r6, r2
 80080d2:	4675      	movcs	r5, lr
 80080d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	ea4f 0232 	mov.w	r2, r2, rrx
 80080de:	ebb6 0e02 	subs.w	lr, r6, r2
 80080e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80080e6:	bf22      	ittt	cs
 80080e8:	1ab6      	subcs	r6, r6, r2
 80080ea:	4675      	movcs	r5, lr
 80080ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80080f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80080f4:	d018      	beq.n	8008128 <__aeabi_ddiv+0x114>
 80080f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80080fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80080fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008102:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008106:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800810a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800810e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008112:	d1c0      	bne.n	8008096 <__aeabi_ddiv+0x82>
 8008114:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008118:	d10b      	bne.n	8008132 <__aeabi_ddiv+0x11e>
 800811a:	ea41 0100 	orr.w	r1, r1, r0
 800811e:	f04f 0000 	mov.w	r0, #0
 8008122:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008126:	e7b6      	b.n	8008096 <__aeabi_ddiv+0x82>
 8008128:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800812c:	bf04      	itt	eq
 800812e:	4301      	orreq	r1, r0
 8008130:	2000      	moveq	r0, #0
 8008132:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008136:	bf88      	it	hi
 8008138:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800813c:	f63f aeaf 	bhi.w	8007e9e <__aeabi_dmul+0xde>
 8008140:	ebb5 0c03 	subs.w	ip, r5, r3
 8008144:	bf04      	itt	eq
 8008146:	ebb6 0c02 	subseq.w	ip, r6, r2
 800814a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800814e:	f150 0000 	adcs.w	r0, r0, #0
 8008152:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800815c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008160:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008164:	bfc2      	ittt	gt
 8008166:	ebd4 050c 	rsbsgt	r5, r4, ip
 800816a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800816e:	bd70      	popgt	{r4, r5, r6, pc}
 8008170:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008174:	f04f 0e00 	mov.w	lr, #0
 8008178:	3c01      	subs	r4, #1
 800817a:	e690      	b.n	8007e9e <__aeabi_dmul+0xde>
 800817c:	ea45 0e06 	orr.w	lr, r5, r6
 8008180:	e68d      	b.n	8007e9e <__aeabi_dmul+0xde>
 8008182:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008186:	ea94 0f0c 	teq	r4, ip
 800818a:	bf08      	it	eq
 800818c:	ea95 0f0c 	teqeq	r5, ip
 8008190:	f43f af3b 	beq.w	800800a <__aeabi_dmul+0x24a>
 8008194:	ea94 0f0c 	teq	r4, ip
 8008198:	d10a      	bne.n	80081b0 <__aeabi_ddiv+0x19c>
 800819a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800819e:	f47f af34 	bne.w	800800a <__aeabi_dmul+0x24a>
 80081a2:	ea95 0f0c 	teq	r5, ip
 80081a6:	f47f af25 	bne.w	8007ff4 <__aeabi_dmul+0x234>
 80081aa:	4610      	mov	r0, r2
 80081ac:	4619      	mov	r1, r3
 80081ae:	e72c      	b.n	800800a <__aeabi_dmul+0x24a>
 80081b0:	ea95 0f0c 	teq	r5, ip
 80081b4:	d106      	bne.n	80081c4 <__aeabi_ddiv+0x1b0>
 80081b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80081ba:	f43f aefd 	beq.w	8007fb8 <__aeabi_dmul+0x1f8>
 80081be:	4610      	mov	r0, r2
 80081c0:	4619      	mov	r1, r3
 80081c2:	e722      	b.n	800800a <__aeabi_dmul+0x24a>
 80081c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80081c8:	bf18      	it	ne
 80081ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80081ce:	f47f aec5 	bne.w	8007f5c <__aeabi_dmul+0x19c>
 80081d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80081d6:	f47f af0d 	bne.w	8007ff4 <__aeabi_dmul+0x234>
 80081da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80081de:	f47f aeeb 	bne.w	8007fb8 <__aeabi_dmul+0x1f8>
 80081e2:	e712      	b.n	800800a <__aeabi_dmul+0x24a>

080081e4 <__gedf2>:
 80081e4:	f04f 3cff 	mov.w	ip, #4294967295
 80081e8:	e006      	b.n	80081f8 <__cmpdf2+0x4>
 80081ea:	bf00      	nop

080081ec <__ledf2>:
 80081ec:	f04f 0c01 	mov.w	ip, #1
 80081f0:	e002      	b.n	80081f8 <__cmpdf2+0x4>
 80081f2:	bf00      	nop

080081f4 <__cmpdf2>:
 80081f4:	f04f 0c01 	mov.w	ip, #1
 80081f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80081fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008200:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008204:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008208:	bf18      	it	ne
 800820a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800820e:	d01b      	beq.n	8008248 <__cmpdf2+0x54>
 8008210:	b001      	add	sp, #4
 8008212:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008216:	bf0c      	ite	eq
 8008218:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800821c:	ea91 0f03 	teqne	r1, r3
 8008220:	bf02      	ittt	eq
 8008222:	ea90 0f02 	teqeq	r0, r2
 8008226:	2000      	moveq	r0, #0
 8008228:	4770      	bxeq	lr
 800822a:	f110 0f00 	cmn.w	r0, #0
 800822e:	ea91 0f03 	teq	r1, r3
 8008232:	bf58      	it	pl
 8008234:	4299      	cmppl	r1, r3
 8008236:	bf08      	it	eq
 8008238:	4290      	cmpeq	r0, r2
 800823a:	bf2c      	ite	cs
 800823c:	17d8      	asrcs	r0, r3, #31
 800823e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008242:	f040 0001 	orr.w	r0, r0, #1
 8008246:	4770      	bx	lr
 8008248:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800824c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008250:	d102      	bne.n	8008258 <__cmpdf2+0x64>
 8008252:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008256:	d107      	bne.n	8008268 <__cmpdf2+0x74>
 8008258:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800825c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008260:	d1d6      	bne.n	8008210 <__cmpdf2+0x1c>
 8008262:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008266:	d0d3      	beq.n	8008210 <__cmpdf2+0x1c>
 8008268:	f85d 0b04 	ldr.w	r0, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <__aeabi_cdrcmple>:
 8008270:	4684      	mov	ip, r0
 8008272:	4610      	mov	r0, r2
 8008274:	4662      	mov	r2, ip
 8008276:	468c      	mov	ip, r1
 8008278:	4619      	mov	r1, r3
 800827a:	4663      	mov	r3, ip
 800827c:	e000      	b.n	8008280 <__aeabi_cdcmpeq>
 800827e:	bf00      	nop

08008280 <__aeabi_cdcmpeq>:
 8008280:	b501      	push	{r0, lr}
 8008282:	f7ff ffb7 	bl	80081f4 <__cmpdf2>
 8008286:	2800      	cmp	r0, #0
 8008288:	bf48      	it	mi
 800828a:	f110 0f00 	cmnmi.w	r0, #0
 800828e:	bd01      	pop	{r0, pc}

08008290 <__aeabi_dcmpeq>:
 8008290:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008294:	f7ff fff4 	bl	8008280 <__aeabi_cdcmpeq>
 8008298:	bf0c      	ite	eq
 800829a:	2001      	moveq	r0, #1
 800829c:	2000      	movne	r0, #0
 800829e:	f85d fb08 	ldr.w	pc, [sp], #8
 80082a2:	bf00      	nop

080082a4 <__aeabi_dcmplt>:
 80082a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80082a8:	f7ff ffea 	bl	8008280 <__aeabi_cdcmpeq>
 80082ac:	bf34      	ite	cc
 80082ae:	2001      	movcc	r0, #1
 80082b0:	2000      	movcs	r0, #0
 80082b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80082b6:	bf00      	nop

080082b8 <__aeabi_dcmple>:
 80082b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80082bc:	f7ff ffe0 	bl	8008280 <__aeabi_cdcmpeq>
 80082c0:	bf94      	ite	ls
 80082c2:	2001      	movls	r0, #1
 80082c4:	2000      	movhi	r0, #0
 80082c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80082ca:	bf00      	nop

080082cc <__aeabi_dcmpge>:
 80082cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80082d0:	f7ff ffce 	bl	8008270 <__aeabi_cdrcmple>
 80082d4:	bf94      	ite	ls
 80082d6:	2001      	movls	r0, #1
 80082d8:	2000      	movhi	r0, #0
 80082da:	f85d fb08 	ldr.w	pc, [sp], #8
 80082de:	bf00      	nop

080082e0 <__aeabi_dcmpgt>:
 80082e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80082e4:	f7ff ffc4 	bl	8008270 <__aeabi_cdrcmple>
 80082e8:	bf34      	ite	cc
 80082ea:	2001      	movcc	r0, #1
 80082ec:	2000      	movcs	r0, #0
 80082ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80082f2:	bf00      	nop

080082f4 <__aeabi_d2iz>:
 80082f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80082f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80082fc:	d215      	bcs.n	800832a <__aeabi_d2iz+0x36>
 80082fe:	d511      	bpl.n	8008324 <__aeabi_d2iz+0x30>
 8008300:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008304:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008308:	d912      	bls.n	8008330 <__aeabi_d2iz+0x3c>
 800830a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800830e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008312:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008316:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800831a:	fa23 f002 	lsr.w	r0, r3, r2
 800831e:	bf18      	it	ne
 8008320:	4240      	negne	r0, r0
 8008322:	4770      	bx	lr
 8008324:	f04f 0000 	mov.w	r0, #0
 8008328:	4770      	bx	lr
 800832a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800832e:	d105      	bne.n	800833c <__aeabi_d2iz+0x48>
 8008330:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008334:	bf08      	it	eq
 8008336:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800833a:	4770      	bx	lr
 800833c:	f04f 0000 	mov.w	r0, #0
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop

08008344 <__aeabi_d2uiz>:
 8008344:	004a      	lsls	r2, r1, #1
 8008346:	d211      	bcs.n	800836c <__aeabi_d2uiz+0x28>
 8008348:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800834c:	d211      	bcs.n	8008372 <__aeabi_d2uiz+0x2e>
 800834e:	d50d      	bpl.n	800836c <__aeabi_d2uiz+0x28>
 8008350:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008354:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008358:	d40e      	bmi.n	8008378 <__aeabi_d2uiz+0x34>
 800835a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800835e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008362:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008366:	fa23 f002 	lsr.w	r0, r3, r2
 800836a:	4770      	bx	lr
 800836c:	f04f 0000 	mov.w	r0, #0
 8008370:	4770      	bx	lr
 8008372:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008376:	d102      	bne.n	800837e <__aeabi_d2uiz+0x3a>
 8008378:	f04f 30ff 	mov.w	r0, #4294967295
 800837c:	4770      	bx	lr
 800837e:	f04f 0000 	mov.w	r0, #0
 8008382:	4770      	bx	lr

08008384 <__aeabi_uldivmod>:
 8008384:	b953      	cbnz	r3, 800839c <__aeabi_uldivmod+0x18>
 8008386:	b94a      	cbnz	r2, 800839c <__aeabi_uldivmod+0x18>
 8008388:	2900      	cmp	r1, #0
 800838a:	bf08      	it	eq
 800838c:	2800      	cmpeq	r0, #0
 800838e:	bf1c      	itt	ne
 8008390:	f04f 31ff 	movne.w	r1, #4294967295
 8008394:	f04f 30ff 	movne.w	r0, #4294967295
 8008398:	f000 b9aa 	b.w	80086f0 <__aeabi_idiv0>
 800839c:	f1ad 0c08 	sub.w	ip, sp, #8
 80083a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80083a4:	f000 f83c 	bl	8008420 <__udivmoddi4>
 80083a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80083ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083b0:	b004      	add	sp, #16
 80083b2:	4770      	bx	lr

080083b4 <__aeabi_d2lz>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	2200      	movs	r2, #0
 80083b8:	2300      	movs	r3, #0
 80083ba:	4604      	mov	r4, r0
 80083bc:	460d      	mov	r5, r1
 80083be:	f7ff ff71 	bl	80082a4 <__aeabi_dcmplt>
 80083c2:	b928      	cbnz	r0, 80083d0 <__aeabi_d2lz+0x1c>
 80083c4:	4620      	mov	r0, r4
 80083c6:	4629      	mov	r1, r5
 80083c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083cc:	f000 b80a 	b.w	80083e4 <__aeabi_d2ulz>
 80083d0:	4620      	mov	r0, r4
 80083d2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80083d6:	f000 f805 	bl	80083e4 <__aeabi_d2ulz>
 80083da:	4240      	negs	r0, r0
 80083dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80083e0:	bd38      	pop	{r3, r4, r5, pc}
 80083e2:	bf00      	nop

080083e4 <__aeabi_d2ulz>:
 80083e4:	b5d0      	push	{r4, r6, r7, lr}
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <__aeabi_d2ulz+0x34>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	4606      	mov	r6, r0
 80083ec:	460f      	mov	r7, r1
 80083ee:	f7ff fce7 	bl	8007dc0 <__aeabi_dmul>
 80083f2:	f7ff ffa7 	bl	8008344 <__aeabi_d2uiz>
 80083f6:	4604      	mov	r4, r0
 80083f8:	f7ff fc68 	bl	8007ccc <__aeabi_ui2d>
 80083fc:	4b07      	ldr	r3, [pc, #28]	; (800841c <__aeabi_d2ulz+0x38>)
 80083fe:	2200      	movs	r2, #0
 8008400:	f7ff fcde 	bl	8007dc0 <__aeabi_dmul>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	f7ff fb20 	bl	8007a50 <__aeabi_dsub>
 8008410:	f7ff ff98 	bl	8008344 <__aeabi_d2uiz>
 8008414:	4621      	mov	r1, r4
 8008416:	bdd0      	pop	{r4, r6, r7, pc}
 8008418:	3df00000 	.word	0x3df00000
 800841c:	41f00000 	.word	0x41f00000

08008420 <__udivmoddi4>:
 8008420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	9d08      	ldr	r5, [sp, #32]
 8008426:	4604      	mov	r4, r0
 8008428:	468e      	mov	lr, r1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d14d      	bne.n	80084ca <__udivmoddi4+0xaa>
 800842e:	428a      	cmp	r2, r1
 8008430:	4694      	mov	ip, r2
 8008432:	d969      	bls.n	8008508 <__udivmoddi4+0xe8>
 8008434:	fab2 f282 	clz	r2, r2
 8008438:	b152      	cbz	r2, 8008450 <__udivmoddi4+0x30>
 800843a:	fa01 f302 	lsl.w	r3, r1, r2
 800843e:	f1c2 0120 	rsb	r1, r2, #32
 8008442:	fa20 f101 	lsr.w	r1, r0, r1
 8008446:	fa0c fc02 	lsl.w	ip, ip, r2
 800844a:	ea41 0e03 	orr.w	lr, r1, r3
 800844e:	4094      	lsls	r4, r2
 8008450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008454:	0c21      	lsrs	r1, r4, #16
 8008456:	fbbe f6f8 	udiv	r6, lr, r8
 800845a:	fa1f f78c 	uxth.w	r7, ip
 800845e:	fb08 e316 	mls	r3, r8, r6, lr
 8008462:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008466:	fb06 f107 	mul.w	r1, r6, r7
 800846a:	4299      	cmp	r1, r3
 800846c:	d90a      	bls.n	8008484 <__udivmoddi4+0x64>
 800846e:	eb1c 0303 	adds.w	r3, ip, r3
 8008472:	f106 30ff 	add.w	r0, r6, #4294967295
 8008476:	f080 811f 	bcs.w	80086b8 <__udivmoddi4+0x298>
 800847a:	4299      	cmp	r1, r3
 800847c:	f240 811c 	bls.w	80086b8 <__udivmoddi4+0x298>
 8008480:	3e02      	subs	r6, #2
 8008482:	4463      	add	r3, ip
 8008484:	1a5b      	subs	r3, r3, r1
 8008486:	b2a4      	uxth	r4, r4
 8008488:	fbb3 f0f8 	udiv	r0, r3, r8
 800848c:	fb08 3310 	mls	r3, r8, r0, r3
 8008490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008494:	fb00 f707 	mul.w	r7, r0, r7
 8008498:	42a7      	cmp	r7, r4
 800849a:	d90a      	bls.n	80084b2 <__udivmoddi4+0x92>
 800849c:	eb1c 0404 	adds.w	r4, ip, r4
 80084a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a4:	f080 810a 	bcs.w	80086bc <__udivmoddi4+0x29c>
 80084a8:	42a7      	cmp	r7, r4
 80084aa:	f240 8107 	bls.w	80086bc <__udivmoddi4+0x29c>
 80084ae:	4464      	add	r4, ip
 80084b0:	3802      	subs	r0, #2
 80084b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80084b6:	1be4      	subs	r4, r4, r7
 80084b8:	2600      	movs	r6, #0
 80084ba:	b11d      	cbz	r5, 80084c4 <__udivmoddi4+0xa4>
 80084bc:	40d4      	lsrs	r4, r2
 80084be:	2300      	movs	r3, #0
 80084c0:	e9c5 4300 	strd	r4, r3, [r5]
 80084c4:	4631      	mov	r1, r6
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	428b      	cmp	r3, r1
 80084cc:	d909      	bls.n	80084e2 <__udivmoddi4+0xc2>
 80084ce:	2d00      	cmp	r5, #0
 80084d0:	f000 80ef 	beq.w	80086b2 <__udivmoddi4+0x292>
 80084d4:	2600      	movs	r6, #0
 80084d6:	e9c5 0100 	strd	r0, r1, [r5]
 80084da:	4630      	mov	r0, r6
 80084dc:	4631      	mov	r1, r6
 80084de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e2:	fab3 f683 	clz	r6, r3
 80084e6:	2e00      	cmp	r6, #0
 80084e8:	d14a      	bne.n	8008580 <__udivmoddi4+0x160>
 80084ea:	428b      	cmp	r3, r1
 80084ec:	d302      	bcc.n	80084f4 <__udivmoddi4+0xd4>
 80084ee:	4282      	cmp	r2, r0
 80084f0:	f200 80f9 	bhi.w	80086e6 <__udivmoddi4+0x2c6>
 80084f4:	1a84      	subs	r4, r0, r2
 80084f6:	eb61 0303 	sbc.w	r3, r1, r3
 80084fa:	2001      	movs	r0, #1
 80084fc:	469e      	mov	lr, r3
 80084fe:	2d00      	cmp	r5, #0
 8008500:	d0e0      	beq.n	80084c4 <__udivmoddi4+0xa4>
 8008502:	e9c5 4e00 	strd	r4, lr, [r5]
 8008506:	e7dd      	b.n	80084c4 <__udivmoddi4+0xa4>
 8008508:	b902      	cbnz	r2, 800850c <__udivmoddi4+0xec>
 800850a:	deff      	udf	#255	; 0xff
 800850c:	fab2 f282 	clz	r2, r2
 8008510:	2a00      	cmp	r2, #0
 8008512:	f040 8092 	bne.w	800863a <__udivmoddi4+0x21a>
 8008516:	eba1 010c 	sub.w	r1, r1, ip
 800851a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800851e:	fa1f fe8c 	uxth.w	lr, ip
 8008522:	2601      	movs	r6, #1
 8008524:	0c20      	lsrs	r0, r4, #16
 8008526:	fbb1 f3f7 	udiv	r3, r1, r7
 800852a:	fb07 1113 	mls	r1, r7, r3, r1
 800852e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008532:	fb0e f003 	mul.w	r0, lr, r3
 8008536:	4288      	cmp	r0, r1
 8008538:	d908      	bls.n	800854c <__udivmoddi4+0x12c>
 800853a:	eb1c 0101 	adds.w	r1, ip, r1
 800853e:	f103 38ff 	add.w	r8, r3, #4294967295
 8008542:	d202      	bcs.n	800854a <__udivmoddi4+0x12a>
 8008544:	4288      	cmp	r0, r1
 8008546:	f200 80cb 	bhi.w	80086e0 <__udivmoddi4+0x2c0>
 800854a:	4643      	mov	r3, r8
 800854c:	1a09      	subs	r1, r1, r0
 800854e:	b2a4      	uxth	r4, r4
 8008550:	fbb1 f0f7 	udiv	r0, r1, r7
 8008554:	fb07 1110 	mls	r1, r7, r0, r1
 8008558:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800855c:	fb0e fe00 	mul.w	lr, lr, r0
 8008560:	45a6      	cmp	lr, r4
 8008562:	d908      	bls.n	8008576 <__udivmoddi4+0x156>
 8008564:	eb1c 0404 	adds.w	r4, ip, r4
 8008568:	f100 31ff 	add.w	r1, r0, #4294967295
 800856c:	d202      	bcs.n	8008574 <__udivmoddi4+0x154>
 800856e:	45a6      	cmp	lr, r4
 8008570:	f200 80bb 	bhi.w	80086ea <__udivmoddi4+0x2ca>
 8008574:	4608      	mov	r0, r1
 8008576:	eba4 040e 	sub.w	r4, r4, lr
 800857a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800857e:	e79c      	b.n	80084ba <__udivmoddi4+0x9a>
 8008580:	f1c6 0720 	rsb	r7, r6, #32
 8008584:	40b3      	lsls	r3, r6
 8008586:	fa22 fc07 	lsr.w	ip, r2, r7
 800858a:	ea4c 0c03 	orr.w	ip, ip, r3
 800858e:	fa20 f407 	lsr.w	r4, r0, r7
 8008592:	fa01 f306 	lsl.w	r3, r1, r6
 8008596:	431c      	orrs	r4, r3
 8008598:	40f9      	lsrs	r1, r7
 800859a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800859e:	fa00 f306 	lsl.w	r3, r0, r6
 80085a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80085a6:	0c20      	lsrs	r0, r4, #16
 80085a8:	fa1f fe8c 	uxth.w	lr, ip
 80085ac:	fb09 1118 	mls	r1, r9, r8, r1
 80085b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80085b4:	fb08 f00e 	mul.w	r0, r8, lr
 80085b8:	4288      	cmp	r0, r1
 80085ba:	fa02 f206 	lsl.w	r2, r2, r6
 80085be:	d90b      	bls.n	80085d8 <__udivmoddi4+0x1b8>
 80085c0:	eb1c 0101 	adds.w	r1, ip, r1
 80085c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80085c8:	f080 8088 	bcs.w	80086dc <__udivmoddi4+0x2bc>
 80085cc:	4288      	cmp	r0, r1
 80085ce:	f240 8085 	bls.w	80086dc <__udivmoddi4+0x2bc>
 80085d2:	f1a8 0802 	sub.w	r8, r8, #2
 80085d6:	4461      	add	r1, ip
 80085d8:	1a09      	subs	r1, r1, r0
 80085da:	b2a4      	uxth	r4, r4
 80085dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80085e0:	fb09 1110 	mls	r1, r9, r0, r1
 80085e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80085e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80085ec:	458e      	cmp	lr, r1
 80085ee:	d908      	bls.n	8008602 <__udivmoddi4+0x1e2>
 80085f0:	eb1c 0101 	adds.w	r1, ip, r1
 80085f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80085f8:	d26c      	bcs.n	80086d4 <__udivmoddi4+0x2b4>
 80085fa:	458e      	cmp	lr, r1
 80085fc:	d96a      	bls.n	80086d4 <__udivmoddi4+0x2b4>
 80085fe:	3802      	subs	r0, #2
 8008600:	4461      	add	r1, ip
 8008602:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008606:	fba0 9402 	umull	r9, r4, r0, r2
 800860a:	eba1 010e 	sub.w	r1, r1, lr
 800860e:	42a1      	cmp	r1, r4
 8008610:	46c8      	mov	r8, r9
 8008612:	46a6      	mov	lr, r4
 8008614:	d356      	bcc.n	80086c4 <__udivmoddi4+0x2a4>
 8008616:	d053      	beq.n	80086c0 <__udivmoddi4+0x2a0>
 8008618:	b15d      	cbz	r5, 8008632 <__udivmoddi4+0x212>
 800861a:	ebb3 0208 	subs.w	r2, r3, r8
 800861e:	eb61 010e 	sbc.w	r1, r1, lr
 8008622:	fa01 f707 	lsl.w	r7, r1, r7
 8008626:	fa22 f306 	lsr.w	r3, r2, r6
 800862a:	40f1      	lsrs	r1, r6
 800862c:	431f      	orrs	r7, r3
 800862e:	e9c5 7100 	strd	r7, r1, [r5]
 8008632:	2600      	movs	r6, #0
 8008634:	4631      	mov	r1, r6
 8008636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	40d8      	lsrs	r0, r3
 8008640:	fa0c fc02 	lsl.w	ip, ip, r2
 8008644:	fa21 f303 	lsr.w	r3, r1, r3
 8008648:	4091      	lsls	r1, r2
 800864a:	4301      	orrs	r1, r0
 800864c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008650:	fa1f fe8c 	uxth.w	lr, ip
 8008654:	fbb3 f0f7 	udiv	r0, r3, r7
 8008658:	fb07 3610 	mls	r6, r7, r0, r3
 800865c:	0c0b      	lsrs	r3, r1, #16
 800865e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008662:	fb00 f60e 	mul.w	r6, r0, lr
 8008666:	429e      	cmp	r6, r3
 8008668:	fa04 f402 	lsl.w	r4, r4, r2
 800866c:	d908      	bls.n	8008680 <__udivmoddi4+0x260>
 800866e:	eb1c 0303 	adds.w	r3, ip, r3
 8008672:	f100 38ff 	add.w	r8, r0, #4294967295
 8008676:	d22f      	bcs.n	80086d8 <__udivmoddi4+0x2b8>
 8008678:	429e      	cmp	r6, r3
 800867a:	d92d      	bls.n	80086d8 <__udivmoddi4+0x2b8>
 800867c:	3802      	subs	r0, #2
 800867e:	4463      	add	r3, ip
 8008680:	1b9b      	subs	r3, r3, r6
 8008682:	b289      	uxth	r1, r1
 8008684:	fbb3 f6f7 	udiv	r6, r3, r7
 8008688:	fb07 3316 	mls	r3, r7, r6, r3
 800868c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008690:	fb06 f30e 	mul.w	r3, r6, lr
 8008694:	428b      	cmp	r3, r1
 8008696:	d908      	bls.n	80086aa <__udivmoddi4+0x28a>
 8008698:	eb1c 0101 	adds.w	r1, ip, r1
 800869c:	f106 38ff 	add.w	r8, r6, #4294967295
 80086a0:	d216      	bcs.n	80086d0 <__udivmoddi4+0x2b0>
 80086a2:	428b      	cmp	r3, r1
 80086a4:	d914      	bls.n	80086d0 <__udivmoddi4+0x2b0>
 80086a6:	3e02      	subs	r6, #2
 80086a8:	4461      	add	r1, ip
 80086aa:	1ac9      	subs	r1, r1, r3
 80086ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80086b0:	e738      	b.n	8008524 <__udivmoddi4+0x104>
 80086b2:	462e      	mov	r6, r5
 80086b4:	4628      	mov	r0, r5
 80086b6:	e705      	b.n	80084c4 <__udivmoddi4+0xa4>
 80086b8:	4606      	mov	r6, r0
 80086ba:	e6e3      	b.n	8008484 <__udivmoddi4+0x64>
 80086bc:	4618      	mov	r0, r3
 80086be:	e6f8      	b.n	80084b2 <__udivmoddi4+0x92>
 80086c0:	454b      	cmp	r3, r9
 80086c2:	d2a9      	bcs.n	8008618 <__udivmoddi4+0x1f8>
 80086c4:	ebb9 0802 	subs.w	r8, r9, r2
 80086c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80086cc:	3801      	subs	r0, #1
 80086ce:	e7a3      	b.n	8008618 <__udivmoddi4+0x1f8>
 80086d0:	4646      	mov	r6, r8
 80086d2:	e7ea      	b.n	80086aa <__udivmoddi4+0x28a>
 80086d4:	4620      	mov	r0, r4
 80086d6:	e794      	b.n	8008602 <__udivmoddi4+0x1e2>
 80086d8:	4640      	mov	r0, r8
 80086da:	e7d1      	b.n	8008680 <__udivmoddi4+0x260>
 80086dc:	46d0      	mov	r8, sl
 80086de:	e77b      	b.n	80085d8 <__udivmoddi4+0x1b8>
 80086e0:	3b02      	subs	r3, #2
 80086e2:	4461      	add	r1, ip
 80086e4:	e732      	b.n	800854c <__udivmoddi4+0x12c>
 80086e6:	4630      	mov	r0, r6
 80086e8:	e709      	b.n	80084fe <__udivmoddi4+0xde>
 80086ea:	4464      	add	r4, ip
 80086ec:	3802      	subs	r0, #2
 80086ee:	e742      	b.n	8008576 <__udivmoddi4+0x156>

080086f0 <__aeabi_idiv0>:
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop

080086f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80086f8:	f3bf 8f4f 	dsb	sy
}
 80086fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80086fe:	4b06      	ldr	r3, [pc, #24]	; (8008718 <__NVIC_SystemReset+0x24>)
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008706:	4904      	ldr	r1, [pc, #16]	; (8008718 <__NVIC_SystemReset+0x24>)
 8008708:	4b04      	ldr	r3, [pc, #16]	; (800871c <__NVIC_SystemReset+0x28>)
 800870a:	4313      	orrs	r3, r2
 800870c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800870e:	f3bf 8f4f 	dsb	sy
}
 8008712:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <__NVIC_SystemReset+0x20>
 8008718:	e000ed00 	.word	0xe000ed00
 800871c:	05fa0004 	.word	0x05fa0004

08008720 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8008728:	4b07      	ldr	r3, [pc, #28]	; (8008748 <LL_C2_PWR_SetPowerMode+0x28>)
 800872a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800872e:	f023 0207 	bic.w	r2, r3, #7
 8008732:	4905      	ldr	r1, [pc, #20]	; (8008748 <LL_C2_PWR_SetPowerMode+0x28>)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4313      	orrs	r3, r2
 8008738:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	58000400 	.word	0x58000400

0800874c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <LL_EXTI_EnableIT_32_63+0x24>)
 8008756:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800875a:	4905      	ldr	r1, [pc, #20]	; (8008770 <LL_EXTI_EnableIT_32_63+0x24>)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4313      	orrs	r3, r2
 8008760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	58000800 	.word	0x58000800

08008774 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 800877c:	4b06      	ldr	r3, [pc, #24]	; (8008798 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 800877e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8008782:	4905      	ldr	r1, [pc, #20]	; (8008798 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4313      	orrs	r3, r2
 8008788:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	58000800 	.word	0x58000800

0800879c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80087a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80087ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	608b      	str	r3, [r1, #8]
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <APPE_Init>:
EXTI_HandleTypeDef exti_handle;
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
  /* Configure the system Power Mode */
  SystemPower_Config(); 
 80087c8:	f000 f826 	bl	8008818 <SystemPower_Config>

  /* Initialize the TimerServer */
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); 
 80087cc:	4909      	ldr	r1, [pc, #36]	; (80087f4 <APPE_Init+0x30>)
 80087ce:	2000      	movs	r0, #0
 80087d0:	f000 fec0 	bl	8009554 <HW_TS_Init>

  Init_Debug();
 80087d4:	f000 f810 	bl	80087f8 <Init_Debug>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80087d8:	2101      	movs	r1, #1
 80087da:	2001      	movs	r0, #1
 80087dc:	f00e ff12 	bl	8017604 <UTIL_LPM_SetOffMode>
  Led_Init();
 80087e0:	f000 f93e 	bl	8008a60 <Led_Init>
  Button_Init();
 80087e4:	f000 f949 	bl	8008a7a <Button_Init>
  RxUART_Init();
 80087e8:	f000 f9ea 	bl	8008bc0 <RxUART_Init>

  /* Initialize all transport layers */
  APPE_Tl_Init();	
 80087ec:	f000 f822 	bl	8008834 <APPE_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
    return;
 80087f0:	bf00      	nop
}
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20000510 	.word	0x20000510

080087f8 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80087fc:	f004 fd90 	bl	800d320 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8008800:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008804:	f7ff ffa2 	bl	800874c <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8008808:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800880c:	f7ff ffb2 	bl	8008774 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8008810:	f00a fcec 	bl	80131ec <DbgTraceInit>
#endif

  return;
 8008814:	bf00      	nop
}
 8008816:	bd80      	pop	{r7, pc}

08008818 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800881c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008820:	f7ff ffbc 	bl	800879c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8008824:	f00e fedc 	bl	80175e0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8008828:	2004      	movs	r0, #4
 800882a:	f7ff ff79 	bl	8008720 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800882e:	bf00      	nop
}
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <APPE_Tl_Init>:

static void APPE_Tl_Init( void )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b088      	sub	sp, #32
 8008838:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  
  /**< Reference table initialization */
  TL_Init();
 800883a:	f00a fa45 	bl	8012cc8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc );
 800883e:	4a11      	ldr	r2, [pc, #68]	; (8008884 <APPE_Tl_Init+0x50>)
 8008840:	2100      	movs	r1, #0
 8008842:	2004      	movs	r0, #4
 8008844:	f00f f80a 	bl	801785c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8008848:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <APPE_Tl_Init+0x54>)
 800884a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800884c:	4b0f      	ldr	r3, [pc, #60]	; (800888c <APPE_Tl_Init+0x58>)
 800884e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8008850:	463b      	mov	r3, r7
 8008852:	4619      	mov	r1, r3
 8008854:	480e      	ldr	r0, [pc, #56]	; (8008890 <APPE_Tl_Init+0x5c>)
 8008856:	f00a f8f9 	bl	8012a4c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800885e:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <APPE_Tl_Init+0x60>)
 8008860:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8008862:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <APPE_Tl_Init+0x64>)
 8008864:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8008866:	f240 533c 	movw	r3, #1340	; 0x53c
 800886a:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800886c:	f107 0308 	add.w	r3, r7, #8
 8008870:	4618      	mov	r0, r3
 8008872:	f00a fb85 	bl	8012f80 <TL_MM_Init>

  TL_Enable();
 8008876:	f00a fa21 	bl	8012cbc <TL_Enable>

  return;
 800887a:	bf00      	nop
}
 800887c:	3720      	adds	r7, #32
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	08012a85 	.word	0x08012a85
 8008888:	20030620 	.word	0x20030620
 800888c:	0800889d 	.word	0x0800889d
 8008890:	080088b3 	.word	0x080088b3
 8008894:	2003072c 	.word	0x2003072c
 8008898:	200300e4 	.word	0x200300e4

0800889c <APPE_SysStatusNot>:


static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80088a6:	bf00      	nop
}
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	330b      	adds	r3, #11
 80088c0:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 80088cc:	d004      	beq.n	80088d8 <APPE_SysUserEvtRx+0x26>
 80088ce:	f249 2201 	movw	r2, #37377	; 0x9201
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00a      	beq.n	80088ec <APPE_SysUserEvtRx+0x3a>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 80088d6:	e00f      	b.n	80088f8 <APPE_SysUserEvtRx+0x46>
         ((tSHCI_UserEvtRxParam*)pPayload)->status = APPE_SysevtReadyProcessing( (SHCI_C2_Ready_Evt_t*)p_sys_event->payload );
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3302      	adds	r3, #2
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 f82d 	bl	800893c <APPE_SysevtReadyProcessing>
 80088e2:	4603      	mov	r3, r0
 80088e4:	461a      	mov	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	701a      	strb	r2, [r3, #0]
         break;
 80088ea:	e005      	b.n	80088f8 <APPE_SysUserEvtRx+0x46>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	789b      	ldrb	r3, [r3, #2]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 f805 	bl	8008900 <APPE_SysEvtError>
         break;
 80088f6:	bf00      	nop
  }
  return;
 80088f8:	bf00      	nop
}
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	71fb      	strb	r3, [r7, #7]
  switch (ErrorCode)
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	2bc8      	cmp	r3, #200	; 0xc8
 800890e:	d105      	bne.n	800891c <APPE_SysEvtError+0x1c>
  {
    case ERR_ZIGBEE_UNKNOWN_CMD:
          APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 8008910:	4a08      	ldr	r2, [pc, #32]	; (8008934 <APPE_SysEvtError+0x34>)
 8008912:	2101      	movs	r1, #1
 8008914:	2000      	movs	r0, #0
 8008916:	f001 ff87 	bl	800a828 <logApplication>
          break;
 800891a:	e006      	b.n	800892a <APPE_SysEvtError+0x2a>
          
    default:
          APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n", ErrorCode);
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	4a06      	ldr	r2, [pc, #24]	; (8008938 <APPE_SysEvtError+0x38>)
 8008920:	2101      	movs	r1, #1
 8008922:	2000      	movs	r0, #0
 8008924:	f001 ff80 	bl	800a828 <logApplication>
          break;
 8008928:	bf00      	nop
  }
  return;
 800892a:	bf00      	nop
}
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	080190b8 	.word	0x080190b8
 8008938:	080190d8 	.word	0x080190d8

0800893c <APPE_SysevtReadyProcessing>:

static SHCI_TL_UserEventFlowStatus_t APPE_SysevtReadyProcessing( SHCI_C2_Ready_Evt_t *pReadyEvt )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint8_t fus_state_value;
  SHCI_TL_UserEventFlowStatus_t return_value;

#if ( CFG_LED_SUPPORTED != 0)
  BSP_LED_Off(LED_BLUE);
 8008944:	2000      	movs	r0, #0
 8008946:	f004 fa5f 	bl	800ce08 <BSP_LED_Off>
#endif

  if(pReadyEvt->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d11d      	bne.n	800898e <APPE_SysevtReadyProcessing+0x52>
  {
    return_value = SHCI_TL_UserEventFlow_Enable;
 8008952:	2301      	movs	r3, #1
 8008954:	73fb      	strb	r3, [r7, #15]

    if((*(uint8_t*)SRAM1_BASE) == CFG_REBOOT_ON_CPU2_UPGRADE)
 8008956:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d10d      	bne.n	800897c <APPE_SysevtReadyProcessing+0x40>
    {
      /**
       * The wireless stack update has been completed
       * Reboot on the firmware application
       */
        APP_DBG("[OTA] : Wireless stack update complete. Reboot on the firmware application");
 8008960:	4a3a      	ldr	r2, [pc, #232]	; (8008a4c <APPE_SysevtReadyProcessing+0x110>)
 8008962:	2101      	movs	r1, #1
 8008964:	2000      	movs	r0, #0
 8008966:	f001 ff5f 	bl	800a828 <logApplication>
        HAL_Delay(100);
 800896a:	2064      	movs	r0, #100	; 0x64
 800896c:	f001 fc48 	bl	800a200 <HAL_Delay>
        *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_DOWNLOADED_FW;
 8008970:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008974:	2200      	movs	r2, #0
 8008976:	701a      	strb	r2, [r3, #0]
        NVIC_SystemReset();
 8008978:	f7ff febc 	bl	80086f4 <__NVIC_SystemReset>
      /**
       * Run the Application
       */

      /* Traces channel initialization */
      TL_TRACES_Init( );
 800897c:	f00a fb74 	bl	8013068 <TL_TRACES_Init>

      APP_ZIGBEE_Init();
 8008980:	f003 fa70 	bl	800be64 <APP_ZIGBEE_Init>
      UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8008984:	2100      	movs	r1, #0
 8008986:	2001      	movs	r0, #1
 8008988:	f00e fe3c 	bl	8017604 <UTIL_LPM_SetOffMode>
 800898c:	e059      	b.n	8008a42 <APPE_SysevtReadyProcessing+0x106>
  else
  {
    /**
     * FUS is running on CPU2
     */
    return_value = SHCI_TL_UserEventFlow_Disable;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
     * FUS Firmware Upgrade:
     * Once the upgrade is over, the CPU2 will run FUS and the FUS return the Idle state
     * The SRAM1 is checked and when equal to CFG_REBOOT_ON_CPU2_UPGRADE,
     * it means we may restart on the firmware application.
     */
    fus_state_value = SHCI_C2_FUS_GetState( NULL );
 8008992:	2000      	movs	r0, #0
 8008994:	f009 ff34 	bl	8012800 <SHCI_C2_FUS_GetState>
 8008998:	4603      	mov	r3, r0
 800899a:	73bb      	strb	r3, [r7, #14]

    if( fus_state_value == 0xFF)
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	2bff      	cmp	r3, #255	; 0xff
 80089a0:	d109      	bne.n	80089b6 <APPE_SysevtReadyProcessing+0x7a>
    {
      /**
       * This is the first time in the life of the product the FUS is involved. After this command, it will be properly initialized
       * Request the device to reboot to install the wireless firmware
       */
      APP_DBG("[OTA] : First time in the life of the product the FUS is involved. Reboot to install the wireless firmware");
 80089a2:	4a2b      	ldr	r2, [pc, #172]	; (8008a50 <APPE_SysevtReadyProcessing+0x114>)
 80089a4:	2101      	movs	r1, #1
 80089a6:	2000      	movs	r0, #0
 80089a8:	f001 ff3e 	bl	800a828 <logApplication>
      HAL_Delay(100);
 80089ac:	2064      	movs	r0, #100	; 0x64
 80089ae:	f001 fc27 	bl	800a200 <HAL_Delay>
      NVIC_SystemReset();
 80089b2:	f7ff fe9f 	bl	80086f4 <__NVIC_SystemReset>
    }
    else if( fus_state_value != 0)
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00f      	beq.n	80089dc <APPE_SysevtReadyProcessing+0xa0>
    {
      /**
       * An upgrade is on going
       * Wait to reboot on the wireless stack
       */
      APP_DBG("[OTA] : An upgrade is on going. Wait to reboot on the wireless stack");
 80089bc:	4a25      	ldr	r2, [pc, #148]	; (8008a54 <APPE_SysevtReadyProcessing+0x118>)
 80089be:	2101      	movs	r1, #1
 80089c0:	2000      	movs	r0, #0
 80089c2:	f001 ff31 	bl	800a828 <logApplication>
      HAL_Delay(100);
 80089c6:	2064      	movs	r0, #100	; 0x64
 80089c8:	f001 fc1a 	bl	800a200 <HAL_Delay>
#if ( CFG_LED_SUPPORTED != 0)
      BSP_LED_On(LED_BLUE);
 80089cc:	2000      	movs	r0, #0
 80089ce:	f004 fa01 	bl	800cdd4 <BSP_LED_On>
#endif
      while(1)
      {
        HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80089d2:	2101      	movs	r1, #1
 80089d4:	2000      	movs	r0, #0
 80089d6:	f005 fe1d 	bl	800e614 <HAL_PWR_EnterSLEEPMode>
 80089da:	e7fa      	b.n	80089d2 <APPE_SysevtReadyProcessing+0x96>
      /**
       * FUS is idle
       * Request an upgrade and wait to reboot on the wireless stack
       * The first two parameters are currently not supported by the FUS
       */
      if((*(uint8_t*)SRAM1_BASE) == CFG_REBOOT_ON_CPU2_UPGRADE)
 80089dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d115      	bne.n	8008a12 <APPE_SysevtReadyProcessing+0xd6>
      {
        /**
         * The FUS update has been completed
         * Reboot the CPU2 on the firmware application
         */
        APP_DBG("[OTA] : FUS update has been completed. Reboot the on the firmware application");
 80089e6:	4a1c      	ldr	r2, [pc, #112]	; (8008a58 <APPE_SysevtReadyProcessing+0x11c>)
 80089e8:	2101      	movs	r1, #1
 80089ea:	2000      	movs	r0, #0
 80089ec:	f001 ff1c 	bl	800a828 <logApplication>
        HAL_Delay(100);
 80089f0:	2064      	movs	r0, #100	; 0x64
 80089f2:	f001 fc05 	bl	800a200 <HAL_Delay>
        *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_DOWNLOADED_FW;
 80089f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80089fa:	2200      	movs	r2, #0
 80089fc:	701a      	strb	r2, [r3, #0]
        SHCI_C2_FUS_StartWs( );
 80089fe:	f009 ff51 	bl	80128a4 <SHCI_C2_FUS_StartWs>
  #if ( CFG_LED_SUPPORTED != 0)
        BSP_LED_On(LED_BLUE);
 8008a02:	2000      	movs	r0, #0
 8008a04:	f004 f9e6 	bl	800cdd4 <BSP_LED_On>
  #endif
        while(1)
        {
          HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8008a08:	2101      	movs	r1, #1
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f005 fe02 	bl	800e614 <HAL_PWR_EnterSLEEPMode>
 8008a10:	e7fa      	b.n	8008a08 <APPE_SysevtReadyProcessing+0xcc>
        }
      }
      else
      {
        APP_DBG("[OTA] : SHCI_C2_FUS_FwUpgrade launch. Next Reboot is on the wireless update");
 8008a12:	4a12      	ldr	r2, [pc, #72]	; (8008a5c <APPE_SysevtReadyProcessing+0x120>)
 8008a14:	2101      	movs	r1, #1
 8008a16:	2000      	movs	r0, #0
 8008a18:	f001 ff06 	bl	800a828 <logApplication>
        HAL_Delay(100);
 8008a1c:	2064      	movs	r0, #100	; 0x64
 8008a1e:	f001 fbef 	bl	800a200 <HAL_Delay>
        *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_CPU2_UPGRADE;
 8008a22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008a26:	2202      	movs	r2, #2
 8008a28:	701a      	strb	r2, [r3, #0]
         * Note:
         * If a reset occurs now, on the next reboot the FUS will be idle and a CPU2 reboot on the
         * wireless stack will be requested because SRAM1 is set to CFG_REBOOT_ON_CPU2_UPGRADE
         * The device is still operational but no CPU2 update has been done.
         */
        SHCI_C2_FUS_FwUpgrade(0,0);
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	f009 ff04 	bl	801283a <SHCI_C2_FUS_FwUpgrade>
  #if ( CFG_LED_SUPPORTED != 0)
        BSP_LED_On(LED_BLUE);
 8008a32:	2000      	movs	r0, #0
 8008a34:	f004 f9ce 	bl	800cdd4 <BSP_LED_On>
  #endif
        while(1)
        {
          HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8008a38:	2101      	movs	r1, #1
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	f005 fdea 	bl	800e614 <HAL_PWR_EnterSLEEPMode>
 8008a40:	e7fa      	b.n	8008a38 <APPE_SysevtReadyProcessing+0xfc>
        }
      }
    }
  }

  return return_value;
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	080190f8 	.word	0x080190f8
 8008a50:	08019144 	.word	0x08019144
 8008a54:	080191b0 	.word	0x080191b0
 8008a58:	080191f8 	.word	0x080191f8
 8008a5c:	08019248 	.word	0x08019248

08008a60 <Led_Init>:


/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1U)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8008a64:	2000      	movs	r0, #0
 8008a66:	f004 f97b 	bl	800cd60 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	f004 f978 	bl	800cd60 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8008a70:	2002      	movs	r0, #2
 8008a72:	f004 f975 	bl	800cd60 <BSP_LED_Init>

#endif

  return;
 8008a76:	bf00      	nop
}
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <Button_Init>:

static void Button_Init( void )
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1U)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8008a7e:	2101      	movs	r1, #1
 8008a80:	2000      	movs	r0, #0
 8008a82:	f004 f9f5 	bl	800ce70 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8008a86:	2101      	movs	r1, #1
 8008a88:	2001      	movs	r0, #1
 8008a8a:	f004 f9f1 	bl	800ce70 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8008a8e:	2101      	movs	r1, #1
 8008a90:	2002      	movs	r0, #2
 8008a92:	f004 f9ed 	bl	800ce70 <BSP_PB_Init>
#endif /* (CFG_BUTTON_SUPPORTED == 1U) */

  return;
 8008a96:	bf00      	nop
}
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8008a9e:	bf00      	nop
}
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  switch (evt_waited_bm) 
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d003      	beq.n	8008ac0 <UTIL_SEQ_EvtIdle+0x18>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d004      	beq.n	8008ac8 <UTIL_SEQ_EvtIdle+0x20>
 8008abe:	e00a      	b.n	8008ad6 <UTIL_SEQ_EvtIdle+0x2e>
  {
    case EVENT_ACK_FROM_M0_EVT:
        /* Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
        * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
        * until we're done the request to the M0. */
        UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8008ac0:	2002      	movs	r0, #2
 8008ac2:	f00e fdcf 	bl	8017664 <UTIL_SEQ_Run>
        break;
 8008ac6:	e00b      	b.n	8008ae0 <UTIL_SEQ_EvtIdle+0x38>

    case EVENT_SYNCHRO_BYPASS_IDLE:
        UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8008ac8:	2004      	movs	r0, #4
 8008aca:	f00e ff15 	bl	80178f8 <UTIL_SEQ_SetEvt>
        /* Process notifications and requests from the M0 */
        UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8008ace:	2003      	movs	r0, #3
 8008ad0:	f00e fdc8 	bl	8017664 <UTIL_SEQ_Run>
        break;
 8008ad4:	e004      	b.n	8008ae0 <UTIL_SEQ_EvtIdle+0x38>

    default:
        /* default case */
        UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8008ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8008ada:	f00e fdc3 	bl	8017664 <UTIL_SEQ_Run>
        break;
 8008ade:	bf00      	nop
    }
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <shci_notify_asynch_evt>:


void shci_notify_asynch_evt(void* pdata)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8008af0:	2100      	movs	r1, #0
 8008af2:	2004      	movs	r0, #4
 8008af4:	f00e fed4 	bl	80178a0 <UTIL_SEQ_SetTask>
  return;
 8008af8:	bf00      	nop
}
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <shci_cmd_resp_release>:


void shci_cmd_resp_release(uint32_t flag)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8008b08:	2001      	movs	r0, #1
 8008b0a:	f00e fef5 	bl	80178f8 <UTIL_SEQ_SetEvt>
  return;
 8008b0e:	bf00      	nop
}
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <shci_cmd_resp_wait>:


void shci_cmd_resp_wait(uint32_t timeout)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8008b1e:	2001      	movs	r0, #1
 8008b20:	f00e ff0a 	bl	8017938 <UTIL_SEQ_WaitEvt>
  return;
 8008b24:	bf00      	nop
}
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <TL_TRACES_EvtReceived>:


/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	330b      	adds	r3, #11
 8008b38:	1c99      	adds	r1, r3, #2
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	7a9b      	ldrb	r3, [r3, #10]
 8008b3e:	3b02      	subs	r3, #2
 8008b40:	461a      	mov	r2, r3
 8008b42:	2001      	movs	r0, #1
 8008b44:	f00a fb78 	bl	8013238 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f00a fa55 	bl	8012ff8 <TL_MM_EvtDone>
}
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if (CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	af00      	add	r7, sp, #0
  MX_USART1_UART_Init(); 
 8008b5a:	f001 fa4b 	bl	8009ff4 <MX_USART1_UART_Init>

  return;
 8008b5e:	bf00      	nop
}
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8008b70:	897a      	ldrh	r2, [r7, #10]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68f9      	ldr	r1, [r7, #12]
 8008b76:	2000      	movs	r0, #0
 8008b78:	f000 ff92 	bl	8009aa0 <HW_UART_Transmit_DMA>

  return;
 8008b7c:	bf00      	nop
}
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) 
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	2b10      	cmp	r3, #16
 8008b92:	d00c      	beq.n	8008bae <HAL_GPIO_EXTI_Callback+0x2a>
 8008b94:	2b10      	cmp	r3, #16
 8008b96:	dc0c      	bgt.n	8008bb2 <HAL_GPIO_EXTI_Callback+0x2e>
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d002      	beq.n	8008ba2 <HAL_GPIO_EXTI_Callback+0x1e>
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d00a      	beq.n	8008bb6 <HAL_GPIO_EXTI_Callback+0x32>

    case BUTTON_SW3_PIN:
        break;

    default:
        break;
 8008ba0:	e007      	b.n	8008bb2 <HAL_GPIO_EXTI_Callback+0x2e>
        UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON_SW2,CFG_SCH_PRIO_1);
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008ba8:	f00e fe7a 	bl	80178a0 <UTIL_SEQ_SetTask>
        break;
 8008bac:	e004      	b.n	8008bb8 <HAL_GPIO_EXTI_Callback+0x34>
        break;
 8008bae:	bf00      	nop
 8008bb0:	e002      	b.n	8008bb8 <HAL_GPIO_EXTI_Callback+0x34>
        break;
 8008bb2:	bf00      	nop
 8008bb4:	e000      	b.n	8008bb8 <HAL_GPIO_EXTI_Callback+0x34>
        break;
 8008bb6:	bf00      	nop
  }
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <RxUART_Init>:


static void RxUART_Init(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8008bc4:	4b03      	ldr	r3, [pc, #12]	; (8008bd4 <RxUART_Init+0x14>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4903      	ldr	r1, [pc, #12]	; (8008bd8 <RxUART_Init+0x18>)
 8008bca:	2000      	movs	r0, #0
 8008bcc:	f000 ff2e 	bl	8009a2c <HW_UART_Receive_IT>
}
 8008bd0:	bf00      	nop
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	08008bdd 	.word	0x08008bdd
 8008bd8:	20000164 	.word	0x20000164

08008bdc <RxCpltCallback>:


static void RxCpltCallback(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8008be0:	4b16      	ldr	r3, [pc, #88]	; (8008c3c <RxCpltCallback+0x60>)
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	2bff      	cmp	r3, #255	; 0xff
 8008be6:	d820      	bhi.n	8008c2a <RxCpltCallback+0x4e>
  {
    if (aRxBuffer[0] == '\r')
 8008be8:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <RxCpltCallback+0x64>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b0d      	cmp	r3, #13
 8008bee:	d111      	bne.n	8008c14 <RxCpltCallback+0x38>
    {
      APP_DBG("received %s", CommandString);
 8008bf0:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <RxCpltCallback+0x68>)
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <RxCpltCallback+0x6c>)
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	f001 fe16 	bl	800a828 <logApplication>

      UartCmdExecute();
 8008bfc:	f000 f828 	bl	8008c50 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8008c00:	4b0e      	ldr	r3, [pc, #56]	; (8008c3c <RxCpltCallback+0x60>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8008c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	480d      	ldr	r0, [pc, #52]	; (8008c44 <RxCpltCallback+0x68>)
 8008c0e:	f00e ffa1 	bl	8017b54 <memset>
 8008c12:	e00a      	b.n	8008c2a <RxCpltCallback+0x4e>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8008c14:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <RxCpltCallback+0x60>)
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	b291      	uxth	r1, r2
 8008c1c:	4a07      	ldr	r2, [pc, #28]	; (8008c3c <RxCpltCallback+0x60>)
 8008c1e:	8011      	strh	r1, [r2, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <RxCpltCallback+0x64>)
 8008c24:	7819      	ldrb	r1, [r3, #0]
 8008c26:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <RxCpltCallback+0x68>)
 8008c28:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8008c2a:	4b08      	ldr	r3, [pc, #32]	; (8008c4c <RxCpltCallback+0x70>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	4904      	ldr	r1, [pc, #16]	; (8008c40 <RxCpltCallback+0x64>)
 8008c30:	2000      	movs	r0, #0
 8008c32:	f000 fefb 	bl	8009a2c <HW_UART_Receive_IT>
}
 8008c36:	bf00      	nop
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	2000026c 	.word	0x2000026c
 8008c40:	20000164 	.word	0x20000164
 8008c44:	2000016c 	.word	0x2000016c
 8008c48:	08019294 	.word	0x08019294
 8008c4c:	08008bdd 	.word	0x08008bdd

08008c50 <UartCmdExecute>:


static void UartCmdExecute(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8008c54:	4928      	ldr	r1, [pc, #160]	; (8008cf8 <UartCmdExecute+0xa8>)
 8008c56:	4829      	ldr	r0, [pc, #164]	; (8008cfc <UartCmdExecute+0xac>)
 8008c58:	f7fe fe8b 	bl	8007972 <strcmp>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10b      	bne.n	8008c7a <UartCmdExecute+0x2a>
  {
    APP_DBG("SW1 OK");
 8008c62:	4a27      	ldr	r2, [pc, #156]	; (8008d00 <UartCmdExecute+0xb0>)
 8008c64:	2101      	movs	r1, #1
 8008c66:	2000      	movs	r0, #0
 8008c68:	f001 fdde 	bl	800a828 <logApplication>
    exti_handle.Line = EXTI_LINE_4;
 8008c6c:	4b25      	ldr	r3, [pc, #148]	; (8008d04 <UartCmdExecute+0xb4>)
 8008c6e:	4a26      	ldr	r2, [pc, #152]	; (8008d08 <UartCmdExecute+0xb8>)
 8008c70:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8008c72:	4824      	ldr	r0, [pc, #144]	; (8008d04 <UartCmdExecute+0xb4>)
 8008c74:	f005 f840 	bl	800dcf8 <HAL_EXTI_GenerateSWI>
  }  
  else
  {
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
  }
}
 8008c78:	e03b      	b.n	8008cf2 <UartCmdExecute+0xa2>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8008c7a:	4924      	ldr	r1, [pc, #144]	; (8008d0c <UartCmdExecute+0xbc>)
 8008c7c:	481f      	ldr	r0, [pc, #124]	; (8008cfc <UartCmdExecute+0xac>)
 8008c7e:	f7fe fe78 	bl	8007972 <strcmp>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10c      	bne.n	8008ca2 <UartCmdExecute+0x52>
    APP_DBG("SW2 OK");
 8008c88:	4a21      	ldr	r2, [pc, #132]	; (8008d10 <UartCmdExecute+0xc0>)
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f001 fdcb 	bl	800a828 <logApplication>
    exti_handle.Line = EXTI_LINE_0;
 8008c92:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <UartCmdExecute+0xb4>)
 8008c94:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8008c98:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8008c9a:	481a      	ldr	r0, [pc, #104]	; (8008d04 <UartCmdExecute+0xb4>)
 8008c9c:	f005 f82c 	bl	800dcf8 <HAL_EXTI_GenerateSWI>
}
 8008ca0:	e027      	b.n	8008cf2 <UartCmdExecute+0xa2>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 8008ca2:	491c      	ldr	r1, [pc, #112]	; (8008d14 <UartCmdExecute+0xc4>)
 8008ca4:	4815      	ldr	r0, [pc, #84]	; (8008cfc <UartCmdExecute+0xac>)
 8008ca6:	f7fe fe64 	bl	8007972 <strcmp>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10b      	bne.n	8008cc8 <UartCmdExecute+0x78>
    APP_DBG("SW3 OK");
 8008cb0:	4a19      	ldr	r2, [pc, #100]	; (8008d18 <UartCmdExecute+0xc8>)
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	f001 fdb7 	bl	800a828 <logApplication>
    exti_handle.Line = EXTI_LINE_1;
 8008cba:	4b12      	ldr	r3, [pc, #72]	; (8008d04 <UartCmdExecute+0xb4>)
 8008cbc:	4a17      	ldr	r2, [pc, #92]	; (8008d1c <UartCmdExecute+0xcc>)
 8008cbe:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8008cc0:	4810      	ldr	r0, [pc, #64]	; (8008d04 <UartCmdExecute+0xb4>)
 8008cc2:	f005 f819 	bl	800dcf8 <HAL_EXTI_GenerateSWI>
}
 8008cc6:	e014      	b.n	8008cf2 <UartCmdExecute+0xa2>
  else if (strcmp((char const*)CommandString, "RST") == 0)
 8008cc8:	4915      	ldr	r1, [pc, #84]	; (8008d20 <UartCmdExecute+0xd0>)
 8008cca:	480c      	ldr	r0, [pc, #48]	; (8008cfc <UartCmdExecute+0xac>)
 8008ccc:	f7fe fe51 	bl	8007972 <strcmp>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d107      	bne.n	8008ce6 <UartCmdExecute+0x96>
    APP_DBG("RESET CMD RECEIVED");
 8008cd6:	4a13      	ldr	r2, [pc, #76]	; (8008d24 <UartCmdExecute+0xd4>)
 8008cd8:	2101      	movs	r1, #1
 8008cda:	2000      	movs	r0, #0
 8008cdc:	f001 fda4 	bl	800a828 <logApplication>
    HAL_NVIC_SystemReset();
 8008ce0:	f004 fcab 	bl	800d63a <HAL_NVIC_SystemReset>
}
 8008ce4:	e005      	b.n	8008cf2 <UartCmdExecute+0xa2>
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
 8008ce6:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <UartCmdExecute+0xac>)
 8008ce8:	4a0f      	ldr	r2, [pc, #60]	; (8008d28 <UartCmdExecute+0xd8>)
 8008cea:	2101      	movs	r1, #1
 8008cec:	2000      	movs	r0, #0
 8008cee:	f001 fd9b 	bl	800a828 <logApplication>
}
 8008cf2:	bf00      	nop
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	080192a0 	.word	0x080192a0
 8008cfc:	2000016c 	.word	0x2000016c
 8008d00:	080192a4 	.word	0x080192a4
 8008d04:	20000270 	.word	0x20000270
 8008d08:	16000004 	.word	0x16000004
 8008d0c:	080192ac 	.word	0x080192ac
 8008d10:	080192b0 	.word	0x080192b0
 8008d14:	080192b8 	.word	0x080192b8
 8008d18:	080192bc 	.word	0x080192bc
 8008d1c:	16000001 	.word	0x16000001
 8008d20:	080192c4 	.word	0x080192c4
 8008d24:	080192c8 	.word	0x080192c8
 8008d28:	080192dc 	.word	0x080192dc

08008d2c <LL_EXTI_EnableIT_0_31>:
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008d34:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <LL_EXTI_EnableIT_0_31+0x24>)
 8008d36:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008d3a:	4905      	ldr	r1, [pc, #20]	; (8008d50 <LL_EXTI_EnableIT_0_31+0x24>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	58000800 	.word	0x58000800

08008d54 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	4904      	ldr	r1, [pc, #16]	; (8008d74 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	600b      	str	r3, [r1, #0]

}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	58000800 	.word	0x58000800

08008d78 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8008d7e:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <ReadRtcSsrValue+0x3c>)
 8008d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <ReadRtcSsrValue+0x3c>)
 8008d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8008d8e:	e005      	b.n	8008d9c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8008d94:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <ReadRtcSsrValue+0x3c>)
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d1f5      	bne.n	8008d90 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8008da4:	683b      	ldr	r3, [r7, #0]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	40002800 	.word	0x40002800

08008db8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	460a      	mov	r2, r1
 8008dc2:	71fb      	strb	r3, [r7, #7]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8008dc8:	79ba      	ldrb	r2, [r7, #6]
 8008dca:	491d      	ldr	r1, [pc, #116]	; (8008e40 <LinkTimerAfter+0x88>)
 8008dcc:	4613      	mov	r3, r2
 8008dce:	005b      	lsls	r3, r3, #1
 8008dd0:	4413      	add	r3, r2
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	440b      	add	r3, r1
 8008dd6:	3315      	adds	r3, #21
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2b06      	cmp	r3, #6
 8008de0:	d009      	beq.n	8008df6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8008de2:	7bfa      	ldrb	r2, [r7, #15]
 8008de4:	4916      	ldr	r1, [pc, #88]	; (8008e40 <LinkTimerAfter+0x88>)
 8008de6:	4613      	mov	r3, r2
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	4413      	add	r3, r2
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	440b      	add	r3, r1
 8008df0:	3314      	adds	r3, #20
 8008df2:	79fa      	ldrb	r2, [r7, #7]
 8008df4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8008df6:	79fa      	ldrb	r2, [r7, #7]
 8008df8:	4911      	ldr	r1, [pc, #68]	; (8008e40 <LinkTimerAfter+0x88>)
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	005b      	lsls	r3, r3, #1
 8008dfe:	4413      	add	r3, r2
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	440b      	add	r3, r1
 8008e04:	3315      	adds	r3, #21
 8008e06:	7bfa      	ldrb	r2, [r7, #15]
 8008e08:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8008e0a:	79fa      	ldrb	r2, [r7, #7]
 8008e0c:	490c      	ldr	r1, [pc, #48]	; (8008e40 <LinkTimerAfter+0x88>)
 8008e0e:	4613      	mov	r3, r2
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	4413      	add	r3, r2
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	440b      	add	r3, r1
 8008e18:	3314      	adds	r3, #20
 8008e1a:	79ba      	ldrb	r2, [r7, #6]
 8008e1c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8008e1e:	79ba      	ldrb	r2, [r7, #6]
 8008e20:	4907      	ldr	r1, [pc, #28]	; (8008e40 <LinkTimerAfter+0x88>)
 8008e22:	4613      	mov	r3, r2
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	4413      	add	r3, r2
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	440b      	add	r3, r1
 8008e2c:	3315      	adds	r3, #21
 8008e2e:	79fa      	ldrb	r2, [r7, #7]
 8008e30:	701a      	strb	r2, [r3, #0]

  return;
 8008e32:	bf00      	nop
}
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	20000278 	.word	0x20000278

08008e44 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	460a      	mov	r2, r1
 8008e4e:	71fb      	strb	r3, [r7, #7]
 8008e50:	4613      	mov	r3, r2
 8008e52:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8008e54:	4b29      	ldr	r3, [pc, #164]	; (8008efc <LinkTimerBefore+0xb8>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	79ba      	ldrb	r2, [r7, #6]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d032      	beq.n	8008ec6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8008e60:	79ba      	ldrb	r2, [r7, #6]
 8008e62:	4927      	ldr	r1, [pc, #156]	; (8008f00 <LinkTimerBefore+0xbc>)
 8008e64:	4613      	mov	r3, r2
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	4413      	add	r3, r2
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	440b      	add	r3, r1
 8008e6e:	3314      	adds	r3, #20
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8008e74:	7bfa      	ldrb	r2, [r7, #15]
 8008e76:	4922      	ldr	r1, [pc, #136]	; (8008f00 <LinkTimerBefore+0xbc>)
 8008e78:	4613      	mov	r3, r2
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	4413      	add	r3, r2
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	440b      	add	r3, r1
 8008e82:	3315      	adds	r3, #21
 8008e84:	79fa      	ldrb	r2, [r7, #7]
 8008e86:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8008e88:	79fa      	ldrb	r2, [r7, #7]
 8008e8a:	491d      	ldr	r1, [pc, #116]	; (8008f00 <LinkTimerBefore+0xbc>)
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	005b      	lsls	r3, r3, #1
 8008e90:	4413      	add	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	440b      	add	r3, r1
 8008e96:	3315      	adds	r3, #21
 8008e98:	79ba      	ldrb	r2, [r7, #6]
 8008e9a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8008e9c:	79fa      	ldrb	r2, [r7, #7]
 8008e9e:	4918      	ldr	r1, [pc, #96]	; (8008f00 <LinkTimerBefore+0xbc>)
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	4413      	add	r3, r2
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	440b      	add	r3, r1
 8008eaa:	3314      	adds	r3, #20
 8008eac:	7bfa      	ldrb	r2, [r7, #15]
 8008eae:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8008eb0:	79ba      	ldrb	r2, [r7, #6]
 8008eb2:	4913      	ldr	r1, [pc, #76]	; (8008f00 <LinkTimerBefore+0xbc>)
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	4413      	add	r3, r2
 8008eba:	00db      	lsls	r3, r3, #3
 8008ebc:	440b      	add	r3, r1
 8008ebe:	3314      	adds	r3, #20
 8008ec0:	79fa      	ldrb	r2, [r7, #7]
 8008ec2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8008ec4:	e014      	b.n	8008ef0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8008ec6:	79fa      	ldrb	r2, [r7, #7]
 8008ec8:	490d      	ldr	r1, [pc, #52]	; (8008f00 <LinkTimerBefore+0xbc>)
 8008eca:	4613      	mov	r3, r2
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	4413      	add	r3, r2
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	440b      	add	r3, r1
 8008ed4:	3315      	adds	r3, #21
 8008ed6:	79ba      	ldrb	r2, [r7, #6]
 8008ed8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8008eda:	79ba      	ldrb	r2, [r7, #6]
 8008edc:	4908      	ldr	r1, [pc, #32]	; (8008f00 <LinkTimerBefore+0xbc>)
 8008ede:	4613      	mov	r3, r2
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	4413      	add	r3, r2
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	440b      	add	r3, r1
 8008ee8:	3314      	adds	r3, #20
 8008eea:	79fa      	ldrb	r2, [r7, #7]
 8008eec:	701a      	strb	r2, [r3, #0]
  return;
 8008eee:	bf00      	nop
}
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20000308 	.word	0x20000308
 8008f00:	20000278 	.word	0x20000278

08008f04 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8008f0e:	4b4e      	ldr	r3, [pc, #312]	; (8009048 <linkTimer+0x144>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b06      	cmp	r3, #6
 8008f16:	d118      	bne.n	8008f4a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8008f18:	4b4b      	ldr	r3, [pc, #300]	; (8009048 <linkTimer+0x144>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	4b4b      	ldr	r3, [pc, #300]	; (800904c <linkTimer+0x148>)
 8008f20:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8008f22:	4a49      	ldr	r2, [pc, #292]	; (8009048 <linkTimer+0x144>)
 8008f24:	79fb      	ldrb	r3, [r7, #7]
 8008f26:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8008f28:	79fa      	ldrb	r2, [r7, #7]
 8008f2a:	4949      	ldr	r1, [pc, #292]	; (8009050 <linkTimer+0x14c>)
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	4413      	add	r3, r2
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	440b      	add	r3, r1
 8008f36:	3315      	adds	r3, #21
 8008f38:	2206      	movs	r2, #6
 8008f3a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8008f3c:	4b45      	ldr	r3, [pc, #276]	; (8009054 <linkTimer+0x150>)
 8008f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f42:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	81fb      	strh	r3, [r7, #14]
 8008f48:	e078      	b.n	800903c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8008f4a:	f000 f909 	bl	8009160 <ReturnTimeElapsed>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8008f52:	79fa      	ldrb	r2, [r7, #7]
 8008f54:	493e      	ldr	r1, [pc, #248]	; (8009050 <linkTimer+0x14c>)
 8008f56:	4613      	mov	r3, r2
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	4413      	add	r3, r2
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	440b      	add	r3, r1
 8008f60:	3308      	adds	r3, #8
 8008f62:	6819      	ldr	r1, [r3, #0]
 8008f64:	89fb      	ldrh	r3, [r7, #14]
 8008f66:	79fa      	ldrb	r2, [r7, #7]
 8008f68:	4419      	add	r1, r3
 8008f6a:	4839      	ldr	r0, [pc, #228]	; (8009050 <linkTimer+0x14c>)
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	4413      	add	r3, r2
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	4403      	add	r3, r0
 8008f76:	3308      	adds	r3, #8
 8008f78:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8008f7a:	79fa      	ldrb	r2, [r7, #7]
 8008f7c:	4934      	ldr	r1, [pc, #208]	; (8009050 <linkTimer+0x14c>)
 8008f7e:	4613      	mov	r3, r2
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	4413      	add	r3, r2
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	440b      	add	r3, r1
 8008f88:	3308      	adds	r3, #8
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8008f8e:	4b2e      	ldr	r3, [pc, #184]	; (8009048 <linkTimer+0x144>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	4619      	mov	r1, r3
 8008f96:	4a2e      	ldr	r2, [pc, #184]	; (8009050 <linkTimer+0x14c>)
 8008f98:	460b      	mov	r3, r1
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	440b      	add	r3, r1
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	4413      	add	r3, r2
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d337      	bcc.n	800901c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8008fac:	4b26      	ldr	r3, [pc, #152]	; (8009048 <linkTimer+0x144>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8008fb2:	7b7a      	ldrb	r2, [r7, #13]
 8008fb4:	4926      	ldr	r1, [pc, #152]	; (8009050 <linkTimer+0x14c>)
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	4413      	add	r3, r2
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	440b      	add	r3, r1
 8008fc0:	3315      	adds	r3, #21
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8008fc6:	e013      	b.n	8008ff0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8008fc8:	7b7a      	ldrb	r2, [r7, #13]
 8008fca:	4921      	ldr	r1, [pc, #132]	; (8009050 <linkTimer+0x14c>)
 8008fcc:	4613      	mov	r3, r2
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	4413      	add	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	440b      	add	r3, r1
 8008fd6:	3315      	adds	r3, #21
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8008fdc:	7b7a      	ldrb	r2, [r7, #13]
 8008fde:	491c      	ldr	r1, [pc, #112]	; (8009050 <linkTimer+0x14c>)
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	4413      	add	r3, r2
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	440b      	add	r3, r1
 8008fea:	3315      	adds	r3, #21
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8008ff0:	7b3b      	ldrb	r3, [r7, #12]
 8008ff2:	2b06      	cmp	r3, #6
 8008ff4:	d00b      	beq.n	800900e <linkTimer+0x10a>
 8008ff6:	7b3a      	ldrb	r2, [r7, #12]
 8008ff8:	4915      	ldr	r1, [pc, #84]	; (8009050 <linkTimer+0x14c>)
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	4413      	add	r3, r2
 8009000:	00db      	lsls	r3, r3, #3
 8009002:	440b      	add	r3, r1
 8009004:	3308      	adds	r3, #8
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	429a      	cmp	r2, r3
 800900c:	d2dc      	bcs.n	8008fc8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800900e:	7b7a      	ldrb	r2, [r7, #13]
 8009010:	79fb      	ldrb	r3, [r7, #7]
 8009012:	4611      	mov	r1, r2
 8009014:	4618      	mov	r0, r3
 8009016:	f7ff fecf 	bl	8008db8 <LinkTimerAfter>
 800901a:	e00f      	b.n	800903c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800901c:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <linkTimer+0x144>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	4611      	mov	r1, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff ff0c 	bl	8008e44 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800902c:	4b06      	ldr	r3, [pc, #24]	; (8009048 <linkTimer+0x144>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	b2da      	uxtb	r2, r3
 8009032:	4b06      	ldr	r3, [pc, #24]	; (800904c <linkTimer+0x148>)
 8009034:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8009036:	4a04      	ldr	r2, [pc, #16]	; (8009048 <linkTimer+0x144>)
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800903c:	89fb      	ldrh	r3, [r7, #14]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20000308 	.word	0x20000308
 800904c:	20000309 	.word	0x20000309
 8009050:	20000278 	.word	0x20000278
 8009054:	2000030c 	.word	0x2000030c

08009058 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	460a      	mov	r2, r1
 8009062:	71fb      	strb	r3, [r7, #7]
 8009064:	4613      	mov	r3, r2
 8009066:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8009068:	4b39      	ldr	r3, [pc, #228]	; (8009150 <UnlinkTimer+0xf8>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	79fa      	ldrb	r2, [r7, #7]
 8009070:	429a      	cmp	r2, r3
 8009072:	d111      	bne.n	8009098 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8009074:	4b36      	ldr	r3, [pc, #216]	; (8009150 <UnlinkTimer+0xf8>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	b2da      	uxtb	r2, r3
 800907a:	4b36      	ldr	r3, [pc, #216]	; (8009154 <UnlinkTimer+0xfc>)
 800907c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800907e:	79fa      	ldrb	r2, [r7, #7]
 8009080:	4935      	ldr	r1, [pc, #212]	; (8009158 <UnlinkTimer+0x100>)
 8009082:	4613      	mov	r3, r2
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	4413      	add	r3, r2
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	440b      	add	r3, r1
 800908c:	3315      	adds	r3, #21
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	b2da      	uxtb	r2, r3
 8009092:	4b2f      	ldr	r3, [pc, #188]	; (8009150 <UnlinkTimer+0xf8>)
 8009094:	701a      	strb	r2, [r3, #0]
 8009096:	e03e      	b.n	8009116 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8009098:	79fa      	ldrb	r2, [r7, #7]
 800909a:	492f      	ldr	r1, [pc, #188]	; (8009158 <UnlinkTimer+0x100>)
 800909c:	4613      	mov	r3, r2
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	4413      	add	r3, r2
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	440b      	add	r3, r1
 80090a6:	3314      	adds	r3, #20
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80090ac:	79fa      	ldrb	r2, [r7, #7]
 80090ae:	492a      	ldr	r1, [pc, #168]	; (8009158 <UnlinkTimer+0x100>)
 80090b0:	4613      	mov	r3, r2
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	4413      	add	r3, r2
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	440b      	add	r3, r1
 80090ba:	3315      	adds	r3, #21
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80090c0:	79f9      	ldrb	r1, [r7, #7]
 80090c2:	7bfa      	ldrb	r2, [r7, #15]
 80090c4:	4824      	ldr	r0, [pc, #144]	; (8009158 <UnlinkTimer+0x100>)
 80090c6:	460b      	mov	r3, r1
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	440b      	add	r3, r1
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	4403      	add	r3, r0
 80090d0:	3315      	adds	r3, #21
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	b2d8      	uxtb	r0, r3
 80090d6:	4920      	ldr	r1, [pc, #128]	; (8009158 <UnlinkTimer+0x100>)
 80090d8:	4613      	mov	r3, r2
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	4413      	add	r3, r2
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	440b      	add	r3, r1
 80090e2:	3315      	adds	r3, #21
 80090e4:	4602      	mov	r2, r0
 80090e6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	2b06      	cmp	r3, #6
 80090ec:	d013      	beq.n	8009116 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80090ee:	79f9      	ldrb	r1, [r7, #7]
 80090f0:	7bba      	ldrb	r2, [r7, #14]
 80090f2:	4819      	ldr	r0, [pc, #100]	; (8009158 <UnlinkTimer+0x100>)
 80090f4:	460b      	mov	r3, r1
 80090f6:	005b      	lsls	r3, r3, #1
 80090f8:	440b      	add	r3, r1
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	4403      	add	r3, r0
 80090fe:	3314      	adds	r3, #20
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	b2d8      	uxtb	r0, r3
 8009104:	4914      	ldr	r1, [pc, #80]	; (8009158 <UnlinkTimer+0x100>)
 8009106:	4613      	mov	r3, r2
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	4413      	add	r3, r2
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	440b      	add	r3, r1
 8009110:	3314      	adds	r3, #20
 8009112:	4602      	mov	r2, r0
 8009114:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8009116:	79fa      	ldrb	r2, [r7, #7]
 8009118:	490f      	ldr	r1, [pc, #60]	; (8009158 <UnlinkTimer+0x100>)
 800911a:	4613      	mov	r3, r2
 800911c:	005b      	lsls	r3, r3, #1
 800911e:	4413      	add	r3, r2
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	440b      	add	r3, r1
 8009124:	330c      	adds	r3, #12
 8009126:	2201      	movs	r2, #1
 8009128:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800912a:	4b09      	ldr	r3, [pc, #36]	; (8009150 <UnlinkTimer+0xf8>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b06      	cmp	r3, #6
 8009132:	d107      	bne.n	8009144 <UnlinkTimer+0xec>
 8009134:	79bb      	ldrb	r3, [r7, #6]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d104      	bne.n	8009144 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800913a:	4b08      	ldr	r3, [pc, #32]	; (800915c <UnlinkTimer+0x104>)
 800913c:	f04f 32ff 	mov.w	r2, #4294967295
 8009140:	601a      	str	r2, [r3, #0]
  }

  return;
 8009142:	bf00      	nop
 8009144:	bf00      	nop
}
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	20000308 	.word	0x20000308
 8009154:	20000309 	.word	0x20000309
 8009158:	20000278 	.word	0x20000278
 800915c:	2000030c 	.word	0x2000030c

08009160 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8009166:	4b1a      	ldr	r3, [pc, #104]	; (80091d0 <ReturnTimeElapsed+0x70>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916e:	d026      	beq.n	80091be <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8009170:	f7ff fe02 	bl	8008d78 <ReadRtcSsrValue>
 8009174:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8009176:	4b16      	ldr	r3, [pc, #88]	; (80091d0 <ReturnTimeElapsed+0x70>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	429a      	cmp	r2, r3
 800917e:	d805      	bhi.n	800918c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8009180:	4b13      	ldr	r3, [pc, #76]	; (80091d0 <ReturnTimeElapsed+0x70>)
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	607b      	str	r3, [r7, #4]
 800918a:	e00a      	b.n	80091a2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800918c:	4b11      	ldr	r3, [pc, #68]	; (80091d4 <ReturnTimeElapsed+0x74>)
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8009198:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <ReturnTimeElapsed+0x70>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	4413      	add	r3, r2
 80091a0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80091a2:	4b0d      	ldr	r3, [pc, #52]	; (80091d8 <ReturnTimeElapsed+0x78>)
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	fb02 f303 	mul.w	r3, r2, r3
 80091ae:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80091b0:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <ReturnTimeElapsed+0x7c>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	461a      	mov	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	40d3      	lsrs	r3, r2
 80091ba:	607b      	str	r3, [r7, #4]
 80091bc:	e001      	b.n	80091c2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	b29b      	uxth	r3, r3
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	2000030c 	.word	0x2000030c
 80091d4:	20000314 	.word	0x20000314
 80091d8:	20000312 	.word	0x20000312
 80091dc:	20000311 	.word	0x20000311

080091e0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80091ea:	88fb      	ldrh	r3, [r7, #6]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d108      	bne.n	8009202 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80091f0:	f7ff fdc2 	bl	8008d78 <ReadRtcSsrValue>
 80091f4:	4603      	mov	r3, r0
 80091f6:	4a21      	ldr	r2, [pc, #132]	; (800927c <RestartWakeupCounter+0x9c>)
 80091f8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80091fa:	2003      	movs	r0, #3
 80091fc:	f004 fa2d 	bl	800d65a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8009200:	e039      	b.n	8009276 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8009202:	88fb      	ldrh	r3, [r7, #6]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d803      	bhi.n	8009210 <RestartWakeupCounter+0x30>
 8009208:	4b1d      	ldr	r3, [pc, #116]	; (8009280 <RestartWakeupCounter+0xa0>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d002      	beq.n	8009216 <RestartWakeupCounter+0x36>
      Value -= 1;
 8009210:	88fb      	ldrh	r3, [r7, #6]
 8009212:	3b01      	subs	r3, #1
 8009214:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8009216:	bf00      	nop
 8009218:	4b1a      	ldr	r3, [pc, #104]	; (8009284 <RestartWakeupCounter+0xa4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	f003 0304 	and.w	r3, r3, #4
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0f8      	beq.n	8009218 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8009226:	4b17      	ldr	r3, [pc, #92]	; (8009284 <RestartWakeupCounter+0xa4>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	b2da      	uxtb	r2, r3
 800922e:	4b15      	ldr	r3, [pc, #84]	; (8009284 <RestartWakeupCounter+0xa4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009236:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8009238:	4b13      	ldr	r3, [pc, #76]	; (8009288 <RestartWakeupCounter+0xa8>)
 800923a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800923e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8009240:	2003      	movs	r0, #3
 8009242:	f004 fa18 	bl	800d676 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8009246:	4b11      	ldr	r3, [pc, #68]	; (800928c <RestartWakeupCounter+0xac>)
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	0c1b      	lsrs	r3, r3, #16
 800924c:	041b      	lsls	r3, r3, #16
 800924e:	88fa      	ldrh	r2, [r7, #6]
 8009250:	490e      	ldr	r1, [pc, #56]	; (800928c <RestartWakeupCounter+0xac>)
 8009252:	4313      	orrs	r3, r2
 8009254:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8009256:	f7ff fd8f 	bl	8008d78 <ReadRtcSsrValue>
 800925a:	4603      	mov	r3, r0
 800925c:	4a07      	ldr	r2, [pc, #28]	; (800927c <RestartWakeupCounter+0x9c>)
 800925e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8009260:	4b08      	ldr	r3, [pc, #32]	; (8009284 <RestartWakeupCounter+0xa4>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689a      	ldr	r2, [r3, #8]
 8009266:	4b07      	ldr	r3, [pc, #28]	; (8009284 <RestartWakeupCounter+0xa4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800926e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8009270:	f3af 8000 	nop.w
  return ;
 8009274:	bf00      	nop
}
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	2000030c 	.word	0x2000030c
 8009280:	20000311 	.word	0x20000311
 8009284:	20000510 	.word	0x20000510
 8009288:	58000800 	.word	0x58000800
 800928c:	40002800 	.word	0x40002800

08009290 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8009296:	4b45      	ldr	r3, [pc, #276]	; (80093ac <RescheduleTimerList+0x11c>)
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800929e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092a2:	d107      	bne.n	80092b4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80092a4:	bf00      	nop
 80092a6:	4b42      	ldr	r3, [pc, #264]	; (80093b0 <RescheduleTimerList+0x120>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1f8      	bne.n	80092a6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80092b4:	4b3e      	ldr	r3, [pc, #248]	; (80093b0 <RescheduleTimerList+0x120>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	4b3d      	ldr	r3, [pc, #244]	; (80093b0 <RescheduleTimerList+0x120>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092c2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80092c4:	4b3b      	ldr	r3, [pc, #236]	; (80093b4 <RescheduleTimerList+0x124>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80092ca:	7bfa      	ldrb	r2, [r7, #15]
 80092cc:	493a      	ldr	r1, [pc, #232]	; (80093b8 <RescheduleTimerList+0x128>)
 80092ce:	4613      	mov	r3, r2
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	4413      	add	r3, r2
 80092d4:	00db      	lsls	r3, r3, #3
 80092d6:	440b      	add	r3, r1
 80092d8:	3308      	adds	r3, #8
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80092de:	f7ff ff3f 	bl	8009160 <ReturnTimeElapsed>
 80092e2:	4603      	mov	r3, r0
 80092e4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d205      	bcs.n	80092fa <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80092f2:	4b32      	ldr	r3, [pc, #200]	; (80093bc <RescheduleTimerList+0x12c>)
 80092f4:	2201      	movs	r2, #1
 80092f6:	701a      	strb	r2, [r3, #0]
 80092f8:	e04d      	b.n	8009396 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	4a30      	ldr	r2, [pc, #192]	; (80093c0 <RescheduleTimerList+0x130>)
 80092fe:	8812      	ldrh	r2, [r2, #0]
 8009300:	b292      	uxth	r2, r2
 8009302:	4413      	add	r3, r2
 8009304:	461a      	mov	r2, r3
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	4293      	cmp	r3, r2
 800930a:	d906      	bls.n	800931a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800930c:	4b2c      	ldr	r3, [pc, #176]	; (80093c0 <RescheduleTimerList+0x130>)
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8009312:	4b2a      	ldr	r3, [pc, #168]	; (80093bc <RescheduleTimerList+0x12c>)
 8009314:	2200      	movs	r2, #0
 8009316:	701a      	strb	r2, [r3, #0]
 8009318:	e03d      	b.n	8009396 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	b29a      	uxth	r2, r3
 800931e:	88fb      	ldrh	r3, [r7, #6]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8009324:	4b25      	ldr	r3, [pc, #148]	; (80093bc <RescheduleTimerList+0x12c>)
 8009326:	2201      	movs	r2, #1
 8009328:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800932a:	e034      	b.n	8009396 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800932c:	7bfa      	ldrb	r2, [r7, #15]
 800932e:	4922      	ldr	r1, [pc, #136]	; (80093b8 <RescheduleTimerList+0x128>)
 8009330:	4613      	mov	r3, r2
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	4413      	add	r3, r2
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	440b      	add	r3, r1
 800933a:	3308      	adds	r3, #8
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	88fb      	ldrh	r3, [r7, #6]
 8009340:	429a      	cmp	r2, r3
 8009342:	d20a      	bcs.n	800935a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8009344:	7bfa      	ldrb	r2, [r7, #15]
 8009346:	491c      	ldr	r1, [pc, #112]	; (80093b8 <RescheduleTimerList+0x128>)
 8009348:	4613      	mov	r3, r2
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	4413      	add	r3, r2
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	440b      	add	r3, r1
 8009352:	3308      	adds	r3, #8
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	e013      	b.n	8009382 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800935a:	7bfa      	ldrb	r2, [r7, #15]
 800935c:	4916      	ldr	r1, [pc, #88]	; (80093b8 <RescheduleTimerList+0x128>)
 800935e:	4613      	mov	r3, r2
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	4413      	add	r3, r2
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	440b      	add	r3, r1
 8009368:	3308      	adds	r3, #8
 800936a:	6819      	ldr	r1, [r3, #0]
 800936c:	88fb      	ldrh	r3, [r7, #6]
 800936e:	7bfa      	ldrb	r2, [r7, #15]
 8009370:	1ac9      	subs	r1, r1, r3
 8009372:	4811      	ldr	r0, [pc, #68]	; (80093b8 <RescheduleTimerList+0x128>)
 8009374:	4613      	mov	r3, r2
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	4413      	add	r3, r2
 800937a:	00db      	lsls	r3, r3, #3
 800937c:	4403      	add	r3, r0
 800937e:	3308      	adds	r3, #8
 8009380:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8009382:	7bfa      	ldrb	r2, [r7, #15]
 8009384:	490c      	ldr	r1, [pc, #48]	; (80093b8 <RescheduleTimerList+0x128>)
 8009386:	4613      	mov	r3, r2
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	4413      	add	r3, r2
 800938c:	00db      	lsls	r3, r3, #3
 800938e:	440b      	add	r3, r1
 8009390:	3315      	adds	r3, #21
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	2b06      	cmp	r3, #6
 800939a:	d1c7      	bne.n	800932c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800939c:	89bb      	ldrh	r3, [r7, #12]
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff ff1e 	bl	80091e0 <RestartWakeupCounter>

  return ;
 80093a4:	bf00      	nop
}
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	40002800 	.word	0x40002800
 80093b0:	20000510 	.word	0x20000510
 80093b4:	20000308 	.word	0x20000308
 80093b8:	20000278 	.word	0x20000278
 80093bc:	20000310 	.word	0x20000310
 80093c0:	20000316 	.word	0x20000316

080093c4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	; 0x28
 80093c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093ca:	f3ef 8310 	mrs	r3, PRIMASK
 80093ce:	617b      	str	r3, [r7, #20]
  return(result);
 80093d0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80093d4:	b672      	cpsid	i
}
 80093d6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80093d8:	4b59      	ldr	r3, [pc, #356]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	22ca      	movs	r2, #202	; 0xca
 80093de:	625a      	str	r2, [r3, #36]	; 0x24
 80093e0:	4b57      	ldr	r3, [pc, #348]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2253      	movs	r2, #83	; 0x53
 80093e6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80093e8:	4b55      	ldr	r3, [pc, #340]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	689a      	ldr	r2, [r3, #8]
 80093ee:	4b54      	ldr	r3, [pc, #336]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093f6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80093f8:	4b52      	ldr	r3, [pc, #328]	; (8009544 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8009400:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009404:	4950      	ldr	r1, [pc, #320]	; (8009548 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009406:	4613      	mov	r3, r2
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	4413      	add	r3, r2
 800940c:	00db      	lsls	r3, r3, #3
 800940e:	440b      	add	r3, r1
 8009410:	330c      	adds	r3, #12
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b02      	cmp	r3, #2
 8009418:	d16e      	bne.n	80094f8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800941a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800941e:	494a      	ldr	r1, [pc, #296]	; (8009548 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009420:	4613      	mov	r3, r2
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	4413      	add	r3, r2
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	440b      	add	r3, r1
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800942e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009432:	4945      	ldr	r1, [pc, #276]	; (8009548 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009434:	4613      	mov	r3, r2
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	4413      	add	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	440b      	add	r3, r1
 800943e:	3310      	adds	r3, #16
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8009444:	4b41      	ldr	r3, [pc, #260]	; (800954c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d04c      	beq.n	80094e8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800944e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009452:	493d      	ldr	r1, [pc, #244]	; (8009548 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009454:	4613      	mov	r3, r2
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	4413      	add	r3, r2
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	440b      	add	r3, r1
 800945e:	330d      	adds	r3, #13
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b01      	cmp	r3, #1
 8009466:	d124      	bne.n	80094b2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8009468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800946c:	2101      	movs	r1, #1
 800946e:	4618      	mov	r0, r3
 8009470:	f7ff fdf2 	bl	8009058 <UnlinkTimer>
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f383 8810 	msr	PRIMASK, r3
}
 800947e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8009480:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009484:	4930      	ldr	r1, [pc, #192]	; (8009548 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8009486:	4613      	mov	r3, r2
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	4413      	add	r3, r2
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	440b      	add	r3, r1
 8009490:	3304      	adds	r3, #4
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009498:	4611      	mov	r1, r2
 800949a:	4618      	mov	r0, r3
 800949c:	f000 fa32 	bl	8009904 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80094a0:	4b27      	ldr	r3, [pc, #156]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	22ca      	movs	r2, #202	; 0xca
 80094a6:	625a      	str	r2, [r3, #36]	; 0x24
 80094a8:	4b25      	ldr	r3, [pc, #148]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2253      	movs	r2, #83	; 0x53
 80094ae:	625a      	str	r2, [r3, #36]	; 0x24
 80094b0:	e012      	b.n	80094d8 <HW_TS_RTC_Wakeup_Handler+0x114>
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f383 8810 	msr	PRIMASK, r3
}
 80094bc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80094be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 f99a 	bl	80097fc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80094c8:	4b1d      	ldr	r3, [pc, #116]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	22ca      	movs	r2, #202	; 0xca
 80094ce:	625a      	str	r2, [r3, #36]	; 0x24
 80094d0:	4b1b      	ldr	r3, [pc, #108]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2253      	movs	r2, #83	; 0x53
 80094d6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80094d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	4619      	mov	r1, r3
 80094e0:	69b8      	ldr	r0, [r7, #24]
 80094e2:	f000 fa95 	bl	8009a10 <HW_TS_RTC_Int_AppNot>
 80094e6:	e022      	b.n	800952e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80094e8:	f7ff fed2 	bl	8009290 <RescheduleTimerList>
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f383 8810 	msr	PRIMASK, r3
}
 80094f6:	e01a      	b.n	800952e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80094f8:	bf00      	nop
 80094fa:	4b11      	ldr	r3, [pc, #68]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0f8      	beq.n	80094fa <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8009508:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	b2da      	uxtb	r2, r3
 8009510:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009518:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800951a:	4b0d      	ldr	r3, [pc, #52]	; (8009550 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800951c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009520:	60da      	str	r2, [r3, #12]
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f383 8810 	msr	PRIMASK, r3
}
 800952c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800952e:	4b04      	ldr	r3, [pc, #16]	; (8009540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	22ff      	movs	r2, #255	; 0xff
 8009534:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8009536:	bf00      	nop
}
 8009538:	3728      	adds	r7, #40	; 0x28
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000510 	.word	0x20000510
 8009544:	20000308 	.word	0x20000308
 8009548:	20000278 	.word	0x20000278
 800954c:	20000310 	.word	0x20000310
 8009550:	58000800 	.word	0x58000800

08009554 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	6039      	str	r1, [r7, #0]
 800955e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009560:	4b5e      	ldr	r3, [pc, #376]	; (80096dc <HW_TS_Init+0x188>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	22ca      	movs	r2, #202	; 0xca
 8009566:	625a      	str	r2, [r3, #36]	; 0x24
 8009568:	4b5c      	ldr	r3, [pc, #368]	; (80096dc <HW_TS_Init+0x188>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2253      	movs	r2, #83	; 0x53
 800956e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009570:	4b5b      	ldr	r3, [pc, #364]	; (80096e0 <HW_TS_Init+0x18c>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	4a5a      	ldr	r2, [pc, #360]	; (80096e0 <HW_TS_Init+0x18c>)
 8009576:	f043 0320 	orr.w	r3, r3, #32
 800957a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800957c:	4b58      	ldr	r3, [pc, #352]	; (80096e0 <HW_TS_Init+0x18c>)
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	b2db      	uxtb	r3, r3
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f1c3 0304 	rsb	r3, r3, #4
 800958c:	b2da      	uxtb	r2, r3
 800958e:	4b55      	ldr	r3, [pc, #340]	; (80096e4 <HW_TS_Init+0x190>)
 8009590:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8009592:	4b53      	ldr	r3, [pc, #332]	; (80096e0 <HW_TS_Init+0x18c>)
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800959a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800959e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	fa92 f2a2 	rbit	r2, r2
 80095a6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	d101      	bne.n	80095b6 <HW_TS_Init+0x62>
  {
    return 32U;
 80095b2:	2220      	movs	r2, #32
 80095b4:	e003      	b.n	80095be <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	fab2 f282 	clz	r2, r2
 80095bc:	b2d2      	uxtb	r2, r2
 80095be:	40d3      	lsrs	r3, r2
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	3301      	adds	r3, #1
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	4b48      	ldr	r3, [pc, #288]	; (80096e8 <HW_TS_Init+0x194>)
 80095c8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80095ca:	4b45      	ldr	r3, [pc, #276]	; (80096e0 <HW_TS_Init+0x18c>)
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	3301      	adds	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	4b44      	ldr	r3, [pc, #272]	; (80096ec <HW_TS_Init+0x198>)
 80095dc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80095de:	4b43      	ldr	r3, [pc, #268]	; (80096ec <HW_TS_Init+0x198>)
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	4a40      	ldr	r2, [pc, #256]	; (80096e8 <HW_TS_Init+0x194>)
 80095e6:	7812      	ldrb	r2, [r2, #0]
 80095e8:	fb02 f303 	mul.w	r3, r2, r3
 80095ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80095f0:	4a3c      	ldr	r2, [pc, #240]	; (80096e4 <HW_TS_Init+0x190>)
 80095f2:	7812      	ldrb	r2, [r2, #0]
 80095f4:	40d3      	lsrs	r3, r2
 80095f6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095fe:	4293      	cmp	r3, r2
 8009600:	d904      	bls.n	800960c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8009602:	4b3b      	ldr	r3, [pc, #236]	; (80096f0 <HW_TS_Init+0x19c>)
 8009604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009608:	801a      	strh	r2, [r3, #0]
 800960a:	e003      	b.n	8009614 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	b29a      	uxth	r2, r3
 8009610:	4b37      	ldr	r3, [pc, #220]	; (80096f0 <HW_TS_Init+0x19c>)
 8009612:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8009614:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009618:	f7ff fb9c 	bl	8008d54 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800961c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009620:	f7ff fb84 	bl	8008d2c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8009624:	79fb      	ldrb	r3, [r7, #7]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d13d      	bne.n	80096a6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800962a:	4b32      	ldr	r3, [pc, #200]	; (80096f4 <HW_TS_Init+0x1a0>)
 800962c:	2201      	movs	r2, #1
 800962e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8009630:	4b31      	ldr	r3, [pc, #196]	; (80096f8 <HW_TS_Init+0x1a4>)
 8009632:	f04f 32ff 	mov.w	r2, #4294967295
 8009636:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8009638:	2300      	movs	r3, #0
 800963a:	77fb      	strb	r3, [r7, #31]
 800963c:	e00c      	b.n	8009658 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800963e:	7ffa      	ldrb	r2, [r7, #31]
 8009640:	492e      	ldr	r1, [pc, #184]	; (80096fc <HW_TS_Init+0x1a8>)
 8009642:	4613      	mov	r3, r2
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	4413      	add	r3, r2
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	440b      	add	r3, r1
 800964c:	330c      	adds	r3, #12
 800964e:	2200      	movs	r2, #0
 8009650:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8009652:	7ffb      	ldrb	r3, [r7, #31]
 8009654:	3301      	adds	r3, #1
 8009656:	77fb      	strb	r3, [r7, #31]
 8009658:	7ffb      	ldrb	r3, [r7, #31]
 800965a:	2b05      	cmp	r3, #5
 800965c:	d9ef      	bls.n	800963e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800965e:	4b28      	ldr	r3, [pc, #160]	; (8009700 <HW_TS_Init+0x1ac>)
 8009660:	2206      	movs	r2, #6
 8009662:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8009664:	4b1d      	ldr	r3, [pc, #116]	; (80096dc <HW_TS_Init+0x188>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689a      	ldr	r2, [r3, #8]
 800966a:	4b1c      	ldr	r3, [pc, #112]	; (80096dc <HW_TS_Init+0x188>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009672:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8009674:	4b19      	ldr	r3, [pc, #100]	; (80096dc <HW_TS_Init+0x188>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	b2da      	uxtb	r2, r3
 800967c:	4b17      	ldr	r3, [pc, #92]	; (80096dc <HW_TS_Init+0x188>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009684:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8009686:	4b1f      	ldr	r3, [pc, #124]	; (8009704 <HW_TS_Init+0x1b0>)
 8009688:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800968c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800968e:	2003      	movs	r0, #3
 8009690:	f003 fff1 	bl	800d676 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8009694:	4b11      	ldr	r3, [pc, #68]	; (80096dc <HW_TS_Init+0x188>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689a      	ldr	r2, [r3, #8]
 800969a:	4b10      	ldr	r3, [pc, #64]	; (80096dc <HW_TS_Init+0x188>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096a2:	609a      	str	r2, [r3, #8]
 80096a4:	e009      	b.n	80096ba <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80096a6:	4b0d      	ldr	r3, [pc, #52]	; (80096dc <HW_TS_Init+0x188>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80096b4:	2003      	movs	r0, #3
 80096b6:	f003 ffd0 	bl	800d65a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80096ba:	4b08      	ldr	r3, [pc, #32]	; (80096dc <HW_TS_Init+0x188>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	22ff      	movs	r2, #255	; 0xff
 80096c0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80096c2:	2200      	movs	r2, #0
 80096c4:	2103      	movs	r1, #3
 80096c6:	2003      	movs	r0, #3
 80096c8:	f003 ff81 	bl	800d5ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80096cc:	2003      	movs	r0, #3
 80096ce:	f003 ff98 	bl	800d602 <HAL_NVIC_EnableIRQ>

  return;
 80096d2:	bf00      	nop
}
 80096d4:	3720      	adds	r7, #32
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000510 	.word	0x20000510
 80096e0:	40002800 	.word	0x40002800
 80096e4:	20000311 	.word	0x20000311
 80096e8:	20000312 	.word	0x20000312
 80096ec:	20000314 	.word	0x20000314
 80096f0:	20000316 	.word	0x20000316
 80096f4:	20000310 	.word	0x20000310
 80096f8:	2000030c 	.word	0x2000030c
 80096fc:	20000278 	.word	0x20000278
 8009700:	20000308 	.word	0x20000308
 8009704:	58000800 	.word	0x58000800

08009708 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8009708:	b480      	push	{r7}
 800970a:	b08b      	sub	sp, #44	; 0x2c
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	4613      	mov	r3, r2
 8009716:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800971e:	f3ef 8310 	mrs	r3, PRIMASK
 8009722:	61fb      	str	r3, [r7, #28]
  return(result);
 8009724:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009726:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009728:	b672      	cpsid	i
}
 800972a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800972c:	e004      	b.n	8009738 <HW_TS_Create+0x30>
  {
    loop++;
 800972e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009732:	3301      	adds	r3, #1
 8009734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8009738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800973c:	2b05      	cmp	r3, #5
 800973e:	d80c      	bhi.n	800975a <HW_TS_Create+0x52>
 8009740:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009744:	492c      	ldr	r1, [pc, #176]	; (80097f8 <HW_TS_Create+0xf0>)
 8009746:	4613      	mov	r3, r2
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	4413      	add	r3, r2
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	440b      	add	r3, r1
 8009750:	330c      	adds	r3, #12
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e9      	bne.n	800972e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800975a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800975e:	2b06      	cmp	r3, #6
 8009760:	d038      	beq.n	80097d4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8009762:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009766:	4924      	ldr	r1, [pc, #144]	; (80097f8 <HW_TS_Create+0xf0>)
 8009768:	4613      	mov	r3, r2
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	4413      	add	r3, r2
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	440b      	add	r3, r1
 8009772:	330c      	adds	r3, #12
 8009774:	2201      	movs	r2, #1
 8009776:	701a      	strb	r2, [r3, #0]
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	f383 8810 	msr	PRIMASK, r3
}
 8009782:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8009784:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009788:	491b      	ldr	r1, [pc, #108]	; (80097f8 <HW_TS_Create+0xf0>)
 800978a:	4613      	mov	r3, r2
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	4413      	add	r3, r2
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	440b      	add	r3, r1
 8009794:	3310      	adds	r3, #16
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800979a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800979e:	4916      	ldr	r1, [pc, #88]	; (80097f8 <HW_TS_Create+0xf0>)
 80097a0:	4613      	mov	r3, r2
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	4413      	add	r3, r2
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	440b      	add	r3, r1
 80097aa:	330d      	adds	r3, #13
 80097ac:	79fa      	ldrb	r2, [r7, #7]
 80097ae:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80097b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80097b4:	4910      	ldr	r1, [pc, #64]	; (80097f8 <HW_TS_Create+0xf0>)
 80097b6:	4613      	mov	r3, r2
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	4413      	add	r3, r2
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	440b      	add	r3, r1
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80097ca:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80097cc:	2300      	movs	r3, #0
 80097ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80097d2:	e008      	b.n	80097e6 <HW_TS_Create+0xde>
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f383 8810 	msr	PRIMASK, r3
}
 80097de:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80097e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	372c      	adds	r7, #44	; 0x2c
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	20000278 	.word	0x20000278

080097fc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009806:	f3ef 8310 	mrs	r3, PRIMASK
 800980a:	60fb      	str	r3, [r7, #12]
  return(result);
 800980c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800980e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009810:	b672      	cpsid	i
}
 8009812:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8009814:	2003      	movs	r0, #3
 8009816:	f003 ff02 	bl	800d61e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800981a:	4b34      	ldr	r3, [pc, #208]	; (80098ec <HW_TS_Stop+0xf0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	22ca      	movs	r2, #202	; 0xca
 8009820:	625a      	str	r2, [r3, #36]	; 0x24
 8009822:	4b32      	ldr	r3, [pc, #200]	; (80098ec <HW_TS_Stop+0xf0>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2253      	movs	r2, #83	; 0x53
 8009828:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800982a:	79fa      	ldrb	r2, [r7, #7]
 800982c:	4930      	ldr	r1, [pc, #192]	; (80098f0 <HW_TS_Stop+0xf4>)
 800982e:	4613      	mov	r3, r2
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	4413      	add	r3, r2
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	440b      	add	r3, r1
 8009838:	330c      	adds	r3, #12
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b02      	cmp	r3, #2
 8009840:	d142      	bne.n	80098c8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8009842:	79fb      	ldrb	r3, [r7, #7]
 8009844:	2100      	movs	r1, #0
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff fc06 	bl	8009058 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800984c:	4b29      	ldr	r3, [pc, #164]	; (80098f4 <HW_TS_Stop+0xf8>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8009852:	7cfb      	ldrb	r3, [r7, #19]
 8009854:	2b06      	cmp	r3, #6
 8009856:	d12f      	bne.n	80098b8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8009858:	4b27      	ldr	r3, [pc, #156]	; (80098f8 <HW_TS_Stop+0xfc>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009864:	d107      	bne.n	8009876 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8009866:	bf00      	nop
 8009868:	4b20      	ldr	r3, [pc, #128]	; (80098ec <HW_TS_Stop+0xf0>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f003 0304 	and.w	r3, r3, #4
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1f8      	bne.n	8009868 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8009876:	4b1d      	ldr	r3, [pc, #116]	; (80098ec <HW_TS_Stop+0xf0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	689a      	ldr	r2, [r3, #8]
 800987c:	4b1b      	ldr	r3, [pc, #108]	; (80098ec <HW_TS_Stop+0xf0>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009884:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8009886:	bf00      	nop
 8009888:	4b18      	ldr	r3, [pc, #96]	; (80098ec <HW_TS_Stop+0xf0>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f003 0304 	and.w	r3, r3, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0f8      	beq.n	8009888 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8009896:	4b15      	ldr	r3, [pc, #84]	; (80098ec <HW_TS_Stop+0xf0>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	b2da      	uxtb	r2, r3
 800989e:	4b13      	ldr	r3, [pc, #76]	; (80098ec <HW_TS_Stop+0xf0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80098a6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80098a8:	4b14      	ldr	r3, [pc, #80]	; (80098fc <HW_TS_Stop+0x100>)
 80098aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80098ae:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80098b0:	2003      	movs	r0, #3
 80098b2:	f003 fee0 	bl	800d676 <HAL_NVIC_ClearPendingIRQ>
 80098b6:	e007      	b.n	80098c8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80098b8:	4b11      	ldr	r3, [pc, #68]	; (8009900 <HW_TS_Stop+0x104>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	7cfa      	ldrb	r2, [r7, #19]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d001      	beq.n	80098c8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80098c4:	f7ff fce4 	bl	8009290 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80098c8:	4b08      	ldr	r3, [pc, #32]	; (80098ec <HW_TS_Stop+0xf0>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	22ff      	movs	r2, #255	; 0xff
 80098ce:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80098d0:	2003      	movs	r0, #3
 80098d2:	f003 fe96 	bl	800d602 <HAL_NVIC_EnableIRQ>
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f383 8810 	msr	PRIMASK, r3
}
 80098e0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80098e2:	bf00      	nop
}
 80098e4:	3718      	adds	r7, #24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20000510 	.word	0x20000510
 80098f0:	20000278 	.word	0x20000278
 80098f4:	20000308 	.word	0x20000308
 80098f8:	40002800 	.word	0x40002800
 80098fc:	58000800 	.word	0x58000800
 8009900:	20000309 	.word	0x20000309

08009904 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	6039      	str	r1, [r7, #0]
 800990e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8009910:	79fa      	ldrb	r2, [r7, #7]
 8009912:	493b      	ldr	r1, [pc, #236]	; (8009a00 <HW_TS_Start+0xfc>)
 8009914:	4613      	mov	r3, r2
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	4413      	add	r3, r2
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	440b      	add	r3, r1
 800991e:	330c      	adds	r3, #12
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	2b02      	cmp	r3, #2
 8009926:	d103      	bne.n	8009930 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	4618      	mov	r0, r3
 800992c:	f7ff ff66 	bl	80097fc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009930:	f3ef 8310 	mrs	r3, PRIMASK
 8009934:	60fb      	str	r3, [r7, #12]
  return(result);
 8009936:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009938:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800993a:	b672      	cpsid	i
}
 800993c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800993e:	2003      	movs	r0, #3
 8009940:	f003 fe6d 	bl	800d61e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009944:	4b2f      	ldr	r3, [pc, #188]	; (8009a04 <HW_TS_Start+0x100>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	22ca      	movs	r2, #202	; 0xca
 800994a:	625a      	str	r2, [r3, #36]	; 0x24
 800994c:	4b2d      	ldr	r3, [pc, #180]	; (8009a04 <HW_TS_Start+0x100>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2253      	movs	r2, #83	; 0x53
 8009952:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8009954:	79fa      	ldrb	r2, [r7, #7]
 8009956:	492a      	ldr	r1, [pc, #168]	; (8009a00 <HW_TS_Start+0xfc>)
 8009958:	4613      	mov	r3, r2
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	4413      	add	r3, r2
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	440b      	add	r3, r1
 8009962:	330c      	adds	r3, #12
 8009964:	2202      	movs	r2, #2
 8009966:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8009968:	79fa      	ldrb	r2, [r7, #7]
 800996a:	4925      	ldr	r1, [pc, #148]	; (8009a00 <HW_TS_Start+0xfc>)
 800996c:	4613      	mov	r3, r2
 800996e:	005b      	lsls	r3, r3, #1
 8009970:	4413      	add	r3, r2
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	440b      	add	r3, r1
 8009976:	3308      	adds	r3, #8
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800997c:	79fa      	ldrb	r2, [r7, #7]
 800997e:	4920      	ldr	r1, [pc, #128]	; (8009a00 <HW_TS_Start+0xfc>)
 8009980:	4613      	mov	r3, r2
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	4413      	add	r3, r2
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	440b      	add	r3, r1
 800998a:	3304      	adds	r3, #4
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff fab6 	bl	8008f04 <linkTimer>
 8009998:	4603      	mov	r3, r0
 800999a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800999c:	4b1a      	ldr	r3, [pc, #104]	; (8009a08 <HW_TS_Start+0x104>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80099a2:	4b1a      	ldr	r3, [pc, #104]	; (8009a0c <HW_TS_Start+0x108>)
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	7c7a      	ldrb	r2, [r7, #17]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d002      	beq.n	80099b4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80099ae:	f7ff fc6f 	bl	8009290 <RescheduleTimerList>
 80099b2:	e013      	b.n	80099dc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80099b4:	79fa      	ldrb	r2, [r7, #7]
 80099b6:	4912      	ldr	r1, [pc, #72]	; (8009a00 <HW_TS_Start+0xfc>)
 80099b8:	4613      	mov	r3, r2
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	4413      	add	r3, r2
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	440b      	add	r3, r1
 80099c2:	3308      	adds	r3, #8
 80099c4:	6819      	ldr	r1, [r3, #0]
 80099c6:	8a7b      	ldrh	r3, [r7, #18]
 80099c8:	79fa      	ldrb	r2, [r7, #7]
 80099ca:	1ac9      	subs	r1, r1, r3
 80099cc:	480c      	ldr	r0, [pc, #48]	; (8009a00 <HW_TS_Start+0xfc>)
 80099ce:	4613      	mov	r3, r2
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	4413      	add	r3, r2
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	4403      	add	r3, r0
 80099d8:	3308      	adds	r3, #8
 80099da:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80099dc:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <HW_TS_Start+0x100>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	22ff      	movs	r2, #255	; 0xff
 80099e2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80099e4:	2003      	movs	r0, #3
 80099e6:	f003 fe0c 	bl	800d602 <HAL_NVIC_EnableIRQ>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	f383 8810 	msr	PRIMASK, r3
}
 80099f4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80099f6:	bf00      	nop
}
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000278 	.word	0x20000278
 8009a04:	20000510 	.word	0x20000510
 8009a08:	20000308 	.word	0x20000308
 8009a0c:	20000309 	.word	0x20000309

08009a10 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4798      	blx	r3

  return;
 8009a22:	bf00      	nop
}
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
	...

08009a2c <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	607b      	str	r3, [r7, #4]
 8009a36:	4603      	mov	r3, r0
 8009a38:	73fb      	strb	r3, [r7, #15]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <HW_UART_Receive_IT+0x1e>
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d00d      	beq.n	8009a64 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8009a48:	e019      	b.n	8009a7e <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8009a4a:	4a0f      	ldr	r2, [pc, #60]	; (8009a88 <HW_UART_Receive_IT+0x5c>)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	4b0e      	ldr	r3, [pc, #56]	; (8009a8c <HW_UART_Receive_IT+0x60>)
 8009a52:	4a0f      	ldr	r2, [pc, #60]	; (8009a90 <HW_UART_Receive_IT+0x64>)
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	89bb      	ldrh	r3, [r7, #12]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	68b9      	ldr	r1, [r7, #8]
 8009a5c:	480b      	ldr	r0, [pc, #44]	; (8009a8c <HW_UART_Receive_IT+0x60>)
 8009a5e:	f006 fdff 	bl	8010660 <HAL_UART_Receive_IT>
            break;
 8009a62:	e00c      	b.n	8009a7e <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8009a64:	4a0b      	ldr	r2, [pc, #44]	; (8009a94 <HW_UART_Receive_IT+0x68>)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <HW_UART_Receive_IT+0x6c>)
 8009a6c:	4a0b      	ldr	r2, [pc, #44]	; (8009a9c <HW_UART_Receive_IT+0x70>)
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	89bb      	ldrh	r3, [r7, #12]
 8009a72:	461a      	mov	r2, r3
 8009a74:	68b9      	ldr	r1, [r7, #8]
 8009a76:	4808      	ldr	r0, [pc, #32]	; (8009a98 <HW_UART_Receive_IT+0x6c>)
 8009a78:	f006 fdf2 	bl	8010660 <HAL_UART_Receive_IT>
            break;
 8009a7c:	bf00      	nop
    }

    return;
 8009a7e:	bf00      	nop
}
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20000318 	.word	0x20000318
 8009a8c:	200003bc 	.word	0x200003bc
 8009a90:	40013800 	.word	0x40013800
 8009a94:	20000320 	.word	0x20000320
 8009a98:	20000328 	.word	0x20000328
 8009a9c:	40008000 	.word	0x40008000

08009aa0 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60b9      	str	r1, [r7, #8]
 8009aa8:	607b      	str	r3, [r7, #4]
 8009aaa:	4603      	mov	r3, r0
 8009aac:	73fb      	strb	r3, [r7, #15]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <HW_UART_Transmit_DMA+0x26>
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d00f      	beq.n	8009ae4 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8009ac4:	e01d      	b.n	8009b02 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8009ac6:	4a1f      	ldr	r2, [pc, #124]	; (8009b44 <HW_UART_Transmit_DMA+0xa4>)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8009acc:	4b1e      	ldr	r3, [pc, #120]	; (8009b48 <HW_UART_Transmit_DMA+0xa8>)
 8009ace:	4a1f      	ldr	r2, [pc, #124]	; (8009b4c <HW_UART_Transmit_DMA+0xac>)
 8009ad0:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8009ad2:	89bb      	ldrh	r3, [r7, #12]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	68b9      	ldr	r1, [r7, #8]
 8009ad8:	481b      	ldr	r0, [pc, #108]	; (8009b48 <HW_UART_Transmit_DMA+0xa8>)
 8009ada:	f006 fe0d 	bl	80106f8 <HAL_UART_Transmit_DMA>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	75fb      	strb	r3, [r7, #23]
            break;
 8009ae2:	e00e      	b.n	8009b02 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8009ae4:	4a1a      	ldr	r2, [pc, #104]	; (8009b50 <HW_UART_Transmit_DMA+0xb0>)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8009aea:	4b1a      	ldr	r3, [pc, #104]	; (8009b54 <HW_UART_Transmit_DMA+0xb4>)
 8009aec:	4a1a      	ldr	r2, [pc, #104]	; (8009b58 <HW_UART_Transmit_DMA+0xb8>)
 8009aee:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8009af0:	89bb      	ldrh	r3, [r7, #12]
 8009af2:	461a      	mov	r2, r3
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	4817      	ldr	r0, [pc, #92]	; (8009b54 <HW_UART_Transmit_DMA+0xb4>)
 8009af8:	f006 fdfe 	bl	80106f8 <HAL_UART_Transmit_DMA>
 8009afc:	4603      	mov	r3, r0
 8009afe:	75fb      	strb	r3, [r7, #23]
            break;
 8009b00:	bf00      	nop
    }

    switch (hal_status)
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d817      	bhi.n	8009b38 <HW_UART_Transmit_DMA+0x98>
 8009b08:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <HW_UART_Transmit_DMA+0x70>)
 8009b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0e:	bf00      	nop
 8009b10:	08009b21 	.word	0x08009b21
 8009b14:	08009b27 	.word	0x08009b27
 8009b18:	08009b2d 	.word	0x08009b2d
 8009b1c:	08009b33 	.word	0x08009b33
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8009b20:	2300      	movs	r3, #0
 8009b22:	75bb      	strb	r3, [r7, #22]
            break;
 8009b24:	e009      	b.n	8009b3a <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8009b26:	2301      	movs	r3, #1
 8009b28:	75bb      	strb	r3, [r7, #22]
            break;
 8009b2a:	e006      	b.n	8009b3a <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	75bb      	strb	r3, [r7, #22]
            break;
 8009b30:	e003      	b.n	8009b3a <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8009b32:	2303      	movs	r3, #3
 8009b34:	75bb      	strb	r3, [r7, #22]
            break;
 8009b36:	e000      	b.n	8009b3a <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8009b38:	bf00      	nop
    }

    return hw_status;
 8009b3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	2000031c 	.word	0x2000031c
 8009b48:	200003bc 	.word	0x200003bc
 8009b4c:	40013800 	.word	0x40013800
 8009b50:	20000324 	.word	0x20000324
 8009b54:	20000328 	.word	0x20000328
 8009b58:	40008000 	.word	0x40008000

08009b5c <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a0f      	ldr	r2, [pc, #60]	; (8009ba8 <HAL_UART_RxCpltCallback+0x4c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d00a      	beq.n	8009b84 <HAL_UART_RxCpltCallback+0x28>
 8009b6e:	4a0f      	ldr	r2, [pc, #60]	; (8009bac <HAL_UART_RxCpltCallback+0x50>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d10f      	bne.n	8009b94 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8009b74:	4b0e      	ldr	r3, [pc, #56]	; (8009bb0 <HAL_UART_RxCpltCallback+0x54>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00d      	beq.n	8009b98 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8009b7c:	4b0c      	ldr	r3, [pc, #48]	; (8009bb0 <HAL_UART_RxCpltCallback+0x54>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4798      	blx	r3
            }
            break;
 8009b82:	e009      	b.n	8009b98 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 8009b84:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <HAL_UART_RxCpltCallback+0x58>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d007      	beq.n	8009b9c <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8009b8c:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <HAL_UART_RxCpltCallback+0x58>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4798      	blx	r3
            }
            break;
 8009b92:	e003      	b.n	8009b9c <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 8009b94:	bf00      	nop
 8009b96:	e002      	b.n	8009b9e <HAL_UART_RxCpltCallback+0x42>
            break;
 8009b98:	bf00      	nop
 8009b9a:	e000      	b.n	8009b9e <HAL_UART_RxCpltCallback+0x42>
            break;
 8009b9c:	bf00      	nop
    }

    return;
 8009b9e:	bf00      	nop
}
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	40008000 	.word	0x40008000
 8009bac:	40013800 	.word	0x40013800
 8009bb0:	20000318 	.word	0x20000318
 8009bb4:	20000320 	.word	0x20000320

08009bb8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a0f      	ldr	r2, [pc, #60]	; (8009c04 <HAL_UART_TxCpltCallback+0x4c>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d00a      	beq.n	8009be0 <HAL_UART_TxCpltCallback+0x28>
 8009bca:	4a0f      	ldr	r2, [pc, #60]	; (8009c08 <HAL_UART_TxCpltCallback+0x50>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d10f      	bne.n	8009bf0 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8009bd0:	4b0e      	ldr	r3, [pc, #56]	; (8009c0c <HAL_UART_TxCpltCallback+0x54>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00d      	beq.n	8009bf4 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8009bd8:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <HAL_UART_TxCpltCallback+0x54>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4798      	blx	r3
            }
            break;
 8009bde:	e009      	b.n	8009bf4 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <HAL_UART_TxCpltCallback+0x58>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8009be8:	4b09      	ldr	r3, [pc, #36]	; (8009c10 <HAL_UART_TxCpltCallback+0x58>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4798      	blx	r3
            }
            break;
 8009bee:	e003      	b.n	8009bf8 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8009bf0:	bf00      	nop
 8009bf2:	e002      	b.n	8009bfa <HAL_UART_TxCpltCallback+0x42>
            break;
 8009bf4:	bf00      	nop
 8009bf6:	e000      	b.n	8009bfa <HAL_UART_TxCpltCallback+0x42>
            break;
 8009bf8:	bf00      	nop
    }

    return;
 8009bfa:	bf00      	nop
}
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	40008000 	.word	0x40008000
 8009c08:	40013800 	.word	0x40013800
 8009c0c:	2000031c 	.word	0x2000031c
 8009c10:	20000324 	.word	0x20000324

08009c14 <LL_EXTI_EnableIT_32_63>:
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009c1c:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <LL_EXTI_EnableIT_32_63+0x24>)
 8009c1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009c22:	4905      	ldr	r1, [pc, #20]	; (8009c38 <LL_EXTI_EnableIT_32_63+0x24>)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	58000800 	.word	0x58000800

08009c3c <LL_RCC_HSE_SetCapacitorTuning>:
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8009c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c48:	4a0a      	ldr	r2, [pc, #40]	; (8009c74 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8009c4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8009c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c56:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	021b      	lsls	r3, r3, #8
 8009c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c62:	4313      	orrs	r3, r2
 8009c64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	cafecafe 	.word	0xcafecafe

08009c78 <LL_RCC_LSE_SetDriveCapability>:
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8009c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c88:	f023 0218 	bic.w	r2, r3, #24
 8009c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009cbc:	bf00      	nop
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009cde:	bf00      	nop
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8009cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cfc:	d101      	bne.n	8009d02 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e000      	b.n	8009d04 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8009d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d22:	d101      	bne.n	8009d28 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8009d24:	2301      	movs	r3, #1
 8009d26:	e000      	b.n	8009d2a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8009d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4013      	ands	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009d58:	68fb      	ldr	r3, [r7, #12]
}
 8009d5a:	bf00      	nop
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b085      	sub	sp, #20
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4013      	ands	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
}
 8009d8c:	bf00      	nop
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4013      	ands	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
}
 8009dbe:	bf00      	nop
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	041b      	lsls	r3, r3, #16
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	605a      	str	r2, [r3, #4]
}
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	605a      	str	r2, [r3, #4]
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	695a      	ldr	r2, [r3, #20]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	615a      	str	r2, [r3, #20]
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	695a      	ldr	r2, [r3, #20]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	431a      	orrs	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	615a      	str	r2, [r3, #20]
}
 8009e4a:	bf00      	nop
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b083      	sub	sp, #12
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	609a      	str	r2, [r3, #8]
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b083      	sub	sp, #12
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	619a      	str	r2, [r3, #24]
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
	...

08009e90 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8009e90:	b480      	push	{r7}
 8009e92:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009e94:	4b05      	ldr	r3, [pc, #20]	; (8009eac <LL_LPM_EnableSleep+0x1c>)
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	4a04      	ldr	r2, [pc, #16]	; (8009eac <LL_LPM_EnableSleep+0x1c>)
 8009e9a:	f023 0304 	bic.w	r3, r3, #4
 8009e9e:	6113      	str	r3, [r2, #16]
}
 8009ea0:	bf00      	nop
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	e000ed00 	.word	0xe000ed00

08009eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8009eb4:	4b0f      	ldr	r3, [pc, #60]	; (8009ef4 <main+0x44>)
 8009eb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009eba:	611a      	str	r2, [r3, #16]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009ebc:	f003 f99e 	bl	800d1fc <HAL_Init>

  Reset_Device();
 8009ec0:	f000 f956 	bl	800a170 <Reset_Device>
  Config_HSE();
 8009ec4:	f000 f940 	bl	800a148 <Config_HSE>

  /* Configure the system clock */
  SystemClock_Config();
 8009ec8:	f000 f816 	bl	8009ef8 <SystemClock_Config>

  PeriphClock_Config();
 8009ecc:	f000 f935 	bl	800a13a <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8009ed0:	f000 f98f 	bl	800a1f2 <Init_Exti>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009ed4:	f000 f924 	bl	800a120 <MX_GPIO_Init>
  MX_DMA_Init();
 8009ed8:	f000 f908 	bl	800a0ec <MX_DMA_Init>
  MX_RF_Init();
 8009edc:	f000 f8d8 	bl	800a090 <MX_RF_Init>
  MX_RTC_Init();
 8009ee0:	f000 f8de 	bl	800a0a0 <MX_RTC_Init>

  /* Init the full application */
  APPE_Init();
 8009ee4:	f7fe fc6e 	bl	80087c4 <APPE_Init>

  /* Infinite loop */
  while (1) 
  {
    UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eec:	f00d fbba 	bl	8017664 <UTIL_SEQ_Run>
 8009ef0:	e7fa      	b.n	8009ee8 <main+0x38>
 8009ef2:	bf00      	nop
 8009ef4:	58004000 	.word	0x58004000

08009ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b0ae      	sub	sp, #184	; 0xb8
 8009efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009efe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009f02:	2248      	movs	r2, #72	; 0x48
 8009f04:	2100      	movs	r1, #0
 8009f06:	4618      	mov	r0, r3
 8009f08:	f00d fe24 	bl	8017b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009f0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	605a      	str	r2, [r3, #4]
 8009f16:	609a      	str	r2, [r3, #8]
 8009f18:	60da      	str	r2, [r3, #12]
 8009f1a:	611a      	str	r2, [r3, #16]
 8009f1c:	615a      	str	r2, [r3, #20]
 8009f1e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f20:	1d3b      	adds	r3, r7, #4
 8009f22:	2250      	movs	r2, #80	; 0x50
 8009f24:	2100      	movs	r1, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f00d fe14 	bl	8017b54 <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f7ff fea3 	bl	8009c78 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f32:	4b2f      	ldr	r3, [pc, #188]	; (8009ff0 <SystemClock_Config+0xf8>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009f3a:	4a2d      	ldr	r2, [pc, #180]	; (8009ff0 <SystemClock_Config+0xf8>)
 8009f3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f40:	6013      	str	r3, [r2, #0]
 8009f42:	4b2b      	ldr	r3, [pc, #172]	; (8009ff0 <SystemClock_Config+0xf8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8009f4e:	2307      	movs	r3, #7
 8009f50:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f56:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f60:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009f62:	2340      	movs	r3, #64	; 0x40
 8009f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009f6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009f72:	4618      	mov	r0, r3
 8009f74:	f004 ffcc 	bl	800ef10 <HAL_RCC_OscConfig>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8009f7e:	f000 f964 	bl	800a24a <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8009f82:	236f      	movs	r3, #111	; 0x6f
 8009f84:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8009f86:	2302      	movs	r3, #2
 8009f88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009f92:	2300      	movs	r3, #0
 8009f94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8009f96:	2300      	movs	r3, #0
 8009f98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8009f9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f005 fb27 	bl	800f5f8 <HAL_RCC_ClockConfig>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8009fb0:	f000 f94b 	bl	800a24a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8009fb4:	f643 0303 	movw	r3, #14339	; 0x3803
 8009fb8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fc6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8009fc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8009fce:	2302      	movs	r3, #2
 8009fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8009fd2:	2310      	movs	r3, #16
 8009fd4:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009fd6:	1d3b      	adds	r3, r7, #4
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f005 ff4a 	bl	800fe72 <HAL_RCCEx_PeriphCLKConfig>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8009fe4:	f000 f931 	bl	800a24a <Error_Handler>
  }
}
 8009fe8:	bf00      	nop
 8009fea:	37b8      	adds	r7, #184	; 0xb8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	58000400 	.word	0x58000400

08009ff4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0

    huart1.Instance = USART1;
 8009ff8:	4b23      	ldr	r3, [pc, #140]	; (800a088 <MX_USART1_UART_Init+0x94>)
 8009ffa:	4a24      	ldr	r2, [pc, #144]	; (800a08c <MX_USART1_UART_Init+0x98>)
 8009ffc:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8009ffe:	4b22      	ldr	r3, [pc, #136]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a004:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a006:	4b20      	ldr	r3, [pc, #128]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a008:	2200      	movs	r2, #0
 800a00a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800a00c:	4b1e      	ldr	r3, [pc, #120]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a00e:	2200      	movs	r2, #0
 800a010:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800a012:	4b1d      	ldr	r3, [pc, #116]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a014:	2200      	movs	r2, #0
 800a016:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800a018:	4b1b      	ldr	r3, [pc, #108]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a01a:	220c      	movs	r2, #12
 800a01c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a01e:	4b1a      	ldr	r3, [pc, #104]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a020:	2200      	movs	r2, #0
 800a022:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800a024:	4b18      	ldr	r3, [pc, #96]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a026:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a02a:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a02c:	4b16      	ldr	r3, [pc, #88]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a02e:	2200      	movs	r2, #0
 800a030:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a032:	4b15      	ldr	r3, [pc, #84]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a034:	2200      	movs	r2, #0
 800a036:	625a      	str	r2, [r3, #36]	; 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a038:	4b13      	ldr	r3, [pc, #76]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 800a03e:	4812      	ldr	r0, [pc, #72]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a040:	f006 fabe 	bl	80105c0 <HAL_UART_Init>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <MX_USART1_UART_Init+0x5a>
        Error_Handler();
 800a04a:	f000 f8fe 	bl	800a24a <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 800a04e:	2100      	movs	r1, #0
 800a050:	480d      	ldr	r0, [pc, #52]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a052:	f008 fb0a 	bl	801266a <HAL_UARTEx_SetTxFifoThreshold>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <MX_USART1_UART_Init+0x6c>
        Error_Handler();
 800a05c:	f000 f8f5 	bl	800a24a <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 800a060:	2100      	movs	r1, #0
 800a062:	4809      	ldr	r0, [pc, #36]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a064:	f008 fb3f 	bl	80126e6 <HAL_UARTEx_SetRxFifoThreshold>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <MX_USART1_UART_Init+0x7e>
        Error_Handler();
 800a06e:	f000 f8ec 	bl	800a24a <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 800a072:	4805      	ldr	r0, [pc, #20]	; (800a088 <MX_USART1_UART_Init+0x94>)
 800a074:	f008 fac0 	bl	80125f8 <HAL_UARTEx_DisableFifoMode>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <MX_USART1_UART_Init+0x8e>
        Error_Handler();
 800a07e:	f000 f8e4 	bl	800a24a <Error_Handler>
    }

}
 800a082:	bf00      	nop
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	200003bc 	.word	0x200003bc
 800a08c:	40013800 	.word	0x40013800

0800a090 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800a090:	b480      	push	{r7}
 800a092:	af00      	add	r7, sp, #0

}
 800a094:	bf00      	nop
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
	...

0800a0a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	af00      	add	r7, sp, #0


  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a0a4:	4b0f      	ldr	r3, [pc, #60]	; (800a0e4 <MX_RTC_Init+0x44>)
 800a0a6:	4a10      	ldr	r2, [pc, #64]	; (800a0e8 <MX_RTC_Init+0x48>)
 800a0a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a0aa:	4b0e      	ldr	r3, [pc, #56]	; (800a0e4 <MX_RTC_Init+0x44>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800a0b0:	4b0c      	ldr	r3, [pc, #48]	; (800a0e4 <MX_RTC_Init+0x44>)
 800a0b2:	220f      	movs	r2, #15
 800a0b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800a0b6:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <MX_RTC_Init+0x44>)
 800a0b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a0bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a0be:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <MX_RTC_Init+0x44>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a0c4:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <MX_RTC_Init+0x44>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a0ca:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <MX_RTC_Init+0x44>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a0d0:	4804      	ldr	r0, [pc, #16]	; (800a0e4 <MX_RTC_Init+0x44>)
 800a0d2:	f006 f955 	bl	8010380 <HAL_RTC_Init>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 800a0dc:	f000 f8b5 	bl	800a24a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a0e0:	bf00      	nop
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000510 	.word	0x20000510
 800a0e8:	40002800 	.word	0x40002800

0800a0ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a0f0:	2004      	movs	r0, #4
 800a0f2:	f7ff fe1f 	bl	8009d34 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	f7ff fe1c 	bl	8009d34 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2100      	movs	r1, #0
 800a100:	200b      	movs	r0, #11
 800a102:	f003 fa64 	bl	800d5ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a106:	200b      	movs	r0, #11
 800a108:	f003 fa7b 	bl	800d602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800a10c:	2200      	movs	r2, #0
 800a10e:	2100      	movs	r1, #0
 800a110:	200c      	movs	r0, #12
 800a112:	f003 fa5c 	bl	800d5ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a116:	200c      	movs	r0, #12
 800a118:	f003 fa73 	bl	800d602 <HAL_NVIC_EnableIRQ>

}
 800a11c:	bf00      	nop
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a124:	2004      	movs	r0, #4
 800a126:	f7ff fe1e 	bl	8009d66 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a12a:	2001      	movs	r0, #1
 800a12c:	f7ff fe1b 	bl	8009d66 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a130:	2002      	movs	r0, #2
 800a132:	f7ff fe18 	bl	8009d66 <LL_AHB2_GRP1_EnableClock>

}
 800a136:	bf00      	nop
 800a138:	bd80      	pop	{r7, pc}

0800a13a <PeriphClock_Config>:

/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 800a13a:	b480      	push	{r7}
 800a13c:	af00      	add	r7, sp, #0

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

  return;
 800a13e:	bf00      	nop
}
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800a14e:	2000      	movs	r0, #0
 800a150:	f009 f8ca 	bl	80132e8 <OTP_Read>
 800a154:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d005      	beq.n	800a168 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	799b      	ldrb	r3, [r3, #6]
 800a160:	4618      	mov	r0, r3
 800a162:	f7ff fd6b 	bl	8009c3c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800a166:	bf00      	nop
 800a168:	bf00      	nop
}
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <Reset_Device>:


static void Reset_Device( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 800a174:	f000 f826 	bl	800a1c4 <Reset_BackupDomain>

  Reset_IPCC();
 800a178:	f000 f802 	bl	800a180 <Reset_IPCC>
#endif

  return;
 800a17c:	bf00      	nop
}
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800a184:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a188:	f7ff fe06 	bl	8009d98 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800a18c:	213f      	movs	r1, #63	; 0x3f
 800a18e:	480c      	ldr	r0, [pc, #48]	; (800a1c0 <Reset_IPCC+0x40>)
 800a190:	f7ff fe61 	bl	8009e56 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800a194:	213f      	movs	r1, #63	; 0x3f
 800a196:	480a      	ldr	r0, [pc, #40]	; (800a1c0 <Reset_IPCC+0x40>)
 800a198:	f7ff fe6b 	bl	8009e72 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800a19c:	213f      	movs	r1, #63	; 0x3f
 800a19e:	4808      	ldr	r0, [pc, #32]	; (800a1c0 <Reset_IPCC+0x40>)
 800a1a0:	f7ff fe13 	bl	8009dca <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800a1a4:	213f      	movs	r1, #63	; 0x3f
 800a1a6:	4806      	ldr	r0, [pc, #24]	; (800a1c0 <Reset_IPCC+0x40>)
 800a1a8:	f7ff fe32 	bl	8009e10 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800a1ac:	213f      	movs	r1, #63	; 0x3f
 800a1ae:	4804      	ldr	r0, [pc, #16]	; (800a1c0 <Reset_IPCC+0x40>)
 800a1b0:	f7ff fe1d 	bl	8009dee <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800a1b4:	213f      	movs	r1, #63	; 0x3f
 800a1b6:	4802      	ldr	r0, [pc, #8]	; (800a1c0 <Reset_IPCC+0x40>)
 800a1b8:	f7ff fe3c 	bl	8009e34 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800a1bc:	bf00      	nop
}
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	58000c00 	.word	0x58000c00

0800a1c4 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800a1c8:	f7ff fd8e 	bl	8009ce8 <LL_RCC_IsActiveFlag_PINRST>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00d      	beq.n	800a1ee <Reset_BackupDomain+0x2a>
 800a1d2:	f7ff fd9c 	bl	8009d0e <LL_RCC_IsActiveFlag_SFTRST>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d108      	bne.n	800a1ee <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800a1dc:	f004 fa0a 	bl	800e5f4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800a1e0:	f004 fa08 	bl	800e5f4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800a1e4:	f7ff fd5e 	bl	8009ca4 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800a1e8:	f7ff fd6d 	bl	8009cc6 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800a1ec:	bf00      	nop
 800a1ee:	bf00      	nop
}
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <Init_Exti>:

static void Init_Exti( void )
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800a1f6:	2050      	movs	r0, #80	; 0x50
 800a1f8:	f7ff fd0c 	bl	8009c14 <LL_EXTI_EnableIT_32_63>

  return;
 800a1fc:	bf00      	nop
}
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a208:	f003 f866 	bl	800d2d8 <HAL_GetTick>
 800a20c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a218:	d00a      	beq.n	800a230 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800a21a:	f003 f875 	bl	800d308 <HAL_GetTickFreq>
 800a21e:	4603      	mov	r3, r0
 800a220:	461a      	mov	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a228:	e002      	b.n	800a230 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800a22a:	f7ff fe31 	bl	8009e90 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 800a22e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800a230:	f003 f852 	bl	800d2d8 <HAL_GetTick>
 800a234:	4602      	mov	r2, r0
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d8f4      	bhi.n	800a22a <HAL_Delay+0x2a>
  }
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a24a:	b480      	push	{r7}
 800a24c:	af00      	add	r7, sp, #0

}
 800a24e:	bf00      	nop
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <LL_RCC_SetRTCClockSource>:
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a26c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4313      	orrs	r3, r2
 800a274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <LL_RCC_EnableRTC>:
{
 800a284:	b480      	push	{r7}
 800a286:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800a288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a29c:	bf00      	nop
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <LL_AHB2_GRP1_EnableClock>:
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a2ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a2be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
}
 800a2cc:	bf00      	nop
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <LL_AHB3_GRP1_EnableClock>:
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a2e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a2f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
}
 800a2fe:	bf00      	nop
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b085      	sub	sp, #20
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800a312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a316:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4313      	orrs	r3, r2
 800a320:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800a322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a326:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4013      	ands	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a32e:	68fb      	ldr	r3, [r7, #12]
}
 800a330:	bf00      	nop
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a348:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a34a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4313      	orrs	r3, r2
 800a352:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a358:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4013      	ands	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a360:	68fb      	ldr	r3, [r7, #12]
}
 800a362:	bf00      	nop
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800a372:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a376:	f7ff ffaf 	bl	800a2d8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 800a37a:	2200      	movs	r2, #0
 800a37c:	2100      	movs	r1, #0
 800a37e:	2001      	movs	r0, #1
 800a380:	f003 f925 	bl	800d5ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 800a384:	2001      	movs	r0, #1
 800a386:	f003 f93c 	bl	800d602 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800a38a:	2200      	movs	r2, #0
 800a38c:	2100      	movs	r1, #0
 800a38e:	2004      	movs	r0, #4
 800a390:	f003 f91d 	bl	800d5ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800a394:	2004      	movs	r0, #4
 800a396:	f003 f934 	bl	800d602 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800a39a:	2200      	movs	r2, #0
 800a39c:	2100      	movs	r1, #0
 800a39e:	2005      	movs	r0, #5
 800a3a0:	f003 f915 	bl	800d5ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800a3a4:	2005      	movs	r0, #5
 800a3a6:	f003 f92c 	bl	800d602 <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	2015      	movs	r0, #21
 800a3b0:	f003 f90d 	bl	800d5ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 800a3b4:	2015      	movs	r0, #21
 800a3b6:	f003 f924 	bl	800d602 <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2100      	movs	r1, #0
 800a3be:	202b      	movs	r0, #43	; 0x2b
 800a3c0:	f003 f905 	bl	800d5ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 800a3c4:	202b      	movs	r0, #43	; 0x2b
 800a3c6:	f003 f91c 	bl	800d602 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	202e      	movs	r0, #46	; 0x2e
 800a3d0:	f003 f8fd 	bl	800d5ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800a3d4:	202e      	movs	r0, #46	; 0x2e
 800a3d6:	f003 f914 	bl	800d602 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	2036      	movs	r0, #54	; 0x36
 800a3e0:	f003 f8f5 	bl	800d5ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800a3e4:	2036      	movs	r0, #54	; 0x36
 800a3e6:	f003 f90c 	bl	800d602 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a3ea:	bf00      	nop
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3f8:	f107 030c 	add.w	r3, r7, #12
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	605a      	str	r2, [r3, #4]
 800a402:	609a      	str	r2, [r3, #8]
 800a404:	60da      	str	r2, [r3, #12]
 800a406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a58      	ldr	r2, [pc, #352]	; (800a570 <HAL_UART_MspInit+0x180>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d148      	bne.n	800a4a4 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a412:	2001      	movs	r0, #1
 800a414:	f7ff ff79 	bl	800a30a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a418:	2001      	movs	r0, #1
 800a41a:	f7ff ff44 	bl	800a2a6 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a41e:	230c      	movs	r3, #12
 800a420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a422:	2302      	movs	r3, #2
 800a424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a42a:	2300      	movs	r3, #0
 800a42c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a42e:	2308      	movs	r3, #8
 800a430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a432:	f107 030c 	add.w	r3, r7, #12
 800a436:	4619      	mov	r1, r3
 800a438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a43c:	f003 fefc 	bl	800e238 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 800a440:	4b4c      	ldr	r3, [pc, #304]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a442:	4a4d      	ldr	r2, [pc, #308]	; (800a578 <HAL_UART_MspInit+0x188>)
 800a444:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800a446:	4b4b      	ldr	r3, [pc, #300]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a448:	2211      	movs	r2, #17
 800a44a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a44c:	4b49      	ldr	r3, [pc, #292]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a44e:	2210      	movs	r2, #16
 800a450:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a452:	4b48      	ldr	r3, [pc, #288]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a454:	2200      	movs	r2, #0
 800a456:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a458:	4b46      	ldr	r3, [pc, #280]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a45a:	2280      	movs	r2, #128	; 0x80
 800a45c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a45e:	4b45      	ldr	r3, [pc, #276]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a460:	2200      	movs	r2, #0
 800a462:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a464:	4b43      	ldr	r3, [pc, #268]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a466:	2200      	movs	r2, #0
 800a468:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800a46a:	4b42      	ldr	r3, [pc, #264]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a470:	4b40      	ldr	r3, [pc, #256]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a472:	2200      	movs	r2, #0
 800a474:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800a476:	483f      	ldr	r0, [pc, #252]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a478:	f003 f90c 	bl	800d694 <HAL_DMA_Init>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 800a482:	f7ff fee2 	bl	800a24a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a3a      	ldr	r2, [pc, #232]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a48a:	67da      	str	r2, [r3, #124]	; 0x7c
 800a48c:	4a39      	ldr	r2, [pc, #228]	; (800a574 <HAL_UART_MspInit+0x184>)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800a492:	2200      	movs	r2, #0
 800a494:	2100      	movs	r1, #0
 800a496:	2025      	movs	r0, #37	; 0x25
 800a498:	f003 f899 	bl	800d5ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800a49c:	2025      	movs	r0, #37	; 0x25
 800a49e:	f003 f8b0 	bl	800d602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a4a2:	e061      	b.n	800a568 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART1)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a34      	ldr	r2, [pc, #208]	; (800a57c <HAL_UART_MspInit+0x18c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d15c      	bne.n	800a568 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a4ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a4b2:	f7ff ff43 	bl	800a33c <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	f7ff fef5 	bl	800a2a6 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4bc:	2002      	movs	r0, #2
 800a4be:	f7ff fef2 	bl	800a2a6 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a4c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a4d4:	2307      	movs	r3, #7
 800a4d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4d8:	f107 030c 	add.w	r3, r7, #12
 800a4dc:	4619      	mov	r1, r3
 800a4de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a4e2:	f003 fea9 	bl	800e238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a4e6:	23c0      	movs	r3, #192	; 0xc0
 800a4e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a4f6:	2307      	movs	r3, #7
 800a4f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4fa:	f107 030c 	add.w	r3, r7, #12
 800a4fe:	4619      	mov	r1, r3
 800a500:	481f      	ldr	r0, [pc, #124]	; (800a580 <HAL_UART_MspInit+0x190>)
 800a502:	f003 fe99 	bl	800e238 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800a506:	4b1f      	ldr	r3, [pc, #124]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a508:	4a1f      	ldr	r2, [pc, #124]	; (800a588 <HAL_UART_MspInit+0x198>)
 800a50a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800a50c:	4b1d      	ldr	r3, [pc, #116]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a50e:	220f      	movs	r2, #15
 800a510:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a512:	4b1c      	ldr	r3, [pc, #112]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a514:	2210      	movs	r2, #16
 800a516:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a518:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a51e:	4b19      	ldr	r3, [pc, #100]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a520:	2280      	movs	r2, #128	; 0x80
 800a522:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a524:	4b17      	ldr	r3, [pc, #92]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a526:	2200      	movs	r2, #0
 800a528:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a52a:	4b16      	ldr	r3, [pc, #88]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a52c:	2200      	movs	r2, #0
 800a52e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a530:	4b14      	ldr	r3, [pc, #80]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a532:	2200      	movs	r2, #0
 800a534:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a536:	4b13      	ldr	r3, [pc, #76]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a538:	2200      	movs	r2, #0
 800a53a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a53c:	4811      	ldr	r0, [pc, #68]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a53e:	f003 f8a9 	bl	800d694 <HAL_DMA_Init>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <HAL_UART_MspInit+0x15c>
      Error_Handler();
 800a548:	f7ff fe7f 	bl	800a24a <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a0d      	ldr	r2, [pc, #52]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a550:	67da      	str	r2, [r3, #124]	; 0x7c
 800a552:	4a0c      	ldr	r2, [pc, #48]	; (800a584 <HAL_UART_MspInit+0x194>)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a558:	2200      	movs	r2, #0
 800a55a:	2100      	movs	r1, #0
 800a55c:	2024      	movs	r0, #36	; 0x24
 800a55e:	f003 f836 	bl	800d5ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a562:	2024      	movs	r0, #36	; 0x24
 800a564:	f003 f84d 	bl	800d602 <HAL_NVIC_EnableIRQ>
}
 800a568:	bf00      	nop
 800a56a:	3720      	adds	r7, #32
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	40008000 	.word	0x40008000
 800a574:	20000450 	.word	0x20000450
 800a578:	40020008 	.word	0x40020008
 800a57c:	40013800 	.word	0x40013800
 800a580:	48000400 	.word	0x48000400
 800a584:	200004b0 	.word	0x200004b0
 800a588:	4002001c 	.word	0x4002001c

0800a58c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a0b      	ldr	r2, [pc, #44]	; (800a5c8 <HAL_RTC_MspInit+0x3c>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d10f      	bne.n	800a5be <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800a59e:	f004 f829 	bl	800e5f4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800a5a2:	f004 f827 	bl	800e5f4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 800a5a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a5aa:	f7ff fe55 	bl	800a258 <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a5ae:	f7ff fe69 	bl	800a284 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 800a5b2:	4b05      	ldr	r3, [pc, #20]	; (800a5c8 <HAL_RTC_MspInit+0x3c>)
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	4a04      	ldr	r2, [pc, #16]	; (800a5c8 <HAL_RTC_MspInit+0x3c>)
 800a5b8:	f023 0307 	bic.w	r3, r3, #7
 800a5bc:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a5be:	bf00      	nop
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	40002800 	.word	0x40002800

0800a5cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a5d0:	bf00      	nop
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a5de:	e7fe      	b.n	800a5de <HardFault_Handler+0x4>

0800a5e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a5e4:	e7fe      	b.n	800a5e4 <MemManage_Handler+0x4>

0800a5e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a5ea:	e7fe      	b.n	800a5ea <BusFault_Handler+0x4>

0800a5ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a5f0:	e7fe      	b.n	800a5f0 <UsageFault_Handler+0x4>

0800a5f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a5f6:	bf00      	nop
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a600:	b480      	push	{r7}
 800a602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a604:	bf00      	nop
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a60e:	b480      	push	{r7}
 800a610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a612:	bf00      	nop
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a620:	f002 fe46 	bl	800d2b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a624:	bf00      	nop
 800a626:	bd80      	pop	{r7, pc}

0800a628 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 800a62c:	f004 f8c4 	bl	800e7b8 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 800a630:	bf00      	nop
 800a632:	bd80      	pop	{r7, pc}

0800a634 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800a638:	f003 fbc4 	bl	800ddc4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800a63c:	bf00      	nop
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800a644:	bf00      	nop
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
	...

0800a650 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800a654:	4802      	ldr	r0, [pc, #8]	; (800a660 <DMA1_Channel1_IRQHandler+0x10>)
 800a656:	f003 f9fe 	bl	800da56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a65a:	bf00      	nop
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20000450 	.word	0x20000450

0800a664 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a668:	4802      	ldr	r0, [pc, #8]	; (800a674 <DMA1_Channel2_IRQHandler+0x10>)
 800a66a:	f003 f9f4 	bl	800da56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800a66e:	bf00      	nop
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	200004b0 	.word	0x200004b0

0800a678 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 800a67c:	bf00      	nop
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
	...

0800a688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a68c:	4802      	ldr	r0, [pc, #8]	; (800a698 <USART1_IRQHandler+0x10>)
 800a68e:	f006 f8b3 	bl	80107f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a692:	bf00      	nop
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	200003bc 	.word	0x200003bc

0800a69c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800a6a0:	4802      	ldr	r0, [pc, #8]	; (800a6ac <LPUART1_IRQHandler+0x10>)
 800a6a2:	f006 f8a9 	bl	80107f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800a6a6:	bf00      	nop
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20000328 	.word	0x20000328

0800a6b0 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 800a6b4:	bf00      	nop
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800a6c2:	f003 ff73 	bl	800e5ac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800a6c6:	bf00      	nop
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800a6ce:	bf00      	nop
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800a6dc:	f7fe fe72 	bl	80093c4 <HW_TS_RTC_Wakeup_Handler>
}
 800a6e0:	bf00      	nop
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <EXTI4_IRQHandler>:
  * @brief  This function handles External External line 4 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800a6e8:	2010      	movs	r0, #16
 800a6ea:	f003 ff47 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
}
 800a6ee:	bf00      	nop
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <EXTI0_IRQHandler>:
  * @brief  This function handles External External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800a6f6:	2001      	movs	r0, #1
 800a6f8:	f003 ff40 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
}
 800a6fc:	bf00      	nop
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <EXTI1_IRQHandler>:
  * @brief  This function handles External External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 800a704:	2002      	movs	r0, #2
 800a706:	f003 ff39 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
}
 800a70a:	bf00      	nop
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <IPCC_C1_TX_IRQHandler>:

void
IPCC_C1_TX_IRQHandler(void)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	af00      	add	r7, sp, #0
    HW_IPCC_Tx_Handler();
 800a712:	f002 f971 	bl	800c9f8 <HW_IPCC_Tx_Handler>

    return;
 800a716:	bf00      	nop
}
 800a718:	bd80      	pop	{r7, pc}

0800a71a <IPCC_C1_RX_IRQHandler>:

void
IPCC_C1_RX_IRQHandler(void)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	af00      	add	r7, sp, #0
    HW_IPCC_Rx_Handler();
 800a71e:	f002 f911 	bl	800c944 <HW_IPCC_Rx_Handler>
    return;
 800a722:	bf00      	nop
}
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <logRegion>:
 * @returns  String with a log level color value.
 */
static inline uint16_t
logRegion(char *aLogString, uint16_t aMaxSize,
    appliLogRegion_t aLogRegion)
{
 800a728:	b5b0      	push	{r4, r5, r7, lr}
 800a72a:	b08a      	sub	sp, #40	; 0x28
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	807b      	strh	r3, [r7, #2]
 800a734:	4613      	mov	r3, r2
 800a736:	707b      	strb	r3, [r7, #1]
    char logRegionString[30U];

    switch (aLogRegion) {
 800a738:	787b      	ldrb	r3, [r7, #1]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d002      	beq.n	800a744 <logRegion+0x1c>
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d00a      	beq.n	800a758 <logRegion+0x30>
 800a742:	e012      	b.n	800a76a <logRegion+0x42>
        case APPLI_LOG_REGION_GENERAL:
            strcpy(logRegionString, "[M4 APPLICATION]");
 800a744:	f107 0308 	add.w	r3, r7, #8
 800a748:	4a13      	ldr	r2, [pc, #76]	; (800a798 <logRegion+0x70>)
 800a74a:	461c      	mov	r4, r3
 800a74c:	4615      	mov	r5, r2
 800a74e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	7023      	strb	r3, [r4, #0]
            break;
 800a756:	e011      	b.n	800a77c <logRegion+0x54>
        case APPLI_LOG_REGION_ZIGBEE_API:
            strcpy(logRegionString, "[M4 ZIGBEE API]");
 800a758:	f107 0308 	add.w	r3, r7, #8
 800a75c:	4a0f      	ldr	r2, [pc, #60]	; (800a79c <logRegion+0x74>)
 800a75e:	461c      	mov	r4, r3
 800a760:	4613      	mov	r3, r2
 800a762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            break;
 800a768:	e008      	b.n	800a77c <logRegion+0x54>
        default:
            strcpy(logRegionString, "[M4]");
 800a76a:	f107 0308 	add.w	r3, r7, #8
 800a76e:	4a0c      	ldr	r2, [pc, #48]	; (800a7a0 <logRegion+0x78>)
 800a770:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a774:	6018      	str	r0, [r3, #0]
 800a776:	3304      	adds	r3, #4
 800a778:	7019      	strb	r1, [r3, #0]
            break;
 800a77a:	bf00      	nop
    }

    return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 800a77c:	8879      	ldrh	r1, [r7, #2]
 800a77e:	f107 0308 	add.w	r3, r7, #8
 800a782:	4a08      	ldr	r2, [pc, #32]	; (800a7a4 <logRegion+0x7c>)
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f00d fe21 	bl	80183cc <sniprintf>
 800a78a:	4603      	mov	r3, r0
 800a78c:	b29b      	uxth	r3, r3
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3728      	adds	r7, #40	; 0x28
 800a792:	46bd      	mov	sp, r7
 800a794:	bdb0      	pop	{r4, r5, r7, pc}
 800a796:	bf00      	nop
 800a798:	080192f8 	.word	0x080192f8
 800a79c:	0801930c 	.word	0x0801930c
 800a7a0:	0801931c 	.word	0x0801931c
 800a7a4:	08019324 	.word	0x08019324

0800a7a8 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	2b03      	cmp	r3, #3
 800a7b6:	d00a      	beq.n	800a7ce <levelToString+0x26>
 800a7b8:	2b03      	cmp	r3, #3
 800a7ba:	dc0a      	bgt.n	800a7d2 <levelToString+0x2a>
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d002      	beq.n	800a7c6 <levelToString+0x1e>
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d002      	beq.n	800a7ca <levelToString+0x22>
 800a7c4:	e005      	b.n	800a7d2 <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 800a7c6:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <levelToString+0x38>)
 800a7c8:	e004      	b.n	800a7d4 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 800a7ca:	4b06      	ldr	r3, [pc, #24]	; (800a7e4 <levelToString+0x3c>)
 800a7cc:	e002      	b.n	800a7d4 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 800a7ce:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <levelToString+0x40>)
 800a7d0:	e000      	b.n	800a7d4 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 800a7d2:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <levelToString+0x44>)
  }
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	08019328 	.word	0x08019328
 800a7e4:	08019330 	.word	0x08019330
 800a7e8:	08019338 	.word	0x08019338
 800a7ec:	08019340 	.word	0x08019340

0800a7f0 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 800a7f0:	b590      	push	{r4, r7, lr}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	807b      	strh	r3, [r7, #2]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 800a800:	887c      	ldrh	r4, [r7, #2]
 800a802:	787b      	ldrb	r3, [r7, #1]
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff ffcf 	bl	800a7a8 <levelToString>
 800a80a:	4603      	mov	r3, r0
 800a80c:	4a05      	ldr	r2, [pc, #20]	; (800a824 <logLevel+0x34>)
 800a80e:	4621      	mov	r1, r4
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f00d fddb 	bl	80183cc <sniprintf>
 800a816:	4603      	mov	r3, r0
 800a818:	b29b      	uxth	r3, r3
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd90      	pop	{r4, r7, pc}
 800a822:	bf00      	nop
 800a824:	08019348 	.word	0x08019348

0800a828 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 800a828:	b40c      	push	{r2, r3}
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b0c4      	sub	sp, #272	; 0x110
 800a82e:	af00      	add	r7, sp, #0
 800a830:	4602      	mov	r2, r0
 800a832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a836:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800a83a:	701a      	strb	r2, [r3, #0]
 800a83c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a840:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800a844:	460a      	mov	r2, r1
 800a846:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800a84e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a852:	f107 020c 	add.w	r2, r7, #12
 800a856:	18d0      	adds	r0, r2, r3
 800a858:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a85c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a860:	b299      	uxth	r1, r3
 800a862:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a866:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	461a      	mov	r2, r3
 800a86e:	f7ff ffbf 	bl	800a7f0 <logLevel>
 800a872:	4603      	mov	r3, r0
 800a874:	461a      	mov	r2, r3
 800a876:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a87a:	4413      	add	r3, r2
 800a87c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800a880:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a884:	f107 020c 	add.w	r2, r7, #12
 800a888:	18d0      	adds	r0, r2, r3
 800a88a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a88e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a892:	b299      	uxth	r1, r3
 800a894:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a898:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f7ff ff42 	bl	800a728 <logRegion>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

    /* Parse user string */
    va_list paramList;
    va_start(paramList, aFormat);
 800a8b2:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800a8b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8be:	601a      	str	r2, [r3, #0]
    length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800a8c0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a8c4:	f107 020c 	add.w	r2, r7, #12
 800a8c8:	18d0      	adds	r0, r2, r3
 800a8ca:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a8ce:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 800a8d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800a8e0:	f00d fe00 	bl	80184e4 <vsniprintf>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            aFormat, paramList);
    logString[length++] = '\r';
 800a8f2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a8f6:	1c5a      	adds	r2, r3, #1
 800a8f8:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a906:	210d      	movs	r1, #13
 800a908:	5499      	strb	r1, [r3, r2]
    logString[length++] = '\n';
 800a90a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800a914:	461a      	mov	r2, r3
 800a916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a91a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a91e:	210a      	movs	r1, #10
 800a920:	5499      	strb	r1, [r3, r2]
    logString[length++] = 0;
 800a922:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800a92c:	461a      	mov	r2, r3
 800a92e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a936:	2100      	movs	r1, #0
 800a938:	5499      	strb	r1, [r3, r2]
    va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 800a93a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a93e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	2b03      	cmp	r3, #3
 800a946:	d805      	bhi.n	800a954 <logApplication+0x12c>
  {
    printf("%s", logString);
 800a948:	f107 030c 	add.w	r3, r7, #12
 800a94c:	4619      	mov	r1, r3
 800a94e:	4805      	ldr	r0, [pc, #20]	; (800a964 <logApplication+0x13c>)
 800a950:	f00d fcd6 	bl	8018300 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800a954:	bf00      	nop
 800a956:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a95a:	46bd      	mov	sp, r7
 800a95c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a960:	b002      	add	sp, #8
 800a962:	4770      	bx	lr
 800a964:	08019348 	.word	0x08019348

0800a968 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
  return 1;
 800a96c:	2301      	movs	r3, #1
}
 800a96e:	4618      	mov	r0, r3
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <_kill>:

int _kill(int pid, int sig)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a982:	f00d f88d 	bl	8017aa0 <__errno>
 800a986:	4603      	mov	r3, r0
 800a988:	2216      	movs	r2, #22
 800a98a:	601a      	str	r2, [r3, #0]
  return -1;
 800a98c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <_exit>:

void _exit (int status)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a9a0:	f04f 31ff 	mov.w	r1, #4294967295
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7ff ffe7 	bl	800a978 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a9aa:	e7fe      	b.n	800a9aa <_exit+0x12>

0800a9ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	617b      	str	r3, [r7, #20]
 800a9bc:	e00a      	b.n	800a9d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a9be:	f3af 8000 	nop.w
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	1c5a      	adds	r2, r3, #1
 800a9c8:	60ba      	str	r2, [r7, #8]
 800a9ca:	b2ca      	uxtb	r2, r1
 800a9cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	617b      	str	r3, [r7, #20]
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	dbf0      	blt.n	800a9be <_read+0x12>
  }

  return len;
 800a9dc:	687b      	ldr	r3, [r7, #4]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <_close>:
  }
  return len;
}

int _close(int file)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a9ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aa0e:	605a      	str	r2, [r3, #4]
  return 0;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr

0800aa1e <_isatty>:

int _isatty(int file)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800aa26:	2301      	movs	r3, #1
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
	...

0800aa50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800aa58:	4a14      	ldr	r2, [pc, #80]	; (800aaac <_sbrk+0x5c>)
 800aa5a:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <_sbrk+0x60>)
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800aa64:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <_sbrk+0x64>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d102      	bne.n	800aa72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800aa6c:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <_sbrk+0x64>)
 800aa6e:	4a12      	ldr	r2, [pc, #72]	; (800aab8 <_sbrk+0x68>)
 800aa70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800aa72:	4b10      	ldr	r3, [pc, #64]	; (800aab4 <_sbrk+0x64>)
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4413      	add	r3, r2
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d207      	bcs.n	800aa90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800aa80:	f00d f80e 	bl	8017aa0 <__errno>
 800aa84:	4603      	mov	r3, r0
 800aa86:	220c      	movs	r2, #12
 800aa88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800aa8a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa8e:	e009      	b.n	800aaa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800aa90:	4b08      	ldr	r3, [pc, #32]	; (800aab4 <_sbrk+0x64>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800aa96:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <_sbrk+0x64>)
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	4a05      	ldr	r2, [pc, #20]	; (800aab4 <_sbrk+0x64>)
 800aaa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	20030000 	.word	0x20030000
 800aab0:	00001000 	.word	0x00001000
 800aab4:	20000534 	.word	0x20000534
 800aab8:	20003c48 	.word	0x20003c48

0800aabc <__NVIC_SystemReset>:
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800aac0:	f3bf 8f4f 	dsb	sy
}
 800aac4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <__NVIC_SystemReset+0x24>)
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800aace:	4904      	ldr	r1, [pc, #16]	; (800aae0 <__NVIC_SystemReset+0x24>)
 800aad0:	4b04      	ldr	r3, [pc, #16]	; (800aae4 <__NVIC_SystemReset+0x28>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800aad6:	f3bf 8f4f 	dsb	sy
}
 800aada:	bf00      	nop
    __NOP();
 800aadc:	bf00      	nop
 800aade:	e7fd      	b.n	800aadc <__NVIC_SystemReset+0x20>
 800aae0:	e000ed00 	.word	0xe000ed00
 800aae4:	05fa0004 	.word	0x05fa0004

0800aae8 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 800aae8:	b480      	push	{r7}
 800aaea:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 800aaec:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aaf4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aaf8:	d101      	bne.n	800aafe <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 800aafa:	2301      	movs	r3, #1
 800aafc:	e000      	b.n	800ab00 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	58004000 	.word	0x58004000

0800ab10 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	3220      	adds	r2, #32
 800ab20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab24:	4a05      	ldr	r2, [pc, #20]	; (800ab3c <LL_HSEM_1StepLock+0x2c>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d001      	beq.n	800ab2e <LL_HSEM_1StepLock+0x1e>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e000      	b.n	800ab30 <LL_HSEM_1StepLock+0x20>
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	80000400 	.word	0x80000400

0800ab40 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800ab5a:	bf00      	nop
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
	...

0800ab68 <APP_ZIGBEE_OTA_Client_DiscoverComplete_cb>:
 * @brief  OTA client Discover callback
 * @param  clusterPtr: ZCL Cluster pointer
 * @param  arg: Passed argument
 * @retval None
 */
static void APP_ZIGBEE_OTA_Client_DiscoverComplete_cb(struct ZbZclClusterT *clusterPtr, enum ZclStatusCodeT status,void *arg){
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b088      	sub	sp, #32
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	460b      	mov	r3, r1
 800ab72:	607a      	str	r2, [r7, #4]
 800ab74:	72fb      	strb	r3, [r7, #11]
  enum ZclStatusCodeT internal_status = ZCL_STATUS_SUCCESS;
 800ab76:	2300      	movs	r3, #0
 800ab78:	75fb      	strb	r3, [r7, #23]
  uint64_t requested_server_ext = 0;
 800ab7a:	f04f 0200 	mov.w	r2, #0
 800ab7e:	f04f 0300 	mov.w	r3, #0
 800ab82:	e9c7 2306 	strd	r2, r3, [r7, #24]
  //UNUSED (status);
  
  if (status == ZCL_STATUS_SUCCESS )
 800ab86:	7afb      	ldrb	r3, [r7, #11]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d11c      	bne.n	800abc6 <APP_ZIGBEE_OTA_Client_DiscoverComplete_cb+0x5e>
  {
    /* The OTA server extended address in stored in ZCL_OTA_ATTR_UPGRADE_SERVER_ID attribute */
    requested_server_ext = ZbZclAttrIntegerRead(zigbee_app_info.ota_client, ZCL_OTA_ATTR_UPGRADE_SERVER_ID, NULL, &internal_status);
 800ab8c:	4b14      	ldr	r3, [pc, #80]	; (800abe0 <APP_ZIGBEE_OTA_Client_DiscoverComplete_cb+0x78>)
 800ab8e:	6998      	ldr	r0, [r3, #24]
 800ab90:	f107 0317 	add.w	r3, r7, #23
 800ab94:	2200      	movs	r2, #0
 800ab96:	2100      	movs	r1, #0
 800ab98:	f7f5 fed6 	bl	8000948 <ZbZclAttrIntegerRead>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    UNUSED (requested_server_ext);
    if(internal_status != ZCL_STATUS_SUCCESS){
 800aba4:	7dfb      	ldrb	r3, [r7, #23]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d004      	beq.n	800abb4 <APP_ZIGBEE_OTA_Client_DiscoverComplete_cb+0x4c>
      APP_DBG("ZbZclAttrIntegerRead failed.\n");
 800abaa:	4a0e      	ldr	r2, [pc, #56]	; (800abe4 <APP_ZIGBEE_OTA_Client_DiscoverComplete_cb+0x7c>)
 800abac:	2101      	movs	r1, #1
 800abae:	2000      	movs	r0, #0
 800abb0:	f7ff fe3a 	bl	800a828 <logApplication>
    }
    
    APP_DBG("OTA Server located ...");
 800abb4:	4a0c      	ldr	r2, [pc, #48]	; (800abe8 <APP_ZIGBEE_OTA_Client_DiscoverComplete_cb+0x80>)
 800abb6:	2101      	movs	r1, #1
 800abb8:	2000      	movs	r0, #0
 800abba:	f7ff fe35 	bl	800a828 <logApplication>
    UTIL_SEQ_SetEvt(EVENT_ZIGBEE_OTA_SERVER_FOUND);
 800abbe:	2010      	movs	r0, #16
 800abc0:	f00c fe9a 	bl	80178f8 <UTIL_SEQ_SetEvt>
  else
  {
    APP_DBG("OTA Server not found after TimeOut. Retry a discovery");
    UTIL_SEQ_SetTask( 1U << CFG_TASK_ZIGBEE_OTA_SERVER_DISCOVERY, CFG_SCH_PRIO_0 );
  }
}
 800abc4:	e008      	b.n	800abd8 <APP_ZIGBEE_OTA_Client_DiscoverComplete_cb+0x70>
    APP_DBG("OTA Server not found after TimeOut. Retry a discovery");
 800abc6:	4a09      	ldr	r2, [pc, #36]	; (800abec <APP_ZIGBEE_OTA_Client_DiscoverComplete_cb+0x84>)
 800abc8:	2101      	movs	r1, #1
 800abca:	2000      	movs	r0, #0
 800abcc:	f7ff fe2c 	bl	800a828 <logApplication>
    UTIL_SEQ_SetTask( 1U << CFG_TASK_ZIGBEE_OTA_SERVER_DISCOVERY, CFG_SCH_PRIO_0 );
 800abd0:	2100      	movs	r1, #0
 800abd2:	2080      	movs	r0, #128	; 0x80
 800abd4:	f00c fe64 	bl	80178a0 <UTIL_SEQ_SetTask>
}
 800abd8:	bf00      	nop
 800abda:	3720      	adds	r7, #32
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	20000980 	.word	0x20000980
 800abe4:	0801934c 	.word	0x0801934c
 800abe8:	0801936c 	.word	0x0801936c
 800abec:	08019384 	.word	0x08019384

0800abf0 <APP_ZIGBEE_OTA_Client_ImageNotify_cb>:
 * @param  zcl_header: ZCL header
 * @retval ZCL status code
 */
static enum ZclStatusCodeT APP_ZIGBEE_OTA_Client_ImageNotify_cb(struct ZbZclClusterT *clusterPtr, uint8_t payload_type, 
                                                                uint8_t jitter, struct ZbZclOtaImageDefinition *image_definition,
                                                                struct ZbApsdeDataIndT *data_ind, struct ZbZclHeaderT *zcl_header){
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	607b      	str	r3, [r7, #4]
 800abfa:	460b      	mov	r3, r1
 800abfc:	72fb      	strb	r3, [r7, #11]
 800abfe:	4613      	mov	r3, r2
 800ac00:	72bb      	strb	r3, [r7, #10]
  bool checkFileType = false, checkFileVersion = false;
 800ac02:	2300      	movs	r3, #0
 800ac04:	74bb      	strb	r3, [r7, #18]
 800ac06:	2300      	movs	r3, #0
 800ac08:	74fb      	strb	r3, [r7, #19]
  int pos = -1;
 800ac0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0e:	617b      	str	r3, [r7, #20]
  
  APP_DBG("[OTA] Image Notify request received.");
 800ac10:	4a3f      	ldr	r2, [pc, #252]	; (800ad10 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x120>)
 800ac12:	2101      	movs	r1, #1
 800ac14:	2000      	movs	r0, #0
 800ac16:	f7ff fe07 	bl	800a828 <logApplication>
  
  /* Print message info according to Image Notify request payload type */
  switch(payload_type){
 800ac1a:	7afb      	ldrb	r3, [r7, #11]
 800ac1c:	2b03      	cmp	r3, #3
 800ac1e:	d130      	bne.n	800ac82 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x92>
    case ZCL_OTA_NOTIFY_TYPE_FILE_VERSION:
      APP_DBG("[OTA] Available upgrade jitter: %d.", jitter);
 800ac20:	7abb      	ldrb	r3, [r7, #10]
 800ac22:	4a3c      	ldr	r2, [pc, #240]	; (800ad14 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x124>)
 800ac24:	2101      	movs	r1, #1
 800ac26:	2000      	movs	r0, #0
 800ac28:	f7ff fdfe 	bl	800a828 <logApplication>
      APP_DBG("[OTA] Available upgrade manufacturer code: %d.", image_definition->manufacturer_code);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	881b      	ldrh	r3, [r3, #0]
 800ac30:	4a39      	ldr	r2, [pc, #228]	; (800ad18 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x128>)
 800ac32:	2101      	movs	r1, #1
 800ac34:	2000      	movs	r0, #0
 800ac36:	f7ff fdf7 	bl	800a828 <logApplication>
      APP_DBG("[OTA] Available upgrade image type: 0x%04x.", image_definition->image_type);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	885b      	ldrh	r3, [r3, #2]
 800ac3e:	4a37      	ldr	r2, [pc, #220]	; (800ad1c <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x12c>)
 800ac40:	2101      	movs	r1, #1
 800ac42:	2000      	movs	r0, #0
 800ac44:	f7ff fdf0 	bl	800a828 <logApplication>
      APP_DBG("[OTA] Available upgrade (new) file version: 0x%08x.", image_definition->file_version);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	4a34      	ldr	r2, [pc, #208]	; (800ad20 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x130>)
 800ac4e:	2101      	movs	r1, #1
 800ac50:	2000      	movs	r0, #0
 800ac52:	f7ff fde9 	bl	800a828 <logApplication>
      
      if(image_definition->manufacturer_code != ST_ZIGBEE_MANUFACTURER_CODE){
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	f241 0241 	movw	r2, #4161	; 0x1041
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d006      	beq.n	800ac70 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x80>
        APP_DBG("[OTA] Unauthorized OTA upgrade manufacturer.\n");
 800ac62:	4a30      	ldr	r2, [pc, #192]	; (800ad24 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x134>)
 800ac64:	2101      	movs	r1, #1
 800ac66:	2000      	movs	r0, #0
 800ac68:	f7ff fdde 	bl	800a828 <logApplication>
        return ZCL_STATUS_FAILURE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e04b      	b.n	800ad08 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x118>
      }
      
      /* check image type and file version */
      checkFileType = true;
 800ac70:	2301      	movs	r3, #1
 800ac72:	74bb      	strb	r3, [r7, #18]
      checkFileVersion = true;
 800ac74:	2301      	movs	r3, #1
 800ac76:	74fb      	strb	r3, [r7, #19]
      break;
 800ac78:	bf00      	nop
      APP_DBG("[OTA] Not supported payload type.\n");
      return ZCL_STATUS_FAILURE;
  }
  
  /* Check file type */
  if(checkFileType){
 800ac7a:	7cbb      	ldrb	r3, [r7, #18]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d017      	beq.n	800acb0 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0xc0>
 800ac80:	e006      	b.n	800ac90 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0xa0>
      APP_DBG("[OTA] Not supported payload type.\n");
 800ac82:	4a29      	ldr	r2, [pc, #164]	; (800ad28 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x138>)
 800ac84:	2101      	movs	r1, #1
 800ac86:	2000      	movs	r0, #0
 800ac88:	f7ff fdce 	bl	800a828 <logApplication>
      return ZCL_STATUS_FAILURE;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e03b      	b.n	800ad08 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x118>
    pos = APP_ZIGBEE_FindImageType(image_definition->image_type);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	885b      	ldrh	r3, [r3, #2]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 fb99 	bl	800b3cc <APP_ZIGBEE_FindImageType>
 800ac9a:	6178      	str	r0, [r7, #20]
    if(pos<0){
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	da06      	bge.n	800acb0 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0xc0>
      /* Unknown file type */
      APP_DBG("[OTA] Unknown file type type.\n");
 800aca2:	4a22      	ldr	r2, [pc, #136]	; (800ad2c <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x13c>)
 800aca4:	2101      	movs	r1, #1
 800aca6:	2000      	movs	r0, #0
 800aca8:	f7ff fdbe 	bl	800a828 <logApplication>
      return ZCL_STATUS_FAILURE;
 800acac:	2301      	movs	r3, #1
 800acae:	e02b      	b.n	800ad08 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x118>
    }
  }
  
  /* Check file version */
  if(checkFileVersion){
 800acb0:	7cfb      	ldrb	r3, [r7, #19]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d010      	beq.n	800acd8 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0xe8>
    if(OTA_currentFileVersionTab[pos].fileVersion == image_definition->file_version){
 800acb6:	4a1e      	ldr	r2, [pc, #120]	; (800ad30 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x140>)
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	4413      	add	r3, r2
 800acbe:	785b      	ldrb	r3, [r3, #1]
 800acc0:	461a      	mov	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d106      	bne.n	800acd8 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0xe8>
      APP_DBG("[OTA] Already up-to-date for this file type.\n");
 800acca:	4a1a      	ldr	r2, [pc, #104]	; (800ad34 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x144>)
 800accc:	2101      	movs	r1, #1
 800acce:	2000      	movs	r0, #0
 800acd0:	f7ff fdaa 	bl	800a828 <logApplication>
      return ZCL_STATUS_FAILURE;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e017      	b.n	800ad08 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x118>
    }
  }
  
  APP_DBG("[OTA] Everything is OK, can process to the OTA upgrade.\n");
 800acd8:	4a17      	ldr	r2, [pc, #92]	; (800ad38 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x148>)
 800acda:	2101      	movs	r1, #1
 800acdc:	2000      	movs	r0, #0
 800acde:	f7ff fda3 	bl	800a828 <logApplication>

  /* Requesting an upgrade according to server image type 
   * => re-send an Query Next Image request  back to the upgrade server */
  OTA_client_info.image_type = image_definition->image_type;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	885a      	ldrh	r2, [r3, #2]
 800ace6:	4b15      	ldr	r3, [pc, #84]	; (800ad3c <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x14c>)
 800ace8:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
  OTA_client_info.current_file_version = OTA_currentFileVersionTab[pos].fileVersion;
 800acec:	4a10      	ldr	r2, [pc, #64]	; (800ad30 <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x140>)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	4413      	add	r3, r2
 800acf4:	785b      	ldrb	r3, [r3, #1]
 800acf6:	461a      	mov	r2, r3
 800acf8:	4b10      	ldr	r3, [pc, #64]	; (800ad3c <APP_ZIGBEE_OTA_Client_ImageNotify_cb+0x14c>)
 800acfa:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_OTA_REQUEST_UPGRADE, CFG_SCH_PRIO_0);
 800acfe:	2100      	movs	r1, #0
 800ad00:	2020      	movs	r0, #32
 800ad02:	f00c fdcd 	bl	80178a0 <UTIL_SEQ_SetTask>
    
  return ZCL_STATUS_SUCCESS;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	080193bc 	.word	0x080193bc
 800ad14:	080193e4 	.word	0x080193e4
 800ad18:	08019408 	.word	0x08019408
 800ad1c:	08019438 	.word	0x08019438
 800ad20:	08019464 	.word	0x08019464
 800ad24:	08019498 	.word	0x08019498
 800ad28:	080194c8 	.word	0x080194c8
 800ad2c:	080194ec 	.word	0x080194ec
 800ad30:	0801a8d0 	.word	0x0801a8d0
 800ad34:	0801950c 	.word	0x0801950c
 800ad38:	0801953c 	.word	0x0801953c
 800ad3c:	2000054c 	.word	0x2000054c

0800ad40 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb>:
 * @param  image_size: OTA file format image total size
 * @param  arg: Passed arg
 * @retval ZCL status code
 */
static void APP_ZIGBEE_OTA_Client_QueryNextImage_cb(struct ZbZclClusterT *clusterPtr, enum ZclStatusCodeT status, 
                                                    struct ZbZclOtaImageDefinition *image_definition, uint32_t image_size, void *arg){
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	607a      	str	r2, [r7, #4]
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	72fb      	strb	r3, [r7, #11]
  struct Zigbee_OTA_client_info* client_info = (struct Zigbee_OTA_client_info*) arg;
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	617b      	str	r3, [r7, #20]
  
  APP_DBG("[OTA] Client Query Next Image request response received.");
 800ad54:	4a2c      	ldr	r2, [pc, #176]	; (800ae08 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xc8>)
 800ad56:	2101      	movs	r1, #1
 800ad58:	2000      	movs	r0, #0
 800ad5a:	f7ff fd65 	bl	800a828 <logApplication>
  if(status != ZCL_STATUS_SUCCESS){
 800ad5e:	7afb      	ldrb	r3, [r7, #11]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d005      	beq.n	800ad70 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0x30>
    APP_DBG("[OTA] A such image is not available.\n");
 800ad64:	4a29      	ldr	r2, [pc, #164]	; (800ae0c <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xcc>)
 800ad66:	2101      	movs	r1, #1
 800ad68:	2000      	movs	r0, #0
 800ad6a:	f7ff fd5d 	bl	800a828 <logApplication>
    return;
 800ad6e:	e048      	b.n	800ae02 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xc2>
  } else {
    APP_DBG("[OTA] A such image is available.");
 800ad70:	4a27      	ldr	r2, [pc, #156]	; (800ae10 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xd0>)
 800ad72:	2101      	movs	r1, #1
 800ad74:	2000      	movs	r0, #0
 800ad76:	f7ff fd57 	bl	800a828 <logApplication>
  }
  
  switch(image_definition->image_type){
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	885b      	ldrh	r3, [r3, #2]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d002      	beq.n	800ad88 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0x48>
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d007      	beq.n	800ad96 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0x56>
 800ad86:	e00d      	b.n	800ada4 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0x64>
    case fileType_COPRO_WIRELESS:
      client_info->ctx.base_address = FUOTA_COPRO_FW_BINARY_ADDRESS;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	4a22      	ldr	r2, [pc, #136]	; (800ae14 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xd4>)
 800ad8c:	611a      	str	r2, [r3, #16]
      client_info->ctx.magic_keyword = FUOTA_MAGIC_KEYWORD_COPRO_WIRELESS;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	4a21      	ldr	r2, [pc, #132]	; (800ae18 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xd8>)
 800ad92:	615a      	str	r2, [r3, #20]
      break;
 800ad94:	e00c      	b.n	800adb0 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0x70>
      
    case fileType_APP:
      client_info->ctx.base_address = FUOTA_APP_FW_BINARY_ADDRESS;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	4a1e      	ldr	r2, [pc, #120]	; (800ae14 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xd4>)
 800ad9a:	611a      	str	r2, [r3, #16]
      client_info->ctx.magic_keyword = FUOTA_MAGIC_KEYWORD_APP;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	4a1f      	ldr	r2, [pc, #124]	; (800ae1c <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xdc>)
 800ada0:	615a      	str	r2, [r3, #20]
      break;
 800ada2:	e005      	b.n	800adb0 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0x70>
      
    default:
      APP_DBG("[OTA] Error, unknown image type.\n");
 800ada4:	4a1e      	ldr	r2, [pc, #120]	; (800ae20 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xe0>)
 800ada6:	2101      	movs	r1, #1
 800ada8:	2000      	movs	r0, #0
 800adaa:	f7ff fd3d 	bl	800a828 <logApplication>
      return;
 800adae:	e028      	b.n	800ae02 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xc2>
  }
  client_info->requested_image_size = image_size;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
  client_info->ctx.binary_srv_crc = 0;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	2200      	movs	r2, #0
 800adbc:	60da      	str	r2, [r3, #12]
  client_info->ctx.binary_calc_crc = 0;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2200      	movs	r2, #0
 800adc2:	609a      	str	r2, [r3, #8]
  
  if(APP_ZIGBEE_CheckDeviceCapabilities() != APP_ZIGBEE_OK){
 800adc4:	f000 fc4c 	bl	800b660 <APP_ZIGBEE_CheckDeviceCapabilities>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0x9a>
    APP_DBG("[OTA] Not enough space. No download.\n");
 800adce:	4a15      	ldr	r2, [pc, #84]	; (800ae24 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xe4>)
 800add0:	2101      	movs	r1, #1
 800add2:	2000      	movs	r0, #0
 800add4:	f7ff fd28 	bl	800a828 <logApplication>
    return;
 800add8:	e013      	b.n	800ae02 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xc2>
  }

  APP_DBG("[OTA] For image type 0x%04x, %d byte(s) will be downloaded.", image_definition->image_type, image_size);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	885b      	ldrh	r3, [r3, #2]
 800adde:	461a      	mov	r2, r3
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	4613      	mov	r3, r2
 800ade6:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xe8>)
 800ade8:	2101      	movs	r1, #1
 800adea:	2000      	movs	r0, #0
 800adec:	f7ff fd1c 	bl	800a828 <logApplication>
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_OTA_START_DOWNLOAD, CFG_SCH_PRIO_0);
 800adf0:	2100      	movs	r1, #0
 800adf2:	2040      	movs	r0, #64	; 0x40
 800adf4:	f00c fd54 	bl	80178a0 <UTIL_SEQ_SetTask>
  APP_DBG("[OTA] Starting download.\n");
 800adf8:	4a0c      	ldr	r2, [pc, #48]	; (800ae2c <APP_ZIGBEE_OTA_Client_QueryNextImage_cb+0xec>)
 800adfa:	2101      	movs	r1, #1
 800adfc:	2000      	movs	r0, #0
 800adfe:	f7ff fd13 	bl	800a828 <logApplication>
}
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	08019578 	.word	0x08019578
 800ae0c:	080195b4 	.word	0x080195b4
 800ae10:	080195dc 	.word	0x080195dc
 800ae14:	08030000 	.word	0x08030000
 800ae18:	d3a12c5e 	.word	0xd3a12c5e
 800ae1c:	94448a29 	.word	0x94448a29
 800ae20:	08019600 	.word	0x08019600
 800ae24:	08019624 	.word	0x08019624
 800ae28:	0801964c 	.word	0x0801964c
 800ae2c:	08019688 	.word	0x08019688

0800ae30 <APP_ZIGBEE_OTA_Client_Crc_Calc>:
/**
 * @brief  OTA client Calc CRC for a payload 
 * @param  data: payload to calc
 * @param  size: length of payload
 */
static void APP_ZIGBEE_OTA_Client_Crc_Calc( struct Zigbee_OTA_client_info * client_info ) { 
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint8_t     modulo;
  uint16_t    index, size;
  uint32_t *  crc_data;
    
  // -- Prepare pointer & size --
  size = client_info->write_info.firmware_buffer_current_offset;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800ae3e:	82bb      	strh	r3, [r7, #20]
  crc_data = (uint32_t *)client_info->write_info.firmware_buffer;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3318      	adds	r3, #24
 800ae44:	613b      	str	r3, [r7, #16]
  modulo = size % 4u;
 800ae46:	8abb      	ldrh	r3, [r7, #20]
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	f003 0303 	and.w	r3, r3, #3
 800ae4e:	73fb      	strb	r3, [r7, #15]
  if ( modulo != 0u )
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d011      	beq.n	800ae7a <APP_ZIGBEE_OTA_Client_Crc_Calc+0x4a>
  {
      memset( &crc_data[size], 0, ( 4u - modulo ) );
 800ae56:	8abb      	ldrh	r3, [r7, #20]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	18d0      	adds	r0, r2, r3
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	f1c3 0304 	rsb	r3, r3, #4
 800ae64:	461a      	mov	r2, r3
 800ae66:	2100      	movs	r1, #0
 800ae68:	f00c fe74 	bl	8017b54 <memset>
      size  += ( 4u - modulo );
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	8aba      	ldrh	r2, [r7, #20]
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	3304      	adds	r3, #4
 800ae78:	82bb      	strh	r3, [r7, #20]
  }
  
  for ( index = 0; index < ( size / 4u ); index++ )
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	82fb      	strh	r3, [r7, #22]
 800ae7e:	e00c      	b.n	800ae9a <APP_ZIGBEE_OTA_Client_Crc_Calc+0x6a>
  {
    client_info->ctx.binary_calc_crc ^= crc_data[index];
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	689a      	ldr	r2, [r3, #8]
 800ae84:	8afb      	ldrh	r3, [r7, #22]
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	6939      	ldr	r1, [r7, #16]
 800ae8a:	440b      	add	r3, r1
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	405a      	eors	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	609a      	str	r2, [r3, #8]
  for ( index = 0; index < ( size / 4u ); index++ )
 800ae94:	8afb      	ldrh	r3, [r7, #22]
 800ae96:	3301      	adds	r3, #1
 800ae98:	82fb      	strh	r3, [r7, #22]
 800ae9a:	8abb      	ldrh	r3, [r7, #20]
 800ae9c:	089b      	lsrs	r3, r3, #2
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	8afa      	ldrh	r2, [r7, #22]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d3ec      	bcc.n	800ae80 <APP_ZIGBEE_OTA_Client_Crc_Calc+0x50>
  }
}
 800aea6:	bf00      	nop
 800aea8:	bf00      	nop
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <APP_ZIGBEE_OTA_Client_WriteImage_cb>:
 * @param  data: received chunk payload
 * @param  arg: Passed arg
 * @retval ZCL status code
 */
static enum ZclStatusCodeT APP_ZIGBEE_OTA_Client_WriteImage_cb(struct ZbZclClusterT *clusterPtr, struct ZbZclOtaHeader *header,
                                                               uint8_t length, uint8_t * data, void *arg){
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	4613      	mov	r3, r2
 800aebe:	71fb      	strb	r3, [r7, #7]
  static uint32_t current_offset = 0;
    
  struct Zigbee_OTA_client_info* client_info = (struct Zigbee_OTA_client_info*) arg;
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	61bb      	str	r3, [r7, #24]
  enum ZclStatusCodeT status = ZCL_STATUS_SUCCESS;
 800aec4:	2300      	movs	r3, #0
 800aec6:	75fb      	strb	r3, [r7, #23]
  uint8_t size = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	77fb      	strb	r3, [r7, #31]
  uint8_t remaining_size = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	77bb      	strb	r3, [r7, #30]
#ifdef OTA_DISPLAY_TIMING  
  static uint32_t  lStartTime = 0;
  uint32_t  lStopTime, lTime1, lTime2;
#endif // OTA_DISPLAY_TIMING
  current_offset += length;
 800aed0:	79fa      	ldrb	r2, [r7, #7]
 800aed2:	4b3a      	ldr	r3, [pc, #232]	; (800afbc <APP_ZIGBEE_OTA_Client_WriteImage_cb+0x10c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4413      	add	r3, r2
 800aed8:	4a38      	ldr	r2, [pc, #224]	; (800afbc <APP_ZIGBEE_OTA_Client_WriteImage_cb+0x10c>)
 800aeda:	6013      	str	r3, [r2, #0]
  size = length;
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	77fb      	strb	r3, [r7, #31]
  
  if(client_info->write_info.firmware_buffer_current_offset + size > RAM_FIRMWARE_BUFFER_SIZE){
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800aee6:	7ffb      	ldrb	r3, [r7, #31]
 800aee8:	4413      	add	r3, r2
 800aeea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeee:	d90e      	bls.n	800af0e <APP_ZIGBEE_OTA_Client_WriteImage_cb+0x5e>
    size = RAM_FIRMWARE_BUFFER_SIZE - client_info->write_info.firmware_buffer_current_offset;
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	425b      	negs	r3, r3
 800aefa:	77fb      	strb	r3, [r7, #31]
    remaining_size = length - size;
 800aefc:	79fa      	ldrb	r2, [r7, #7]
 800aefe:	7ffb      	ldrb	r3, [r7, #31]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	77bb      	strb	r3, [r7, #30]
    client_info->write_info.buffer_full = true;
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800af0c:	e00b      	b.n	800af26 <APP_ZIGBEE_OTA_Client_WriteImage_cb+0x76>
  } else if(client_info->write_info.firmware_buffer_current_offset+size == RAM_FIRMWARE_BUFFER_SIZE){
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800af14:	7ffb      	ldrb	r3, [r7, #31]
 800af16:	4413      	add	r3, r2
 800af18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af1c:	d103      	bne.n	800af26 <APP_ZIGBEE_OTA_Client_WriteImage_cb+0x76>
    client_info->write_info.buffer_full = true;
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  }
  
  memcpy((client_info->write_info.firmware_buffer+client_info->write_info.firmware_buffer_current_offset), data, size);
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	f103 0218 	add.w	r2, r3, #24
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800af32:	4413      	add	r3, r2
 800af34:	7ffa      	ldrb	r2, [r7, #31]
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	4618      	mov	r0, r3
 800af3a:	f00c fdfd 	bl	8017b38 <memcpy>
  client_info->write_info.firmware_buffer_current_offset += size;
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800af44:	7ffb      	ldrb	r3, [r7, #31]
 800af46:	441a      	add	r2, r3
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  
  if(client_info->write_info.buffer_full){
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800af54:	2b00      	cmp	r3, #0
 800af56:	d02b      	beq.n	800afb0 <APP_ZIGBEE_OTA_Client_WriteImage_cb+0x100>
#ifdef OTA_DISPLAY_TIMING
    lStopTime = HAL_GetTick();
#endif // OTA_DISPLAY_TIMING
    
    /* Write to Flash Memory */
    if ( APP_ZIGBEE_OTA_Client_WriteFirmwareData(client_info) != APP_ZIGBEE_OK ){
 800af58:	69b8      	ldr	r0, [r7, #24]
 800af5a:	f000 fa59 	bl	800b410 <APP_ZIGBEE_OTA_Client_WriteFirmwareData>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <APP_ZIGBEE_OTA_Client_WriteImage_cb+0xb8>
      return ZCL_STATUS_FAILURE;
 800af64:	2301      	movs	r3, #1
 800af66:	e024      	b.n	800afb2 <APP_ZIGBEE_OTA_Client_WriteImage_cb+0x102>
    /* Display Transfer Progress */
    lTime1 = lStopTime - lStartTime;
    lTime2 = ( HAL_GetTick() - lStopTime );
    APP_DBG("[OTA] FUOTA Transfer (current_offset = 0x%04X, load time = %d ms and save time = %d ms)", current_offset, lTime1, lTime2);
#else // OTA_DISPLAY_TIMING
    APP_DBG("[OTA] FUOTA Transfer (current_offset = 0x%04X)", current_offset);
 800af68:	4b14      	ldr	r3, [pc, #80]	; (800afbc <APP_ZIGBEE_OTA_Client_WriteImage_cb+0x10c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a14      	ldr	r2, [pc, #80]	; (800afc0 <APP_ZIGBEE_OTA_Client_WriteImage_cb+0x110>)
 800af6e:	2101      	movs	r1, #1
 800af70:	2000      	movs	r0, #0
 800af72:	f7ff fc59 	bl	800a828 <logApplication>
#endif // OTA_DISPLAY_TIMING
    
    // -- Calc CRC --
    APP_ZIGBEE_OTA_Client_Crc_Calc( client_info );
 800af76:	69b8      	ldr	r0, [r7, #24]
 800af78:	f7ff ff5a 	bl	800ae30 <APP_ZIGBEE_OTA_Client_Crc_Calc>
    
    memset(client_info->write_info.firmware_buffer, 0, RAM_FIRMWARE_BUFFER_SIZE);
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	3318      	adds	r3, #24
 800af80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af84:	2100      	movs	r1, #0
 800af86:	4618      	mov	r0, r3
 800af88:	f00c fde4 	bl	8017b54 <memset>
    memcpy(client_info->write_info.firmware_buffer, data+size, remaining_size);
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	f103 0018 	add.w	r0, r3, #24
 800af92:	7ffb      	ldrb	r3, [r7, #31]
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	4413      	add	r3, r2
 800af98:	7fba      	ldrb	r2, [r7, #30]
 800af9a:	4619      	mov	r1, r3
 800af9c:	f00c fdcc 	bl	8017b38 <memcpy>
    client_info->write_info.firmware_buffer_current_offset = remaining_size;
 800afa0:	7fba      	ldrb	r2, [r7, #30]
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    client_info->write_info.buffer_full = false;
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
#ifdef OTA_DISPLAY_TIMING    
    lStartTime = HAL_GetTick();
#endif // OTA_DISPLAY_TIMING
  }
  
  return status;
 800afb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3720      	adds	r7, #32
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	200009a0 	.word	0x200009a0
 800afc0:	080196a4 	.word	0x080196a4

0800afc4 <APP_ZIGBEE_OTA_Client_ImageValidate_cb>:
 * @param  clusterPtr: ZCL Cluster pointer
 * @param  header: ZCL OTA file format image header
 * @param  arg: Passed arg
 * @retval ZCL status code
 */
static enum ZclStatusCodeT APP_ZIGBEE_OTA_Client_ImageValidate_cb(struct ZbZclClusterT *clusterPtr, struct ZbZclOtaHeader *header, void *arg){
 800afc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afc8:	b08e      	sub	sp, #56	; 0x38
 800afca:	af02      	add	r7, sp, #8
 800afcc:	60f8      	str	r0, [r7, #12]
 800afce:	60b9      	str	r1, [r7, #8]
 800afd0:	607a      	str	r2, [r7, #4]
  struct Zigbee_OTA_client_info* client_info = (struct Zigbee_OTA_client_info*) arg;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	623b      	str	r3, [r7, #32]
  enum ZclStatusCodeT status = ZCL_STATUS_SUCCESS;
 800afd6:	2300      	movs	r3, #0
 800afd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint64_t last_double_word = 0;
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	f04f 0300 	mov.w	r3, #0
 800afe4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double l_transfer_throughput = 0;
 800afe8:	f04f 0200 	mov.w	r2, #0
 800afec:	f04f 0300 	mov.w	r3, #0
 800aff0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  uint32_t lTransfertThroughputInt, lTransfertThroughputDec;
  
  /* Download finished => stop Toggling of the LED */
  HW_TS_Stop(TS_ID_LED);
 800aff4:	4b80      	ldr	r3, [pc, #512]	; (800b1f8 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x234>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe fbff 	bl	80097fc <HW_TS_Stop>
  BSP_LED_Off(LED_GREEN);
 800affe:	2001      	movs	r0, #1
 800b000:	f001 ff02 	bl	800ce08 <BSP_LED_Off>
  APP_DBG("LED_GREEN OFF");
 800b004:	4a7d      	ldr	r2, [pc, #500]	; (800b1fc <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x238>)
 800b006:	2101      	movs	r1, #1
 800b008:	2000      	movs	r0, #0
 800b00a:	f7ff fc0d 	bl	800a828 <logApplication>
  
  /* Write the last RAM buffer to Flash */
  if(client_info->write_info.firmware_buffer_current_offset != 0){
 800b00e:	6a3b      	ldr	r3, [r7, #32]
 800b010:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b014:	2b00      	cmp	r3, #0
 800b016:	d006      	beq.n	800b026 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x62>
    /* Write to Flash Memory */
    APP_ZIGBEE_OTA_Client_WriteFirmwareData(client_info);
 800b018:	6a38      	ldr	r0, [r7, #32]
 800b01a:	f000 f9f9 	bl	800b410 <APP_ZIGBEE_OTA_Client_WriteFirmwareData>
    client_info->write_info.firmware_buffer_current_offset = 0;
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	2200      	movs	r2, #0
 800b022:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  }
  
  APP_DBG("**************************************************************\n");
 800b026:	4a76      	ldr	r2, [pc, #472]	; (800b200 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x23c>)
 800b028:	2101      	movs	r1, #1
 800b02a:	2000      	movs	r0, #0
 800b02c:	f7ff fbfc 	bl	800a828 <logApplication>
  APP_DBG("[OTA] Validating the image.");
 800b030:	4a74      	ldr	r2, [pc, #464]	; (800b204 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x240>)
 800b032:	2101      	movs	r1, #1
 800b034:	2000      	movs	r0, #0
 800b036:	f7ff fbf7 	bl	800a828 <logApplication>
  /* Finding the magic number */
  
  /* Last double word in Flash
   * => the magic if the firmware is valid
   */
  client_info->write_info.flash_current_offset -= 8;
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800b040:	f1a3 0208 	sub.w	r2, r3, #8
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  memcpy(&last_double_word, (void const*)(client_info->ctx.base_address + client_info->write_info.flash_current_offset), 8);
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	691a      	ldr	r2, [r3, #16]
 800b04e:	6a3b      	ldr	r3, [r7, #32]
 800b050:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800b054:	4413      	add	r3, r2
 800b056:	4619      	mov	r1, r3
 800b058:	f107 0310 	add.w	r3, r7, #16
 800b05c:	2208      	movs	r2, #8
 800b05e:	4618      	mov	r0, r3
 800b060:	f00c fd6a 	bl	8017b38 <memcpy>
  if(((last_double_word & 0x00000000FFFFFFFF) != client_info->ctx.magic_keyword)
 800b064:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b068:	4614      	mov	r4, r2
 800b06a:	2500      	movs	r5, #0
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	2200      	movs	r2, #0
 800b072:	469a      	mov	sl, r3
 800b074:	4693      	mov	fp, r2
 800b076:	455d      	cmp	r5, fp
 800b078:	bf08      	it	eq
 800b07a:	4554      	cmpeq	r4, sl
 800b07c:	d01b      	beq.n	800b0b6 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0xf2>
     && (((last_double_word & 0xFFFFFFFF00000000) >> 32) != client_info->ctx.magic_keyword)){
 800b07e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b082:	f04f 0200 	mov.w	r2, #0
 800b086:	f04f 0300 	mov.w	r3, #0
 800b08a:	000a      	movs	r2, r1
 800b08c:	2300      	movs	r3, #0
 800b08e:	6a39      	ldr	r1, [r7, #32]
 800b090:	6949      	ldr	r1, [r1, #20]
 800b092:	2000      	movs	r0, #0
 800b094:	4688      	mov	r8, r1
 800b096:	4681      	mov	r9, r0
 800b098:	454b      	cmp	r3, r9
 800b09a:	bf08      	it	eq
 800b09c:	4542      	cmpeq	r2, r8
 800b09e:	d00a      	beq.n	800b0b6 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0xf2>
    APP_DBG("[OTA] Wrong magic keyword: invalid firmware.\n");
 800b0a0:	4a59      	ldr	r2, [pc, #356]	; (800b208 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x244>)
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	f7ff fbbf 	bl	800a828 <logApplication>
    status = ZCL_STATUS_INVALID_IMAGE;
 800b0aa:	2396      	movs	r3, #150	; 0x96
 800b0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    return status;
 800b0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0b4:	e09a      	b.n	800b1ec <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x228>
  }
  
  APP_DBG("[OTA] The downloaded firmware is valid.\n");
 800b0b6:	4a55      	ldr	r2, [pc, #340]	; (800b20c <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x248>)
 800b0b8:	2101      	movs	r1, #1
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	f7ff fbb4 	bl	800a828 <logApplication>
  client_info->download_time = (HAL_GetTick()- client_info->download_time)/1000;
 800b0c0:	f002 f90a 	bl	800d2d8 <HAL_GetTick>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	4a50      	ldr	r2, [pc, #320]	; (800b210 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x24c>)
 800b0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d4:	099a      	lsrs	r2, r3, #6
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  l_transfer_throughput = (((double)client_info->requested_image_size/client_info->download_time) / 1000) * 8;
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fc fdf2 	bl	8007ccc <__aeabi_ui2d>
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	6a3b      	ldr	r3, [r7, #32]
 800b0ee:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fc fdea 	bl	8007ccc <__aeabi_ui2d>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	4629      	mov	r1, r5
 800b100:	f7fc ff88 	bl	8008014 <__aeabi_ddiv>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4610      	mov	r0, r2
 800b10a:	4619      	mov	r1, r3
 800b10c:	f04f 0200 	mov.w	r2, #0
 800b110:	4b40      	ldr	r3, [pc, #256]	; (800b214 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x250>)
 800b112:	f7fc ff7f 	bl	8008014 <__aeabi_ddiv>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4610      	mov	r0, r2
 800b11c:	4619      	mov	r1, r3
 800b11e:	f04f 0200 	mov.w	r2, #0
 800b122:	4b3d      	ldr	r3, [pc, #244]	; (800b218 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x254>)
 800b124:	f7fc fe4c 	bl	8007dc0 <__aeabi_dmul>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  lTransfertThroughputInt = (uint32_t)l_transfer_throughput;
 800b130:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b134:	f7fd f906 	bl	8008344 <__aeabi_d2uiz>
 800b138:	4603      	mov	r3, r0
 800b13a:	61fb      	str	r3, [r7, #28]
  lTransfertThroughputDec = (uint32_t)( ( l_transfer_throughput - lTransfertThroughputInt ) * 100 );
 800b13c:	69f8      	ldr	r0, [r7, #28]
 800b13e:	f7fc fdc5 	bl	8007ccc <__aeabi_ui2d>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b14a:	f7fc fc81 	bl	8007a50 <__aeabi_dsub>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4610      	mov	r0, r2
 800b154:	4619      	mov	r1, r3
 800b156:	f04f 0200 	mov.w	r2, #0
 800b15a:	4b30      	ldr	r3, [pc, #192]	; (800b21c <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x258>)
 800b15c:	f7fc fe30 	bl	8007dc0 <__aeabi_dmul>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	4610      	mov	r0, r2
 800b166:	4619      	mov	r1, r3
 800b168:	f7fd f8ec 	bl	8008344 <__aeabi_d2uiz>
 800b16c:	4603      	mov	r3, r0
 800b16e:	61bb      	str	r3, [r7, #24]
  
  APP_DBG("**************************************************************");
 800b170:	4a2b      	ldr	r2, [pc, #172]	; (800b220 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x25c>)
 800b172:	2101      	movs	r1, #1
 800b174:	2000      	movs	r0, #0
 800b176:	f7ff fb57 	bl	800a828 <logApplication>
  APP_DBG(" FUOTA : END OF TRANSFER COMPLETED");
 800b17a:	4a2a      	ldr	r2, [pc, #168]	; (800b224 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x260>)
 800b17c:	2101      	movs	r1, #1
 800b17e:	2000      	movs	r0, #0
 800b180:	f7ff fb52 	bl	800a828 <logApplication>
    
  if(client_info->image_type == IMAGE_TYPE_FW_COPRO_WIRELESS){
 800b184:	6a3b      	ldr	r3, [r7, #32]
 800b186:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d105      	bne.n	800b19a <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x1d6>
    APP_DBG("  - M0 wireless coprocessor firmware.");
 800b18e:	4a26      	ldr	r2, [pc, #152]	; (800b228 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x264>)
 800b190:	2101      	movs	r1, #1
 800b192:	2000      	movs	r0, #0
 800b194:	f7ff fb48 	bl	800a828 <logApplication>
 800b198:	e004      	b.n	800b1a4 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x1e0>
  } else {
    APP_DBG("  - M4 application firmware.");
 800b19a:	4a24      	ldr	r2, [pc, #144]	; (800b22c <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x268>)
 800b19c:	2101      	movs	r1, #1
 800b19e:	2000      	movs	r0, #0
 800b1a0:	f7ff fb42 	bl	800a828 <logApplication>
  }
  
  APP_DBG("  - %d bytes downloaded in %d seconds.",  client_info->requested_image_size, client_info->download_time);
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	4a1e      	ldr	r2, [pc, #120]	; (800b230 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x26c>)
 800b1b6:	2101      	movs	r1, #1
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	f7ff fb35 	bl	800a828 <logApplication>
  APP_DBG("  - Average throughput = %d.%d kbit/s.", lTransfertThroughputInt, lTransfertThroughputDec );
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4a1b      	ldr	r2, [pc, #108]	; (800b234 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x270>)
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	f7ff fb2d 	bl	800a828 <logApplication>
  APP_DBG("**************************************************************");
 800b1ce:	4a14      	ldr	r2, [pc, #80]	; (800b220 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x25c>)
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	f7ff fb28 	bl	800a828 <logApplication>
  
  BSP_LED_On(LED_GREEN);
 800b1d8:	2001      	movs	r0, #1
 800b1da:	f001 fdfb 	bl	800cdd4 <BSP_LED_On>
  APP_DBG("LED_GREEN ON");
 800b1de:	4a16      	ldr	r2, [pc, #88]	; (800b238 <APP_ZIGBEE_OTA_Client_ImageValidate_cb+0x274>)
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	f7ff fb20 	bl	800a828 <logApplication>
  
  return status;
 800b1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3730      	adds	r7, #48	; 0x30
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1f6:	bf00      	nop
 800b1f8:	2000099c 	.word	0x2000099c
 800b1fc:	080196d4 	.word	0x080196d4
 800b200:	080196e4 	.word	0x080196e4
 800b204:	08019724 	.word	0x08019724
 800b208:	08019740 	.word	0x08019740
 800b20c:	08019770 	.word	0x08019770
 800b210:	10624dd3 	.word	0x10624dd3
 800b214:	408f4000 	.word	0x408f4000
 800b218:	40200000 	.word	0x40200000
 800b21c:	40590000 	.word	0x40590000
 800b220:	0801979c 	.word	0x0801979c
 800b224:	080197dc 	.word	0x080197dc
 800b228:	08019800 	.word	0x08019800
 800b22c:	08019828 	.word	0x08019828
 800b230:	08019848 	.word	0x08019848
 800b234:	08019870 	.word	0x08019870
 800b238:	08019898 	.word	0x08019898

0800b23c <APP_ZIGBEE_OTA_Client_Reboot_cb>:
 * @brief  OTA client Reboot callback
 * @param  clusterPtr: ZCL Cluster pointer
 * @param  arg: Passed arg
 * @retval None
 */
static void APP_ZIGBEE_OTA_Client_Reboot_cb(struct ZbZclClusterT *clusterPtr, void *arg){
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  UNUSED(arg);
  
  APP_DBG("**************************************************************");
 800b246:	4a15      	ldr	r2, [pc, #84]	; (800b29c <APP_ZIGBEE_OTA_Client_Reboot_cb+0x60>)
 800b248:	2101      	movs	r1, #1
 800b24a:	2000      	movs	r0, #0
 800b24c:	f7ff faec 	bl	800a828 <logApplication>
  APP_DBG("[OTA] Rebooting.");
 800b250:	4a13      	ldr	r2, [pc, #76]	; (800b2a0 <APP_ZIGBEE_OTA_Client_Reboot_cb+0x64>)
 800b252:	2101      	movs	r1, #1
 800b254:	2000      	movs	r0, #0
 800b256:	f7ff fae7 	bl	800a828 <logApplication>
  
  APP_DBG("LED_BLUE OFF");
 800b25a:	4a12      	ldr	r2, [pc, #72]	; (800b2a4 <APP_ZIGBEE_OTA_Client_Reboot_cb+0x68>)
 800b25c:	2101      	movs	r1, #1
 800b25e:	2000      	movs	r0, #0
 800b260:	f7ff fae2 	bl	800a828 <logApplication>
  BSP_LED_Off(LED_BLUE);
 800b264:	2000      	movs	r0, #0
 800b266:	f001 fdcf 	bl	800ce08 <BSP_LED_Off>
  APP_DBG("LED_GREEN OFF");
 800b26a:	4a0f      	ldr	r2, [pc, #60]	; (800b2a8 <APP_ZIGBEE_OTA_Client_Reboot_cb+0x6c>)
 800b26c:	2101      	movs	r1, #1
 800b26e:	2000      	movs	r0, #0
 800b270:	f7ff fada 	bl	800a828 <logApplication>
  BSP_LED_Off(LED_GREEN);
 800b274:	2001      	movs	r0, #1
 800b276:	f001 fdc7 	bl	800ce08 <BSP_LED_Off>
  APP_DBG("**************************************************************\n");
 800b27a:	4a0c      	ldr	r2, [pc, #48]	; (800b2ac <APP_ZIGBEE_OTA_Client_Reboot_cb+0x70>)
 800b27c:	2101      	movs	r1, #1
 800b27e:	2000      	movs	r0, #0
 800b280:	f7ff fad2 	bl	800a828 <logApplication>
  
  HAL_Delay(100);
 800b284:	2064      	movs	r0, #100	; 0x64
 800b286:	f7fe ffbb 	bl	800a200 <HAL_Delay>
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_FUOTA_RESET, CFG_SCH_PRIO_0);
 800b28a:	2100      	movs	r1, #0
 800b28c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b290:	f00c fb06 	bl	80178a0 <UTIL_SEQ_SetTask>
}
 800b294:	bf00      	nop
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	0801979c 	.word	0x0801979c
 800b2a0:	080198a8 	.word	0x080198a8
 800b2a4:	080198bc 	.word	0x080198bc
 800b2a8:	080196d4 	.word	0x080196d4
 800b2ac:	080196e4 	.word	0x080196e4

0800b2b0 <APP_ZIGBEE_OTA_Client_AbortDownload_cb>:
 * @param  clusterPtr: ZCL Cluster pointer
 * @param  commandId: ZCL OTA command ID associated to the block transfer abortion
 * @param  arg: Passed arg
 * @retval ZCL status code
 */
static enum ZclStatusCodeT APP_ZIGBEE_OTA_Client_AbortDownload_cb(struct ZbZclClusterT *clusterPtr, enum ZbZclOtaCommandId commandId, void *arg){
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	607a      	str	r2, [r7, #4]
 800b2bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(arg);
  
  APP_DBG("[OTA] Aborting download.");
 800b2be:	4a0a      	ldr	r2, [pc, #40]	; (800b2e8 <APP_ZIGBEE_OTA_Client_AbortDownload_cb+0x38>)
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	f7ff fab0 	bl	800a828 <logApplication>
  HW_TS_Stop(TS_ID_LED);
 800b2c8:	4b08      	ldr	r3, [pc, #32]	; (800b2ec <APP_ZIGBEE_OTA_Client_AbortDownload_cb+0x3c>)
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fe fa95 	bl	80097fc <HW_TS_Stop>
  BSP_LED_Off(LED_GREEN);
 800b2d2:	2001      	movs	r0, #1
 800b2d4:	f001 fd98 	bl	800ce08 <BSP_LED_Off>
  BSP_LED_On(LED_RED);
 800b2d8:	2002      	movs	r0, #2
 800b2da:	f001 fd7b 	bl	800cdd4 <BSP_LED_On>
  
  return ZCL_STATUS_ABORT;
 800b2de:	2395      	movs	r3, #149	; 0x95
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	080198cc 	.word	0x080198cc
 800b2ec:	2000099c 	.word	0x2000099c

0800b2f0 <APP_ZIGBEE_OTA_Client_Request_Upgrade>:
/**
 * @brief  OTA client request upgrade
 * @param  None
 * @retval None
 */
static inline void APP_ZIGBEE_OTA_Client_Request_Upgrade(void){
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
  enum ZclStatusCodeT status;
  struct ZbZclOtaImageDefinition image_definition;
  
  APP_DBG("[OTA] Requesting an update.");
 800b2f6:	4a20      	ldr	r2, [pc, #128]	; (800b378 <APP_ZIGBEE_OTA_Client_Request_Upgrade+0x88>)
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	f7ff fa94 	bl	800a828 <logApplication>
  APP_DBG("[OTA] Image type: 0x%04x.", OTA_client_info.image_type);
 800b300:	4b1e      	ldr	r3, [pc, #120]	; (800b37c <APP_ZIGBEE_OTA_Client_Request_Upgrade+0x8c>)
 800b302:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 800b306:	4a1e      	ldr	r2, [pc, #120]	; (800b380 <APP_ZIGBEE_OTA_Client_Request_Upgrade+0x90>)
 800b308:	2101      	movs	r1, #1
 800b30a:	2000      	movs	r0, #0
 800b30c:	f7ff fa8c 	bl	800a828 <logApplication>
  APP_DBG("[OTA] Current file version: 0x%08x.\n", OTA_client_info.current_file_version);
 800b310:	4b1a      	ldr	r3, [pc, #104]	; (800b37c <APP_ZIGBEE_OTA_Client_Request_Upgrade+0x8c>)
 800b312:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800b316:	4a1b      	ldr	r2, [pc, #108]	; (800b384 <APP_ZIGBEE_OTA_Client_Request_Upgrade+0x94>)
 800b318:	2101      	movs	r1, #1
 800b31a:	2000      	movs	r0, #0
 800b31c:	f7ff fa84 	bl	800a828 <logApplication>
  
  /* Image definition configuration */
  memset(&image_definition, 0, sizeof(image_definition));
 800b320:	1d3b      	adds	r3, r7, #4
 800b322:	2208      	movs	r2, #8
 800b324:	2100      	movs	r1, #0
 800b326:	4618      	mov	r0, r3
 800b328:	f00c fc14 	bl	8017b54 <memset>
  image_definition.manufacturer_code = ST_ZIGBEE_MANUFACTURER_CODE;
 800b32c:	f241 0341 	movw	r3, #4161	; 0x1041
 800b330:	80bb      	strh	r3, [r7, #4]
  image_definition.image_type = OTA_client_info.image_type;
 800b332:	4b12      	ldr	r3, [pc, #72]	; (800b37c <APP_ZIGBEE_OTA_Client_Request_Upgrade+0x8c>)
 800b334:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 800b338:	80fb      	strh	r3, [r7, #6]
  image_definition.file_version = OTA_client_info.current_file_version;
 800b33a:	4b10      	ldr	r3, [pc, #64]	; (800b37c <APP_ZIGBEE_OTA_Client_Request_Upgrade+0x8c>)
 800b33c:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800b340:	60bb      	str	r3, [r7, #8]
  
  /* Sending Discovery request to server */
  APP_DBG("[OTA] Sending Query Next Image request.");
 800b342:	4a11      	ldr	r2, [pc, #68]	; (800b388 <APP_ZIGBEE_OTA_Client_Request_Upgrade+0x98>)
 800b344:	2101      	movs	r1, #1
 800b346:	2000      	movs	r0, #0
 800b348:	f7ff fa6e 	bl	800a828 <logApplication>
  /* HW version is provided as additional info in Query Next Image request */
  status = ZbZclOtaClientQueryNextImageReq(zigbee_app_info.ota_client, &image_definition, 
 800b34c:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <APP_ZIGBEE_OTA_Client_Request_Upgrade+0x9c>)
 800b34e:	6998      	ldr	r0, [r3, #24]
 800b350:	1d39      	adds	r1, r7, #4
 800b352:	2301      	movs	r3, #1
 800b354:	2201      	movs	r2, #1
 800b356:	f7f6 ff9d 	bl	8002294 <ZbZclOtaClientQueryNextImageReq>
 800b35a:	4603      	mov	r3, r0
 800b35c:	73fb      	strb	r3, [r7, #15]
                                           ZCL_OTA_QUERY_FIELD_CONTROL_HW_VERSION, CURRENT_HARDWARE_VERSION);
  if(status != ZCL_STATUS_SUCCESS){
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d004      	beq.n	800b36e <APP_ZIGBEE_OTA_Client_Request_Upgrade+0x7e>
    APP_DBG("ZbZclOtaClientDiscover failed.\n");
 800b364:	4a0a      	ldr	r2, [pc, #40]	; (800b390 <APP_ZIGBEE_OTA_Client_Request_Upgrade+0xa0>)
 800b366:	2101      	movs	r1, #1
 800b368:	2000      	movs	r0, #0
 800b36a:	f7ff fa5d 	bl	800a828 <logApplication>
  }
}
 800b36e:	bf00      	nop
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	080198e8 	.word	0x080198e8
 800b37c:	2000054c 	.word	0x2000054c
 800b380:	08019904 	.word	0x08019904
 800b384:	08019920 	.word	0x08019920
 800b388:	08019948 	.word	0x08019948
 800b38c:	20000980 	.word	0x20000980
 800b390:	08019970 	.word	0x08019970

0800b394 <APP_ZIGBEE_OTA_Client_StartDownload>:
/**
 * @brief  OTA client start download
 * @param  None
 * @retval None
 */
static inline void APP_ZIGBEE_OTA_Client_StartDownload(void){
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
  HW_TS_Start(TS_ID_LED, (uint32_t)LED_TOGGLE_TIMING);
 800b398:	4b09      	ldr	r3, [pc, #36]	; (800b3c0 <APP_ZIGBEE_OTA_Client_StartDownload+0x2c>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	21cc      	movs	r1, #204	; 0xcc
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fe fab0 	bl	8009904 <HW_TS_Start>
  OTA_client_info.download_time = HAL_GetTick();
 800b3a4:	f001 ff98 	bl	800d2d8 <HAL_GetTick>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	4a06      	ldr	r2, [pc, #24]	; (800b3c4 <APP_ZIGBEE_OTA_Client_StartDownload+0x30>)
 800b3ac:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  ZbZclOtaClientImageTransferStart(zigbee_app_info.ota_client);
 800b3b0:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <APP_ZIGBEE_OTA_Client_StartDownload+0x34>)
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7f6 fefc 	bl	80021b2 <ZbZclOtaClientImageTransferStart>
}
 800b3ba:	bf00      	nop
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	2000099c 	.word	0x2000099c
 800b3c4:	2000054c 	.word	0x2000054c
 800b3c8:	20000980 	.word	0x20000980

0800b3cc <APP_ZIGBEE_FindImageType>:
 * @brief  OTA Server find image type helper
 * @param  fileType: requested file type
 * @retval index value
 */
static inline int APP_ZIGBEE_FindImageType(unsigned int fileType)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
    for(unsigned int i=0; i<(sizeof(OTA_currentFileVersionTab)/sizeof(*OTA_currentFileVersionTab)); i++)
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	e00c      	b.n	800b3f4 <APP_ZIGBEE_FindImageType+0x28>
    {
        if(OTA_currentFileVersionTab[i].fileType == fileType){ return i; }
 800b3da:	4a0c      	ldr	r2, [pc, #48]	; (800b40c <APP_ZIGBEE_FindImageType+0x40>)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d101      	bne.n	800b3ee <APP_ZIGBEE_FindImageType+0x22>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	e007      	b.n	800b3fe <APP_ZIGBEE_FindImageType+0x32>
    for(unsigned int i=0; i<(sizeof(OTA_currentFileVersionTab)/sizeof(*OTA_currentFileVersionTab)); i++)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	60fb      	str	r3, [r7, #12]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d9ef      	bls.n	800b3da <APP_ZIGBEE_FindImageType+0xe>
    }
    return -1;
 800b3fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	0801a8d0 	.word	0x0801a8d0

0800b410 <APP_ZIGBEE_OTA_Client_WriteFirmwareData>:
/**
 * @brief  OTA client writing firmware data from internal RAM cache to flash
 * @param  client_info: OTA client internal structure
 * @retval Application status code
 */
static inline APP_ZIGBEE_StatusTypeDef APP_ZIGBEE_OTA_Client_WriteFirmwareData(struct Zigbee_OTA_client_info* client_info){
 800b410:	b580      	push	{r7, lr}
 800b412:	b08a      	sub	sp, #40	; 0x28
 800b414:	af04      	add	r7, sp, #16
 800b416:	6078      	str	r0, [r7, #4]
  uint64_t l_read64 = 0;
 800b418:	f04f 0200 	mov.w	r2, #0
 800b41c:	f04f 0300 	mov.w	r3, #0
 800b420:	e9c7 2302 	strd	r2, r3, [r7, #8]
  
  /* Write to Flash Memory */
  for(unsigned int flash_index = 0; flash_index < client_info->write_info.firmware_buffer_current_offset; flash_index+=8){
 800b424:	2300      	movs	r3, #0
 800b426:	617b      	str	r3, [r7, #20]
 800b428:	e06f      	b.n	800b50a <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0xfa>
    while( LL_HSEM_1StepLock( HSEM, CFG_HW_FLASH_SEMID ) );
 800b42a:	bf00      	nop
 800b42c:	2102      	movs	r1, #2
 800b42e:	483c      	ldr	r0, [pc, #240]	; (800b520 <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0x110>)
 800b430:	f7ff fb6e 	bl	800ab10 <LL_HSEM_1StepLock>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1f8      	bne.n	800b42c <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0x1c>
    HAL_FLASH_Unlock();
 800b43a:	f002 fd67 	bl	800df0c <HAL_FLASH_Unlock>
    while(LL_FLASH_IsActiveFlag_OperationSuspended());
 800b43e:	bf00      	nop
 800b440:	f7ff fb52 	bl	800aae8 <LL_FLASH_IsActiveFlag_OperationSuspended>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1fa      	bne.n	800b440 <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0x30>

    memcpy(&l_read64, &(client_info->write_info.firmware_buffer[flash_index]), 8);
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	3318      	adds	r3, #24
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	18d1      	adds	r1, r2, r3
 800b452:	f107 0308 	add.w	r3, r7, #8
 800b456:	2208      	movs	r2, #8
 800b458:	4618      	mov	r0, r3
 800b45a:	f00c fb6d 	bl	8017b38 <memcpy>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
        client_info->ctx.base_address + client_info->write_info.flash_current_offset,
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	691a      	ldr	r2, [r3, #16]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800b468:	18d1      	adds	r1, r2, r3
 800b46a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b46e:	2001      	movs	r0, #1
 800b470:	f002 fc64 	bl	800dd3c <HAL_FLASH_Program>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d12d      	bne.n	800b4d6 <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0xc6>
        l_read64) == HAL_OK)
    {
      /* Read back value for verification */
      l_read64 = 0;
 800b47a:	f04f 0200 	mov.w	r2, #0
 800b47e:	f04f 0300 	mov.w	r3, #0
 800b482:	e9c7 2302 	strd	r2, r3, [r7, #8]
      l_read64 = *(uint64_t*)(client_info->ctx.base_address + client_info->write_info.flash_current_offset);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	691a      	ldr	r2, [r3, #16]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800b490:	4413      	add	r3, r2
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	e9c7 2302 	strd	r2, r3, [r7, #8]
      if(l_read64 != (*(uint64_t*)(client_info->write_info.firmware_buffer+flash_index)))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f103 0218 	add.w	r2, r3, #24
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4ac:	4299      	cmp	r1, r3
 800b4ae:	bf08      	it	eq
 800b4b0:	4290      	cmpeq	r0, r2
 800b4b2:	d018      	beq.n	800b4e6 <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0xd6>
      {
        APP_DBG("FLASH: Comparison failed l_read64 = 0x%jx / ram_array = 0x%jx", 
 800b4b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	6979      	ldr	r1, [r7, #20]
 800b4bc:	4401      	add	r1, r0
 800b4be:	3118      	adds	r1, #24
 800b4c0:	7809      	ldrb	r1, [r1, #0]
 800b4c2:	9102      	str	r1, [sp, #8]
 800b4c4:	e9cd 2300 	strd	r2, r3, [sp]
 800b4c8:	4a16      	ldr	r2, [pc, #88]	; (800b524 <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0x114>)
 800b4ca:	2101      	movs	r1, #1
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	f7ff f9ab 	bl	800a828 <logApplication>
                l_read64, client_info->write_info.firmware_buffer[flash_index]);
        return APP_ZIGBEE_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e020      	b.n	800b518 <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0x108>
      }
    }
    else
    {
      APP_DBG("HAL_FLASH_Program FAILED at flash_index = %d", flash_index);
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	4a13      	ldr	r2, [pc, #76]	; (800b528 <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0x118>)
 800b4da:	2101      	movs	r1, #1
 800b4dc:	2000      	movs	r0, #0
 800b4de:	f7ff f9a3 	bl	800a828 <logApplication>
      return APP_ZIGBEE_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e018      	b.n	800b518 <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0x108>
    }

    HAL_FLASH_Lock();
 800b4e6:	f002 fd33 	bl	800df50 <HAL_FLASH_Lock>
    LL_HSEM_ReleaseLock( HSEM, CFG_HW_FLASH_SEMID, 0 );
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	2102      	movs	r1, #2
 800b4ee:	480c      	ldr	r0, [pc, #48]	; (800b520 <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0x110>)
 800b4f0:	f7ff fb26 	bl	800ab40 <LL_HSEM_ReleaseLock>
        
    client_info->write_info.flash_current_offset += 8;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800b4fa:	f103 0208 	add.w	r2, r3, #8
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  for(unsigned int flash_index = 0; flash_index < client_info->write_info.firmware_buffer_current_offset; flash_index+=8){
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	3308      	adds	r3, #8
 800b508:	617b      	str	r3, [r7, #20]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	429a      	cmp	r2, r3
 800b514:	d389      	bcc.n	800b42a <APP_ZIGBEE_OTA_Client_WriteFirmwareData+0x1a>
  }
  
  return APP_ZIGBEE_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3718      	adds	r7, #24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	58001400 	.word	0x58001400
 800b524:	08019990 	.word	0x08019990
 800b528:	080199d0 	.word	0x080199d0

0800b52c <GetFirstSecureSector>:
 * @brief  Getting flash first secure sector helper
 * @param  None
 * @retval First flash secure sector 
 */
static inline uint32_t GetFirstSecureSector(void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af02      	add	r7, sp, #8
  uint32_t first_secure_sector_idx, sfsa_field, sbrv_field, sbrv_field_sector;

  /* Read SFSA */
  sfsa_field = (READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos);
 800b532:	4b20      	ldr	r3, [pc, #128]	; (800b5b4 <GetFirstSecureSector+0x88>)
 800b534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	60fb      	str	r3, [r7, #12]
  APP_DBG("SFSA OB = 0x%x", sfsa_field);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4a1e      	ldr	r2, [pc, #120]	; (800b5b8 <GetFirstSecureSector+0x8c>)
 800b540:	2101      	movs	r1, #1
 800b542:	2000      	movs	r0, #0
 800b544:	f7ff f970 	bl	800a828 <logApplication>
  APP_DBG("SFSA Option Bytes set to sector = 0x%x (0x080%x)", sfsa_field, sfsa_field*4096);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	031b      	lsls	r3, r3, #12
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	4a1a      	ldr	r2, [pc, #104]	; (800b5bc <GetFirstSecureSector+0x90>)
 800b552:	2101      	movs	r1, #1
 800b554:	2000      	movs	r0, #0
 800b556:	f7ff f967 	bl	800a828 <logApplication>

  /* Read SBRV */
  /* Contains the word aligned CPU2 boot reset start address offset within the selected memory area by C2OPT. */
  sbrv_field = (READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) >> FLASH_SRRVR_SBRV_Pos);
 800b55a:	4b16      	ldr	r3, [pc, #88]	; (800b5b4 <GetFirstSecureSector+0x88>)
 800b55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b560:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800b564:	607b      	str	r3, [r7, #4]
  APP_DBG("SBRV OB = 0x%x", sbrv_field);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a15      	ldr	r2, [pc, #84]	; (800b5c0 <GetFirstSecureSector+0x94>)
 800b56a:	2101      	movs	r1, #1
 800b56c:	2000      	movs	r0, #0
 800b56e:	f7ff f95b 	bl	800a828 <logApplication>
  /* Divide sbrv_field by 1024 to be compared to SFSA value */
  sbrv_field_sector = sbrv_field / 1024;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	0a9b      	lsrs	r3, r3, #10
 800b576:	603b      	str	r3, [r7, #0]
  APP_DBG("SBRV Option Bytes set to sector = 0x%x (0x080%x)", sbrv_field_sector, sbrv_field*4);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	4a10      	ldr	r2, [pc, #64]	; (800b5c4 <GetFirstSecureSector+0x98>)
 800b582:	2101      	movs	r1, #1
 800b584:	2000      	movs	r0, #0
 800b586:	f7ff f94f 	bl	800a828 <logApplication>

  /* If SBRV is below SFSA then set first_secure_sector_idx to SBRV */
  if (sbrv_field_sector < sfsa_field)
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d202      	bcs.n	800b598 <GetFirstSecureSector+0x6c>
  {
    first_secure_sector_idx = sbrv_field_sector;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	60bb      	str	r3, [r7, #8]
 800b596:	e001      	b.n	800b59c <GetFirstSecureSector+0x70>
  }
  else
  {
    first_secure_sector_idx = sfsa_field;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	60bb      	str	r3, [r7, #8]
  }

  APP_DBG("first_secure_sector_idx = 0x%x", first_secure_sector_idx);
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	4a0a      	ldr	r2, [pc, #40]	; (800b5c8 <GetFirstSecureSector+0x9c>)
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	f7ff f940 	bl	800a828 <logApplication>

  return first_secure_sector_idx;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	58004000 	.word	0x58004000
 800b5b8:	08019a00 	.word	0x08019a00
 800b5bc:	08019a10 	.word	0x08019a10
 800b5c0:	08019a44 	.word	0x08019a44
 800b5c4:	08019a54 	.word	0x08019a54
 800b5c8:	08019a88 	.word	0x08019a88

0800b5cc <Delete_Sectors>:
 * @brief  Deleting non secure sectors helper
 * @param  None
 * @retval None
 */
static inline void Delete_Sectors( void )
{
 800b5cc:	b590      	push	{r4, r7, lr}
 800b5ce:	b08b      	sub	sp, #44	; 0x2c
 800b5d0:	af04      	add	r7, sp, #16

  uint32_t page_error;
  FLASH_EraseInitTypeDef p_erase_init;
  uint32_t first_secure_sector_idx;

  first_secure_sector_idx = GetFirstSecureSector();
 800b5d2:	f7ff ffab 	bl	800b52c <GetFirstSecureSector>
 800b5d6:	6178      	str	r0, [r7, #20]

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800b5d8:	2302      	movs	r3, #2
 800b5da:	607b      	str	r3, [r7, #4]
  p_erase_init.Page = *((uint8_t*) SRAM1_BASE + 1);
 800b5dc:	4b1d      	ldr	r3, [pc, #116]	; (800b654 <Delete_Sectors+0x88>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	60bb      	str	r3, [r7, #8]
  if(p_erase_init.Page < (CFG_APP_START_SECTOR_INDEX - 1))
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b5e6:	d805      	bhi.n	800b5f4 <Delete_Sectors+0x28>
  {
    /**
     * Something has been wrong as there is no case we should delete the OTA application
     * Reboot on the firmware application
     */
    *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_DOWNLOADED_FW;
 800b5e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	701a      	strb	r2, [r3, #0]
    NVIC_SystemReset();
 800b5f0:	f7ff fa64 	bl	800aabc <__NVIC_SystemReset>
  }
  p_erase_init.NbPages = *((uint8_t*) SRAM1_BASE + 2);
 800b5f4:	4b18      	ldr	r3, [pc, #96]	; (800b658 <Delete_Sectors+0x8c>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	60fb      	str	r3, [r7, #12]

  if ((p_erase_init.Page + p_erase_init.NbPages) > first_secure_sector_idx)
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	4413      	add	r3, r2
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	429a      	cmp	r2, r3
 800b604:	d203      	bcs.n	800b60e <Delete_Sectors+0x42>
  {
    p_erase_init.NbPages = first_secure_sector_idx - p_erase_init.Page;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	697a      	ldr	r2, [r7, #20]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	60fb      	str	r3, [r7, #12]
  }

  APP_DBG("Erase FLASH Memory from sector %d (0x080%x) to sector %d (0x080%x)", p_erase_init.Page, p_erase_init.Page*4096, p_erase_init.NbPages+p_erase_init.Page, (p_erase_init.NbPages+p_erase_init.Page)*4096);
 800b60e:	68bc      	ldr	r4, [r7, #8]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	031b      	lsls	r3, r3, #12
 800b614:	68f9      	ldr	r1, [r7, #12]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	440a      	add	r2, r1
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	68b9      	ldr	r1, [r7, #8]
 800b61e:	4401      	add	r1, r0
 800b620:	0309      	lsls	r1, r1, #12
 800b622:	9102      	str	r1, [sp, #8]
 800b624:	9201      	str	r2, [sp, #4]
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	4623      	mov	r3, r4
 800b62a:	4a0c      	ldr	r2, [pc, #48]	; (800b65c <Delete_Sectors+0x90>)
 800b62c:	2101      	movs	r1, #1
 800b62e:	2000      	movs	r0, #0
 800b630:	f7ff f8fa 	bl	800a828 <logApplication>

  HAL_FLASH_Unlock();
 800b634:	f002 fc6a 	bl	800df0c <HAL_FLASH_Unlock>

  HAL_FLASHEx_Erase(&p_erase_init, &page_error);
 800b638:	f107 0210 	add.w	r2, r7, #16
 800b63c:	1d3b      	adds	r3, r7, #4
 800b63e:	4611      	mov	r1, r2
 800b640:	4618      	mov	r0, r3
 800b642:	f002 fd35 	bl	800e0b0 <HAL_FLASHEx_Erase>

  HAL_FLASH_Lock();
 800b646:	f002 fc83 	bl	800df50 <HAL_FLASH_Lock>

  return;
 800b64a:	bf00      	nop
}
 800b64c:	371c      	adds	r7, #28
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd90      	pop	{r4, r7, pc}
 800b652:	bf00      	nop
 800b654:	20000001 	.word	0x20000001
 800b658:	20000002 	.word	0x20000002
 800b65c:	08019aa8 	.word	0x08019aa8

0800b660 <APP_ZIGBEE_CheckDeviceCapabilities>:
 * @brief  Getting available internal flash space size
 * @param  None
 * @retval Application status code
 */
static inline APP_ZIGBEE_StatusTypeDef APP_ZIGBEE_CheckDeviceCapabilities(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af02      	add	r7, sp, #8
  APP_ZIGBEE_StatusTypeDef status = APP_ZIGBEE_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	75fb      	strb	r3, [r7, #23]
  uint32_t first_sector_idx;
  uint32_t first_secure_sector_idx;
  uint32_t free_sectors;
  uint32_t free_size;

  APP_DBG("Check Device capabilities");
 800b66a:	4a29      	ldr	r2, [pc, #164]	; (800b710 <APP_ZIGBEE_CheckDeviceCapabilities+0xb0>)
 800b66c:	2101      	movs	r1, #1
 800b66e:	2000      	movs	r0, #0
 800b670:	f7ff f8da 	bl	800a828 <logApplication>

  first_secure_sector_idx = GetFirstSecureSector();
 800b674:	f7ff ff5a 	bl	800b52c <GetFirstSecureSector>
 800b678:	60f8      	str	r0, [r7, #12]

  first_sector_idx = *((uint8_t*) SRAM1_BASE + 1);
 800b67a:	4b26      	ldr	r3, [pc, #152]	; (800b714 <APP_ZIGBEE_CheckDeviceCapabilities+0xb4>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	613b      	str	r3, [r7, #16]
  if (first_sector_idx == 0)
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d106      	bne.n	800b694 <APP_ZIGBEE_CheckDeviceCapabilities+0x34>
  {
    APP_DBG("ERROR : SRAM1_BASE + 1 == 0");
 800b686:	4a24      	ldr	r2, [pc, #144]	; (800b718 <APP_ZIGBEE_CheckDeviceCapabilities+0xb8>)
 800b688:	2101      	movs	r1, #1
 800b68a:	2000      	movs	r0, #0
 800b68c:	f7ff f8cc 	bl	800a828 <logApplication>
    first_sector_idx = CFG_APP_START_SECTOR_INDEX;
 800b690:	2330      	movs	r3, #48	; 0x30
 800b692:	613b      	str	r3, [r7, #16]
  }
  APP_DBG("First available sector = %d (0x080%x)", first_sector_idx, first_sector_idx*4096);
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	031b      	lsls	r3, r3, #12
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	4a1f      	ldr	r2, [pc, #124]	; (800b71c <APP_ZIGBEE_CheckDeviceCapabilities+0xbc>)
 800b69e:	2101      	movs	r1, #1
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	f7ff f8c1 	bl	800a828 <logApplication>

  free_sectors = first_secure_sector_idx - first_sector_idx;
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	60bb      	str	r3, [r7, #8]
  free_size = free_sectors*4096;
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	031b      	lsls	r3, r3, #12
 800b6b2:	607b      	str	r3, [r7, #4]

  APP_DBG("free_sectors = %d , -> %d bytes of FLASH Free", free_sectors, free_size);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	4a19      	ldr	r2, [pc, #100]	; (800b720 <APP_ZIGBEE_CheckDeviceCapabilities+0xc0>)
 800b6bc:	2101      	movs	r1, #1
 800b6be:	2000      	movs	r0, #0
 800b6c0:	f7ff f8b2 	bl	800a828 <logApplication>

  APP_DBG("Server requests    : %d bytes", OTA_client_info.requested_image_size);
 800b6c4:	4b17      	ldr	r3, [pc, #92]	; (800b724 <APP_ZIGBEE_CheckDeviceCapabilities+0xc4>)
 800b6c6:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800b6ca:	4a17      	ldr	r2, [pc, #92]	; (800b728 <APP_ZIGBEE_CheckDeviceCapabilities+0xc8>)
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	f7ff f8aa 	bl	800a828 <logApplication>
  APP_DBG("Client Free memory : %d bytes", free_size);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a15      	ldr	r2, [pc, #84]	; (800b72c <APP_ZIGBEE_CheckDeviceCapabilities+0xcc>)
 800b6d8:	2101      	movs	r1, #1
 800b6da:	2000      	movs	r0, #0
 800b6dc:	f7ff f8a4 	bl	800a828 <logApplication>

  if (free_size < OTA_client_info.requested_image_size)
 800b6e0:	4b10      	ldr	r3, [pc, #64]	; (800b724 <APP_ZIGBEE_CheckDeviceCapabilities+0xc4>)
 800b6e2:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d207      	bcs.n	800b6fc <APP_ZIGBEE_CheckDeviceCapabilities+0x9c>
  {
    status = APP_ZIGBEE_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	75fb      	strb	r3, [r7, #23]
    APP_DBG("WARNING: Not enough Free Flash Memory available to download binary from Server!");
 800b6f0:	4a0f      	ldr	r2, [pc, #60]	; (800b730 <APP_ZIGBEE_CheckDeviceCapabilities+0xd0>)
 800b6f2:	2101      	movs	r1, #1
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	f7ff f897 	bl	800a828 <logApplication>
 800b6fa:	e004      	b.n	800b706 <APP_ZIGBEE_CheckDeviceCapabilities+0xa6>
  }
  else
  {
    APP_DBG("Device contains enough Flash Memory to download binary");
 800b6fc:	4a0d      	ldr	r2, [pc, #52]	; (800b734 <APP_ZIGBEE_CheckDeviceCapabilities+0xd4>)
 800b6fe:	2101      	movs	r1, #1
 800b700:	2000      	movs	r0, #0
 800b702:	f7ff f891 	bl	800a828 <logApplication>
  }

  return status;
 800b706:	7dfb      	ldrb	r3, [r7, #23]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3718      	adds	r7, #24
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	08019aec 	.word	0x08019aec
 800b714:	20000001 	.word	0x20000001
 800b718:	08019b08 	.word	0x08019b08
 800b71c:	08019b24 	.word	0x08019b24
 800b720:	08019b4c 	.word	0x08019b4c
 800b724:	2000054c 	.word	0x2000054c
 800b728:	08019b7c 	.word	0x08019b7c
 800b72c:	08019b9c 	.word	0x08019b9c
 800b730:	08019bbc 	.word	0x08019bbc
 800b734:	08019c0c 	.word	0x08019c0c

0800b738 <APP_ZIGBEE_PerformReset>:
 * @brief Task responsible for the reset at the end of OTA transfer.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_PerformReset(void)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	af00      	add	r7, sp, #0
  APP_DBG("*******************************************************");
 800b73c:	4a22      	ldr	r2, [pc, #136]	; (800b7c8 <APP_ZIGBEE_PerformReset+0x90>)
 800b73e:	2101      	movs	r1, #1
 800b740:	2000      	movs	r0, #0
 800b742:	f7ff f871 	bl	800a828 <logApplication>
  APP_DBG(" FUOTA_CLIENT : END OF TRANSFER COMPLETED");
 800b746:	4a21      	ldr	r2, [pc, #132]	; (800b7cc <APP_ZIGBEE_PerformReset+0x94>)
 800b748:	2101      	movs	r1, #1
 800b74a:	2000      	movs	r0, #0
 800b74c:	f7ff f86c 	bl	800a828 <logApplication>

  if (OTA_client_info.image_type == fileType_APP)
 800b750:	4b1f      	ldr	r3, [pc, #124]	; (800b7d0 <APP_ZIGBEE_PerformReset+0x98>)
 800b752:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 800b756:	2b02      	cmp	r3, #2
 800b758:	d112      	bne.n	800b780 <APP_ZIGBEE_PerformReset+0x48>
  {
    APP_DBG("  --> Request to reboot on FW Application");
 800b75a:	4a1e      	ldr	r2, [pc, #120]	; (800b7d4 <APP_ZIGBEE_PerformReset+0x9c>)
 800b75c:	2101      	movs	r1, #1
 800b75e:	2000      	movs	r0, #0
 800b760:	f7ff f862 	bl	800a828 <logApplication>
    APP_DBG("*******************************************************");
 800b764:	4a18      	ldr	r2, [pc, #96]	; (800b7c8 <APP_ZIGBEE_PerformReset+0x90>)
 800b766:	2101      	movs	r1, #1
 800b768:	2000      	movs	r0, #0
 800b76a:	f7ff f85d 	bl	800a828 <logApplication>
    
    /* Reboot on Downloaded FW Application */
    *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_DOWNLOADED_FW;
 800b76e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b772:	2200      	movs	r2, #0
 800b774:	701a      	strb	r2, [r3, #0]
    
    HAL_Delay(100);
 800b776:	2064      	movs	r0, #100	; 0x64
 800b778:	f7fe fd42 	bl	800a200 <HAL_Delay>
    NVIC_SystemReset();
 800b77c:	f7ff f99e 	bl	800aabc <__NVIC_SystemReset>
  }
  else 
  {
    if (OTA_client_info.image_type == fileType_COPRO_WIRELESS)
 800b780:	4b13      	ldr	r3, [pc, #76]	; (800b7d0 <APP_ZIGBEE_PerformReset+0x98>)
 800b782:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 800b786:	2b01      	cmp	r3, #1
 800b788:	d117      	bne.n	800b7ba <APP_ZIGBEE_PerformReset+0x82>
    {
      APP_DBG("  --> Request to reboot on FUS");
 800b78a:	4a13      	ldr	r2, [pc, #76]	; (800b7d8 <APP_ZIGBEE_PerformReset+0xa0>)
 800b78c:	2101      	movs	r1, #1
 800b78e:	2000      	movs	r0, #0
 800b790:	f7ff f84a 	bl	800a828 <logApplication>
      APP_DBG("*******************************************************");
 800b794:	4a0c      	ldr	r2, [pc, #48]	; (800b7c8 <APP_ZIGBEE_PerformReset+0x90>)
 800b796:	2101      	movs	r1, #1
 800b798:	2000      	movs	r0, #0
 800b79a:	f7ff f845 	bl	800a828 <logApplication>
      HAL_Delay(100);
 800b79e:	2064      	movs	r0, #100	; 0x64
 800b7a0:	f7fe fd2e 	bl	800a200 <HAL_Delay>
      
      /**
       * Wireless firmware update is requested
       * Request CPU2 to reboot on FUS by sending two FUS command
       */
      SHCI_C2_FUS_GetState( NULL );
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	f007 f82b 	bl	8012800 <SHCI_C2_FUS_GetState>
      SHCI_C2_FUS_GetState( NULL );
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	f007 f828 	bl	8012800 <SHCI_C2_FUS_GetState>
      while(1)
      {
        HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	f002 ff2e 	bl	800e614 <HAL_PWR_EnterSLEEPMode>
 800b7b8:	e7fa      	b.n	800b7b0 <APP_ZIGBEE_PerformReset+0x78>
      }
    }
    else
    {
      APP_DBG("APP_ZIGBEE_PerformReset: OtaContext.file_type not recognized");
 800b7ba:	4a08      	ldr	r2, [pc, #32]	; (800b7dc <APP_ZIGBEE_PerformReset+0xa4>)
 800b7bc:	2101      	movs	r1, #1
 800b7be:	2000      	movs	r0, #0
 800b7c0:	f7ff f832 	bl	800a828 <logApplication>
      return;
 800b7c4:	bf00      	nop
    }
  }
}
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	08019c44 	.word	0x08019c44
 800b7cc:	08019c7c 	.word	0x08019c7c
 800b7d0:	2000054c 	.word	0x2000054c
 800b7d4:	08019ca8 	.word	0x08019ca8
 800b7d8:	08019cd4 	.word	0x08019cd4
 800b7dc:	08019cf4 	.word	0x08019cf4

0800b7e0 <APP_ZIGBEE_LEDToggle>:
 * @brief  Application timer server callback (led toggling)
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_LEDToggle(void)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	af00      	add	r7, sp, #0
  BSP_LED_Toggle(LED_GREEN);
 800b7e4:	2001      	movs	r0, #1
 800b7e6:	f001 fb29 	bl	800ce3c <BSP_LED_Toggle>
}
 800b7ea:	bf00      	nop
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <APP_ZIGBEE_persist_notify_cb>:
 * @brief  notify to save persistent data callback
 * @param  zb: Zigbee device object pointer, cbarg: callback arg pointer
 * @retval None
 */
static void APP_ZIGBEE_persist_notify_cb(struct ZigBeeT *zb, void *cbarg)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  lTime1 = ( HAL_GetTick() - lPersistentStartTime );
  lPersistentStartTime = HAL_GetTick();
#endif // OTA_DISPLAY_TIMING   
  
  /* Save the persistent data */
  APP_DBG("Notification to save persistent data requested from stack.");
 800b7fa:	4a05      	ldr	r2, [pc, #20]	; (800b810 <APP_ZIGBEE_persist_notify_cb+0x20>)
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	2000      	movs	r0, #0
 800b800:	f7ff f812 	bl	800a828 <logApplication>
  APP_ZIGBEE_persist_save();
 800b804:	f000 f8e6 	bl	800b9d4 <APP_ZIGBEE_persist_save>
#ifdef OTA_DISPLAY_TIMING   
  lTime2 = ( HAL_GetTick() - lPersistentStartTime );
  lPersistentStartTime = HAL_GetTick();
  APP_DBG("Persistent Data: Interval Time : %d ms and Save Time : %d ms", lTime1, lTime2);
#endif // OTA_DISPLAY_TIMING 
}
 800b808:	bf00      	nop
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	08019d34 	.word	0x08019d34

0800b814 <APP_ZIGBEE_ZbStartupPersist>:
 * @brief  Start Zigbee Network from persistent data
 * @param  zb: Zigbee device object pointer
 * @retval Zigbee stack Status code
 */
static enum ZbStatusCodeT APP_ZIGBEE_ZbStartupPersist(struct ZigBeeT* zb)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b088      	sub	sp, #32
 800b818:	af02      	add	r7, sp, #8
 800b81a:	6078      	str	r0, [r7, #4]
   bool read_status;
   enum ZbStatusCodeT status = ZB_STATUS_SUCCESS;
 800b81c:	2300      	movs	r3, #0
 800b81e:	75bb      	strb	r3, [r7, #22]

   /* Restore persistence */
   read_status = APP_ZIGBEE_persist_load();
 800b820:	f000 f8ae 	bl	800b980 <APP_ZIGBEE_persist_load>
 800b824:	4603      	mov	r3, r0
 800b826:	75fb      	strb	r3, [r7, #23]
    
   if (read_status)
 800b828:	7dfb      	ldrb	r3, [r7, #23]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d025      	beq.n	800b87a <APP_ZIGBEE_ZbStartupPersist+0x66>
   {
       /* Make sure the EPID is cleared, before we are allowed to restore persistence */
       uint64_t epid = 0U;
 800b82e:	f04f 0200 	mov.w	r2, #0
 800b832:	f04f 0300 	mov.w	r3, #0
 800b836:	e9c7 2302 	strd	r2, r3, [r7, #8]
       ZbNwkSet(zb, ZB_NWK_NIB_ID_ExtendedPanId, &epid, sizeof(uint64_t));
 800b83a:	f107 0208 	add.w	r2, r7, #8
 800b83e:	2308      	movs	r3, #8
 800b840:	219a      	movs	r1, #154	; 0x9a
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f009 f943 	bl	8014ace <ZbNwkSet>
       
       /* Start-up from persistence */
       APP_DBG("APP_ZIGBEE_ZbStartupPersist: restoring stack persistence");
 800b848:	4a3e      	ldr	r2, [pc, #248]	; (800b944 <APP_ZIGBEE_ZbStartupPersist+0x130>)
 800b84a:	2101      	movs	r1, #1
 800b84c:	2000      	movs	r0, #0
 800b84e:	f7fe ffeb 	bl	800a828 <logApplication>
       status = ZbStartupPersist(zb, &cache_persistent_data.U8_data[ST_PERSIST_FLASH_DATA_OFFSET], cache_persistent_data.U32_data[0],NULL, NULL, NULL);
 800b852:	4b3d      	ldr	r3, [pc, #244]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	2300      	movs	r3, #0
 800b858:	9301      	str	r3, [sp, #4]
 800b85a:	2300      	movs	r3, #0
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	2300      	movs	r3, #0
 800b860:	493a      	ldr	r1, [pc, #232]	; (800b94c <APP_ZIGBEE_ZbStartupPersist+0x138>)
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f008 fbf6 	bl	8014054 <ZbStartupPersist>
 800b868:	4603      	mov	r3, r0
 800b86a:	75bb      	strb	r3, [r7, #22]
       if (status == ZB_STATUS_SUCCESS)
 800b86c:	7dbb      	ldrb	r3, [r7, #22]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <APP_ZIGBEE_ZbStartupPersist+0x74>
       {
         bPersistDataUsed = TRUE;
 800b872:	4b37      	ldr	r3, [pc, #220]	; (800b950 <APP_ZIGBEE_ZbStartupPersist+0x13c>)
 800b874:	2201      	movs	r2, #1
 800b876:	701a      	strb	r2, [r3, #0]
 800b878:	e006      	b.n	800b888 <APP_ZIGBEE_ZbStartupPersist+0x74>
       }
   }
   else
   {
       /* Failed to restart from persistence */ 
       APP_DBG("APP_ZIGBEE_ZbStartupPersist: no persistence data to restore");
 800b87a:	4a36      	ldr	r2, [pc, #216]	; (800b954 <APP_ZIGBEE_ZbStartupPersist+0x140>)
 800b87c:	2101      	movs	r1, #1
 800b87e:	2000      	movs	r0, #0
 800b880:	f7fe ffd2 	bl	800a828 <logApplication>
       status = ZB_STATUS_ALLOC_FAIL;
 800b884:	2370      	movs	r3, #112	; 0x70
 800b886:	75bb      	strb	r3, [r7, #22]
   }

   /* Only for debug purpose, depending of persistent data, following traces 
      could display bytes that are irrelevants to on off cluster */ 
   if (status == ZB_STATUS_SUCCESS)
 800b888:	7dbb      	ldrb	r3, [r7, #22]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d155      	bne.n	800b93a <APP_ZIGBEE_ZbStartupPersist+0x126>
   {
      /* read the last bytes of data where the ZCL on off persistent data shall be*/
      uint32_t len = cache_persistent_data.U32_data[0] + 4 ;
 800b88e:	4b2e      	ldr	r3, [pc, #184]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3304      	adds	r3, #4
 800b894:	613b      	str	r3, [r7, #16]
      APP_DBG("ClusterID %02x %02x",cache_persistent_data.U8_data[len-9],cache_persistent_data.U8_data[len-10]);
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	3b09      	subs	r3, #9
 800b89a:	4a2b      	ldr	r2, [pc, #172]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b89c:	5cd3      	ldrb	r3, [r2, r3]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	3b0a      	subs	r3, #10
 800b8a4:	4a28      	ldr	r2, [pc, #160]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b8a6:	5cd3      	ldrb	r3, [r2, r3]
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4a2a      	ldr	r2, [pc, #168]	; (800b958 <APP_ZIGBEE_ZbStartupPersist+0x144>)
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	f7fe ffb9 	bl	800a828 <logApplication>
      APP_DBG("Endpoint %02x %02x",cache_persistent_data.U8_data[len-7],cache_persistent_data.U8_data[len-8]);
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	3b07      	subs	r3, #7
 800b8ba:	4a23      	ldr	r2, [pc, #140]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b8bc:	5cd3      	ldrb	r3, [r2, r3]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	3b08      	subs	r3, #8
 800b8c4:	4a20      	ldr	r2, [pc, #128]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b8c6:	5cd3      	ldrb	r3, [r2, r3]
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	4a23      	ldr	r2, [pc, #140]	; (800b95c <APP_ZIGBEE_ZbStartupPersist+0x148>)
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	f7fe ffa9 	bl	800a828 <logApplication>
      APP_DBG("Direction %02x",cache_persistent_data.U8_data[len-6]);
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	3b06      	subs	r3, #6
 800b8da:	4a1b      	ldr	r2, [pc, #108]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b8dc:	5cd3      	ldrb	r3, [r2, r3]
 800b8de:	4a20      	ldr	r2, [pc, #128]	; (800b960 <APP_ZIGBEE_ZbStartupPersist+0x14c>)
 800b8e0:	2101      	movs	r1, #1
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	f7fe ffa0 	bl	800a828 <logApplication>
      APP_DBG("AttrID %02x %02x",cache_persistent_data.U8_data[len-4],cache_persistent_data.U8_data[len-5]);
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	3b04      	subs	r3, #4
 800b8ec:	4a16      	ldr	r2, [pc, #88]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b8ee:	5cd3      	ldrb	r3, [r2, r3]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	3b05      	subs	r3, #5
 800b8f6:	4a14      	ldr	r2, [pc, #80]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b8f8:	5cd3      	ldrb	r3, [r2, r3]
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4a19      	ldr	r2, [pc, #100]	; (800b964 <APP_ZIGBEE_ZbStartupPersist+0x150>)
 800b900:	2101      	movs	r1, #1
 800b902:	2000      	movs	r0, #0
 800b904:	f7fe ff90 	bl	800a828 <logApplication>
      APP_DBG("Len %02x %02x",cache_persistent_data.U8_data[len-2],cache_persistent_data.U8_data[len-3]);
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	3b02      	subs	r3, #2
 800b90c:	4a0e      	ldr	r2, [pc, #56]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b90e:	5cd3      	ldrb	r3, [r2, r3]
 800b910:	4619      	mov	r1, r3
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	3b03      	subs	r3, #3
 800b916:	4a0c      	ldr	r2, [pc, #48]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b918:	5cd3      	ldrb	r3, [r2, r3]
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	460b      	mov	r3, r1
 800b91e:	4a12      	ldr	r2, [pc, #72]	; (800b968 <APP_ZIGBEE_ZbStartupPersist+0x154>)
 800b920:	2101      	movs	r1, #1
 800b922:	2000      	movs	r0, #0
 800b924:	f7fe ff80 	bl	800a828 <logApplication>
      APP_DBG("Value %02x",cache_persistent_data.U8_data[len-1]);
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	3b01      	subs	r3, #1
 800b92c:	4a06      	ldr	r2, [pc, #24]	; (800b948 <APP_ZIGBEE_ZbStartupPersist+0x134>)
 800b92e:	5cd3      	ldrb	r3, [r2, r3]
 800b930:	4a0e      	ldr	r2, [pc, #56]	; (800b96c <APP_ZIGBEE_ZbStartupPersist+0x158>)
 800b932:	2101      	movs	r1, #1
 800b934:	2000      	movs	r0, #0
 800b936:	f7fe ff77 	bl	800a828 <logApplication>
   }
   
   return status;
 800b93a:	7dbb      	ldrb	r3, [r7, #22]
}/* APP_ZIGBEE_ZbStartupPersist */
 800b93c:	4618      	mov	r0, r3
 800b93e:	3718      	adds	r7, #24
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	08019d70 	.word	0x08019d70
 800b948:	20001cf4 	.word	0x20001cf4
 800b94c:	20001cfc 	.word	0x20001cfc
 800b950:	2000099f 	.word	0x2000099f
 800b954:	08019dac 	.word	0x08019dac
 800b958:	08019de8 	.word	0x08019de8
 800b95c:	08019dfc 	.word	0x08019dfc
 800b960:	08019e10 	.word	0x08019e10
 800b964:	08019e20 	.word	0x08019e20
 800b968:	08019e34 	.word	0x08019e34
 800b96c:	08019e44 	.word	0x08019e44

0800b970 <APP_ZIGBEE_PersistCompleted_callback>:
 * @brief  timer callback to wait end of restore cluster persistence form M0 
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_PersistCompleted_callback(void)
{
 800b970:	b480      	push	{r7}
 800b972:	af00      	add	r7, sp, #0
  /* No cluster attributes to restore */
}/* APP_ZIGBEE_PersistCompleted_callback */
 800b974:	bf00      	nop
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
	...

0800b980 <APP_ZIGBEE_persist_load>:
 * @brief  Load persistent data 
 * @param  None
 * @retval true if success, false if fail
 */
static bool APP_ZIGBEE_persist_load(void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
#ifdef CFG_NVM
    APP_DBG("Retrieving persistent data from FLASH");
 800b984:	4a0f      	ldr	r2, [pc, #60]	; (800b9c4 <APP_ZIGBEE_persist_load+0x44>)
 800b986:	2101      	movs	r1, #1
 800b988:	2000      	movs	r0, #0
 800b98a:	f7fe ff4d 	bl	800a828 <logApplication>
    if ( APP_ZIGBEE_NVM_Read() == false )
 800b98e:	f000 f8d1 	bl	800bb34 <APP_ZIGBEE_NVM_Read>
 800b992:	4603      	mov	r3, r0
 800b994:	f083 0301 	eor.w	r3, r3, #1
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <APP_ZIGBEE_persist_load+0x22>
    { 
      return false; 
 800b99e:	2300      	movs	r3, #0
 800b9a0:	e00e      	b.n	800b9c0 <APP_ZIGBEE_persist_load+0x40>
        return false;
    }
#endif /* CFG_NVM */
    
    /* Verify Tag */
    if ( cache_persistent_data.U32_data[1] != ST_PERSIST_TAG )
 800b9a2:	4b09      	ldr	r3, [pc, #36]	; (800b9c8 <APP_ZIGBEE_persist_load+0x48>)
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	4a09      	ldr	r2, [pc, #36]	; (800b9cc <APP_ZIGBEE_persist_load+0x4c>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d008      	beq.n	800b9be <APP_ZIGBEE_persist_load+0x3e>
    {
      APP_DBG("Bad Verification TAG in RAM : 0x%04X",cache_persistent_data.U32_data[1]);
 800b9ac:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <APP_ZIGBEE_persist_load+0x48>)
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	4a07      	ldr	r2, [pc, #28]	; (800b9d0 <APP_ZIGBEE_persist_load+0x50>)
 800b9b2:	2101      	movs	r1, #1
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	f7fe ff37 	bl	800a828 <logApplication>
      return false;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	e000      	b.n	800b9c0 <APP_ZIGBEE_persist_load+0x40>
    }
    
    return true;
 800b9be:	2301      	movs	r3, #1
} /* APP_ZIGBEE_persist_load */
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	08019e50 	.word	0x08019e50
 800b9c8:	20001cf4 	.word	0x20001cf4
 800b9cc:	cafedeca 	.word	0xcafedeca
 800b9d0:	08019e78 	.word	0x08019e78

0800b9d4 <APP_ZIGBEE_persist_save>:
 * @brief  Save persistent data 
 * @param  None
 * @retval true if success , false if fail
 */
static bool APP_ZIGBEE_persist_save(void)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af02      	add	r7, sp, #8
#ifdef OTA_DISPLAY_TIMING
    static union cache  szPersistentDataTemp = { 0, };
#endif // OTA_DISPLAY_TIMING

    /* Clear the RAM cache before saving */
    memset(cache_persistent_data.U8_data, 0x00, ST_PERSIST_MAX_ALLOC_BUFFER_SZ);
 800b9da:	f640 72a8 	movw	r2, #4008	; 0xfa8
 800b9de:	2100      	movs	r1, #0
 800b9e0:	4829      	ldr	r0, [pc, #164]	; (800ba88 <APP_ZIGBEE_persist_save+0xb4>)
 800b9e2:	f00c f8b7 	bl	8017b54 <memset>

    /* Call the satck API t get current persistent data */
    len = ZbPersistGet(zigbee_app_info.zb, 0, 0);
 800b9e6:	4b29      	ldr	r3, [pc, #164]	; (800ba8c <APP_ZIGBEE_persist_save+0xb8>)
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f008 fbc0 	bl	8014174 <ZbPersistGet>
 800b9f4:	6078      	str	r0, [r7, #4]
    
    /* Check Length range */
    if (len == 0U)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d106      	bne.n	800ba0a <APP_ZIGBEE_persist_save+0x36>
    {
        /* If the persistence length was zero then no data available. */
        APP_DBG("APP_ZIGBEE_persist_save: no persistence data to save !");
 800b9fc:	4a24      	ldr	r2, [pc, #144]	; (800ba90 <APP_ZIGBEE_persist_save+0xbc>)
 800b9fe:	2101      	movs	r1, #1
 800ba00:	2000      	movs	r0, #0
 800ba02:	f7fe ff11 	bl	800a828 <logApplication>
        return false;
 800ba06:	2300      	movs	r3, #0
 800ba08:	e039      	b.n	800ba7e <APP_ZIGBEE_persist_save+0xaa>
    }
    
    if (len > ST_PERSIST_MAX_ALLOC_SZ)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800ba10:	d907      	bls.n	800ba22 <APP_ZIGBEE_persist_save+0x4e>
    {
        /* if persistence length to big to store */
        APP_DBG("APP_ZIGBEE_persist_save: persist size too large for storage (%d)", len);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a1f      	ldr	r2, [pc, #124]	; (800ba94 <APP_ZIGBEE_persist_save+0xc0>)
 800ba16:	2101      	movs	r1, #1
 800ba18:	2000      	movs	r0, #0
 800ba1a:	f7fe ff05 	bl	800a828 <logApplication>
        return false;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	e02d      	b.n	800ba7e <APP_ZIGBEE_persist_save+0xaa>
    }

    /* Store in cache the persistent data */
    len = ZbPersistGet(zigbee_app_info.zb, &cache_persistent_data.U8_data[ST_PERSIST_FLASH_DATA_OFFSET], len);
 800ba22:	4b1a      	ldr	r3, [pc, #104]	; (800ba8c <APP_ZIGBEE_persist_save+0xb8>)
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	491b      	ldr	r1, [pc, #108]	; (800ba98 <APP_ZIGBEE_persist_save+0xc4>)
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f008 fba2 	bl	8014174 <ZbPersistGet>
 800ba30:	6078      	str	r0, [r7, #4]

    /* Store in cache the persistent data length */
    cache_persistent_data.U32_data[0] = len;
 800ba32:	4a15      	ldr	r2, [pc, #84]	; (800ba88 <APP_ZIGBEE_persist_save+0xb4>)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6013      	str	r3, [r2, #0]
    
    /* Store in cache the persistent verification Tag */
    cache_persistent_data.U32_data[1] = ST_PERSIST_TAG;
 800ba38:	4b13      	ldr	r3, [pc, #76]	; (800ba88 <APP_ZIGBEE_persist_save+0xb4>)
 800ba3a:	4a18      	ldr	r2, [pc, #96]	; (800ba9c <APP_ZIGBEE_persist_save+0xc8>)
 800ba3c:	605a      	str	r2, [r3, #4]
    if ( memcmp( szPersistentDataTemp.U8_data, cache_persistent_data.U8_data, ( len + 8 ) ) == 0 )
      { APP_DBG("APP_ZIGBEE_persist_save: This Persistence is same as previous"); }
    memcpy( szPersistentDataTemp.U8_data, cache_persistent_data.U8_data, (len + 8 ) );
#endif // OTA_DISPLAY_TIMING
    
    zigbee_app_info.persistNumWrites++;
 800ba3e:	4b13      	ldr	r3, [pc, #76]	; (800ba8c <APP_ZIGBEE_persist_save+0xb8>)
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	3301      	adds	r3, #1
 800ba44:	4a11      	ldr	r2, [pc, #68]	; (800ba8c <APP_ZIGBEE_persist_save+0xb8>)
 800ba46:	6113      	str	r3, [r2, #16]
    APP_DBG("APP_ZIGBEE_persist_save: Persistence written in cache RAM (num writes = %d) len=%d",
 800ba48:	4b10      	ldr	r3, [pc, #64]	; (800ba8c <APP_ZIGBEE_persist_save+0xb8>)
 800ba4a:	691a      	ldr	r2, [r3, #16]
 800ba4c:	4b0e      	ldr	r3, [pc, #56]	; (800ba88 <APP_ZIGBEE_persist_save+0xb4>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	4613      	mov	r3, r2
 800ba54:	4a12      	ldr	r2, [pc, #72]	; (800baa0 <APP_ZIGBEE_persist_save+0xcc>)
 800ba56:	2101      	movs	r1, #1
 800ba58:	2000      	movs	r0, #0
 800ba5a:	f7fe fee5 	bl	800a828 <logApplication>
             zigbee_app_info.persistNumWrites, cache_persistent_data.U32_data[0]);

#ifdef CFG_NVM
    if(!APP_ZIGBEE_NVM_Write())
 800ba5e:	f000 f8e5 	bl	800bc2c <APP_ZIGBEE_NVM_Write>
 800ba62:	4603      	mov	r3, r0
 800ba64:	f083 0301 	eor.w	r3, r3, #1
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <APP_ZIGBEE_persist_save+0x9e>
    {
      return false;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e005      	b.n	800ba7e <APP_ZIGBEE_persist_save+0xaa>
    }
    APP_DBG("APP_ZIGBEE_persist_save: Persistent data FLASHED");
 800ba72:	4a0c      	ldr	r2, [pc, #48]	; (800baa4 <APP_ZIGBEE_persist_save+0xd0>)
 800ba74:	2101      	movs	r1, #1
 800ba76:	2000      	movs	r0, #0
 800ba78:	f7fe fed6 	bl	800a828 <logApplication>
#endif /* CFG_NVM */
    
    return true;
 800ba7c:	2301      	movs	r3, #1
} /* APP_ZIGBEE_persist_save */
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20001cf4 	.word	0x20001cf4
 800ba8c:	20000980 	.word	0x20000980
 800ba90:	08019ea0 	.word	0x08019ea0
 800ba94:	08019ed8 	.word	0x08019ed8
 800ba98:	20001cfc 	.word	0x20001cfc
 800ba9c:	cafedeca 	.word	0xcafedeca
 800baa0:	08019f1c 	.word	0x08019f1c
 800baa4:	08019f70 	.word	0x08019f70

0800baa8 <APP_ZIGBEE_persist_delete>:
 * @brief  Delete persistent data 
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_persist_delete(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  /* Clear RAM cache */
  memset(cache_persistent_data.U8_data, 0x00, ST_PERSIST_MAX_ALLOC_BUFFER_SZ);
 800baac:	f640 72a8 	movw	r2, #4008	; 0xfa8
 800bab0:	2100      	movs	r1, #0
 800bab2:	480a      	ldr	r0, [pc, #40]	; (800badc <APP_ZIGBEE_persist_delete+0x34>)
 800bab4:	f00c f84e 	bl	8017b54 <memset>
  APP_DBG("Persistent Data RAM cache cleared");
 800bab8:	4a09      	ldr	r2, [pc, #36]	; (800bae0 <APP_ZIGBEE_persist_delete+0x38>)
 800baba:	2101      	movs	r1, #1
 800babc:	2000      	movs	r0, #0
 800babe:	f7fe feb3 	bl	800a828 <logApplication>
#ifdef CFG_NVM
  APP_DBG("FLASH ERASED");
 800bac2:	4a08      	ldr	r2, [pc, #32]	; (800bae4 <APP_ZIGBEE_persist_delete+0x3c>)
 800bac4:	2101      	movs	r1, #1
 800bac6:	2000      	movs	r0, #0
 800bac8:	f7fe feae 	bl	800a828 <logApplication>
  APP_ZIGBEE_NVM_Erase();
 800bacc:	f000 f914 	bl	800bcf8 <APP_ZIGBEE_NVM_Erase>
#endif /* CFG_NVM */
   
  // -- Reset Chip --
  *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_OTA_FW;
 800bad0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800bad4:	2201      	movs	r2, #1
 800bad6:	701a      	strb	r2, [r3, #0]
  NVIC_SystemReset();
 800bad8:	f7fe fff0 	bl	800aabc <__NVIC_SystemReset>
 800badc:	20001cf4 	.word	0x20001cf4
 800bae0:	08019fa4 	.word	0x08019fa4
 800bae4:	08019fc8 	.word	0x08019fc8

0800bae8 <APP_ZIGBEE_NVM_Init>:
 * @brief  Init the NVM 
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NVM_Init(void)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
  int eeprom_init_status;
  
  APP_DBG("Flash starting address = %x",HW_FLASH_ADDRESS  + CFG_NVM_BASE_ADDRESS);
 800baee:	4b0e      	ldr	r3, [pc, #56]	; (800bb28 <APP_ZIGBEE_NVM_Init+0x40>)
 800baf0:	4a0e      	ldr	r2, [pc, #56]	; (800bb2c <APP_ZIGBEE_NVM_Init+0x44>)
 800baf2:	2101      	movs	r1, #1
 800baf4:	2000      	movs	r0, #0
 800baf6:	f7fe fe97 	bl	800a828 <logApplication>
  eeprom_init_status = EE_Init( 0 , HW_FLASH_ADDRESS + CFG_NVM_BASE_ADDRESS );
 800bafa:	490b      	ldr	r1, [pc, #44]	; (800bb28 <APP_ZIGBEE_NVM_Init+0x40>)
 800bafc:	2000      	movs	r0, #0
 800bafe:	f00b f843 	bl	8016b88 <EE_Init>
 800bb02:	6078      	str	r0, [r7, #4]
 
  if (eeprom_init_status != EE_OK)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d004      	beq.n	800bb14 <APP_ZIGBEE_NVM_Init+0x2c>
  {
    /* format NVM since init failed */
    eeprom_init_status= EE_Init( 1, HW_FLASH_ADDRESS + CFG_NVM_BASE_ADDRESS );
 800bb0a:	4907      	ldr	r1, [pc, #28]	; (800bb28 <APP_ZIGBEE_NVM_Init+0x40>)
 800bb0c:	2001      	movs	r0, #1
 800bb0e:	f00b f83b 	bl	8016b88 <EE_Init>
 800bb12:	6078      	str	r0, [r7, #4]
  }
  APP_DBG("EE_init status = %d",eeprom_init_status);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a06      	ldr	r2, [pc, #24]	; (800bb30 <APP_ZIGBEE_NVM_Init+0x48>)
 800bb18:	2101      	movs	r1, #1
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	f7fe fe84 	bl	800a828 <logApplication>

} /* APP_ZIGBEE_NVM_Init */
 800bb20:	bf00      	nop
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	08020000 	.word	0x08020000
 800bb2c:	08019fd8 	.word	0x08019fd8
 800bb30:	08019ff4 	.word	0x08019ff4

0800bb34 <APP_ZIGBEE_NVM_Read>:
*@brief  Read the persistent data from NVM
* @param  None
* @retval true if success , false if failed
*/
static bool APP_ZIGBEE_NVM_Read(void)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
  uint16_t  num_words;
  uint16_t  num_bytes;
  uint16_t  iIndex;
  bool      status = true;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	73fb      	strb	r3, [r7, #15]
  int       ee_status = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	607b      	str	r3, [r7, #4]
  
  HAL_FLASH_Unlock();
 800bb42:	f002 f9e3 	bl	800df0c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR); 
 800bb46:	4b33      	ldr	r3, [pc, #204]	; (800bc14 <APP_ZIGBEE_NVM_Read+0xe0>)
 800bb48:	f248 0291 	movw	r2, #32913	; 0x8091
 800bb4c:	611a      	str	r2, [r3, #16]

  /* Read the data length from cache */
  ee_status = EE_Read(0, ZIGBEE_DB_START_ADDR, &cache_persistent_data.U32_data[0]);
 800bb4e:	4a32      	ldr	r2, [pc, #200]	; (800bc18 <APP_ZIGBEE_NVM_Read+0xe4>)
 800bb50:	2100      	movs	r1, #0
 800bb52:	2000      	movs	r0, #0
 800bb54:	f00b f84c 	bl	8016bf0 <EE_Read>
 800bb58:	6078      	str	r0, [r7, #4]
  if (ee_status != EE_OK)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d007      	beq.n	800bb70 <APP_ZIGBEE_NVM_Read+0x3c>
  {
    APP_DBG("Read -> persistent data length not found ERASE to be done - Read Stopped");
 800bb60:	4a2e      	ldr	r2, [pc, #184]	; (800bc1c <APP_ZIGBEE_NVM_Read+0xe8>)
 800bb62:	2101      	movs	r1, #1
 800bb64:	2000      	movs	r0, #0
 800bb66:	f7fe fe5f 	bl	800a828 <logApplication>
    status = false;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	73fb      	strb	r3, [r7, #15]
 800bb6e:	e040      	b.n	800bbf2 <APP_ZIGBEE_NVM_Read+0xbe>
  }
  else
  {
    /* Check length is not too big nor zero */
    num_bytes = cache_persistent_data.U32_data[0];
 800bb70:	4b29      	ldr	r3, [pc, #164]	; (800bc18 <APP_ZIGBEE_NVM_Read+0xe4>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	817b      	strh	r3, [r7, #10]
    if ( ( num_bytes == 0 ) || ( num_bytes > ST_PERSIST_MAX_ALLOC_SZ ) )
 800bb76:	897b      	ldrh	r3, [r7, #10]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <APP_ZIGBEE_NVM_Read+0x50>
 800bb7c:	897b      	ldrh	r3, [r7, #10]
 800bb7e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800bb82:	d908      	bls.n	800bb96 <APP_ZIGBEE_NVM_Read+0x62>
    {
      APP_DBG("No data or too large length : %d", num_bytes);
 800bb84:	897b      	ldrh	r3, [r7, #10]
 800bb86:	4a26      	ldr	r2, [pc, #152]	; (800bc20 <APP_ZIGBEE_NVM_Read+0xec>)
 800bb88:	2101      	movs	r1, #1
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	f7fe fe4c 	bl	800a828 <logApplication>
      status = false;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]
 800bb94:	e02d      	b.n	800bbf2 <APP_ZIGBEE_NVM_Read+0xbe>
    }
    else
    {
      /* Length is within range. Adjust the length to be U32 aligned */
      num_words = (uint16_t) ( num_bytes / 4 ) ;
 800bb96:	897b      	ldrh	r3, [r7, #10]
 800bb98:	089b      	lsrs	r3, r3, #2
 800bb9a:	813b      	strh	r3, [r7, #8]
      if ( cache_persistent_data.U32_data[0] % 4 != 0 )
 800bb9c:	4b1e      	ldr	r3, [pc, #120]	; (800bc18 <APP_ZIGBEE_NVM_Read+0xe4>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 0303 	and.w	r3, r3, #3
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <APP_ZIGBEE_NVM_Read+0x7a>
      {
        num_words++;
 800bba8:	893b      	ldrh	r3, [r7, #8]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	813b      	strh	r3, [r7, #8]
      }
      // -- Add the Verification Tag  --
      num_words++;
 800bbae:	893b      	ldrh	r3, [r7, #8]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	813b      	strh	r3, [r7, #8]

      /* copy the read data from Flash to cache including length */
      for ( iIndex = 1; iIndex <= num_words; iIndex++)
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	81bb      	strh	r3, [r7, #12]
 800bbb8:	e017      	b.n	800bbea <APP_ZIGBEE_NVM_Read+0xb6>
      {
        /* read data from first data in U32 unit */
        ee_status = EE_Read(0, iIndex + ZIGBEE_DB_START_ADDR, &cache_persistent_data.U32_data[iIndex] );
 800bbba:	89bb      	ldrh	r3, [r7, #12]
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4a16      	ldr	r2, [pc, #88]	; (800bc18 <APP_ZIGBEE_NVM_Read+0xe4>)
 800bbc0:	441a      	add	r2, r3
 800bbc2:	89bb      	ldrh	r3, [r7, #12]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	f00b f812 	bl	8016bf0 <EE_Read>
 800bbcc:	6078      	str	r0, [r7, #4]
        if (ee_status != EE_OK)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d007      	beq.n	800bbe4 <APP_ZIGBEE_NVM_Read+0xb0>
        {
          APP_DBG("Read not found leaving");
 800bbd4:	4a13      	ldr	r2, [pc, #76]	; (800bc24 <APP_ZIGBEE_NVM_Read+0xf0>)
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	2000      	movs	r0, #0
 800bbda:	f7fe fe25 	bl	800a828 <logApplication>
          status = false;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	73fb      	strb	r3, [r7, #15]
          break;
 800bbe2:	e006      	b.n	800bbf2 <APP_ZIGBEE_NVM_Read+0xbe>
      for ( iIndex = 1; iIndex <= num_words; iIndex++)
 800bbe4:	89bb      	ldrh	r3, [r7, #12]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	81bb      	strh	r3, [r7, #12]
 800bbea:	89ba      	ldrh	r2, [r7, #12]
 800bbec:	893b      	ldrh	r3, [r7, #8]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d9e3      	bls.n	800bbba <APP_ZIGBEE_NVM_Read+0x86>
        }
      }
    }
  }
    
  HAL_FLASH_Lock();
 800bbf2:	f002 f9ad 	bl	800df50 <HAL_FLASH_Lock>
  if(status)
 800bbf6:	7bfb      	ldrb	r3, [r7, #15]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d005      	beq.n	800bc08 <APP_ZIGBEE_NVM_Read+0xd4>
  {
    APP_DBG("READ PERSISTENT DATA LEN = %d", num_bytes);
 800bbfc:	897b      	ldrh	r3, [r7, #10]
 800bbfe:	4a0a      	ldr	r2, [pc, #40]	; (800bc28 <APP_ZIGBEE_NVM_Read+0xf4>)
 800bc00:	2101      	movs	r1, #1
 800bc02:	2000      	movs	r0, #0
 800bc04:	f7fe fe10 	bl	800a828 <logApplication>
  }
  
  return status;
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
} /* APP_ZIGBEE_NVM_Read */
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	58004000 	.word	0x58004000
 800bc18:	20001cf4 	.word	0x20001cf4
 800bc1c:	0801a008 	.word	0x0801a008
 800bc20:	0801a054 	.word	0x0801a054
 800bc24:	0801a078 	.word	0x0801a078
 800bc28:	0801a090 	.word	0x0801a090

0800bc2c <APP_ZIGBEE_NVM_Write>:
 * @brief  Write the persistent data in NVM
 * @param  None
 * @retval None
 */
static bool APP_ZIGBEE_NVM_Write(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af02      	add	r7, sp, #8
  int ee_status = 0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	603b      	str	r3, [r7, #0]
  uint16_t num_words;
  uint16_t iIndex;
    
  // -- Offset in Word for Length + Tag */
  num_words = ( ST_PERSIST_FLASH_DATA_OFFSET / 4u );
 800bc36:	2302      	movs	r3, #2
 800bc38:	80bb      	strh	r3, [r7, #4]
  num_words += (uint16_t) ( cache_persistent_data.U32_data[0] / 4u );
 800bc3a:	4b2a      	ldr	r3, [pc, #168]	; (800bce4 <APP_ZIGBEE_NVM_Write+0xb8>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	089b      	lsrs	r3, r3, #2
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	88bb      	ldrh	r3, [r7, #4]
 800bc44:	4413      	add	r3, r2
 800bc46:	80bb      	strh	r3, [r7, #4]
        
  /* Adjust the length to be U32 aligned */
  if ( cache_persistent_data.U32_data[0] % 4 != 0 )
 800bc48:	4b26      	ldr	r3, [pc, #152]	; (800bce4 <APP_ZIGBEE_NVM_Write+0xb8>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 0303 	and.w	r3, r3, #3
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <APP_ZIGBEE_NVM_Write+0x2e>
  {
    num_words++;
 800bc54:	88bb      	ldrh	r3, [r7, #4]
 800bc56:	3301      	adds	r3, #1
 800bc58:	80bb      	strh	r3, [r7, #4]
  }
    
  // -- Save data in flash --
  for ( iIndex = 0; iIndex < num_words; iIndex++ )
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	80fb      	strh	r3, [r7, #6]
 800bc5e:	e026      	b.n	800bcae <APP_ZIGBEE_NVM_Write+0x82>
  {
    ee_status = EE_Write(0, (uint16_t)iIndex + ZIGBEE_DB_START_ADDR, cache_persistent_data.U32_data[iIndex]);
 800bc60:	88fb      	ldrh	r3, [r7, #6]
 800bc62:	4a20      	ldr	r2, [pc, #128]	; (800bce4 <APP_ZIGBEE_NVM_Write+0xb8>)
 800bc64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bc68:	88fb      	ldrh	r3, [r7, #6]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	f00a ffd7 	bl	8016c20 <EE_Write>
 800bc72:	6038      	str	r0, [r7, #0]
    if (ee_status != EE_OK)
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d016      	beq.n	800bca8 <APP_ZIGBEE_NVM_Write+0x7c>
    {
      if (ee_status == EE_CLEAN_NEEDED) /* Shall not be there if CFG_EE_AUTO_CLEAN = 1*/
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d109      	bne.n	800bc94 <APP_ZIGBEE_NVM_Write+0x68>
      {
        APP_DBG("CLEAN NEEDED, CLEANING");
 800bc80:	4a19      	ldr	r2, [pc, #100]	; (800bce8 <APP_ZIGBEE_NVM_Write+0xbc>)
 800bc82:	2101      	movs	r1, #1
 800bc84:	2000      	movs	r0, #0
 800bc86:	f7fe fdcf 	bl	800a828 <logApplication>
        EE_Clean(0,0);
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	f00b f82d 	bl	8016cec <EE_Clean>
 800bc92:	e009      	b.n	800bca8 <APP_ZIGBEE_NVM_Write+0x7c>
      }
      else
      {
        /* Failed to write , an Erase shall be done */
        APP_DBG("APP_ZIGBEE_NVM_Write failed @ %d status %d", iIndex, ee_status);
 800bc94:	88fa      	ldrh	r2, [r7, #6]
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	4a13      	ldr	r2, [pc, #76]	; (800bcec <APP_ZIGBEE_NVM_Write+0xc0>)
 800bc9e:	2101      	movs	r1, #1
 800bca0:	2000      	movs	r0, #0
 800bca2:	f7fe fdc1 	bl	800a828 <logApplication>
        break;
 800bca6:	e006      	b.n	800bcb6 <APP_ZIGBEE_NVM_Write+0x8a>
  for ( iIndex = 0; iIndex < num_words; iIndex++ )
 800bca8:	88fb      	ldrh	r3, [r7, #6]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	80fb      	strh	r3, [r7, #6]
 800bcae:	88fa      	ldrh	r2, [r7, #6]
 800bcb0:	88bb      	ldrh	r3, [r7, #4]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d3d4      	bcc.n	800bc60 <APP_ZIGBEE_NVM_Write+0x34>
      }
    }
  }
     
  if(ee_status != EE_OK)
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d006      	beq.n	800bcca <APP_ZIGBEE_NVM_Write+0x9e>
  {
     APP_DBG("WRITE STOPPED, need a FLASH ERASE");
 800bcbc:	4a0c      	ldr	r2, [pc, #48]	; (800bcf0 <APP_ZIGBEE_NVM_Write+0xc4>)
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	f7fe fdb1 	bl	800a828 <logApplication>
     return false;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e007      	b.n	800bcda <APP_ZIGBEE_NVM_Write+0xae>
  }
    
  APP_DBG("WRITTEN PERSISTENT DATA LEN = %d", cache_persistent_data.U32_data[0]);
 800bcca:	4b06      	ldr	r3, [pc, #24]	; (800bce4 <APP_ZIGBEE_NVM_Write+0xb8>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a09      	ldr	r2, [pc, #36]	; (800bcf4 <APP_ZIGBEE_NVM_Write+0xc8>)
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	f7fe fda8 	bl	800a828 <logApplication>
  return true;
 800bcd8:	2301      	movs	r3, #1
} /* APP_ZIGBEE_NVM_Write */
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20001cf4 	.word	0x20001cf4
 800bce8:	0801a0b0 	.word	0x0801a0b0
 800bcec:	0801a0c8 	.word	0x0801a0c8
 800bcf0:	0801a0f4 	.word	0x0801a0f4
 800bcf4:	0801a118 	.word	0x0801a118

0800bcf8 <APP_ZIGBEE_NVM_Erase>:
 * @brief  Erase the NVM
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NVM_Erase(void)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	af00      	add	r7, sp, #0
   EE_Init(1, HW_FLASH_ADDRESS + CFG_NVM_BASE_ADDRESS); /* Erase Flash */
 800bcfc:	4902      	ldr	r1, [pc, #8]	; (800bd08 <APP_ZIGBEE_NVM_Erase+0x10>)
 800bcfe:	2001      	movs	r0, #1
 800bd00:	f00a ff42 	bl	8016b88 <EE_Init>
} /* APP_ZIGBEE_NVM_Erase */
 800bd04:	bf00      	nop
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	08020000 	.word	0x08020000

0800bd0c <APP_ZIGBEE_App_Init>:
/**
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_App_Init(void){
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	af00      	add	r7, sp, #0
  /* Tasks associated to OTA upgrade process */
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_ZIGBEE_OTA_REQUEST_UPGRADE, UTIL_SEQ_RFU, APP_ZIGBEE_OTA_Client_Request_Upgrade);
 800bd10:	4a0f      	ldr	r2, [pc, #60]	; (800bd50 <APP_ZIGBEE_App_Init+0x44>)
 800bd12:	2100      	movs	r1, #0
 800bd14:	2020      	movs	r0, #32
 800bd16:	f00b fda1 	bl	801785c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_ZIGBEE_OTA_START_DOWNLOAD, UTIL_SEQ_RFU, APP_ZIGBEE_OTA_Client_StartDownload);
 800bd1a:	4a0e      	ldr	r2, [pc, #56]	; (800bd54 <APP_ZIGBEE_App_Init+0x48>)
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	2040      	movs	r0, #64	; 0x40
 800bd20:	f00b fd9c 	bl	801785c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_ZIGBEE_OTA_SERVER_DISCOVERY, UTIL_SEQ_RFU, APP_ZIGBEE_OTA_Client_ServerDiscovery);
 800bd24:	4a0c      	ldr	r2, [pc, #48]	; (800bd58 <APP_ZIGBEE_App_Init+0x4c>)
 800bd26:	2100      	movs	r1, #0
 800bd28:	2080      	movs	r0, #128	; 0x80
 800bd2a:	f00b fd97 	bl	801785c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_FUOTA_RESET, UTIL_SEQ_RFU, APP_ZIGBEE_PerformReset);
 800bd2e:	4a0b      	ldr	r2, [pc, #44]	; (800bd5c <APP_ZIGBEE_App_Init+0x50>)
 800bd30:	2100      	movs	r1, #0
 800bd32:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bd36:	f00b fd91 	bl	801785c <UTIL_SEQ_RegTask>

  /* Timer associated to GREEN LED toggling */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &TS_ID_LED, hw_ts_Repeated, APP_ZIGBEE_LEDToggle);
 800bd3a:	4b09      	ldr	r3, [pc, #36]	; (800bd60 <APP_ZIGBEE_App_Init+0x54>)
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	4909      	ldr	r1, [pc, #36]	; (800bd64 <APP_ZIGBEE_App_Init+0x58>)
 800bd40:	2000      	movs	r0, #0
 800bd42:	f7fd fce1 	bl	8009708 <HW_TS_Create>
  
  /* Initialize Zigbee OTA Client parameters */
  APP_ZIGBEE_OTA_Client_Init();
 800bd46:	f000 f837 	bl	800bdb8 <APP_ZIGBEE_OTA_Client_Init>
} /* APP_ZIGBEE_App_Init */
 800bd4a:	bf00      	nop
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	0800b2f1 	.word	0x0800b2f1
 800bd54:	0800b395 	.word	0x0800b395
 800bd58:	0800bd69 	.word	0x0800bd69
 800bd5c:	0800b739 	.word	0x0800b739
 800bd60:	0800b7e1 	.word	0x0800b7e1
 800bd64:	2000099c 	.word	0x2000099c

0800bd68 <APP_ZIGBEE_OTA_Client_ServerDiscovery>:


static void APP_ZIGBEE_OTA_Client_ServerDiscovery( void )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
  enum ZclStatusCodeT   status;
  struct ZbApsAddrT     dst;
  
  /* Destination address configuration */
  memset(&dst, 0, sizeof(dst));
 800bd6e:	463b      	mov	r3, r7
 800bd70:	2210      	movs	r2, #16
 800bd72:	2100      	movs	r1, #0
 800bd74:	4618      	mov	r0, r3
 800bd76:	f00b feed 	bl	8017b54 <memset>
  dst.mode = ZB_APSDE_ADDRMODE_SHORT;
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	703b      	strb	r3, [r7, #0]
  dst.endpoint = SW1_ENDPOINT;
 800bd7e:	2311      	movs	r3, #17
 800bd80:	807b      	strh	r3, [r7, #2]
  dst.nwkAddr = 0x0;
 800bd82:	2300      	movs	r3, #0
 800bd84:	80fb      	strh	r3, [r7, #6]
  
  status = ZbZclOtaClientDiscover(zigbee_app_info.ota_client, &dst);
 800bd86:	4b0a      	ldr	r3, [pc, #40]	; (800bdb0 <APP_ZIGBEE_OTA_Client_ServerDiscovery+0x48>)
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	463a      	mov	r2, r7
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7f6 f981 	bl	8002096 <ZbZclOtaClientDiscover>
 800bd94:	4603      	mov	r3, r0
 800bd96:	75fb      	strb	r3, [r7, #23]
  if(status != ZCL_STATUS_SUCCESS)
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d004      	beq.n	800bda8 <APP_ZIGBEE_OTA_Client_ServerDiscovery+0x40>
  {
    APP_DBG("ZbZclOtaClientDiscover failed.\n");
 800bd9e:	4a05      	ldr	r2, [pc, #20]	; (800bdb4 <APP_ZIGBEE_OTA_Client_ServerDiscovery+0x4c>)
 800bda0:	2101      	movs	r1, #1
 800bda2:	2000      	movs	r0, #0
 800bda4:	f7fe fd40 	bl	800a828 <logApplication>
  }
}
 800bda8:	bf00      	nop
 800bdaa:	3718      	adds	r7, #24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	20000980 	.word	0x20000980
 800bdb4:	08019970 	.word	0x08019970

0800bdb8 <APP_ZIGBEE_OTA_Client_Init>:
 * @brief  OTA client initialization
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_OTA_Client_Init(void)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
  uint16_t  iShortAddress;
  
  /* Client info fields set to 0 */
  memset(&OTA_client_info, 0, sizeof(OTA_client_info));
 800bdbe:	f240 4234 	movw	r2, #1076	; 0x434
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	481f      	ldr	r0, [pc, #124]	; (800be44 <APP_ZIGBEE_OTA_Client_Init+0x8c>)
 800bdc6:	f00b fec5 	bl	8017b54 <memset>
  
  APP_DBG("Searching for OTA server.");
 800bdca:	4a1f      	ldr	r2, [pc, #124]	; (800be48 <APP_ZIGBEE_OTA_Client_Init+0x90>)
 800bdcc:	2101      	movs	r1, #1
 800bdce:	2000      	movs	r0, #0
 800bdd0:	f7fe fd2a 	bl	800a828 <logApplication>
  BSP_LED_On(LED_GREEN);
 800bdd4:	2001      	movs	r0, #1
 800bdd6:	f000 fffd 	bl	800cdd4 <BSP_LED_On>
  
  /* Requesting a discovery for any available OTA server */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_ZIGBEE_OTA_SERVER_DISCOVERY, CFG_SCH_PRIO_0 );
 800bdda:	2100      	movs	r1, #0
 800bddc:	2080      	movs	r0, #128	; 0x80
 800bdde:	f00b fd5f 	bl	80178a0 <UTIL_SEQ_SetTask>
  
  /* Wait a Discovery */
  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_OTA_SERVER_FOUND);
 800bde2:	2010      	movs	r0, #16
 800bde4:	f00b fda8 	bl	8017938 <UTIL_SEQ_WaitEvt>
  BSP_LED_Off(LED_GREEN);
 800bde8:	2001      	movs	r0, #1
 800bdea:	f001 f80d 	bl	800ce08 <BSP_LED_Off>
  
  /**
   * This is a safe clear in case the engi bytes are not all written
   * The error flag should be cleared before moving forward
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800bdee:	4b17      	ldr	r3, [pc, #92]	; (800be4c <APP_ZIGBEE_OTA_Client_Init+0x94>)
 800bdf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bdf4:	611a      	str	r2, [r3, #16]

  APP_DBG("Delete_Sectors");
 800bdf6:	4a16      	ldr	r2, [pc, #88]	; (800be50 <APP_ZIGBEE_OTA_Client_Init+0x98>)
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	f7fe fd14 	bl	800a828 <logApplication>
  Delete_Sectors();
 800be00:	f7ff fbe4 	bl	800b5cc <Delete_Sectors>
  
  BSP_LED_On(LED_BLUE);
 800be04:	2000      	movs	r0, #0
 800be06:	f000 ffe5 	bl	800cdd4 <BSP_LED_On>
  if ( bPersistDataUsed != FALSE )
 800be0a:	4b12      	ldr	r3, [pc, #72]	; (800be54 <APP_ZIGBEE_OTA_Client_Init+0x9c>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d002      	beq.n	800be18 <APP_ZIGBEE_OTA_Client_Init+0x60>
  {
    BSP_LED_On(LED_GREEN);
 800be12:	2001      	movs	r0, #1
 800be14:	f000 ffde 	bl	800cdd4 <BSP_LED_On>
  }
  
  iShortAddress = ZbShortAddress( zigbee_app_info.zb );
 800be18:	4b0f      	ldr	r3, [pc, #60]	; (800be58 <APP_ZIGBEE_OTA_Client_Init+0xa0>)
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f008 f895 	bl	8013f4c <ZbShortAddress>
 800be22:	4603      	mov	r3, r0
 800be24:	80fb      	strh	r3, [r7, #6]
  APP_DBG("OTA Client with Short Address 0x%04X.", iShortAddress );
 800be26:	88fb      	ldrh	r3, [r7, #6]
 800be28:	4a0c      	ldr	r2, [pc, #48]	; (800be5c <APP_ZIGBEE_OTA_Client_Init+0xa4>)
 800be2a:	2101      	movs	r1, #1
 800be2c:	2000      	movs	r0, #0
 800be2e:	f7fe fcfb 	bl	800a828 <logApplication>
  APP_DBG("OTA Client init done!\n");  
 800be32:	4a0b      	ldr	r2, [pc, #44]	; (800be60 <APP_ZIGBEE_OTA_Client_Init+0xa8>)
 800be34:	2101      	movs	r1, #1
 800be36:	2000      	movs	r0, #0
 800be38:	f7fe fcf6 	bl	800a828 <logApplication>
  
} /* APP_ZIGBEE_OTA_Client_Init */
 800be3c:	bf00      	nop
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	2000054c 	.word	0x2000054c
 800be48:	0801a13c 	.word	0x0801a13c
 800be4c:	58004000 	.word	0x58004000
 800be50:	0801a158 	.word	0x0801a158
 800be54:	2000099f 	.word	0x2000099f
 800be58:	20000980 	.word	0x20000980
 800be5c:	0801a168 	.word	0x0801a168
 800be60:	0801a190 	.word	0x0801a190

0800be64 <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 800be6a:	4a19      	ldr	r2, [pc, #100]	; (800bed0 <APP_ZIGBEE_Init+0x6c>)
 800be6c:	2101      	movs	r1, #1
 800be6e:	2000      	movs	r0, #0
 800be70:	f7fe fcda 	bl	800a828 <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 800be74:	f000 fa9c 	bl	800c3b0 <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 800be78:	4816      	ldr	r0, [pc, #88]	; (800bed4 <APP_ZIGBEE_Init+0x70>)
 800be7a:	f000 fb4d 	bl	800c518 <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 800be7e:	f000 fc07 	bl	800c690 <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 800be82:	4a15      	ldr	r2, [pc, #84]	; (800bed8 <APP_ZIGBEE_Init+0x74>)
 800be84:	2100      	movs	r1, #0
 800be86:	2001      	movs	r0, #1
 800be88:	f00b fce8 	bl	801785c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 800be8c:	4a13      	ldr	r2, [pc, #76]	; (800bedc <APP_ZIGBEE_Init+0x78>)
 800be8e:	2100      	movs	r1, #0
 800be90:	2002      	movs	r0, #2
 800be92:	f00b fce3 	bl	801785c <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 800be96:	4a12      	ldr	r2, [pc, #72]	; (800bee0 <APP_ZIGBEE_Init+0x7c>)
 800be98:	2100      	movs	r1, #0
 800be9a:	2008      	movs	r0, #8
 800be9c:	f00b fcde 	bl	801785c <UTIL_SEQ_RegTask>
  
  /* Task associated with push button SW2 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BUTTON_SW2, UTIL_SEQ_RFU, APP_ZIGBEE_SW2_Process); /* clear persistence */
 800bea0:	4a10      	ldr	r2, [pc, #64]	; (800bee4 <APP_ZIGBEE_Init+0x80>)
 800bea2:	2100      	movs	r1, #0
 800bea4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bea8:	f00b fcd8 	bl	801785c <UTIL_SEQ_RegTask>
  
  /* Task associated with application init */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_APP_START, UTIL_SEQ_RFU, APP_ZIGBEE_App_Init);
 800beac:	4a0e      	ldr	r2, [pc, #56]	; (800bee8 <APP_ZIGBEE_Init+0x84>)
 800beae:	2100      	movs	r1, #0
 800beb0:	2010      	movs	r0, #16
 800beb2:	f00b fcd3 	bl	801785c <UTIL_SEQ_RegTask>
  
  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 800beb6:	f006 fd08 	bl	80128ca <SHCI_C2_ZIGBEE_Init>
 800beba:	4603      	mov	r3, r0
 800bebc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);
  
    /* NVM Init */
#if CFG_NVM
  APP_ZIGBEE_NVM_Init(); 
 800bebe:	f7ff fe13 	bl	800bae8 <APP_ZIGBEE_NVM_Init>
#endif

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 800bec2:	f000 f813 	bl	800beec <APP_ZIGBEE_StackLayersInit>
} /* APP_ZIGBEE_Init */
 800bec6:	bf00      	nop
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	0801a1a8 	.word	0x0801a1a8
 800bed4:	20030838 	.word	0x20030838
 800bed8:	0800c6c1 	.word	0x0800c6c1
 800bedc:	0800c6f1 	.word	0x0800c6f1
 800bee0:	0800c111 	.word	0x0800c111
 800bee4:	0800c32d 	.word	0x0800c32d
 800bee8:	0800bd0d 	.word	0x0800bd0d

0800beec <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
  enum ZbStatusCodeT status;
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 800bef2:	4a3f      	ldr	r2, [pc, #252]	; (800bff0 <APP_ZIGBEE_StackLayersInit+0x104>)
 800bef4:	2101      	movs	r1, #1
 800bef6:	2000      	movs	r0, #0
 800bef8:	f7fe fc96 	bl	800a828 <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL); 
 800befc:	2300      	movs	r3, #0
 800befe:	2200      	movs	r2, #0
 800bf00:	f04f 0000 	mov.w	r0, #0
 800bf04:	f04f 0100 	mov.w	r1, #0
 800bf08:	f007 ff40 	bl	8013d8c <ZbInit>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	4a39      	ldr	r2, [pc, #228]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bf10:	6053      	str	r3, [r2, #4]
  assert(zigbee_app_info.zb != NULL);
 800bf12:	4b38      	ldr	r3, [pc, #224]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <APP_ZIGBEE_StackLayersInit+0x3c>
 800bf1a:	4b37      	ldr	r3, [pc, #220]	; (800bff8 <APP_ZIGBEE_StackLayersInit+0x10c>)
 800bf1c:	4a37      	ldr	r2, [pc, #220]	; (800bffc <APP_ZIGBEE_StackLayersInit+0x110>)
 800bf1e:	f240 515c 	movw	r1, #1372	; 0x55c
 800bf22:	4837      	ldr	r0, [pc, #220]	; (800c000 <APP_ZIGBEE_StackLayersInit+0x114>)
 800bf24:	f00b fd9e 	bl	8017a64 <__assert_func>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 800bf28:	f000 f876 	bl	800c018 <APP_ZIGBEE_ConfigEndpoints>

  BSP_LED_Off(LED_RED);
 800bf2c:	2002      	movs	r0, #2
 800bf2e:	f000 ff6b 	bl	800ce08 <BSP_LED_Off>
  BSP_LED_Off(LED_GREEN);
 800bf32:	2001      	movs	r0, #1
 800bf34:	f000 ff68 	bl	800ce08 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 800bf38:	2000      	movs	r0, #0
 800bf3a:	f000 ff65 	bl	800ce08 <BSP_LED_Off>

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 800bf3e:	4b2d      	ldr	r3, [pc, #180]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bf40:	2201      	movs	r2, #1
 800bf42:	721a      	strb	r2, [r3, #8]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 800bf44:	f001 f9c8 	bl	800d2d8 <HAL_GetTick>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	4a2a      	ldr	r2, [pc, #168]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bf4c:	60d3      	str	r3, [r2, #12]

  /* STEP 1 - TRY to START FROM PERSISTENCE */
  
/* define if we need to do a fresh start */
  zigbee_app_info.fresh_startup = true;
 800bf4e:	4b29      	ldr	r3, [pc, #164]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bf50:	2201      	movs	r2, #1
 800bf52:	751a      	strb	r2, [r3, #20]
  
  /* First we disable the persistent notification */
  ZbPersistNotifyRegister(zigbee_app_info.zb,NULL,NULL);
 800bf54:	4b27      	ldr	r3, [pc, #156]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f008 f8c5 	bl	80140ec <ZbPersistNotifyRegister>
 
  /* Call a startup from persistence */
  status = APP_ZIGBEE_ZbStartupPersist(zigbee_app_info.zb);
 800bf62:	4b24      	ldr	r3, [pc, #144]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff fc54 	bl	800b814 <APP_ZIGBEE_ZbStartupPersist>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	71fb      	strb	r3, [r7, #7]
  if(status == ZB_STATUS_SUCCESS)
 800bf70:	79fb      	ldrb	r3, [r7, #7]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d129      	bne.n	800bfca <APP_ZIGBEE_StackLayersInit+0xde>
  {
     /* no fresh stratup need anymore */
     zigbee_app_info.fresh_startup = false; 
 800bf76:	4b1f      	ldr	r3, [pc, #124]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	751a      	strb	r2, [r3, #20]
     APP_DBG("ZbStartupPersist: SUCCESS, restarted from persistence");
 800bf7c:	4a21      	ldr	r2, [pc, #132]	; (800c004 <APP_ZIGBEE_StackLayersInit+0x118>)
 800bf7e:	2101      	movs	r1, #1
 800bf80:	2000      	movs	r0, #0
 800bf82:	f7fe fc51 	bl	800a828 <logApplication>
     BSP_LED_On(LED_GREEN);
 800bf86:	2001      	movs	r0, #1
 800bf88:	f000 ff24 	bl	800cdd4 <BSP_LED_On>
    
     /* STEP 2 - Get the ZCL on off attribute restored from persistence */ 
     /* start a timer to wait M0 to complete Cluster persitence*/ 
     HW_TS_Create(CFG_TIM_WAIT_BEOFRE_READ_ATTR, &TS_ID1, hw_ts_SingleShot, APP_ZIGBEE_PersistCompleted_callback);
 800bf8c:	4b1e      	ldr	r3, [pc, #120]	; (800c008 <APP_ZIGBEE_StackLayersInit+0x11c>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	491e      	ldr	r1, [pc, #120]	; (800c00c <APP_ZIGBEE_StackLayersInit+0x120>)
 800bf92:	2001      	movs	r0, #1
 800bf94:	f7fd fbb8 	bl	8009708 <HW_TS_Create>
     HW_TS_Start(TS_ID1, 1000);
 800bf98:	4b1c      	ldr	r3, [pc, #112]	; (800c00c <APP_ZIGBEE_StackLayersInit+0x120>)
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fd fcaf 	bl	8009904 <HW_TS_Start>
     
     /* STEP3 - Activate back the persistent notification */
     /* Register Persistent data change notification */
     ZbPersistNotifyRegister(zigbee_app_info.zb,APP_ZIGBEE_persist_notify_cb,NULL);
 800bfa6:	4b13      	ldr	r3, [pc, #76]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	4918      	ldr	r1, [pc, #96]	; (800c010 <APP_ZIGBEE_StackLayersInit+0x124>)
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f008 f89c 	bl	80140ec <ZbPersistNotifyRegister>
                                                              
     /* Call the callback once here to save persistence data */
     APP_ZIGBEE_persist_notify_cb(zigbee_app_info.zb,NULL);
 800bfb4:	4b0f      	ldr	r3, [pc, #60]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	2100      	movs	r1, #0
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7ff fc18 	bl	800b7f0 <APP_ZIGBEE_persist_notify_cb>
     
     /* Call the ZIGBEE app init */
     UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_APP_START, CFG_SCH_PRIO_0);
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	2010      	movs	r0, #16
 800bfc4:	f00b fc6c 	bl	80178a0 <UTIL_SEQ_SetTask>
 800bfc8:	e005      	b.n	800bfd6 <APP_ZIGBEE_StackLayersInit+0xea>
  }
  else
  {
       /* Start-up form persistence failed perform a fresh ZbStartup */
       APP_DBG("ZbStartupPersist: FAILED to restart from persistence with status: 0x%02x",status);
 800bfca:	79fb      	ldrb	r3, [r7, #7]
 800bfcc:	4a11      	ldr	r2, [pc, #68]	; (800c014 <APP_ZIGBEE_StackLayersInit+0x128>)
 800bfce:	2101      	movs	r1, #1
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	f7fe fc29 	bl	800a828 <logApplication>
  }
  
  if(zigbee_app_info.fresh_startup)
 800bfd6:	4b07      	ldr	r3, [pc, #28]	; (800bff4 <APP_ZIGBEE_StackLayersInit+0x108>)
 800bfd8:	7d1b      	ldrb	r3, [r3, #20]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d003      	beq.n	800bfe6 <APP_ZIGBEE_StackLayersInit+0xfa>
  {
    /* Go for fresh start */
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800bfde:	2100      	movs	r1, #0
 800bfe0:	2008      	movs	r0, #8
 800bfe2:	f00b fc5d 	bl	80178a0 <UTIL_SEQ_SetTask>
  }
} /* APP_ZIGBEE_StackLayersInit */
 800bfe6:	bf00      	nop
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	0801a1b8 	.word	0x0801a1b8
 800bff4:	20000980 	.word	0x20000980
 800bff8:	0801a1d4 	.word	0x0801a1d4
 800bffc:	0801a8d4 	.word	0x0801a8d4
 800c000:	0801a1f0 	.word	0x0801a1f0
 800c004:	0801a24c 	.word	0x0801a24c
 800c008:	0800b971 	.word	0x0800b971
 800c00c:	2000099d 	.word	0x2000099d
 800c010:	0800b7f1 	.word	0x0800b7f1
 800c014:	0801a284 	.word	0x0801a284

0800c018 <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure Zigbee application endpoints
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b088      	sub	sp, #32
 800c01c:	af00      	add	r7, sp, #0
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  memset(&req, 0, sizeof(req));
 800c01e:	f107 0308 	add.w	r3, r7, #8
 800c022:	2218      	movs	r2, #24
 800c024:	2100      	movs	r1, #0
 800c026:	4618      	mov	r0, r3
 800c028:	f00b fd94 	bl	8017b54 <memset>
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 800c02c:	f44f 7382 	mov.w	r3, #260	; 0x104
 800c030:	817b      	strh	r3, [r7, #10]
  req.deviceId = ZCL_DEVICE_DATA_COLLECTION_UNIT;
 800c032:	2310      	movs	r3, #16
 800c034:	81bb      	strh	r3, [r7, #12]

  /* Endpoint: SW1_ENDPOINT */
  req.endpoint = SW1_ENDPOINT;
 800c036:	2311      	movs	r3, #17
 800c038:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 800c03a:	4b26      	ldr	r3, [pc, #152]	; (800c0d4 <APP_ZIGBEE_ConfigEndpoints+0xbc>)
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	1d3a      	adds	r2, r7, #4
 800c040:	f107 0108 	add.w	r1, r7, #8
 800c044:	4618      	mov	r0, r3
 800c046:	f008 fe65 	bl	8014d14 <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 800c04a:	793b      	ldrb	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d006      	beq.n	800c05e <APP_ZIGBEE_ConfigEndpoints+0x46>
 800c050:	4b21      	ldr	r3, [pc, #132]	; (800c0d8 <APP_ZIGBEE_ConfigEndpoints+0xc0>)
 800c052:	4a22      	ldr	r2, [pc, #136]	; (800c0dc <APP_ZIGBEE_ConfigEndpoints+0xc4>)
 800c054:	f240 51a7 	movw	r1, #1447	; 0x5a7
 800c058:	4821      	ldr	r0, [pc, #132]	; (800c0e0 <APP_ZIGBEE_ConfigEndpoints+0xc8>)
 800c05a:	f00b fd03 	bl	8017a64 <__assert_func>
  
  /* OTA client callbacks*/
  ZbZclOtaClientGetDefaultCallbacks(&client_config.callbacks);
 800c05e:	4821      	ldr	r0, [pc, #132]	; (800c0e4 <APP_ZIGBEE_ConfigEndpoints+0xcc>)
 800c060:	f7f5 fdd0 	bl	8001c04 <ZbZclOtaClientGetDefaultCallbacks>
  client_config.callbacks.discover_complete = APP_ZIGBEE_OTA_Client_DiscoverComplete_cb;
 800c064:	4b20      	ldr	r3, [pc, #128]	; (800c0e8 <APP_ZIGBEE_ConfigEndpoints+0xd0>)
 800c066:	4a21      	ldr	r2, [pc, #132]	; (800c0ec <APP_ZIGBEE_ConfigEndpoints+0xd4>)
 800c068:	66da      	str	r2, [r3, #108]	; 0x6c
  client_config.callbacks.image_notify = APP_ZIGBEE_OTA_Client_ImageNotify_cb;
 800c06a:	4b1f      	ldr	r3, [pc, #124]	; (800c0e8 <APP_ZIGBEE_ConfigEndpoints+0xd0>)
 800c06c:	4a20      	ldr	r2, [pc, #128]	; (800c0f0 <APP_ZIGBEE_ConfigEndpoints+0xd8>)
 800c06e:	671a      	str	r2, [r3, #112]	; 0x70
  client_config.callbacks.query_next = APP_ZIGBEE_OTA_Client_QueryNextImage_cb;
 800c070:	4b1d      	ldr	r3, [pc, #116]	; (800c0e8 <APP_ZIGBEE_ConfigEndpoints+0xd0>)
 800c072:	4a20      	ldr	r2, [pc, #128]	; (800c0f4 <APP_ZIGBEE_ConfigEndpoints+0xdc>)
 800c074:	675a      	str	r2, [r3, #116]	; 0x74
//  .callbacks.update_raw = APP_ZIGBEE_OTA_Client_UpdateRaw_cb;
//  client_config.callbacks.write_tag = APP_ZIGBEE_OTA_Client_WriteTag_cb;
  client_config.callbacks.write_image = APP_ZIGBEE_OTA_Client_WriteImage_cb; 
 800c076:	4b1c      	ldr	r3, [pc, #112]	; (800c0e8 <APP_ZIGBEE_ConfigEndpoints+0xd0>)
 800c078:	4a1f      	ldr	r2, [pc, #124]	; (800c0f8 <APP_ZIGBEE_ConfigEndpoints+0xe0>)
 800c07a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  client_config.callbacks.image_validate = APP_ZIGBEE_OTA_Client_ImageValidate_cb;
 800c07e:	4b1a      	ldr	r3, [pc, #104]	; (800c0e8 <APP_ZIGBEE_ConfigEndpoints+0xd0>)
 800c080:	4a1e      	ldr	r2, [pc, #120]	; (800c0fc <APP_ZIGBEE_ConfigEndpoints+0xe4>)
 800c082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//  client_config.callbacks.upgrade_end = APP_ZIGBEE_OTA_Client_UpgradeEnd_cb;
  client_config.callbacks.reboot = APP_ZIGBEE_OTA_Client_Reboot_cb;
 800c086:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <APP_ZIGBEE_ConfigEndpoints+0xd0>)
 800c088:	4a1d      	ldr	r2, [pc, #116]	; (800c100 <APP_ZIGBEE_ConfigEndpoints+0xe8>)
 800c08a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  client_config.callbacks.abort_download = APP_ZIGBEE_OTA_Client_AbortDownload_cb;
 800c08e:	4b16      	ldr	r3, [pc, #88]	; (800c0e8 <APP_ZIGBEE_ConfigEndpoints+0xd0>)
 800c090:	4a1c      	ldr	r2, [pc, #112]	; (800c104 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800c092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* OTA Client */
  zigbee_app_info.ota_client = ZbZclOtaClientAlloc(zigbee_app_info.zb, &client_config, &OTA_client_info);
 800c096:	4b0f      	ldr	r3, [pc, #60]	; (800c0d4 <APP_ZIGBEE_ConfigEndpoints+0xbc>)
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	4a1b      	ldr	r2, [pc, #108]	; (800c108 <APP_ZIGBEE_ConfigEndpoints+0xf0>)
 800c09c:	4912      	ldr	r1, [pc, #72]	; (800c0e8 <APP_ZIGBEE_ConfigEndpoints+0xd0>)
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7f5 fdc6 	bl	8001c30 <ZbZclOtaClientAlloc>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	4a0b      	ldr	r2, [pc, #44]	; (800c0d4 <APP_ZIGBEE_ConfigEndpoints+0xbc>)
 800c0a8:	6193      	str	r3, [r2, #24]
  assert(zigbee_app_info.ota_client != NULL);
 800c0aa:	4b0a      	ldr	r3, [pc, #40]	; (800c0d4 <APP_ZIGBEE_ConfigEndpoints+0xbc>)
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d106      	bne.n	800c0c0 <APP_ZIGBEE_ConfigEndpoints+0xa8>
 800c0b2:	4b16      	ldr	r3, [pc, #88]	; (800c10c <APP_ZIGBEE_ConfigEndpoints+0xf4>)
 800c0b4:	4a09      	ldr	r2, [pc, #36]	; (800c0dc <APP_ZIGBEE_ConfigEndpoints+0xc4>)
 800c0b6:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
 800c0ba:	4809      	ldr	r0, [pc, #36]	; (800c0e0 <APP_ZIGBEE_ConfigEndpoints+0xc8>)
 800c0bc:	f00b fcd2 	bl	8017a64 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.ota_client);
 800c0c0:	4b04      	ldr	r3, [pc, #16]	; (800c0d4 <APP_ZIGBEE_ConfigEndpoints+0xbc>)
 800c0c2:	699b      	ldr	r3, [r3, #24]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f008 ff52 	bl	8014f6e <ZbZclClusterEndpointRegister>

} /* APP_ZIGBEE_ConfigEndpoints */
 800c0ca:	bf00      	nop
 800c0cc:	3720      	adds	r7, #32
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20000980 	.word	0x20000980
 800c0d8:	0801a2d0 	.word	0x0801a2d0
 800c0dc:	0801a8f0 	.word	0x0801a8f0
 800c0e0:	0801a1f0 	.word	0x0801a1f0
 800c0e4:	20000074 	.word	0x20000074
 800c0e8:	20000008 	.word	0x20000008
 800c0ec:	0800ab69 	.word	0x0800ab69
 800c0f0:	0800abf1 	.word	0x0800abf1
 800c0f4:	0800ad41 	.word	0x0800ad41
 800c0f8:	0800aeb1 	.word	0x0800aeb1
 800c0fc:	0800afc5 	.word	0x0800afc5
 800c100:	0800b23d 	.word	0x0800b23d
 800c104:	0800b2b1 	.word	0x0800b2b1
 800c108:	2000054c 	.word	0x2000054c
 800c10c:	0801a2f4 	.word	0x0801a2f4

0800c110 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 800c110:	b590      	push	{r4, r7, lr}
 800c112:	b0f9      	sub	sp, #484	; 0x1e4
 800c114:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 800c116:	4b50      	ldr	r3, [pc, #320]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c118:	7a1b      	ldrb	r3, [r3, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d07e      	beq.n	800c21c <APP_ZIGBEE_NwkForm+0x10c>
 800c11e:	f001 f8db 	bl	800d2d8 <HAL_GetTick>
 800c122:	4602      	mov	r2, r0
 800c124:	4b4c      	ldr	r3, [pc, #304]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d377      	bcc.n	800c21c <APP_ZIGBEE_NwkForm+0x10c>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging (only need to do this once, but this is a good place to put it) */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 800c12c:	4b4a      	ldr	r3, [pc, #296]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	211f      	movs	r1, #31
 800c134:	4618      	mov	r0, r3
 800c136:	f007 fe7d 	bl	8013e34 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 800c13a:	463b      	mov	r3, r7
 800c13c:	4618      	mov	r0, r3
 800c13e:	f007 ff17 	bl	8013f70 <ZbStartupConfigGetProDefaults>

    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_ROUTER");
 800c142:	4a46      	ldr	r2, [pc, #280]	; (800c25c <APP_ZIGBEE_NwkForm+0x14c>)
 800c144:	2101      	movs	r1, #1
 800c146:	2000      	movs	r0, #0
 800c148:	f7fe fb6e 	bl	800a828 <logApplication>
    config.startupControl = ZbStartTypeJoin;
 800c14c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800c150:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c154:	2203      	movs	r2, #3
 800c156:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);   
 800c15a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800c15e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c162:	4a3f      	ldr	r2, [pc, #252]	; (800c260 <APP_ZIGBEE_NwkForm+0x150>)
 800c164:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800c168:	4613      	mov	r3, r2
 800c16a:	6818      	ldr	r0, [r3, #0]
 800c16c:	6859      	ldr	r1, [r3, #4]
 800c16e:	689a      	ldr	r2, [r3, #8]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    config.channelList.count = 1;
 800c174:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800c178:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c17c:	2201      	movs	r2, #1
 800c17e:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 800c180:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800c184:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c188:	2200      	movs	r2, #0
 800c18a:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /* Channel in use*/
 800c18c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800c190:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c194:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c198:	619a      	str	r2, [r3, #24]
    
    /* Using ZbStartupWait (blocking) here instead of ZbStartup, in order to demonstrate how to do
     * a blocking call on the M4. */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 800c19a:	4b2f      	ldr	r3, [pc, #188]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	463a      	mov	r2, r7
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 f87a 	bl	800c29c <ZbStartupWait>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 800c1ae:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800c1b2:	4a2c      	ldr	r2, [pc, #176]	; (800c264 <APP_ZIGBEE_NwkForm+0x154>)
 800c1b4:	2101      	movs	r1, #1
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	f7fe fb36 	bl	800a828 <logApplication>
    zigbee_app_info.join_status = status;
 800c1bc:	4a26      	ldr	r2, [pc, #152]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c1be:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800c1c2:	7213      	strb	r3, [r2, #8]

    if (status == ZB_STATUS_SUCCESS) {
 800c1c4:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d110      	bne.n	800c1ee <APP_ZIGBEE_NwkForm+0xde>
      zigbee_app_info.join_delay = 0U;
 800c1cc:	4b22      	ldr	r3, [pc, #136]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	60da      	str	r2, [r3, #12]
      
      ZbPersistNotifyRegister(zigbee_app_info.zb,APP_ZIGBEE_persist_notify_cb,NULL);
 800c1d2:	4b21      	ldr	r3, [pc, #132]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	4923      	ldr	r1, [pc, #140]	; (800c268 <APP_ZIGBEE_NwkForm+0x158>)
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f007 ff86 	bl	80140ec <ZbPersistNotifyRegister>
      /* Call the callback once here to save persistence data */
      APP_ZIGBEE_persist_notify_cb(zigbee_app_info.zb,NULL);
 800c1e0:	4b1d      	ldr	r3, [pc, #116]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7ff fb02 	bl	800b7f0 <APP_ZIGBEE_persist_notify_cb>
 800c1ec:	e016      	b.n	800c21c <APP_ZIGBEE_NwkForm+0x10c>
    }
    else
    {
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 800c1ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c1f2:	4a1e      	ldr	r2, [pc, #120]	; (800c26c <APP_ZIGBEE_NwkForm+0x15c>)
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	f7fe fb16 	bl	800a828 <logApplication>
      
      // -- Reset Zigbee to be sure that we re-start with a good setting --
      if ( status == ZB_NWK_STATUS_INVALID_REQUEST ) {
 800c1fc:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800c200:	2bc2      	cmp	r3, #194	; 0xc2
 800c202:	d104      	bne.n	800c20e <APP_ZIGBEE_NwkForm+0xfe>
        ZbReset( zigbee_app_info.zb );
 800c204:	4b14      	ldr	r3, [pc, #80]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	4618      	mov	r0, r3
 800c20a:	f007 ffe6 	bl	80141da <ZbReset>
      }
        
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 800c20e:	f001 f863 	bl	800d2d8 <HAL_GetTick>
 800c212:	4603      	mov	r3, r0
 800c214:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c218:	4a0f      	ldr	r2, [pc, #60]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c21a:	60d3      	str	r3, [r2, #12]
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 800c21c:	4b0e      	ldr	r3, [pc, #56]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c21e:	7a1b      	ldrb	r3, [r3, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d004      	beq.n	800c22e <APP_ZIGBEE_NwkForm+0x11e>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800c224:	2100      	movs	r1, #0
 800c226:	2008      	movs	r0, #8
 800c228:	f00b fb3a 	bl	80178a0 <UTIL_SEQ_SetTask>
    ZbNwkSet(zigbee_app_info.zb, ZB_NWK_NIB_ID_NetworkBroadcastDeliveryTime, &bcast_timeout, sizeof(bcast_timeout));
    
    /* Starting application init task */
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_APP_START, CFG_SCH_PRIO_0);
  }
} /* APP_ZIGBEE_NwkForm */
 800c22c:	e00e      	b.n	800c24c <APP_ZIGBEE_NwkForm+0x13c>
    uint32_t bcast_timeout = 3;
 800c22e:	2303      	movs	r3, #3
 800c230:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    ZbNwkSet(zigbee_app_info.zb, ZB_NWK_NIB_ID_NetworkBroadcastDeliveryTime, &bcast_timeout, sizeof(bcast_timeout));
 800c234:	4b08      	ldr	r3, [pc, #32]	; (800c258 <APP_ZIGBEE_NwkForm+0x148>)
 800c236:	6858      	ldr	r0, [r3, #4]
 800c238:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800c23c:	2304      	movs	r3, #4
 800c23e:	2188      	movs	r1, #136	; 0x88
 800c240:	f008 fc45 	bl	8014ace <ZbNwkSet>
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_APP_START, CFG_SCH_PRIO_0);
 800c244:	2100      	movs	r1, #0
 800c246:	2010      	movs	r0, #16
 800c248:	f00b fb2a 	bl	80178a0 <UTIL_SEQ_SetTask>
} /* APP_ZIGBEE_NwkForm */
 800c24c:	bf00      	nop
 800c24e:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 800c252:	46bd      	mov	sp, r7
 800c254:	bd90      	pop	{r4, r7, pc}
 800c256:	bf00      	nop
 800c258:	20000980 	.word	0x20000980
 800c25c:	0801a318 	.word	0x0801a318
 800c260:	0801a9e8 	.word	0x0801a9e8
 800c264:	0801a348 	.word	0x0801a348
 800c268:	0800b7f1 	.word	0x0800b7f1
 800c26c:	0801a370 	.word	0x0801a370

0800c270 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	6039      	str	r1, [r7, #0]
 800c27a:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	60fb      	str	r3, [r7, #12]

  info->status = status;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	79fa      	ldrb	r2, [r7, #7]
 800c284:	705a      	strb	r2, [r3, #1]
  info->active = false;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800c28c:	2008      	movs	r0, #8
 800c28e:	f00b fb33 	bl	80178f8 <UTIL_SEQ_SetEvt>
} /* ZbStartupWaitCb */
 800c292:	bf00      	nop
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
	...

0800c29c <ZbStartupWait>:

enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 800c2a6:	2002      	movs	r0, #2
 800c2a8:	f00b fc36 	bl	8017b18 <malloc>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	60fb      	str	r3, [r7, #12]
  if (info == NULL) {
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <ZbStartupWait+0x1e>
    return ZB_STATUS_ALLOC_FAIL;
 800c2b6:	2370      	movs	r3, #112	; 0x70
 800c2b8:	e021      	b.n	800c2fe <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	2100      	movs	r1, #0
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f00b fc48 	bl	8017b54 <memset>

  info->active = true;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	4a0e      	ldr	r2, [pc, #56]	; (800c308 <ZbStartupWait+0x6c>)
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f007 fe77 	bl	8013fc4 <ZbStartup>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS) {
 800c2da:	7afb      	ldrb	r3, [r7, #11]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d004      	beq.n	800c2ea <ZbStartupWait+0x4e>
    info->active = false;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	701a      	strb	r2, [r3, #0]
    return status;
 800c2e6:	7afb      	ldrb	r3, [r7, #11]
 800c2e8:	e009      	b.n	800c2fe <ZbStartupWait+0x62>
  }
  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800c2ea:	2008      	movs	r0, #8
 800c2ec:	f00b fb24 	bl	8017938 <UTIL_SEQ_WaitEvt>
  status = info->status;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	785b      	ldrb	r3, [r3, #1]
 800c2f4:	72fb      	strb	r3, [r7, #11]
  free(info);
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f00b fc16 	bl	8017b28 <free>
  return status;
 800c2fc:	7afb      	ldrb	r3, [r7, #11]
} /* ZbStartupWait */
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	0800c271 	.word	0x0800c271

0800c30c <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  switch (ErrId) {
  default:
    APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 800c316:	2100      	movs	r1, #0
 800c318:	4803      	ldr	r0, [pc, #12]	; (800c328 <APP_ZIGBEE_Error+0x1c>)
 800c31a:	f000 f823 	bl	800c364 <APP_ZIGBEE_TraceError>
    break;
 800c31e:	bf00      	nop
  }
} /* APP_ZIGBEE_Error */
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	0801a3b0 	.word	0x0801a3b0

0800c32c <APP_ZIGBEE_SW2_Process>:
 * @brief SW2 button pushed Clean NVM
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_SW2_Process(void)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	af00      	add	r7, sp, #0
  APP_DBG("SW2 PUSHED : Clearing NVM");
 800c330:	4a09      	ldr	r2, [pc, #36]	; (800c358 <APP_ZIGBEE_SW2_Process+0x2c>)
 800c332:	2101      	movs	r1, #1
 800c334:	2000      	movs	r0, #0
 800c336:	f7fe fa77 	bl	800a828 <logApplication>
  HW_TS_Create(CFG_TIM_WAIT_BEOFRE_READ_ATTR, &TS_ID2, hw_ts_SingleShot, APP_ZIGBEE_persist_delete);
 800c33a:	4b08      	ldr	r3, [pc, #32]	; (800c35c <APP_ZIGBEE_SW2_Process+0x30>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	4908      	ldr	r1, [pc, #32]	; (800c360 <APP_ZIGBEE_SW2_Process+0x34>)
 800c340:	2001      	movs	r0, #1
 800c342:	f7fd f9e1 	bl	8009708 <HW_TS_Create>
  HW_TS_Start(TS_ID2, 1000);
 800c346:	4b06      	ldr	r3, [pc, #24]	; (800c360 <APP_ZIGBEE_SW2_Process+0x34>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fd fad8 	bl	8009904 <HW_TS_Start>
}
 800c354:	bf00      	nop
 800c356:	bd80      	pop	{r7, pc}
 800c358:	0801a3c0 	.word	0x0801a3c0
 800c35c:	0800baa9 	.word	0x0800baa9
 800c360:	2000099e 	.word	0x2000099e

0800c364 <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af02      	add	r7, sp, #8
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4a0d      	ldr	r2, [pc, #52]	; (800c3ac <APP_ZIGBEE_TraceError+0x48>)
 800c376:	2101      	movs	r1, #1
 800c378:	2000      	movs	r0, #0
 800c37a:	f7fe fa55 	bl	800a828 <logApplication>
  while (1U == 1U) {
    BSP_LED_Toggle(LED1);
 800c37e:	2000      	movs	r0, #0
 800c380:	f000 fd5c 	bl	800ce3c <BSP_LED_Toggle>
    HAL_Delay(500U);
 800c384:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c388:	f7fd ff3a 	bl	800a200 <HAL_Delay>
    BSP_LED_Toggle(LED2);
 800c38c:	2001      	movs	r0, #1
 800c38e:	f000 fd55 	bl	800ce3c <BSP_LED_Toggle>
    HAL_Delay(500U);
 800c392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c396:	f7fd ff33 	bl	800a200 <HAL_Delay>
    BSP_LED_Toggle(LED3);
 800c39a:	2002      	movs	r0, #2
 800c39c:	f000 fd4e 	bl	800ce3c <BSP_LED_Toggle>
    HAL_Delay(500U);
 800c3a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c3a4:	f7fd ff2c 	bl	800a200 <HAL_Delay>
    BSP_LED_Toggle(LED1);
 800c3a8:	e7e9      	b.n	800c37e <APP_ZIGBEE_TraceError+0x1a>
 800c3aa:	bf00      	nop
 800c3ac:	0801a3dc 	.word	0x0801a3dc

0800c3b0 <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b098      	sub	sp, #96	; 0x60
 800c3b4:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 800c3b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c3ba:	657b      	str	r3, [r7, #84]	; 0x54

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success) {
 800c3bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c3be:	f006 fa97 	bl	80128f0 <SHCI_GetWirelessFwInfo>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d004      	beq.n	800c3d2 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	2002      	movs	r0, #2
 800c3cc:	f7ff ff9e 	bl	800c30c <APP_ZIGBEE_Error>
    //print clusters allocated
    APP_DBG("Clusters allocated are:");  
    APP_DBG("OTA Client on Endpoint %d",SW1_ENDPOINT);
    APP_DBG("**********************************************************");
  }
} /* APP_ZIGBEE_CheckWirelessFirmwareInfo */
 800c3d0:	e081      	b.n	800c4d6 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x126>
    APP_DBG("**********************************************************");
 800c3d2:	4a43      	ldr	r2, [pc, #268]	; (800c4e0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x130>)
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	f7fe fa26 	bl	800a828 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800c3dc:	4a41      	ldr	r2, [pc, #260]	; (800c4e4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>)
 800c3de:	2101      	movs	r1, #1
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	f7fe fa21 	bl	800a828 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800c3e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3ee:	785b      	ldrb	r3, [r3, #1]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3f4:	789b      	ldrb	r3, [r3, #2]
 800c3f6:	9301      	str	r3, [sp, #4]
 800c3f8:	9200      	str	r2, [sp, #0]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4a3a      	ldr	r2, [pc, #232]	; (800c4e8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x138>)
 800c3fe:	2101      	movs	r1, #1
 800c400:	2000      	movs	r0, #0
 800c402:	f7fe fa11 	bl	800a828 <logApplication>
    switch (p_wireless_info->StackType) {
 800c406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c408:	7a5b      	ldrb	r3, [r3, #9]
 800c40a:	2b30      	cmp	r3, #48	; 0x30
 800c40c:	d002      	beq.n	800c414 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x64>
 800c40e:	2b31      	cmp	r3, #49	; 0x31
 800c410:	d006      	beq.n	800c420 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x70>
 800c412:	e00b      	b.n	800c42c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x7c>
      APP_DBG("FW Type : FFD Zigbee stack");
 800c414:	4a35      	ldr	r2, [pc, #212]	; (800c4ec <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x13c>)
 800c416:	2101      	movs	r1, #1
 800c418:	2000      	movs	r0, #0
 800c41a:	f7fe fa05 	bl	800a828 <logApplication>
      break;
 800c41e:	e00a      	b.n	800c436 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
      APP_DBG("FW Type : RFD Zigbee stack");
 800c420:	4a33      	ldr	r2, [pc, #204]	; (800c4f0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x140>)
 800c422:	2101      	movs	r1, #1
 800c424:	2000      	movs	r0, #0
 800c426:	f7fe f9ff 	bl	800a828 <logApplication>
      break;
 800c42a:	e004      	b.n	800c436 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
      APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800c42c:	2101      	movs	r1, #1
 800c42e:	2002      	movs	r0, #2
 800c430:	f7ff ff6c 	bl	800c30c <APP_ZIGBEE_Error>
      break;
 800c434:	bf00      	nop
    char* __PathProject__ =(strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 800c436:	4b2f      	ldr	r3, [pc, #188]	; (800c4f4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x144>)
 800c438:	64fb      	str	r3, [r7, #76]	; 0x4c
        {del = strchr(__PathProject__, '/');}
 800c43a:	212f      	movs	r1, #47	; 0x2f
 800c43c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c43e:	f00c f819 	bl	8018474 <strchr>
 800c442:	64b8      	str	r0, [r7, #72]	; 0x48
        int index = (int) (del - __PathProject__);
 800c444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	647b      	str	r3, [r7, #68]	; 0x44
        APP_DBG("Application flashed: %*.*s",index,index,__PathProject__);
 800c44c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c44e:	9301      	str	r3, [sp, #4]
 800c450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c456:	4a28      	ldr	r2, [pc, #160]	; (800c4f8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 800c458:	2101      	movs	r1, #1
 800c45a:	2000      	movs	r0, #0
 800c45c:	f7fe f9e4 	bl	800a828 <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 800c460:	2313      	movs	r3, #19
 800c462:	4a26      	ldr	r2, [pc, #152]	; (800c4fc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x14c>)
 800c464:	2101      	movs	r1, #1
 800c466:	2000      	movs	r0, #0
 800c468:	f7fe f9de 	bl	800a828 <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 800c46c:	4b24      	ldr	r3, [pc, #144]	; (800c500 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 800c46e:	4a25      	ldr	r2, [pc, #148]	; (800c504 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 800c470:	2101      	movs	r1, #1
 800c472:	2000      	movs	r0, #0
 800c474:	f7fe f9d8 	bl	800a828 <logApplication>
    Z09_LL_string[0]=0;
 800c478:	2300      	movs	r3, #0
 800c47a:	703b      	strb	r3, [r7, #0]
    for(int str_index=0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800c47c:	2300      	movs	r3, #0
 800c47e:	653b      	str	r3, [r7, #80]	; 0x50
 800c480:	e010      	b.n	800c4a4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xf4>
        sprintf(&Z09_LL_string[str_index*3],"%02x ",sec_key_ha[str_index]);
 800c482:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c484:	4613      	mov	r3, r2
 800c486:	005b      	lsls	r3, r3, #1
 800c488:	4413      	add	r3, r2
 800c48a:	463a      	mov	r2, r7
 800c48c:	18d0      	adds	r0, r2, r3
 800c48e:	4a1c      	ldr	r2, [pc, #112]	; (800c500 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 800c490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c492:	4413      	add	r3, r2
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	461a      	mov	r2, r3
 800c498:	491b      	ldr	r1, [pc, #108]	; (800c508 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x158>)
 800c49a:	f00b ffcb 	bl	8018434 <siprintf>
    for(int str_index=0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800c49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	653b      	str	r3, [r7, #80]	; 0x50
 800c4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a6:	2b0f      	cmp	r3, #15
 800c4a8:	d9eb      	bls.n	800c482 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xd2>
    APP_DBG("Link Key value: %s",Z09_LL_string);
 800c4aa:	463b      	mov	r3, r7
 800c4ac:	4a17      	ldr	r2, [pc, #92]	; (800c50c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x15c>)
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	f7fe f9b9 	bl	800a828 <logApplication>
    APP_DBG("Clusters allocated are:");  
 800c4b6:	4a16      	ldr	r2, [pc, #88]	; (800c510 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x160>)
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	f7fe f9b4 	bl	800a828 <logApplication>
    APP_DBG("OTA Client on Endpoint %d",SW1_ENDPOINT);
 800c4c0:	2311      	movs	r3, #17
 800c4c2:	4a14      	ldr	r2, [pc, #80]	; (800c514 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x164>)
 800c4c4:	2101      	movs	r1, #1
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	f7fe f9ae 	bl	800a828 <logApplication>
    APP_DBG("**********************************************************");
 800c4cc:	4a04      	ldr	r2, [pc, #16]	; (800c4e0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x130>)
 800c4ce:	2101      	movs	r1, #1
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	f7fe f9a9 	bl	800a828 <logApplication>
} /* APP_ZIGBEE_CheckWirelessFirmwareInfo */
 800c4d6:	bf00      	nop
 800c4d8:	3758      	adds	r7, #88	; 0x58
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	0801a400 	.word	0x0801a400
 800c4e4:	0801a43c 	.word	0x0801a43c
 800c4e8:	0801a458 	.word	0x0801a458
 800c4ec:	0801a470 	.word	0x0801a470
 800c4f0:	0801a48c 	.word	0x0801a48c
 800c4f4:	0801a21b 	.word	0x0801a21b
 800c4f8:	0801a4a8 	.word	0x0801a4a8
 800c4fc:	0801a4c4 	.word	0x0801a4c4
 800c500:	0801a9e8 	.word	0x0801a9e8
 800c504:	0801a4d8 	.word	0x0801a4d8
 800c508:	0801a4e8 	.word	0x0801a4e8
 800c50c:	0801a4f0 	.word	0x0801a4f0
 800c510:	0801a504 	.word	0x0801a504
 800c514:	0801a51c 	.word	0x0801a51c

0800c518 <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 800c520:	4a04      	ldr	r2, [pc, #16]	; (800c534 <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6013      	str	r3, [r2, #0]
} /* APP_ZIGBEE_RegisterCmdBuffer */
 800c526:	bf00      	nop
 800c528:	370c      	adds	r7, #12
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	20000538 	.word	0x20000538

0800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 800c538:	b480      	push	{r7}
 800c53a:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800c53c:	4b03      	ldr	r3, [pc, #12]	; (800c54c <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	330c      	adds	r3, #12
} /* ZIGBEE_Get_OTCmdPayloadBuffer */
 800c542:	4618      	mov	r0, r3
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr
 800c54c:	20000538 	.word	0x20000538

0800c550 <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 800c550:	b480      	push	{r7}
 800c552:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 800c554:	4b03      	ldr	r3, [pc, #12]	; (800c564 <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	330b      	adds	r3, #11
} /* ZIGBEE_Get_OTCmdRspPayloadBuffer */
 800c55a:	4618      	mov	r0, r3
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr
 800c564:	20000538 	.word	0x20000538

0800c568 <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 800c568:	b480      	push	{r7}
 800c56a:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 800c56c:	4b03      	ldr	r3, [pc, #12]	; (800c57c <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	330b      	adds	r3, #11
} /* ZIGBEE_Get_NotificationPayloadBuffer */
 800c572:	4618      	mov	r0, r3
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	2000053c 	.word	0x2000053c

0800c580 <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 800c580:	b480      	push	{r7}
 800c582:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 800c584:	4b03      	ldr	r3, [pc, #12]	; (800c594 <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	330b      	adds	r3, #11
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	20000540 	.word	0x20000540

0800c598 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800c59e:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <ZIGBEE_CmdTransfer+0x44>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	330c      	adds	r3, #12
 800c5a4:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800c5a6:	4b0d      	ldr	r3, [pc, #52]	; (800c5dc <ZIGBEE_CmdTransfer+0x44>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5b0:	725a      	strb	r2, [r3, #9]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f042 0202 	orr.w	r2, r2, #2
 800c5b8:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	3302      	adds	r3, #2
 800c5c0:	b2da      	uxtb	r2, r3
 800c5c2:	4b06      	ldr	r3, [pc, #24]	; (800c5dc <ZIGBEE_CmdTransfer+0x44>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	0092      	lsls	r2, r2, #2
 800c5c8:	b2d2      	uxtb	r2, r2
 800c5ca:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 800c5cc:	f006 fc8a 	bl	8012ee4 <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800c5d0:	f000 f827 	bl	800c622 <Wait_Getting_Ack_From_M0>
} /* ZIGBEE_CmdTransfer */
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	20000538 	.word	0x20000538

0800c5e0 <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800c5e8:	f000 f822 	bl	800c630 <Receive_Ack_From_M0>
} /* TL_ZIGBEE_CmdEvtReceived */
 800c5ec:	bf00      	nop
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 800c5fc:	4a04      	ldr	r2, [pc, #16]	; (800c610 <TL_ZIGBEE_NotReceived+0x1c>)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800c602:	f000 f81d 	bl	800c640 <Receive_Notification_From_M0>
} /* TL_ZIGBEE_NotReceived */
 800c606:	bf00      	nop
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	2000053c 	.word	0x2000053c

0800c614 <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800c618:	2004      	movs	r0, #4
 800c61a:	f00b f98d 	bl	8017938 <UTIL_SEQ_WaitEvt>
} /* Pre_ZigbeeCmdProcessing */
 800c61e:	bf00      	nop
 800c620:	bd80      	pop	{r7, pc}

0800c622 <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800c626:	2002      	movs	r0, #2
 800c628:	f00b f986 	bl	8017938 <UTIL_SEQ_WaitEvt>
} /* Wait_Getting_Ack_From_M0 */
 800c62c:	bf00      	nop
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 800c634:	2002      	movs	r0, #2
 800c636:	f00b f95f 	bl	80178f8 <UTIL_SEQ_SetEvt>
} /* Receive_Ack_From_M0 */
 800c63a:	bf00      	nop
 800c63c:	bd80      	pop	{r7, pc}
	...

0800c640 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	af00      	add	r7, sp, #0
    CptReceiveNotifyFromM0++;
 800c644:	4b05      	ldr	r3, [pc, #20]	; (800c65c <Receive_Notification_From_M0+0x1c>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	3301      	adds	r3, #1
 800c64a:	4a04      	ldr	r2, [pc, #16]	; (800c65c <Receive_Notification_From_M0+0x1c>)
 800c64c:	6013      	str	r3, [r2, #0]
    UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800c64e:	2100      	movs	r1, #0
 800c650:	2001      	movs	r0, #1
 800c652:	f00b f925 	bl	80178a0 <UTIL_SEQ_SetTask>
}
 800c656:	bf00      	nop
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	20000544 	.word	0x20000544

0800c660 <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
    p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 800c668:	4a07      	ldr	r2, [pc, #28]	; (800c688 <TL_ZIGBEE_M0RequestReceived+0x28>)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6013      	str	r3, [r2, #0]

    CptReceiveRequestFromM0++;
 800c66e:	4b07      	ldr	r3, [pc, #28]	; (800c68c <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	3301      	adds	r3, #1
 800c674:	4a05      	ldr	r2, [pc, #20]	; (800c68c <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800c676:	6013      	str	r3, [r2, #0]
    UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800c678:	2100      	movs	r1, #0
 800c67a:	2002      	movs	r0, #2
 800c67c:	f00b f910 	bl	80178a0 <UTIL_SEQ_SetTask>
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	20000540 	.word	0x20000540
 800c68c:	20000548 	.word	0x20000548

0800c690 <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
    ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 800c694:	4b06      	ldr	r3, [pc, #24]	; (800c6b0 <APP_ZIGBEE_TL_INIT+0x20>)
 800c696:	4a07      	ldr	r2, [pc, #28]	; (800c6b4 <APP_ZIGBEE_TL_INIT+0x24>)
 800c698:	601a      	str	r2, [r3, #0]
    ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 800c69a:	4b05      	ldr	r3, [pc, #20]	; (800c6b0 <APP_ZIGBEE_TL_INIT+0x20>)
 800c69c:	4a06      	ldr	r2, [pc, #24]	; (800c6b8 <APP_ZIGBEE_TL_INIT+0x28>)
 800c69e:	605a      	str	r2, [r3, #4]
    ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 800c6a0:	4b03      	ldr	r3, [pc, #12]	; (800c6b0 <APP_ZIGBEE_TL_INIT+0x20>)
 800c6a2:	4a06      	ldr	r2, [pc, #24]	; (800c6bc <APP_ZIGBEE_TL_INIT+0x2c>)
 800c6a4:	609a      	str	r2, [r3, #8]
    TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 800c6a6:	4802      	ldr	r0, [pc, #8]	; (800c6b0 <APP_ZIGBEE_TL_INIT+0x20>)
 800c6a8:	f006 fc00 	bl	8012eac <TL_ZIGBEE_Init>
}
 800c6ac:	bf00      	nop
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	20030028 	.word	0x20030028
 800c6b4:	20030838 	.word	0x20030838
 800c6b8:	20030944 	.word	0x20030944
 800c6bc:	20030a50 	.word	0x20030a50

0800c6c0 <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
    if (CptReceiveNotifyFromM0 != 0) {
 800c6c4:	4b09      	ldr	r3, [pc, #36]	; (800c6ec <APP_ZIGBEE_ProcessNotifyM0ToM4+0x2c>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00d      	beq.n	800c6e8 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x28>
        /* If CptReceiveNotifyFromM0 is > 1. it means that we did not serve all the events from the radio */
        if (CptReceiveNotifyFromM0 > 1U) {
 800c6cc:	4b07      	ldr	r3, [pc, #28]	; (800c6ec <APP_ZIGBEE_ProcessNotifyM0ToM4+0x2c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d904      	bls.n	800c6de <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1e>
            APP_ZIGBEE_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	f7ff fe18 	bl	800c30c <APP_ZIGBEE_Error>
 800c6dc:	e001      	b.n	800c6e2 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x22>
        }
        else {
            Zigbee_CallBackProcessing();
 800c6de:	f008 fe0b 	bl	80152f8 <Zigbee_CallBackProcessing>
        }
        /* Reset counter */
        CptReceiveNotifyFromM0 = 0;
 800c6e2:	4b02      	ldr	r3, [pc, #8]	; (800c6ec <APP_ZIGBEE_ProcessNotifyM0ToM4+0x2c>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	601a      	str	r2, [r3, #0]
    }
}
 800c6e8:	bf00      	nop
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	20000544 	.word	0x20000544

0800c6f0 <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param
 * @return
 */
void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
    if (CptReceiveRequestFromM0 != 0) {
 800c6f4:	4b05      	ldr	r3, [pc, #20]	; (800c70c <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d004      	beq.n	800c706 <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
        Zigbee_M0RequestProcessing();
 800c6fc:	f00a f982 	bl	8016a04 <Zigbee_M0RequestProcessing>
        CptReceiveRequestFromM0 = 0;
 800c700:	4b02      	ldr	r3, [pc, #8]	; (800c70c <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
    }
}
 800c706:	bf00      	nop
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	20000548 	.word	0x20000548

0800c710 <LL_PWR_EnableBootC2>:
{
 800c710:	b480      	push	{r7}
 800c712:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c714:	4b05      	ldr	r3, [pc, #20]	; (800c72c <LL_PWR_EnableBootC2+0x1c>)
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	4a04      	ldr	r2, [pc, #16]	; (800c72c <LL_PWR_EnableBootC2+0x1c>)
 800c71a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c71e:	60d3      	str	r3, [r2, #12]
}
 800c720:	bf00      	nop
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	58000400 	.word	0x58000400

0800c730 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c738:	4b06      	ldr	r3, [pc, #24]	; (800c754 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c73a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c73e:	4905      	ldr	r1, [pc, #20]	; (800c754 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4313      	orrs	r3, r2
 800c744:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c748:	bf00      	nop
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr
 800c754:	58000800 	.word	0x58000800

0800c758 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c760:	4b05      	ldr	r3, [pc, #20]	; (800c778 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c762:	6a1a      	ldr	r2, [r3, #32]
 800c764:	4904      	ldr	r1, [pc, #16]	; (800c778 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4313      	orrs	r3, r2
 800c76a:	620b      	str	r3, [r1, #32]
}
 800c76c:	bf00      	nop
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr
 800c778:	58000800 	.word	0x58000800

0800c77c <LL_AHB3_GRP1_EnableClock>:
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c78a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4313      	orrs	r3, r2
 800c792:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4013      	ands	r3, r2
 800c79e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
}
 800c7a2:	bf00      	nop
 800c7a4:	3714      	adds	r7, #20
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b085      	sub	sp, #20
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c7b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c7be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c7ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7ce:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4013      	ands	r3, r2
 800c7d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
}
 800c7da:	bf00      	nop
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <LL_C1_IPCC_EnableIT_TXF>:
{
 800c7e6:	b480      	push	{r7}
 800c7e8:	b083      	sub	sp, #12
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	601a      	str	r2, [r3, #0]
}
 800c7fa:	bf00      	nop
 800c7fc:	370c      	adds	r7, #12
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <LL_C1_IPCC_EnableIT_RXO>:
{
 800c806:	b480      	push	{r7}
 800c808:	b083      	sub	sp, #12
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f043 0201 	orr.w	r2, r3, #1
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	601a      	str	r2, [r3, #0]
}
 800c81a:	bf00      	nop
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685a      	ldr	r2, [r3, #4]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	041b      	lsls	r3, r3, #16
 800c838:	43db      	mvns	r3, r3
 800c83a:	401a      	ands	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	605a      	str	r2, [r3, #4]
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	041b      	lsls	r3, r3, #16
 800c85e:	431a      	orrs	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	605a      	str	r2, [r3, #4]
}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	685a      	ldr	r2, [r3, #4]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	43db      	mvns	r3, r3
 800c882:	401a      	ands	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	605a      	str	r2, [r3, #4]
}
 800c888:	bf00      	nop
 800c88a:	370c      	adds	r7, #12
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <LL_C1_IPCC_DisableReceiveChannel>:
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	685a      	ldr	r2, [r3, #4]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	431a      	orrs	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	605a      	str	r2, [r3, #4]
}
 800c8aa:	bf00      	nop
 800c8ac:	370c      	adds	r7, #12
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr

0800c8b6 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800c8b6:	b480      	push	{r7}
 800c8b8:	b083      	sub	sp, #12
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	609a      	str	r2, [r3, #8]
}
 800c8c6:	bf00      	nop
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <LL_C1_IPCC_SetFlag_CHx>:
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b083      	sub	sp, #12
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	041a      	lsls	r2, r3, #16
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	609a      	str	r2, [r3, #8]
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	68da      	ldr	r2, [r3, #12]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	4013      	ands	r3, r2
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	429a      	cmp	r2, r3
 800c906:	d101      	bne.n	800c90c <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c908:	2301      	movs	r3, #1
 800c90a:	e000      	b.n	800c90e <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c91a:	b480      	push	{r7}
 800c91c:	b083      	sub	sp, #12
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	69da      	ldr	r2, [r3, #28]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	4013      	ands	r3, r2
 800c92c:	683a      	ldr	r2, [r7, #0]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d101      	bne.n	800c936 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c932:	2301      	movs	r3, #1
 800c934:	e000      	b.n	800c938 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c948:	2102      	movs	r1, #2
 800c94a:	482a      	ldr	r0, [pc, #168]	; (800c9f4 <HW_IPCC_Rx_Handler+0xb0>)
 800c94c:	f7ff ffe5 	bl	800c91a <LL_C2_IPCC_IsActiveFlag_CHx>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d009      	beq.n	800c96a <HW_IPCC_Rx_Handler+0x26>
 800c956:	4b27      	ldr	r3, [pc, #156]	; (800c9f4 <HW_IPCC_Rx_Handler+0xb0>)
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	43db      	mvns	r3, r3
 800c95c:	f003 0302 	and.w	r3, r3, #2
 800c960:	2b00      	cmp	r3, #0
 800c962:	d002      	beq.n	800c96a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800c964:	f000 f8f8 	bl	800cb58 <HW_IPCC_SYS_EvtHandler>
 800c968:	e041      	b.n	800c9ee <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 800c96a:	2104      	movs	r1, #4
 800c96c:	4821      	ldr	r0, [pc, #132]	; (800c9f4 <HW_IPCC_Rx_Handler+0xb0>)
 800c96e:	f7ff ffd4 	bl	800c91a <LL_C2_IPCC_IsActiveFlag_CHx>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d009      	beq.n	800c98c <HW_IPCC_Rx_Handler+0x48>
 800c978:	4b1e      	ldr	r3, [pc, #120]	; (800c9f4 <HW_IPCC_Rx_Handler+0xb0>)
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	43db      	mvns	r3, r3
 800c97e:	f003 0304 	and.w	r3, r3, #4
 800c982:	2b00      	cmp	r3, #0
 800c984:	d002      	beq.n	800c98c <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 800c986:	f000 f929 	bl	800cbdc <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 800c98a:	e030      	b.n	800c9ee <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 800c98c:	2110      	movs	r1, #16
 800c98e:	4819      	ldr	r0, [pc, #100]	; (800c9f4 <HW_IPCC_Rx_Handler+0xb0>)
 800c990:	f7ff ffc3 	bl	800c91a <LL_C2_IPCC_IsActiveFlag_CHx>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d009      	beq.n	800c9ae <HW_IPCC_Rx_Handler+0x6a>
 800c99a:	4b16      	ldr	r3, [pc, #88]	; (800c9f4 <HW_IPCC_Rx_Handler+0xb0>)
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	43db      	mvns	r3, r3
 800c9a0:	f003 0310 	and.w	r3, r3, #16
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 800c9a8:	f000 f924 	bl	800cbf4 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800c9ac:	e01f      	b.n	800c9ee <HW_IPCC_Rx_Handler+0xaa>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c9ae:	2101      	movs	r1, #1
 800c9b0:	4810      	ldr	r0, [pc, #64]	; (800c9f4 <HW_IPCC_Rx_Handler+0xb0>)
 800c9b2:	f7ff ffb2 	bl	800c91a <LL_C2_IPCC_IsActiveFlag_CHx>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d008      	beq.n	800c9ce <HW_IPCC_Rx_Handler+0x8a>
 800c9bc:	4b0d      	ldr	r3, [pc, #52]	; (800c9f4 <HW_IPCC_Rx_Handler+0xb0>)
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	f003 0301 	and.w	r3, r3, #1
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d102      	bne.n	800c9ce <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 800c9c8:	f000 f88a 	bl	800cae0 <HW_IPCC_BLE_EvtHandler>
 800c9cc:	e00f      	b.n	800c9ee <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c9ce:	2108      	movs	r1, #8
 800c9d0:	4808      	ldr	r0, [pc, #32]	; (800c9f4 <HW_IPCC_Rx_Handler+0xb0>)
 800c9d2:	f7ff ffa2 	bl	800c91a <LL_C2_IPCC_IsActiveFlag_CHx>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d009      	beq.n	800c9f0 <HW_IPCC_Rx_Handler+0xac>
 800c9dc:	4b05      	ldr	r3, [pc, #20]	; (800c9f4 <HW_IPCC_Rx_Handler+0xb0>)
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	43db      	mvns	r3, r3
 800c9e2:	f003 0308 	and.w	r3, r3, #8
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d002      	beq.n	800c9f0 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c9ea:	f000 f95d 	bl	800cca8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c9ee:	bf00      	nop
 800c9f0:	bf00      	nop
}
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	58000c00 	.word	0x58000c00

0800c9f8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c9fc:	2102      	movs	r1, #2
 800c9fe:	4822      	ldr	r0, [pc, #136]	; (800ca88 <HW_IPCC_Tx_Handler+0x90>)
 800ca00:	f7ff ff76 	bl	800c8f0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d108      	bne.n	800ca1c <HW_IPCC_Tx_Handler+0x24>
 800ca0a:	4b1f      	ldr	r3, [pc, #124]	; (800ca88 <HW_IPCC_Tx_Handler+0x90>)
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	43db      	mvns	r3, r3
 800ca10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800ca18:	f000 f892 	bl	800cb40 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 800ca1c:	2104      	movs	r1, #4
 800ca1e:	481a      	ldr	r0, [pc, #104]	; (800ca88 <HW_IPCC_Tx_Handler+0x90>)
 800ca20:	f7ff ff66 	bl	800c8f0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d109      	bne.n	800ca3e <HW_IPCC_Tx_Handler+0x46>
 800ca2a:	4b17      	ldr	r3, [pc, #92]	; (800ca88 <HW_IPCC_Tx_Handler+0x90>)
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	43db      	mvns	r3, r3
 800ca30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d002      	beq.n	800ca3e <HW_IPCC_Tx_Handler+0x46>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 800ca38:	f000 f8c4 	bl	800cbc4 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 800ca3c:	e020      	b.n	800ca80 <HW_IPCC_Tx_Handler+0x88>
  }
#endif /* ZIGBEE_WB */

  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800ca3e:	2108      	movs	r1, #8
 800ca40:	4811      	ldr	r0, [pc, #68]	; (800ca88 <HW_IPCC_Tx_Handler+0x90>)
 800ca42:	f7ff ff55 	bl	800c8f0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d109      	bne.n	800ca60 <HW_IPCC_Tx_Handler+0x68>
 800ca4c:	4b0e      	ldr	r3, [pc, #56]	; (800ca88 <HW_IPCC_Tx_Handler+0x90>)
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	43db      	mvns	r3, r3
 800ca52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <HW_IPCC_Tx_Handler+0x68>
  {
    HW_IPCC_MM_FreeBufHandler();
 800ca5a:	f000 f907 	bl	800cc6c <HW_IPCC_MM_FreeBufHandler>
 800ca5e:	e00f      	b.n	800ca80 <HW_IPCC_Tx_Handler+0x88>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800ca60:	2120      	movs	r1, #32
 800ca62:	4809      	ldr	r0, [pc, #36]	; (800ca88 <HW_IPCC_Tx_Handler+0x90>)
 800ca64:	f7ff ff44 	bl	800c8f0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d109      	bne.n	800ca82 <HW_IPCC_Tx_Handler+0x8a>
 800ca6e:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <HW_IPCC_Tx_Handler+0x90>)
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	43db      	mvns	r3, r3
 800ca74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d002      	beq.n	800ca82 <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800ca7c:	f000 f83c 	bl	800caf8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800ca80:	bf00      	nop
 800ca82:	bf00      	nop
}
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	58000c00 	.word	0x58000c00

0800ca8c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800ca90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ca94:	f7ff fe8b 	bl	800c7ae <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800ca98:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ca9c:	f7ff fe48 	bl	800c730 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800caa0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800caa4:	f7ff fe58 	bl	800c758 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800caa8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800caaa:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800caac:	f7ff fe30 	bl	800c710 <LL_PWR_EnableBootC2>

  return;
 800cab0:	bf00      	nop
}
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800cab8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cabc:	f7ff fe5e 	bl	800c77c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800cac0:	4806      	ldr	r0, [pc, #24]	; (800cadc <HW_IPCC_Init+0x28>)
 800cac2:	f7ff fea0 	bl	800c806 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800cac6:	4805      	ldr	r0, [pc, #20]	; (800cadc <HW_IPCC_Init+0x28>)
 800cac8:	f7ff fe8d 	bl	800c7e6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800cacc:	202c      	movs	r0, #44	; 0x2c
 800cace:	f000 fd98 	bl	800d602 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800cad2:	202d      	movs	r0, #45	; 0x2d
 800cad4:	f000 fd95 	bl	800d602 <HAL_NVIC_EnableIRQ>

  return;
 800cad8:	bf00      	nop
}
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	58000c00 	.word	0x58000c00

0800cae0 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800cae4:	f006 f92a 	bl	8012d3c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800cae8:	2101      	movs	r1, #1
 800caea:	4802      	ldr	r0, [pc, #8]	; (800caf4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800caec:	f7ff fee3 	bl	800c8b6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800caf0:	bf00      	nop
}
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	58000c00 	.word	0x58000c00

0800caf8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800cafc:	2120      	movs	r1, #32
 800cafe:	4803      	ldr	r0, [pc, #12]	; (800cb0c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800cb00:	f7ff fea4 	bl	800c84c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800cb04:	f006 f94a 	bl	8012d9c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800cb08:	bf00      	nop
}
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	58000c00 	.word	0x58000c00

0800cb10 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cb14:	2102      	movs	r1, #2
 800cb16:	4802      	ldr	r0, [pc, #8]	; (800cb20 <HW_IPCC_SYS_Init+0x10>)
 800cb18:	f7ff feaa 	bl	800c870 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cb1c:	bf00      	nop
}
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	58000c00 	.word	0x58000c00

0800cb24 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cb28:	2102      	movs	r1, #2
 800cb2a:	4804      	ldr	r0, [pc, #16]	; (800cb3c <HW_IPCC_SYS_SendCmd+0x18>)
 800cb2c:	f7ff fed1 	bl	800c8d2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cb30:	2102      	movs	r1, #2
 800cb32:	4802      	ldr	r0, [pc, #8]	; (800cb3c <HW_IPCC_SYS_SendCmd+0x18>)
 800cb34:	f7ff fe77 	bl	800c826 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800cb38:	bf00      	nop
}
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	58000c00 	.word	0x58000c00

0800cb40 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cb44:	2102      	movs	r1, #2
 800cb46:	4803      	ldr	r0, [pc, #12]	; (800cb54 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800cb48:	f7ff fe80 	bl	800c84c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800cb4c:	f006 f976 	bl	8012e3c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800cb50:	bf00      	nop
}
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	58000c00 	.word	0x58000c00

0800cb58 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800cb5c:	f006 f984 	bl	8012e68 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cb60:	2102      	movs	r1, #2
 800cb62:	4802      	ldr	r0, [pc, #8]	; (800cb6c <HW_IPCC_SYS_EvtHandler+0x14>)
 800cb64:	f7ff fea7 	bl	800c8b6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cb68:	bf00      	nop
}
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	58000c00 	.word	0x58000c00

0800cb70 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800cb74:	2104      	movs	r1, #4
 800cb76:	4804      	ldr	r0, [pc, #16]	; (800cb88 <HW_IPCC_ZIGBEE_Init+0x18>)
 800cb78:	f7ff fe7a 	bl	800c870 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800cb7c:	2110      	movs	r1, #16
 800cb7e:	4802      	ldr	r0, [pc, #8]	; (800cb88 <HW_IPCC_ZIGBEE_Init+0x18>)
 800cb80:	f7ff fe76 	bl	800c870 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cb84:	bf00      	nop
}
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	58000c00 	.word	0x58000c00

0800cb8c <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800cb90:	2104      	movs	r1, #4
 800cb92:	4804      	ldr	r0, [pc, #16]	; (800cba4 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800cb94:	f7ff fe9d 	bl	800c8d2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800cb98:	2104      	movs	r1, #4
 800cb9a:	4802      	ldr	r0, [pc, #8]	; (800cba4 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800cb9c:	f7ff fe43 	bl	800c826 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800cba0:	bf00      	nop
}
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	58000c00 	.word	0x58000c00

0800cba8 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800cbac:	2104      	movs	r1, #4
 800cbae:	4804      	ldr	r0, [pc, #16]	; (800cbc0 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800cbb0:	f7ff fe81 	bl	800c8b6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800cbb4:	2104      	movs	r1, #4
 800cbb6:	4802      	ldr	r0, [pc, #8]	; (800cbc0 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800cbb8:	f7ff fe5a 	bl	800c870 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cbbc:	bf00      	nop
}
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	58000c00 	.word	0x58000c00

0800cbc4 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800cbc8:	2104      	movs	r1, #4
 800cbca:	4803      	ldr	r0, [pc, #12]	; (800cbd8 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 800cbcc:	f7ff fe3e 	bl	800c84c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 800cbd0:	f006 f996 	bl	8012f00 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 800cbd4:	bf00      	nop
}
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	58000c00 	.word	0x58000c00

0800cbdc <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800cbe0:	2104      	movs	r1, #4
 800cbe2:	4803      	ldr	r0, [pc, #12]	; (800cbf0 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 800cbe4:	f7ff fe56 	bl	800c894 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 800cbe8:	f006 f996 	bl	8012f18 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 800cbec:	bf00      	nop
}
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	58000c00 	.word	0x58000c00

0800cbf4 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800cbf8:	2110      	movs	r1, #16
 800cbfa:	4803      	ldr	r0, [pc, #12]	; (800cc08 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 800cbfc:	f7ff fe4a 	bl	800c894 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 800cc00:	f006 f9a4 	bl	8012f4c <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 800cc04:	bf00      	nop
}
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	58000c00 	.word	0x58000c00

0800cc0c <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800cc10:	2110      	movs	r1, #16
 800cc12:	4804      	ldr	r0, [pc, #16]	; (800cc24 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800cc14:	f7ff fe4f 	bl	800c8b6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800cc18:	2110      	movs	r1, #16
 800cc1a:	4802      	ldr	r0, [pc, #8]	; (800cc24 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800cc1c:	f7ff fe28 	bl	800c870 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cc20:	bf00      	nop
}
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	58000c00 	.word	0x58000c00

0800cc28 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800cc30:	2108      	movs	r1, #8
 800cc32:	480c      	ldr	r0, [pc, #48]	; (800cc64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cc34:	f7ff fe5c 	bl	800c8f0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d007      	beq.n	800cc4e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800cc3e:	4a0a      	ldr	r2, [pc, #40]	; (800cc68 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cc44:	2108      	movs	r1, #8
 800cc46:	4807      	ldr	r0, [pc, #28]	; (800cc64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cc48:	f7ff fded 	bl	800c826 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800cc4c:	e006      	b.n	800cc5c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cc52:	2108      	movs	r1, #8
 800cc54:	4803      	ldr	r0, [pc, #12]	; (800cc64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cc56:	f7ff fe3c 	bl	800c8d2 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800cc5a:	bf00      	nop
}
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	58000c00 	.word	0x58000c00
 800cc68:	200009a4 	.word	0x200009a4

0800cc6c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cc70:	2108      	movs	r1, #8
 800cc72:	4806      	ldr	r0, [pc, #24]	; (800cc8c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800cc74:	f7ff fdea 	bl	800c84c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800cc78:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cc7e:	2108      	movs	r1, #8
 800cc80:	4802      	ldr	r0, [pc, #8]	; (800cc8c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800cc82:	f7ff fe26 	bl	800c8d2 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800cc86:	bf00      	nop
}
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	58000c00 	.word	0x58000c00
 800cc90:	200009a4 	.word	0x200009a4

0800cc94 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800cc98:	2108      	movs	r1, #8
 800cc9a:	4802      	ldr	r0, [pc, #8]	; (800cca4 <HW_IPCC_TRACES_Init+0x10>)
 800cc9c:	f7ff fde8 	bl	800c870 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cca0:	bf00      	nop
}
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	58000c00 	.word	0x58000c00

0800cca8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800ccac:	f006 f9ee 	bl	801308c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ccb0:	2108      	movs	r1, #8
 800ccb2:	4802      	ldr	r0, [pc, #8]	; (800ccbc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800ccb4:	f7ff fdff 	bl	800c8b6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ccb8:	bf00      	nop
}
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	58000c00 	.word	0x58000c00

0800ccc0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800ccc0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ccc2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ccc4:	3304      	adds	r3, #4

0800ccc6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ccc6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ccc8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800ccca:	d3f9      	bcc.n	800ccc0 <CopyDataInit>
  bx lr
 800cccc:	4770      	bx	lr

0800ccce <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800ccce:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800ccd0:	3004      	adds	r0, #4

0800ccd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800ccd2:	4288      	cmp	r0, r1
  bcc FillZerobss
 800ccd4:	d3fb      	bcc.n	800ccce <FillZerobss>
  bx lr
 800ccd6:	4770      	bx	lr

0800ccd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ccd8:	480c      	ldr	r0, [pc, #48]	; (800cd0c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800ccda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ccdc:	f000 fa2a 	bl	800d134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800cce0:	480b      	ldr	r0, [pc, #44]	; (800cd10 <LoopForever+0x8>)
 800cce2:	490c      	ldr	r1, [pc, #48]	; (800cd14 <LoopForever+0xc>)
 800cce4:	4a0c      	ldr	r2, [pc, #48]	; (800cd18 <LoopForever+0x10>)
 800cce6:	2300      	movs	r3, #0
 800cce8:	f7ff ffed 	bl	800ccc6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800ccec:	480b      	ldr	r0, [pc, #44]	; (800cd1c <LoopForever+0x14>)
 800ccee:	490c      	ldr	r1, [pc, #48]	; (800cd20 <LoopForever+0x18>)
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f7ff ffee 	bl	800ccd2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800ccf6:	480b      	ldr	r0, [pc, #44]	; (800cd24 <LoopForever+0x1c>)
 800ccf8:	490b      	ldr	r1, [pc, #44]	; (800cd28 <LoopForever+0x20>)
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f7ff ffe9 	bl	800ccd2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800cd00:	f00a fee6 	bl	8017ad0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800cd04:	f7fd f8d4 	bl	8009eb0 <main>

0800cd08 <LoopForever>:

LoopForever:
  b LoopForever
 800cd08:	e7fe      	b.n	800cd08 <LoopForever>
 800cd0a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800cd0c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800cd10:	20000008 	.word	0x20000008
 800cd14:	20000134 	.word	0x20000134
 800cd18:	0801adf0 	.word	0x0801adf0
  INIT_BSS _sbss, _ebss
 800cd1c:	20000148 	.word	0x20000148
 800cd20:	20001cf4 	.word	0x20001cf4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800cd24:	200300e4 	.word	0x200300e4
 800cd28:	20030b5a 	.word	0x20030b5a

0800cd2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800cd2c:	e7fe      	b.n	800cd2c <ADC1_IRQHandler>

0800cd2e <LL_AHB2_GRP1_EnableClock>:
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b085      	sub	sp, #20
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800cd36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4313      	orrs	r3, r2
 800cd44:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800cd46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4013      	ands	r3, r2
 800cd50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cd52:	68fb      	ldr	r3, [r7, #12]
}
 800cd54:	bf00      	nop
 800cd56:	3714      	adds	r7, #20
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b088      	sub	sp, #32
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	4603      	mov	r3, r0
 800cd68:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800cd6a:	f107 030c 	add.w	r3, r7, #12
 800cd6e:	2200      	movs	r2, #0
 800cd70:	601a      	str	r2, [r3, #0]
 800cd72:	605a      	str	r2, [r3, #4]
 800cd74:	609a      	str	r2, [r3, #8]
 800cd76:	60da      	str	r2, [r3, #12]
 800cd78:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800cd7a:	2002      	movs	r0, #2
 800cd7c:	f7ff ffd7 	bl	800cd2e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800cd80:	79fb      	ldrb	r3, [r7, #7]
 800cd82:	4a12      	ldr	r2, [pc, #72]	; (800cdcc <BSP_LED_Init+0x6c>)
 800cd84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd88:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800cd92:	2302      	movs	r3, #2
 800cd94:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800cd96:	79fb      	ldrb	r3, [r7, #7]
 800cd98:	4a0d      	ldr	r2, [pc, #52]	; (800cdd0 <BSP_LED_Init+0x70>)
 800cd9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd9e:	f107 020c 	add.w	r2, r7, #12
 800cda2:	4611      	mov	r1, r2
 800cda4:	4618      	mov	r0, r3
 800cda6:	f001 fa47 	bl	800e238 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	4a08      	ldr	r2, [pc, #32]	; (800cdd0 <BSP_LED_Init+0x70>)
 800cdae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
 800cdb4:	4a05      	ldr	r2, [pc, #20]	; (800cdcc <BSP_LED_Init+0x6c>)
 800cdb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	f001 fbab 	bl	800e518 <HAL_GPIO_WritePin>
}
 800cdc2:	bf00      	nop
 800cdc4:	3720      	adds	r7, #32
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	0801a90c 	.word	0x0801a90c
 800cdd0:	200000a0 	.word	0x200000a0

0800cdd4 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	4603      	mov	r3, r0
 800cddc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	4a07      	ldr	r2, [pc, #28]	; (800ce00 <BSP_LED_On+0x2c>)
 800cde2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cde6:	79fb      	ldrb	r3, [r7, #7]
 800cde8:	4a06      	ldr	r2, [pc, #24]	; (800ce04 <BSP_LED_On+0x30>)
 800cdea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	f001 fb91 	bl	800e518 <HAL_GPIO_WritePin>
}
 800cdf6:	bf00      	nop
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	200000a0 	.word	0x200000a0
 800ce04:	0801a90c 	.word	0x0801a90c

0800ce08 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	4603      	mov	r3, r0
 800ce10:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800ce12:	79fb      	ldrb	r3, [r7, #7]
 800ce14:	4a07      	ldr	r2, [pc, #28]	; (800ce34 <BSP_LED_Off+0x2c>)
 800ce16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ce1a:	79fb      	ldrb	r3, [r7, #7]
 800ce1c:	4a06      	ldr	r2, [pc, #24]	; (800ce38 <BSP_LED_Off+0x30>)
 800ce1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce22:	2200      	movs	r2, #0
 800ce24:	4619      	mov	r1, r3
 800ce26:	f001 fb77 	bl	800e518 <HAL_GPIO_WritePin>
}
 800ce2a:	bf00      	nop
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	200000a0 	.word	0x200000a0
 800ce38:	0801a90c 	.word	0x0801a90c

0800ce3c <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	4603      	mov	r3, r0
 800ce44:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800ce46:	79fb      	ldrb	r3, [r7, #7]
 800ce48:	4a07      	ldr	r2, [pc, #28]	; (800ce68 <BSP_LED_Toggle+0x2c>)
 800ce4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	4906      	ldr	r1, [pc, #24]	; (800ce6c <BSP_LED_Toggle+0x30>)
 800ce52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ce56:	4619      	mov	r1, r3
 800ce58:	4610      	mov	r0, r2
 800ce5a:	f001 fb75 	bl	800e548 <HAL_GPIO_TogglePin>
}
 800ce5e:	bf00      	nop
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	200000a0 	.word	0x200000a0
 800ce6c:	0801a90c 	.word	0x0801a90c

0800ce70 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4603      	mov	r3, r0
 800ce78:	460a      	mov	r2, r1
 800ce7a:	71fb      	strb	r3, [r7, #7]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800ce80:	f107 030c 	add.w	r3, r7, #12
 800ce84:	2200      	movs	r2, #0
 800ce86:	601a      	str	r2, [r3, #0]
 800ce88:	605a      	str	r2, [r3, #4]
 800ce8a:	609a      	str	r2, [r3, #8]
 800ce8c:	60da      	str	r2, [r3, #12]
 800ce8e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800ce90:	79fb      	ldrb	r3, [r7, #7]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d103      	bne.n	800ce9e <BSP_PB_Init+0x2e>
 800ce96:	2004      	movs	r0, #4
 800ce98:	f7ff ff49 	bl	800cd2e <LL_AHB2_GRP1_EnableClock>
 800ce9c:	e00c      	b.n	800ceb8 <BSP_PB_Init+0x48>
 800ce9e:	79fb      	ldrb	r3, [r7, #7]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d103      	bne.n	800ceac <BSP_PB_Init+0x3c>
 800cea4:	2008      	movs	r0, #8
 800cea6:	f7ff ff42 	bl	800cd2e <LL_AHB2_GRP1_EnableClock>
 800ceaa:	e005      	b.n	800ceb8 <BSP_PB_Init+0x48>
 800ceac:	79fb      	ldrb	r3, [r7, #7]
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d102      	bne.n	800ceb8 <BSP_PB_Init+0x48>
 800ceb2:	2008      	movs	r0, #8
 800ceb4:	f7ff ff3b 	bl	800cd2e <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800ceb8:	79bb      	ldrb	r3, [r7, #6]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d117      	bne.n	800ceee <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	4a20      	ldr	r2, [pc, #128]	; (800cf44 <BSP_PB_Init+0xd4>)
 800cec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cec6:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 800cec8:	2300      	movs	r3, #0
 800ceca:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800cecc:	2301      	movs	r3, #1
 800cece:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ced0:	2302      	movs	r3, #2
 800ced2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800ced4:	79fb      	ldrb	r3, [r7, #7]
 800ced6:	4a1c      	ldr	r2, [pc, #112]	; (800cf48 <BSP_PB_Init+0xd8>)
 800ced8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cedc:	f107 020c 	add.w	r2, r7, #12
 800cee0:	4611      	mov	r1, r2
 800cee2:	4618      	mov	r0, r3
 800cee4:	f001 f9a8 	bl	800e238 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 800cee8:	2001      	movs	r0, #1
 800ceea:	f7fd f989 	bl	800a200 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800ceee:	79bb      	ldrb	r3, [r7, #6]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d123      	bne.n	800cf3c <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800cef4:	79fb      	ldrb	r3, [r7, #7]
 800cef6:	4a13      	ldr	r2, [pc, #76]	; (800cf44 <BSP_PB_Init+0xd4>)
 800cef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cefc:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800cefe:	2301      	movs	r3, #1
 800cf00:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800cf02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800cf06:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800cf08:	79fb      	ldrb	r3, [r7, #7]
 800cf0a:	4a0f      	ldr	r2, [pc, #60]	; (800cf48 <BSP_PB_Init+0xd8>)
 800cf0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf10:	f107 020c 	add.w	r2, r7, #12
 800cf14:	4611      	mov	r1, r2
 800cf16:	4618      	mov	r0, r3
 800cf18:	f001 f98e 	bl	800e238 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800cf1c:	79fb      	ldrb	r3, [r7, #7]
 800cf1e:	4a0b      	ldr	r2, [pc, #44]	; (800cf4c <BSP_PB_Init+0xdc>)
 800cf20:	5cd3      	ldrb	r3, [r2, r3]
 800cf22:	b25b      	sxtb	r3, r3
 800cf24:	2200      	movs	r2, #0
 800cf26:	210f      	movs	r1, #15
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 fb50 	bl	800d5ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800cf2e:	79fb      	ldrb	r3, [r7, #7]
 800cf30:	4a06      	ldr	r2, [pc, #24]	; (800cf4c <BSP_PB_Init+0xdc>)
 800cf32:	5cd3      	ldrb	r3, [r2, r3]
 800cf34:	b25b      	sxtb	r3, r3
 800cf36:	4618      	mov	r0, r3
 800cf38:	f000 fb63 	bl	800d602 <HAL_NVIC_EnableIRQ>
  }
}
 800cf3c:	bf00      	nop
 800cf3e:	3720      	adds	r7, #32
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	0801a914 	.word	0x0801a914
 800cf48:	200000ac 	.word	0x200000ac
 800cf4c:	0801a91c 	.word	0x0801a91c

0800cf50 <LL_RCC_IsActiveFlag_OBLRST>:
{
 800cf50:	b480      	push	{r7}
 800cf52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_OBLRSTF) == (RCC_CSR_OBLRSTF)) ? 1UL : 0UL);
 800cf54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf64:	d101      	bne.n	800cf6a <LL_RCC_IsActiveFlag_OBLRST+0x1a>
 800cf66:	2301      	movs	r3, #1
 800cf68:	e000      	b.n	800cf6c <LL_RCC_IsActiveFlag_OBLRST+0x1c>
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <LL_RCC_IsActiveFlag_SFTRST>:
{
 800cf76:	b480      	push	{r7}
 800cf78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800cf7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf8a:	d101      	bne.n	800cf90 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e000      	b.n	800cf92 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <BootModeCheck>:
 * Check the Boot mode request
 * Depending on the result, the CPU may either jump to an existing application in the user flash
 * or keep on running the code to start the OTA loader
 */
static void BootModeCheck( void )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	af00      	add	r7, sp, #0
  if ( LL_RCC_IsActiveFlag_SFTRST( ) || LL_RCC_IsActiveFlag_OBLRST( ) )
 800cfa0:	f7ff ffe9 	bl	800cf76 <LL_RCC_IsActiveFlag_SFTRST>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d104      	bne.n	800cfb4 <BootModeCheck+0x18>
 800cfaa:	f7ff ffd1 	bl	800cf50 <LL_RCC_IsActiveFlag_OBLRST>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d02f      	beq.n	800d014 <BootModeCheck+0x78>
     */

    /**
     * Check Boot Mode from SRAM1
     */
    if ( ( *(uint8_t*)SRAM1_BASE) == CFG_REBOOT_ON_DOWNLOADED_FW )
 800cfb4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d112      	bne.n	800cfe4 <BootModeCheck+0x48>
    {
      if ( CheckFwAppValidity( ) != 0 )
 800cfbe:	f000 f86f 	bl	800d0a0 <CheckFwAppValidity>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <BootModeCheck+0x32>
        /**
        * The user has requested to start on the firmware application and it has been checked
        * a valid application is ready
        * Jump now on the application
        */
        JumpFwApp();
 800cfc8:	f000 f84c 	bl	800d064 <JumpFwApp>
    if ( ( *(uint8_t*)SRAM1_BASE) == CFG_REBOOT_ON_DOWNLOADED_FW )
 800cfcc:	e025      	b.n	800d01a <BootModeCheck+0x7e>
      {
        /**
         * The user has requested to start on the firmware application but there is no valid application
         * Erase all sectors specified by byte1 and byte1 in SRAM1 to download a new App.
         */
        *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_OTA_FW;     /* Request to reboot on Thread_Ota application */
 800cfce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	701a      	strb	r2, [r3, #0]
        *((uint8_t*)SRAM1_BASE+1) = CFG_APP_START_SECTOR_INDEX;
 800cfd6:	4b12      	ldr	r3, [pc, #72]	; (800d020 <BootModeCheck+0x84>)
 800cfd8:	2230      	movs	r2, #48	; 0x30
 800cfda:	701a      	strb	r2, [r3, #0]
        *((uint8_t*)SRAM1_BASE+2) = 0xFF;
 800cfdc:	4b11      	ldr	r3, [pc, #68]	; (800d024 <BootModeCheck+0x88>)
 800cfde:	22ff      	movs	r2, #255	; 0xff
 800cfe0:	701a      	strb	r2, [r3, #0]
    if ( ( *(uint8_t*)SRAM1_BASE) == CFG_REBOOT_ON_DOWNLOADED_FW )
 800cfe2:	e01a      	b.n	800d01a <BootModeCheck+0x7e>
      }
    }
    else 
    {
      if ( ( *(uint8_t*)SRAM1_BASE ) == CFG_REBOOT_ON_OTA_FW )
 800cfe4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d10a      	bne.n	800d004 <BootModeCheck+0x68>
      {
        /**
         * It has been requested to reboot on Thread_Ota application to download data
         * If the FW-App Start Sector is at '0' or bad (random) set default FW-App Start Sector.
         */
        if ( *( (uint8_t*)SRAM1_BASE + 1 ) < CFG_APP_START_SECTOR_INDEX )
 800cfee:	4b0c      	ldr	r3, [pc, #48]	; (800d020 <BootModeCheck+0x84>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	2b2f      	cmp	r3, #47	; 0x2f
 800cff4:	d811      	bhi.n	800d01a <BootModeCheck+0x7e>
        {
          *((uint8_t*)SRAM1_BASE+1) = CFG_APP_START_SECTOR_INDEX;
 800cff6:	4b0a      	ldr	r3, [pc, #40]	; (800d020 <BootModeCheck+0x84>)
 800cff8:	2230      	movs	r2, #48	; 0x30
 800cffa:	701a      	strb	r2, [r3, #0]
          *((uint8_t*)SRAM1_BASE+2) = 0xFF;
 800cffc:	4b09      	ldr	r3, [pc, #36]	; (800d024 <BootModeCheck+0x88>)
 800cffe:	22ff      	movs	r2, #255	; 0xff
 800d000:	701a      	strb	r2, [r3, #0]
    if ( ( *(uint8_t*)SRAM1_BASE) == CFG_REBOOT_ON_DOWNLOADED_FW )
 800d002:	e00a      	b.n	800d01a <BootModeCheck+0x7e>
        }
      }
      else 
      {
        if ( ( *(uint8_t*)SRAM1_BASE ) == CFG_REBOOT_ON_CPU2_UPGRADE )
 800d004:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	d005      	beq.n	800d01a <BootModeCheck+0x7e>
           * There should be no use case to be there because the device already starts from power up
           * and the SRAM1 is then filled with the value define by the user
           * However, it could be that a reset occurs just after a power up and in that case, the Thread_Ota
           * will be running but the sectors to download a new App may not be erased
           */
          JumpSelectionOnPowerUp( );
 800d00e:	f000 f80b 	bl	800d028 <JumpSelectionOnPowerUp>
    if ( ( *(uint8_t*)SRAM1_BASE) == CFG_REBOOT_ON_DOWNLOADED_FW )
 800d012:	e002      	b.n	800d01a <BootModeCheck+0x7e>
    /**
     * On Power up, the content of SRAM1 is random
     * The only thing that could be done is to jump on either the firmware application
     * or the Thread_Ota application
     */
    JumpSelectionOnPowerUp( );
 800d014:	f000 f808 	bl	800d028 <JumpSelectionOnPowerUp>
  }

  /**
   * Return to the startup file and run the Thread_Ota application
   */
  return;
 800d018:	e000      	b.n	800d01c <BootModeCheck+0x80>
    if ( ( *(uint8_t*)SRAM1_BASE) == CFG_REBOOT_ON_DOWNLOADED_FW )
 800d01a:	bf00      	nop
  return;
 800d01c:	bf00      	nop
}
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	20000001 	.word	0x20000001
 800d024:	20000002 	.word	0x20000002

0800d028 <JumpSelectionOnPowerUp>:

static void JumpSelectionOnPowerUp( void )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	af00      	add	r7, sp, #0
  /**
   * Check if there is a FW App
   */
  if ( CheckFwAppValidity( ) != 0 )
 800d02c:	f000 f838 	bl	800d0a0 <CheckFwAppValidity>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d006      	beq.n	800d044 <JumpSelectionOnPowerUp+0x1c>
  {
    /**
     * The SRAM1 is random but Application FW exist.
     * Initialize SRAM1 to indicate we requested to reboot of firmware application
     */
    *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_DOWNLOADED_FW;
 800d036:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d03a:	2200      	movs	r2, #0
 800d03c:	701a      	strb	r2, [r3, #0]

    /**
     * A valid application is available
     * Jump now on the application
     */
    JumpFwApp();
 800d03e:	f000 f811 	bl	800d064 <JumpFwApp>
     * Erase all sectors specified by byte1 and byte1 in SRAM1 to download a new App.
     */
    *((uint8_t*)SRAM1_BASE+1) = CFG_APP_START_SECTOR_INDEX;
    *((uint8_t*)SRAM1_BASE+2) = 0xFF;
  }
  return;
 800d042:	e00a      	b.n	800d05a <JumpSelectionOnPowerUp+0x32>
    *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_OTA_FW;
 800d044:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d048:	2201      	movs	r2, #1
 800d04a:	701a      	strb	r2, [r3, #0]
    *((uint8_t*)SRAM1_BASE+1) = CFG_APP_START_SECTOR_INDEX;
 800d04c:	4b03      	ldr	r3, [pc, #12]	; (800d05c <JumpSelectionOnPowerUp+0x34>)
 800d04e:	2230      	movs	r2, #48	; 0x30
 800d050:	701a      	strb	r2, [r3, #0]
    *((uint8_t*)SRAM1_BASE+2) = 0xFF;
 800d052:	4b03      	ldr	r3, [pc, #12]	; (800d060 <JumpSelectionOnPowerUp+0x38>)
 800d054:	22ff      	movs	r2, #255	; 0xff
 800d056:	701a      	strb	r2, [r3, #0]
  return;
 800d058:	bf00      	nop
}
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	20000001 	.word	0x20000001
 800d060:	20000002 	.word	0x20000002

0800d064 <JumpFwApp>:
/**
 * Jump to existing FW App in flash
 * It never returns
 */
static void JumpFwApp( void )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
  fct_t app_reset_handler;

  SCB->VTOR = FLASH_BASE + (CFG_APP_START_SECTOR_INDEX * 0x1000);
 800d06a:	4b0a      	ldr	r3, [pc, #40]	; (800d094 <JumpFwApp+0x30>)
 800d06c:	4a0a      	ldr	r2, [pc, #40]	; (800d098 <JumpFwApp+0x34>)
 800d06e:	609a      	str	r2, [r3, #8]
  __set_MSP(*(uint32_t*)(FLASH_BASE + (CFG_APP_START_SECTOR_INDEX * 0x1000)));
 800d070:	4b09      	ldr	r3, [pc, #36]	; (800d098 <JumpFwApp+0x34>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	f383 8808 	msr	MSP, r3
}
 800d07c:	bf00      	nop
  app_reset_handler = (fct_t)(*(uint32_t*)(FLASH_BASE + (CFG_APP_START_SECTOR_INDEX * 0x1000) + 4));
 800d07e:	4b07      	ldr	r3, [pc, #28]	; (800d09c <JumpFwApp+0x38>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	607b      	str	r3, [r7, #4]
  app_reset_handler();
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4798      	blx	r3
   * However, if for any reason a PUSH instruction is added at the entry of  JumpFwApp(),
   * we need to make sure the POP instruction is not there before app_reset_handler() is called
   * The way to ensure this is to add a dummy code after app_reset_handler() is called
   * This prevents app_reset_handler() to be the last code in the function.
   */
  __WFI();
 800d088:	bf30      	wfi


  return;
 800d08a:	bf00      	nop
}
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	e000ed00 	.word	0xe000ed00
 800d098:	08030000 	.word	0x08030000
 800d09c:	08030004 	.word	0x08030004

0800d0a0 <CheckFwAppValidity>:

static uint8_t CheckFwAppValidity( void )
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b089      	sub	sp, #36	; 0x24
 800d0a4:	af00      	add	r7, sp, #0
  uint8_t status;
  uint32_t magic_keyword_address;
  uint32_t last_user_flash_address;
  uint32_t sbrv_field, sbrv_field_sector, last_user_flash_address_sfsa, last_user_flash_address_sbrv;

  magic_keyword_address = *(uint32_t*)(FLASH_BASE + (CFG_APP_START_SECTOR_INDEX * 0x1000 + 0x140));
 800d0a6:	4b20      	ldr	r3, [pc, #128]	; (800d128 <CheckFwAppValidity+0x88>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	617b      	str	r3, [r7, #20]
  last_user_flash_address_sfsa = (((READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos) << 12) + FLASH_BASE) - 4;
 800d0ac:	4b1f      	ldr	r3, [pc, #124]	; (800d12c <CheckFwAppValidity+0x8c>)
 800d0ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0b2:	031b      	lsls	r3, r3, #12
 800d0b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d0b8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800d0bc:	3b04      	subs	r3, #4
 800d0be:	613b      	str	r3, [r7, #16]

  sbrv_field = (READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) >> FLASH_SRRVR_SBRV_Pos);
 800d0c0:	4b1a      	ldr	r3, [pc, #104]	; (800d12c <CheckFwAppValidity+0x8c>)
 800d0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0c6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d0ca:	60fb      	str	r3, [r7, #12]
  /* Divide sbrv_field by 1024 to be compared to SFSA value */
  sbrv_field_sector = sbrv_field / 1024;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	0a9b      	lsrs	r3, r3, #10
 800d0d0:	60bb      	str	r3, [r7, #8]
  last_user_flash_address_sbrv = ((sbrv_field_sector << 12) + FLASH_BASE) - 4;
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	031b      	lsls	r3, r3, #12
 800d0d6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800d0da:	3b04      	subs	r3, #4
 800d0dc:	607b      	str	r3, [r7, #4]

  if(last_user_flash_address_sbrv < last_user_flash_address_sfsa)
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d202      	bcs.n	800d0ec <CheckFwAppValidity+0x4c>
  {
    last_user_flash_address = last_user_flash_address_sbrv;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	61bb      	str	r3, [r7, #24]
 800d0ea:	e001      	b.n	800d0f0 <CheckFwAppValidity+0x50>
  }
  else
  {
    last_user_flash_address = last_user_flash_address_sfsa;
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	61bb      	str	r3, [r7, #24]
  }

  if( (magic_keyword_address < FLASH_BASE) || (magic_keyword_address > last_user_flash_address) )
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0f6:	d303      	bcc.n	800d100 <CheckFwAppValidity+0x60>
 800d0f8:	697a      	ldr	r2, [r7, #20]
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d902      	bls.n	800d106 <CheckFwAppValidity+0x66>
  {
    /**
     * The address is not valid
     */
    status = 0;
 800d100:	2300      	movs	r3, #0
 800d102:	77fb      	strb	r3, [r7, #31]
 800d104:	e009      	b.n	800d11a <CheckFwAppValidity+0x7a>
  }
  else
  {
    if( (*(uint32_t*)magic_keyword_address) != 0x94448A29  )
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a09      	ldr	r2, [pc, #36]	; (800d130 <CheckFwAppValidity+0x90>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d002      	beq.n	800d116 <CheckFwAppValidity+0x76>
    {
      /**
       * A firmware update procedure did not complete
       */
      status = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	77fb      	strb	r3, [r7, #31]
 800d114:	e001      	b.n	800d11a <CheckFwAppValidity+0x7a>
    else
    {
      /**
       * The firmware application is available
       */
      status = 1;
 800d116:	2301      	movs	r3, #1
 800d118:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 800d11a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3724      	adds	r7, #36	; 0x24
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr
 800d128:	08030140 	.word	0x08030140
 800d12c:	58004000 	.word	0x58004000
 800d130:	94448a29 	.word	0x94448a29

0800d134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	af00      	add	r7, sp, #0
  BootModeCheck();
 800d138:	f7ff ff30 	bl	800cf9c <BootModeCheck>
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800d13c:	4b24      	ldr	r3, [pc, #144]	; (800d1d0 <SystemInit+0x9c>)
 800d13e:	2200      	movs	r2, #0
 800d140:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800d142:	4b23      	ldr	r3, [pc, #140]	; (800d1d0 <SystemInit+0x9c>)
 800d144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d148:	4a21      	ldr	r2, [pc, #132]	; (800d1d0 <SystemInit+0x9c>)
 800d14a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d14e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800d152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d15c:	f043 0301 	orr.w	r3, r3, #1
 800d160:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800d162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d166:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800d16a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800d16c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d176:	4b17      	ldr	r3, [pc, #92]	; (800d1d4 <SystemInit+0xa0>)
 800d178:	4013      	ands	r3, r2
 800d17a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800d17c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d188:	f023 0305 	bic.w	r3, r3, #5
 800d18c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800d190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d19c:	f023 0301 	bic.w	r3, r3, #1
 800d1a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800d1a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1a8:	4a0b      	ldr	r2, [pc, #44]	; (800d1d8 <SystemInit+0xa4>)
 800d1aa:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800d1ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1b0:	4a09      	ldr	r2, [pc, #36]	; (800d1d8 <SystemInit+0xa4>)
 800d1b2:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d1b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d1be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800d1c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	619a      	str	r2, [r3, #24]
}
 800d1cc:	bf00      	nop
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	e000ed00 	.word	0xe000ed00
 800d1d4:	faf6fefb 	.word	0xfaf6fefb
 800d1d8:	22041000 	.word	0x22041000

0800d1dc <LL_DBGMCU_EnableDBGSleepMode>:
{
 800d1dc:	b480      	push	{r7}
 800d1de:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800d1e0:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	4a04      	ldr	r2, [pc, #16]	; (800d1f8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800d1e6:	f043 0301 	orr.w	r3, r3, #1
 800d1ea:	6053      	str	r3, [r2, #4]
}
 800d1ec:	bf00      	nop
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	e0042000 	.word	0xe0042000

0800d1fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d206:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <HAL_Init+0x3c>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a0b      	ldr	r2, [pc, #44]	; (800d238 <HAL_Init+0x3c>)
 800d20c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d210:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d212:	2003      	movs	r0, #3
 800d214:	f000 f9d0 	bl	800d5b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d218:	2000      	movs	r0, #0
 800d21a:	f000 f80f 	bl	800d23c <HAL_InitTick>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d002      	beq.n	800d22a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	71fb      	strb	r3, [r7, #7]
 800d228:	e001      	b.n	800d22e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800d22a:	f7fd f8a0 	bl	800a36e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800d22e:	79fb      	ldrb	r3, [r7, #7]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	58004000 	.word	0x58004000

0800d23c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800d244:	2300      	movs	r3, #0
 800d246:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800d248:	4b17      	ldr	r3, [pc, #92]	; (800d2a8 <HAL_InitTick+0x6c>)
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d024      	beq.n	800d29a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800d250:	f002 fb7e 	bl	800f950 <HAL_RCC_GetHCLKFreq>
 800d254:	4602      	mov	r2, r0
 800d256:	4b14      	ldr	r3, [pc, #80]	; (800d2a8 <HAL_InitTick+0x6c>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	4619      	mov	r1, r3
 800d25c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d260:	fbb3 f3f1 	udiv	r3, r3, r1
 800d264:	fbb2 f3f3 	udiv	r3, r2, r3
 800d268:	4618      	mov	r0, r3
 800d26a:	f000 f9ea 	bl	800d642 <HAL_SYSTICK_Config>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10f      	bne.n	800d294 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b0f      	cmp	r3, #15
 800d278:	d809      	bhi.n	800d28e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d27a:	2200      	movs	r2, #0
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	f04f 30ff 	mov.w	r0, #4294967295
 800d282:	f000 f9a4 	bl	800d5ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d286:	4a09      	ldr	r2, [pc, #36]	; (800d2ac <HAL_InitTick+0x70>)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6013      	str	r3, [r2, #0]
 800d28c:	e007      	b.n	800d29e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	73fb      	strb	r3, [r7, #15]
 800d292:	e004      	b.n	800d29e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	73fb      	strb	r3, [r7, #15]
 800d298:	e001      	b.n	800d29e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800d29a:	2301      	movs	r3, #1
 800d29c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	200000c0 	.word	0x200000c0
 800d2ac:	200000bc 	.word	0x200000bc

0800d2b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800d2b4:	4b06      	ldr	r3, [pc, #24]	; (800d2d0 <HAL_IncTick+0x20>)
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	4b06      	ldr	r3, [pc, #24]	; (800d2d4 <HAL_IncTick+0x24>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4413      	add	r3, r2
 800d2c0:	4a04      	ldr	r2, [pc, #16]	; (800d2d4 <HAL_IncTick+0x24>)
 800d2c2:	6013      	str	r3, [r2, #0]
}
 800d2c4:	bf00      	nop
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	200000c0 	.word	0x200000c0
 800d2d4:	200009a8 	.word	0x200009a8

0800d2d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	af00      	add	r7, sp, #0
  return uwTick;
 800d2dc:	4b03      	ldr	r3, [pc, #12]	; (800d2ec <HAL_GetTick+0x14>)
 800d2de:	681b      	ldr	r3, [r3, #0]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	200009a8 	.word	0x200009a8

0800d2f0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800d2f4:	4b03      	ldr	r3, [pc, #12]	; (800d304 <HAL_GetTickPrio+0x14>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	200000bc 	.word	0x200000bc

0800d308 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800d308:	b480      	push	{r7}
 800d30a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800d30c:	4b03      	ldr	r3, [pc, #12]	; (800d31c <HAL_GetTickFreq+0x14>)
 800d30e:	781b      	ldrb	r3, [r3, #0]
}
 800d310:	4618      	mov	r0, r3
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	200000c0 	.word	0x200000c0

0800d320 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800d324:	f7ff ff5a 	bl	800d1dc <LL_DBGMCU_EnableDBGSleepMode>
}
 800d328:	bf00      	nop
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <__NVIC_SetPriorityGrouping>:
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f003 0307 	and.w	r3, r3, #7
 800d33a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d33c:	4b0c      	ldr	r3, [pc, #48]	; (800d370 <__NVIC_SetPriorityGrouping+0x44>)
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d348:	4013      	ands	r3, r2
 800d34a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d35c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d35e:	4a04      	ldr	r2, [pc, #16]	; (800d370 <__NVIC_SetPriorityGrouping+0x44>)
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	60d3      	str	r3, [r2, #12]
}
 800d364:	bf00      	nop
 800d366:	3714      	adds	r7, #20
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr
 800d370:	e000ed00 	.word	0xe000ed00

0800d374 <__NVIC_GetPriorityGrouping>:
{
 800d374:	b480      	push	{r7}
 800d376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d378:	4b04      	ldr	r3, [pc, #16]	; (800d38c <__NVIC_GetPriorityGrouping+0x18>)
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	0a1b      	lsrs	r3, r3, #8
 800d37e:	f003 0307 	and.w	r3, r3, #7
}
 800d382:	4618      	mov	r0, r3
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	e000ed00 	.word	0xe000ed00

0800d390 <__NVIC_EnableIRQ>:
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	4603      	mov	r3, r0
 800d398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d39a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	db0b      	blt.n	800d3ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d3a2:	79fb      	ldrb	r3, [r7, #7]
 800d3a4:	f003 021f 	and.w	r2, r3, #31
 800d3a8:	4907      	ldr	r1, [pc, #28]	; (800d3c8 <__NVIC_EnableIRQ+0x38>)
 800d3aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3ae:	095b      	lsrs	r3, r3, #5
 800d3b0:	2001      	movs	r0, #1
 800d3b2:	fa00 f202 	lsl.w	r2, r0, r2
 800d3b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d3ba:	bf00      	nop
 800d3bc:	370c      	adds	r7, #12
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	e000e100 	.word	0xe000e100

0800d3cc <__NVIC_DisableIRQ>:
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d3d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	db12      	blt.n	800d404 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d3de:	79fb      	ldrb	r3, [r7, #7]
 800d3e0:	f003 021f 	and.w	r2, r3, #31
 800d3e4:	490a      	ldr	r1, [pc, #40]	; (800d410 <__NVIC_DisableIRQ+0x44>)
 800d3e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3ea:	095b      	lsrs	r3, r3, #5
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	fa00 f202 	lsl.w	r2, r0, r2
 800d3f2:	3320      	adds	r3, #32
 800d3f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d3f8:	f3bf 8f4f 	dsb	sy
}
 800d3fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d3fe:	f3bf 8f6f 	isb	sy
}
 800d402:	bf00      	nop
}
 800d404:	bf00      	nop
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	e000e100 	.word	0xe000e100

0800d414 <__NVIC_SetPendingIRQ>:
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	4603      	mov	r3, r0
 800d41c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d41e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d422:	2b00      	cmp	r3, #0
 800d424:	db0c      	blt.n	800d440 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d426:	79fb      	ldrb	r3, [r7, #7]
 800d428:	f003 021f 	and.w	r2, r3, #31
 800d42c:	4907      	ldr	r1, [pc, #28]	; (800d44c <__NVIC_SetPendingIRQ+0x38>)
 800d42e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d432:	095b      	lsrs	r3, r3, #5
 800d434:	2001      	movs	r0, #1
 800d436:	fa00 f202 	lsl.w	r2, r0, r2
 800d43a:	3340      	adds	r3, #64	; 0x40
 800d43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d440:	bf00      	nop
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	e000e100 	.word	0xe000e100

0800d450 <__NVIC_ClearPendingIRQ>:
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d45a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	db0c      	blt.n	800d47c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d462:	79fb      	ldrb	r3, [r7, #7]
 800d464:	f003 021f 	and.w	r2, r3, #31
 800d468:	4907      	ldr	r1, [pc, #28]	; (800d488 <__NVIC_ClearPendingIRQ+0x38>)
 800d46a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d46e:	095b      	lsrs	r3, r3, #5
 800d470:	2001      	movs	r0, #1
 800d472:	fa00 f202 	lsl.w	r2, r0, r2
 800d476:	3360      	adds	r3, #96	; 0x60
 800d478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	e000e100 	.word	0xe000e100

0800d48c <__NVIC_SetPriority>:
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	4603      	mov	r3, r0
 800d494:	6039      	str	r1, [r7, #0]
 800d496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	db0a      	blt.n	800d4b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	490c      	ldr	r1, [pc, #48]	; (800d4d8 <__NVIC_SetPriority+0x4c>)
 800d4a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4aa:	0112      	lsls	r2, r2, #4
 800d4ac:	b2d2      	uxtb	r2, r2
 800d4ae:	440b      	add	r3, r1
 800d4b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d4b4:	e00a      	b.n	800d4cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	4908      	ldr	r1, [pc, #32]	; (800d4dc <__NVIC_SetPriority+0x50>)
 800d4bc:	79fb      	ldrb	r3, [r7, #7]
 800d4be:	f003 030f 	and.w	r3, r3, #15
 800d4c2:	3b04      	subs	r3, #4
 800d4c4:	0112      	lsls	r2, r2, #4
 800d4c6:	b2d2      	uxtb	r2, r2
 800d4c8:	440b      	add	r3, r1
 800d4ca:	761a      	strb	r2, [r3, #24]
}
 800d4cc:	bf00      	nop
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr
 800d4d8:	e000e100 	.word	0xe000e100
 800d4dc:	e000ed00 	.word	0xe000ed00

0800d4e0 <NVIC_EncodePriority>:
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b089      	sub	sp, #36	; 0x24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f003 0307 	and.w	r3, r3, #7
 800d4f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	f1c3 0307 	rsb	r3, r3, #7
 800d4fa:	2b04      	cmp	r3, #4
 800d4fc:	bf28      	it	cs
 800d4fe:	2304      	movcs	r3, #4
 800d500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	3304      	adds	r3, #4
 800d506:	2b06      	cmp	r3, #6
 800d508:	d902      	bls.n	800d510 <NVIC_EncodePriority+0x30>
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	3b03      	subs	r3, #3
 800d50e:	e000      	b.n	800d512 <NVIC_EncodePriority+0x32>
 800d510:	2300      	movs	r3, #0
 800d512:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d514:	f04f 32ff 	mov.w	r2, #4294967295
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	fa02 f303 	lsl.w	r3, r2, r3
 800d51e:	43da      	mvns	r2, r3
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	401a      	ands	r2, r3
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d528:	f04f 31ff 	mov.w	r1, #4294967295
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	fa01 f303 	lsl.w	r3, r1, r3
 800d532:	43d9      	mvns	r1, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d538:	4313      	orrs	r3, r2
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3724      	adds	r7, #36	; 0x24
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr
	...

0800d548 <__NVIC_SystemReset>:
{
 800d548:	b480      	push	{r7}
 800d54a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d54c:	f3bf 8f4f 	dsb	sy
}
 800d550:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d552:	4b06      	ldr	r3, [pc, #24]	; (800d56c <__NVIC_SystemReset+0x24>)
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d55a:	4904      	ldr	r1, [pc, #16]	; (800d56c <__NVIC_SystemReset+0x24>)
 800d55c:	4b04      	ldr	r3, [pc, #16]	; (800d570 <__NVIC_SystemReset+0x28>)
 800d55e:	4313      	orrs	r3, r2
 800d560:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d562:	f3bf 8f4f 	dsb	sy
}
 800d566:	bf00      	nop
    __NOP();
 800d568:	bf00      	nop
 800d56a:	e7fd      	b.n	800d568 <__NVIC_SystemReset+0x20>
 800d56c:	e000ed00 	.word	0xe000ed00
 800d570:	05fa0004 	.word	0x05fa0004

0800d574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	3b01      	subs	r3, #1
 800d580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d584:	d301      	bcc.n	800d58a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d586:	2301      	movs	r3, #1
 800d588:	e00f      	b.n	800d5aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d58a:	4a0a      	ldr	r2, [pc, #40]	; (800d5b4 <SysTick_Config+0x40>)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	3b01      	subs	r3, #1
 800d590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d592:	210f      	movs	r1, #15
 800d594:	f04f 30ff 	mov.w	r0, #4294967295
 800d598:	f7ff ff78 	bl	800d48c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d59c:	4b05      	ldr	r3, [pc, #20]	; (800d5b4 <SysTick_Config+0x40>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d5a2:	4b04      	ldr	r3, [pc, #16]	; (800d5b4 <SysTick_Config+0x40>)
 800d5a4:	2207      	movs	r2, #7
 800d5a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	e000e010 	.word	0xe000e010

0800d5b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff feb3 	bl	800d32c <__NVIC_SetPriorityGrouping>
}
 800d5c6:	bf00      	nop
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b086      	sub	sp, #24
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	60b9      	str	r1, [r7, #8]
 800d5d8:	607a      	str	r2, [r7, #4]
 800d5da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d5dc:	f7ff feca 	bl	800d374 <__NVIC_GetPriorityGrouping>
 800d5e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	68b9      	ldr	r1, [r7, #8]
 800d5e6:	6978      	ldr	r0, [r7, #20]
 800d5e8:	f7ff ff7a 	bl	800d4e0 <NVIC_EncodePriority>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5f2:	4611      	mov	r1, r2
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7ff ff49 	bl	800d48c <__NVIC_SetPriority>
}
 800d5fa:	bf00      	nop
 800d5fc:	3718      	adds	r7, #24
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b082      	sub	sp, #8
 800d606:	af00      	add	r7, sp, #0
 800d608:	4603      	mov	r3, r0
 800d60a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d60c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d610:	4618      	mov	r0, r3
 800d612:	f7ff febd 	bl	800d390 <__NVIC_EnableIRQ>
}
 800d616:	bf00      	nop
 800d618:	3708      	adds	r7, #8
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b082      	sub	sp, #8
 800d622:	af00      	add	r7, sp, #0
 800d624:	4603      	mov	r3, r0
 800d626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7ff fecd 	bl	800d3cc <__NVIC_DisableIRQ>
}
 800d632:	bf00      	nop
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800d63e:	f7ff ff83 	bl	800d548 <__NVIC_SystemReset>

0800d642 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b082      	sub	sp, #8
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff ff92 	bl	800d574 <SysTick_Config>
 800d650:	4603      	mov	r3, r0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b082      	sub	sp, #8
 800d65e:	af00      	add	r7, sp, #0
 800d660:	4603      	mov	r3, r0
 800d662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800d664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff fed3 	bl	800d414 <__NVIC_SetPendingIRQ>
}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b082      	sub	sp, #8
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	4603      	mov	r3, r0
 800d67e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800d680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d684:	4618      	mov	r0, r3
 800d686:	f7ff fee3 	bl	800d450 <__NVIC_ClearPendingIRQ>
}
 800d68a:	bf00      	nop
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
	...

0800d694 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e08e      	b.n	800d7c4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	4b47      	ldr	r3, [pc, #284]	; (800d7cc <HAL_DMA_Init+0x138>)
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d80f      	bhi.n	800d6d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	4b45      	ldr	r3, [pc, #276]	; (800d7d0 <HAL_DMA_Init+0x13c>)
 800d6ba:	4413      	add	r3, r2
 800d6bc:	4a45      	ldr	r2, [pc, #276]	; (800d7d4 <HAL_DMA_Init+0x140>)
 800d6be:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c2:	091b      	lsrs	r3, r3, #4
 800d6c4:	009a      	lsls	r2, r3, #2
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a42      	ldr	r2, [pc, #264]	; (800d7d8 <HAL_DMA_Init+0x144>)
 800d6ce:	641a      	str	r2, [r3, #64]	; 0x40
 800d6d0:	e00e      	b.n	800d6f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	4b40      	ldr	r3, [pc, #256]	; (800d7dc <HAL_DMA_Init+0x148>)
 800d6da:	4413      	add	r3, r2
 800d6dc:	4a3d      	ldr	r2, [pc, #244]	; (800d7d4 <HAL_DMA_Init+0x140>)
 800d6de:	fba2 2303 	umull	r2, r3, r2, r3
 800d6e2:	091b      	lsrs	r3, r3, #4
 800d6e4:	009a      	lsls	r2, r3, #2
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4a3c      	ldr	r2, [pc, #240]	; (800d7e0 <HAL_DMA_Init+0x14c>)
 800d6ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2202      	movs	r2, #2
 800d6f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800d706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d70a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800d714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	691b      	ldr	r3, [r3, #16]
 800d71a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	699b      	ldr	r3, [r3, #24]
 800d726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d72c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a1b      	ldr	r3, [r3, #32]
 800d732:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	4313      	orrs	r3, r2
 800d738:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 fa74 	bl	800dc30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d750:	d102      	bne.n	800d758 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685a      	ldr	r2, [r3, #4]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d760:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800d764:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d76e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d010      	beq.n	800d79a <HAL_DMA_Init+0x106>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	2b04      	cmp	r3, #4
 800d77e:	d80c      	bhi.n	800d79a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fa93 	bl	800dcac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d78a:	2200      	movs	r2, #0
 800d78c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d796:	605a      	str	r2, [r3, #4]
 800d798:	e008      	b.n	800d7ac <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	40020407 	.word	0x40020407
 800d7d0:	bffdfff8 	.word	0xbffdfff8
 800d7d4:	cccccccd 	.word	0xcccccccd
 800d7d8:	40020000 	.word	0x40020000
 800d7dc:	bffdfbf8 	.word	0xbffdfbf8
 800d7e0:	40020400 	.word	0x40020400

0800d7e4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
 800d7f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d101      	bne.n	800d804 <HAL_DMA_Start_IT+0x20>
 800d800:	2302      	movs	r3, #2
 800d802:	e066      	b.n	800d8d2 <HAL_DMA_Start_IT+0xee>
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d812:	b2db      	uxtb	r3, r3
 800d814:	2b01      	cmp	r3, #1
 800d816:	d155      	bne.n	800d8c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2202      	movs	r2, #2
 800d81c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2200      	movs	r2, #0
 800d824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f022 0201 	bic.w	r2, r2, #1
 800d834:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	68b9      	ldr	r1, [r7, #8]
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f000 f9b9 	bl	800dbb4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d846:	2b00      	cmp	r3, #0
 800d848:	d008      	beq.n	800d85c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f042 020e 	orr.w	r2, r2, #14
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	e00f      	b.n	800d87c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f022 0204 	bic.w	r2, r2, #4
 800d86a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f042 020a 	orr.w	r2, r2, #10
 800d87a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d886:	2b00      	cmp	r3, #0
 800d888:	d007      	beq.n	800d89a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d898:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d007      	beq.n	800d8b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f042 0201 	orr.w	r2, r2, #1
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	e005      	b.n	800d8d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800d8cc:	2302      	movs	r3, #2
 800d8ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800d8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3718      	adds	r7, #24
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d8da:	b480      	push	{r7}
 800d8dc:	b083      	sub	sp, #12
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e04f      	b.n	800d98c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d008      	beq.n	800d90a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2204      	movs	r2, #4
 800d8fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d906:	2301      	movs	r3, #1
 800d908:	e040      	b.n	800d98c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f022 020e 	bic.w	r2, r2, #14
 800d918:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d928:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f022 0201 	bic.w	r2, r2, #1
 800d938:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d93e:	f003 021c 	and.w	r2, r3, #28
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d946:	2101      	movs	r1, #1
 800d948:	fa01 f202 	lsl.w	r2, r1, r2
 800d94c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d956:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00c      	beq.n	800d97a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d96a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d96e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d978:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	2b02      	cmp	r3, #2
 800d9ae:	d005      	beq.n	800d9bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2204      	movs	r2, #4
 800d9b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	73fb      	strb	r3, [r7, #15]
 800d9ba:	e047      	b.n	800da4c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f022 020e 	bic.w	r2, r2, #14
 800d9ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f022 0201 	bic.w	r2, r2, #1
 800d9da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d9ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9f0:	f003 021c 	and.w	r2, r3, #28
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f8:	2101      	movs	r1, #1
 800d9fa:	fa01 f202 	lsl.w	r2, r1, r2
 800d9fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800da08:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00c      	beq.n	800da2c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800da20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800da2a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da40:	2b00      	cmp	r3, #0
 800da42:	d003      	beq.n	800da4c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	4798      	blx	r3
    }
  }
  return status;
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b084      	sub	sp, #16
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da72:	f003 031c 	and.w	r3, r3, #28
 800da76:	2204      	movs	r2, #4
 800da78:	409a      	lsls	r2, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	4013      	ands	r3, r2
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d026      	beq.n	800dad0 <HAL_DMA_IRQHandler+0x7a>
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	f003 0304 	and.w	r3, r3, #4
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d021      	beq.n	800dad0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f003 0320 	and.w	r3, r3, #32
 800da96:	2b00      	cmp	r3, #0
 800da98:	d107      	bne.n	800daaa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f022 0204 	bic.w	r2, r2, #4
 800daa8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daae:	f003 021c 	and.w	r2, r3, #28
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab6:	2104      	movs	r1, #4
 800dab8:	fa01 f202 	lsl.w	r2, r1, r2
 800dabc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d071      	beq.n	800dbaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800dace:	e06c      	b.n	800dbaa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dad4:	f003 031c 	and.w	r3, r3, #28
 800dad8:	2202      	movs	r2, #2
 800dada:	409a      	lsls	r2, r3
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	4013      	ands	r3, r2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d02e      	beq.n	800db42 <HAL_DMA_IRQHandler+0xec>
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	f003 0302 	and.w	r3, r3, #2
 800daea:	2b00      	cmp	r3, #0
 800daec:	d029      	beq.n	800db42 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f003 0320 	and.w	r3, r3, #32
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10b      	bne.n	800db14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f022 020a 	bic.w	r2, r2, #10
 800db0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db18:	f003 021c 	and.w	r2, r3, #28
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db20:	2102      	movs	r1, #2
 800db22:	fa01 f202 	lsl.w	r2, r1, r2
 800db26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db34:	2b00      	cmp	r3, #0
 800db36:	d038      	beq.n	800dbaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800db40:	e033      	b.n	800dbaa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db46:	f003 031c 	and.w	r3, r3, #28
 800db4a:	2208      	movs	r2, #8
 800db4c:	409a      	lsls	r2, r3
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	4013      	ands	r3, r2
 800db52:	2b00      	cmp	r3, #0
 800db54:	d02a      	beq.n	800dbac <HAL_DMA_IRQHandler+0x156>
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	f003 0308 	and.w	r3, r3, #8
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d025      	beq.n	800dbac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f022 020e 	bic.w	r2, r2, #14
 800db6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db74:	f003 021c 	and.w	r2, r3, #28
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db7c:	2101      	movs	r1, #1
 800db7e:	fa01 f202 	lsl.w	r2, r1, r2
 800db82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2201      	movs	r2, #1
 800db8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2200      	movs	r2, #0
 800db96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d004      	beq.n	800dbac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800dbaa:	bf00      	nop
 800dbac:	bf00      	nop
}
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
 800dbc0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800dbca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d004      	beq.n	800dbde <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800dbdc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbe2:	f003 021c 	and.w	r2, r3, #28
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbea:	2101      	movs	r1, #1
 800dbec:	fa01 f202 	lsl.w	r2, r1, r2
 800dbf0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	2b10      	cmp	r3, #16
 800dc00:	d108      	bne.n	800dc14 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	68ba      	ldr	r2, [r7, #8]
 800dc10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800dc12:	e007      	b.n	800dc24 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	60da      	str	r2, [r3, #12]
}
 800dc24:	bf00      	nop
 800dc26:	3714      	adds	r7, #20
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	4b17      	ldr	r3, [pc, #92]	; (800dc9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d80a      	bhi.n	800dc5a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc48:	089b      	lsrs	r3, r3, #2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dc50:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	6493      	str	r3, [r2, #72]	; 0x48
 800dc58:	e007      	b.n	800dc6a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc5e:	089b      	lsrs	r3, r3, #2
 800dc60:	009a      	lsls	r2, r3, #2
 800dc62:	4b0f      	ldr	r3, [pc, #60]	; (800dca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800dc64:	4413      	add	r3, r2
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	3b08      	subs	r3, #8
 800dc72:	4a0c      	ldr	r2, [pc, #48]	; (800dca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800dc74:	fba2 2303 	umull	r2, r3, r2, r3
 800dc78:	091b      	lsrs	r3, r3, #4
 800dc7a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a0a      	ldr	r2, [pc, #40]	; (800dca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800dc80:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f003 031f 	and.w	r3, r3, #31
 800dc88:	2201      	movs	r2, #1
 800dc8a:	409a      	lsls	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dc90:	bf00      	nop
 800dc92:	3714      	adds	r7, #20
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr
 800dc9c:	40020407 	.word	0x40020407
 800dca0:	4002081c 	.word	0x4002081c
 800dca4:	cccccccd 	.word	0xcccccccd
 800dca8:	40020880 	.word	0x40020880

0800dcac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b085      	sub	sp, #20
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcbc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	4b0b      	ldr	r3, [pc, #44]	; (800dcf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800dcc2:	4413      	add	r3, r2
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	4a09      	ldr	r2, [pc, #36]	; (800dcf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800dcd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	3b01      	subs	r3, #1
 800dcd6:	f003 0303 	and.w	r3, r3, #3
 800dcda:	2201      	movs	r2, #1
 800dcdc:	409a      	lsls	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800dce2:	bf00      	nop
 800dce4:	3714      	adds	r7, #20
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	1000823f 	.word	0x1000823f
 800dcf4:	40020940 	.word	0x40020940

0800dcf8 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b087      	sub	sp, #28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	0c1b      	lsrs	r3, r3, #16
 800dd06:	f003 0301 	and.w	r3, r3, #1
 800dd0a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f003 031f 	and.w	r3, r3, #31
 800dd14:	2201      	movs	r2, #1
 800dd16:	fa02 f303 	lsl.w	r3, r2, r3
 800dd1a:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	015b      	lsls	r3, r3, #5
 800dd20:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 800dd24:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800dd28:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	693a      	ldr	r2, [r7, #16]
 800dd2e:	601a      	str	r2, [r3, #0]
}
 800dd30:	bf00      	nop
 800dd32:	371c      	adds	r7, #28
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr

0800dd3c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800dd4a:	4b1c      	ldr	r3, [pc, #112]	; (800ddbc <HAL_FLASH_Program+0x80>)
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d101      	bne.n	800dd56 <HAL_FLASH_Program+0x1a>
 800dd52:	2302      	movs	r3, #2
 800dd54:	e02d      	b.n	800ddb2 <HAL_FLASH_Program+0x76>
 800dd56:	4b19      	ldr	r3, [pc, #100]	; (800ddbc <HAL_FLASH_Program+0x80>)
 800dd58:	2201      	movs	r2, #1
 800dd5a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800dd5c:	4b17      	ldr	r3, [pc, #92]	; (800ddbc <HAL_FLASH_Program+0x80>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dd62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dd66:	f000 f90d 	bl	800df84 <FLASH_WaitForLastOperation>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800dd6e:	7dfb      	ldrb	r3, [r7, #23]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d11a      	bne.n	800ddaa <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d105      	bne.n	800dd86 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800dd7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd7e:	68b8      	ldr	r0, [r7, #8]
 800dd80:	f000 f970 	bl	800e064 <FLASH_Program_DoubleWord>
 800dd84:	e004      	b.n	800dd90 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	68b8      	ldr	r0, [r7, #8]
 800dd8c:	f00b f954 	bl	8019038 <_etext>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dd90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dd94:	f000 f8f6 	bl	800df84 <FLASH_WaitForLastOperation>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800dd9c:	4b08      	ldr	r3, [pc, #32]	; (800ddc0 <HAL_FLASH_Program+0x84>)
 800dd9e:	695a      	ldr	r2, [r3, #20]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	43db      	mvns	r3, r3
 800dda4:	4906      	ldr	r1, [pc, #24]	; (800ddc0 <HAL_FLASH_Program+0x84>)
 800dda6:	4013      	ands	r3, r2
 800dda8:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ddaa:	4b04      	ldr	r3, [pc, #16]	; (800ddbc <HAL_FLASH_Program+0x80>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800ddb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3718      	adds	r7, #24
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	200009ac 	.word	0x200009ac
 800ddc0:	58004000 	.word	0x58004000

0800ddc4 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 800ddca:	f04f 33ff 	mov.w	r3, #4294967295
 800ddce:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800ddd0:	4b41      	ldr	r3, [pc, #260]	; (800ded8 <HAL_FLASH_IRQHandler+0x114>)
 800ddd2:	691a      	ldr	r2, [r3, #16]
 800ddd4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800ddd8:	4013      	ands	r3, r2
 800ddda:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800dddc:	4b3e      	ldr	r3, [pc, #248]	; (800ded8 <HAL_FLASH_IRQHandler+0x114>)
 800ddde:	695a      	ldr	r2, [r3, #20]
 800dde0:	4b3e      	ldr	r3, [pc, #248]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	43db      	mvns	r3, r3
 800dde6:	493c      	ldr	r1, [pc, #240]	; (800ded8 <HAL_FLASH_IRQHandler+0x114>)
 800dde8:	4013      	ands	r3, r2
 800ddea:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 800ddec:	4b3b      	ldr	r3, [pc, #236]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800ddee:	689a      	ldr	r2, [r3, #8]
 800ddf0:	4b3b      	ldr	r3, [pc, #236]	; (800dee0 <HAL_FLASH_IRQHandler+0x11c>)
 800ddf2:	4013      	ands	r3, r2
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d003      	beq.n	800de00 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 800ddf8:	4b38      	ldr	r3, [pc, #224]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	607b      	str	r3, [r7, #4]
 800ddfe:	e008      	b.n	800de12 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 800de00:	4b36      	ldr	r3, [pc, #216]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de02:	689b      	ldr	r3, [r3, #8]
 800de04:	f003 0302 	and.w	r3, r3, #2
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d002      	beq.n	800de12 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 800de0c:	4b33      	ldr	r3, [pc, #204]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de0e:	691b      	ldr	r3, [r3, #16]
 800de10:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d022      	beq.n	800de5e <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800de18:	4b30      	ldr	r3, [pc, #192]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	4313      	orrs	r3, r2
 800de20:	4a2e      	ldr	r2, [pc, #184]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de22:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d007      	beq.n	800de3e <HAL_FLASH_IRQHandler+0x7a>
 800de2e:	4b2a      	ldr	r3, [pc, #168]	; (800ded8 <HAL_FLASH_IRQHandler+0x114>)
 800de30:	699a      	ldr	r2, [r3, #24]
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800de38:	4927      	ldr	r1, [pc, #156]	; (800ded8 <HAL_FLASH_IRQHandler+0x114>)
 800de3a:	4313      	orrs	r3, r2
 800de3c:	618b      	str	r3, [r1, #24]
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800de44:	2b00      	cmp	r3, #0
 800de46:	d004      	beq.n	800de52 <HAL_FLASH_IRQHandler+0x8e>
 800de48:	4a23      	ldr	r2, [pc, #140]	; (800ded8 <HAL_FLASH_IRQHandler+0x114>)
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800de50:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800de52:	4b22      	ldr	r3, [pc, #136]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de54:	2200      	movs	r2, #0
 800de56:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 f84d 	bl	800def8 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800de5e:	4b1e      	ldr	r3, [pc, #120]	; (800ded8 <HAL_FLASH_IRQHandler+0x114>)
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	f003 0301 	and.w	r3, r3, #1
 800de66:	2b01      	cmp	r3, #1
 800de68:	d124      	bne.n	800deb4 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800de6a:	4b1b      	ldr	r3, [pc, #108]	; (800ded8 <HAL_FLASH_IRQHandler+0x114>)
 800de6c:	2201      	movs	r2, #1
 800de6e:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800de70:	4b1a      	ldr	r3, [pc, #104]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	2b02      	cmp	r3, #2
 800de76:	d117      	bne.n	800dea8 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800de78:	4b18      	ldr	r3, [pc, #96]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de7a:	695b      	ldr	r3, [r3, #20]
 800de7c:	3b01      	subs	r3, #1
 800de7e:	4a17      	ldr	r2, [pc, #92]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de80:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 800de82:	4b16      	ldr	r3, [pc, #88]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de84:	695b      	ldr	r3, [r3, #20]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d00a      	beq.n	800dea0 <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 800de8a:	4b14      	ldr	r3, [pc, #80]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	3301      	adds	r3, #1
 800de90:	4a12      	ldr	r2, [pc, #72]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de92:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 800de94:	4b11      	ldr	r3, [pc, #68]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800de96:	691b      	ldr	r3, [r3, #16]
 800de98:	4618      	mov	r0, r3
 800de9a:	f000 f959 	bl	800e150 <FLASH_PageErase>
 800de9e:	e006      	b.n	800deae <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800dea0:	4b0e      	ldr	r3, [pc, #56]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	609a      	str	r2, [r3, #8]
 800dea6:	e002      	b.n	800deae <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800dea8:	4b0c      	ldr	r3, [pc, #48]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800deaa:	2200      	movs	r2, #0
 800deac:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 f818 	bl	800dee4 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 800deb4:	4b09      	ldr	r3, [pc, #36]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d108      	bne.n	800dece <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800debc:	4b06      	ldr	r3, [pc, #24]	; (800ded8 <HAL_FLASH_IRQHandler+0x114>)
 800debe:	695b      	ldr	r3, [r3, #20]
 800dec0:	4a05      	ldr	r2, [pc, #20]	; (800ded8 <HAL_FLASH_IRQHandler+0x114>)
 800dec2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800dec6:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800dec8:	4b04      	ldr	r3, [pc, #16]	; (800dedc <HAL_FLASH_IRQHandler+0x118>)
 800deca:	2200      	movs	r2, #0
 800decc:	701a      	strb	r2, [r3, #0]
  }
}
 800dece:	bf00      	nop
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	58004000 	.word	0x58004000
 800dedc:	200009ac 	.word	0x200009ac
 800dee0:	00040001 	.word	0x00040001

0800dee4 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800deec:	bf00      	nop
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800df12:	2300      	movs	r3, #0
 800df14:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800df16:	4b0b      	ldr	r3, [pc, #44]	; (800df44 <HAL_FLASH_Unlock+0x38>)
 800df18:	695b      	ldr	r3, [r3, #20]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	da0b      	bge.n	800df36 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800df1e:	4b09      	ldr	r3, [pc, #36]	; (800df44 <HAL_FLASH_Unlock+0x38>)
 800df20:	4a09      	ldr	r2, [pc, #36]	; (800df48 <HAL_FLASH_Unlock+0x3c>)
 800df22:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800df24:	4b07      	ldr	r3, [pc, #28]	; (800df44 <HAL_FLASH_Unlock+0x38>)
 800df26:	4a09      	ldr	r2, [pc, #36]	; (800df4c <HAL_FLASH_Unlock+0x40>)
 800df28:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800df2a:	4b06      	ldr	r3, [pc, #24]	; (800df44 <HAL_FLASH_Unlock+0x38>)
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	da01      	bge.n	800df36 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800df32:	2301      	movs	r3, #1
 800df34:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800df36:	79fb      	ldrb	r3, [r7, #7]
}
 800df38:	4618      	mov	r0, r3
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	58004000 	.word	0x58004000
 800df48:	45670123 	.word	0x45670123
 800df4c:	cdef89ab 	.word	0xcdef89ab

0800df50 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800df56:	2300      	movs	r3, #0
 800df58:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800df5a:	4b09      	ldr	r3, [pc, #36]	; (800df80 <HAL_FLASH_Lock+0x30>)
 800df5c:	695b      	ldr	r3, [r3, #20]
 800df5e:	4a08      	ldr	r2, [pc, #32]	; (800df80 <HAL_FLASH_Lock+0x30>)
 800df60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df64:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800df66:	4b06      	ldr	r3, [pc, #24]	; (800df80 <HAL_FLASH_Lock+0x30>)
 800df68:	695b      	ldr	r3, [r3, #20]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	db01      	blt.n	800df72 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
 800df70:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800df72:	79fb      	ldrb	r3, [r7, #7]
}
 800df74:	4618      	mov	r0, r3
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	58004000 	.word	0x58004000

0800df84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800df8c:	f7ff f9a4 	bl	800d2d8 <HAL_GetTick>
 800df90:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800df92:	e009      	b.n	800dfa8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800df94:	f7ff f9a0 	bl	800d2d8 <HAL_GetTick>
 800df98:	4602      	mov	r2, r0
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d801      	bhi.n	800dfa8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	e054      	b.n	800e052 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800dfa8:	4b2c      	ldr	r3, [pc, #176]	; (800e05c <FLASH_WaitForLastOperation+0xd8>)
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dfb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfb4:	d0ee      	beq.n	800df94 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800dfb6:	4b29      	ldr	r3, [pc, #164]	; (800e05c <FLASH_WaitForLastOperation+0xd8>)
 800dfb8:	691b      	ldr	r3, [r3, #16]
 800dfba:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f003 0301 	and.w	r3, r3, #1
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800dfc6:	4b25      	ldr	r3, [pc, #148]	; (800e05c <FLASH_WaitForLastOperation+0xd8>)
 800dfc8:	2201      	movs	r2, #1
 800dfca:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d007      	beq.n	800dfe6 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800dfd6:	4b21      	ldr	r3, [pc, #132]	; (800e05c <FLASH_WaitForLastOperation+0xd8>)
 800dfd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800dfdc:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dfe4:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800dfec:	4013      	ands	r3, r2
 800dfee:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d007      	beq.n	800e00a <FLASH_WaitForLastOperation+0x86>
 800dffa:	4b18      	ldr	r3, [pc, #96]	; (800e05c <FLASH_WaitForLastOperation+0xd8>)
 800dffc:	699a      	ldr	r2, [r3, #24]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e004:	4915      	ldr	r1, [pc, #84]	; (800e05c <FLASH_WaitForLastOperation+0xd8>)
 800e006:	4313      	orrs	r3, r2
 800e008:	618b      	str	r3, [r1, #24]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e010:	2b00      	cmp	r3, #0
 800e012:	d004      	beq.n	800e01e <FLASH_WaitForLastOperation+0x9a>
 800e014:	4a11      	ldr	r2, [pc, #68]	; (800e05c <FLASH_WaitForLastOperation+0xd8>)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e01c:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d00e      	beq.n	800e042 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800e024:	4a0e      	ldr	r2, [pc, #56]	; (800e060 <FLASH_WaitForLastOperation+0xdc>)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	e011      	b.n	800e052 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e02e:	f7ff f953 	bl	800d2d8 <HAL_GetTick>
 800e032:	4602      	mov	r2, r0
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d801      	bhi.n	800e042 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800e03e:	2303      	movs	r3, #3
 800e040:	e007      	b.n	800e052 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800e042:	4b06      	ldr	r3, [pc, #24]	; (800e05c <FLASH_WaitForLastOperation+0xd8>)
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e04a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e04e:	d0ee      	beq.n	800e02e <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 800e050:	2300      	movs	r3, #0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	58004000 	.word	0x58004000
 800e060:	200009ac 	.word	0x200009ac

0800e064 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800e070:	4b0e      	ldr	r3, [pc, #56]	; (800e0ac <FLASH_Program_DoubleWord+0x48>)
 800e072:	695b      	ldr	r3, [r3, #20]
 800e074:	4a0d      	ldr	r2, [pc, #52]	; (800e0ac <FLASH_Program_DoubleWord+0x48>)
 800e076:	f043 0301 	orr.w	r3, r3, #1
 800e07a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	683a      	ldr	r2, [r7, #0]
 800e080:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800e082:	f3bf 8f6f 	isb	sy
}
 800e086:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800e088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e08c:	f04f 0200 	mov.w	r2, #0
 800e090:	f04f 0300 	mov.w	r3, #0
 800e094:	000a      	movs	r2, r1
 800e096:	2300      	movs	r3, #0
 800e098:	68f9      	ldr	r1, [r7, #12]
 800e09a:	3104      	adds	r1, #4
 800e09c:	4613      	mov	r3, r2
 800e09e:	600b      	str	r3, [r1, #0]
}
 800e0a0:	bf00      	nop
 800e0a2:	3714      	adds	r7, #20
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr
 800e0ac:	58004000 	.word	0x58004000

0800e0b0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e0ba:	4b24      	ldr	r3, [pc, #144]	; (800e14c <HAL_FLASHEx_Erase+0x9c>)
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d101      	bne.n	800e0c6 <HAL_FLASHEx_Erase+0x16>
 800e0c2:	2302      	movs	r3, #2
 800e0c4:	e03d      	b.n	800e142 <HAL_FLASHEx_Erase+0x92>
 800e0c6:	4b21      	ldr	r3, [pc, #132]	; (800e14c <HAL_FLASHEx_Erase+0x9c>)
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e0cc:	4b1f      	ldr	r3, [pc, #124]	; (800e14c <HAL_FLASHEx_Erase+0x9c>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e0d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e0d6:	f7ff ff55 	bl	800df84 <FLASH_WaitForLastOperation>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e0de:	7bfb      	ldrb	r3, [r7, #15]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d12a      	bne.n	800e13a <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	d124      	bne.n	800e136 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f2:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	60bb      	str	r3, [r7, #8]
 800e0fa:	e012      	b.n	800e122 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800e0fc:	68b8      	ldr	r0, [r7, #8]
 800e0fe:	f000 f827 	bl	800e150 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e106:	f7ff ff3d 	bl	800df84 <FLASH_WaitForLastOperation>
 800e10a:	4603      	mov	r3, r0
 800e10c:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800e10e:	7bfb      	ldrb	r3, [r7, #15]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d003      	beq.n	800e11c <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	601a      	str	r2, [r3, #0]
          break;
 800e11a:	e00a      	b.n	800e132 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	3301      	adds	r3, #1
 800e120:	60bb      	str	r3, [r7, #8]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	4413      	add	r3, r2
 800e12c:	68ba      	ldr	r2, [r7, #8]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d3e4      	bcc.n	800e0fc <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800e132:	f000 f86f 	bl	800e214 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e136:	f000 f825 	bl	800e184 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e13a:	4b04      	ldr	r3, [pc, #16]	; (800e14c <HAL_FLASHEx_Erase+0x9c>)
 800e13c:	2200      	movs	r2, #0
 800e13e:	701a      	strb	r2, [r3, #0]

  return status;
 800e140:	7bfb      	ldrb	r3, [r7, #15]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	200009ac 	.word	0x200009ac

0800e150 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800e158:	4b09      	ldr	r3, [pc, #36]	; (800e180 <FLASH_PageErase+0x30>)
 800e15a:	695b      	ldr	r3, [r3, #20]
 800e15c:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	00db      	lsls	r3, r3, #3
 800e164:	4313      	orrs	r3, r2
 800e166:	4a06      	ldr	r2, [pc, #24]	; (800e180 <FLASH_PageErase+0x30>)
 800e168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e16c:	f043 0302 	orr.w	r3, r3, #2
 800e170:	6153      	str	r3, [r2, #20]
}
 800e172:	bf00      	nop
 800e174:	370c      	adds	r7, #12
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	58004000 	.word	0x58004000

0800e184 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800e184:	b480      	push	{r7}
 800e186:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800e188:	4b21      	ldr	r3, [pc, #132]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e194:	d117      	bne.n	800e1c6 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e196:	4b1e      	ldr	r3, [pc, #120]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4a1d      	ldr	r2, [pc, #116]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e19c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1a0:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e1a2:	4b1b      	ldr	r3, [pc, #108]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a1a      	ldr	r2, [pc, #104]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e1ac:	6013      	str	r3, [r2, #0]
 800e1ae:	4b18      	ldr	r3, [pc, #96]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4a17      	ldr	r2, [pc, #92]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e1b8:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e1ba:	4b15      	ldr	r3, [pc, #84]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	4a14      	ldr	r2, [pc, #80]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e1c4:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800e1c6:	4b12      	ldr	r3, [pc, #72]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e1ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1d2:	d117      	bne.n	800e204 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e1d4:	4b0e      	ldr	r3, [pc, #56]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a0d      	ldr	r2, [pc, #52]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e1de:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e1e0:	4b0b      	ldr	r3, [pc, #44]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4a0a      	ldr	r2, [pc, #40]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e1ea:	6013      	str	r3, [r2, #0]
 800e1ec:	4b08      	ldr	r3, [pc, #32]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4a07      	ldr	r2, [pc, #28]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1f6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e1f8:	4b05      	ldr	r3, [pc, #20]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a04      	ldr	r2, [pc, #16]	; (800e210 <FLASH_FlushCaches+0x8c>)
 800e1fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e202:	6013      	str	r3, [r2, #0]
  }
}
 800e204:	bf00      	nop
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	58004000 	.word	0x58004000

0800e214 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800e214:	b480      	push	{r7}
 800e216:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800e218:	4b06      	ldr	r3, [pc, #24]	; (800e234 <FLASH_AcknowledgePageErase+0x20>)
 800e21a:	695b      	ldr	r3, [r3, #20]
 800e21c:	4a05      	ldr	r2, [pc, #20]	; (800e234 <FLASH_AcknowledgePageErase+0x20>)
 800e21e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e222:	f023 0302 	bic.w	r3, r3, #2
 800e226:	6153      	str	r3, [r2, #20]
}
 800e228:	bf00      	nop
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	58004000 	.word	0x58004000

0800e238 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e238:	b480      	push	{r7}
 800e23a:	b087      	sub	sp, #28
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e242:	2300      	movs	r3, #0
 800e244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e246:	e14c      	b.n	800e4e2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	2101      	movs	r1, #1
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	fa01 f303 	lsl.w	r3, r1, r3
 800e254:	4013      	ands	r3, r2
 800e256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f000 813e 	beq.w	800e4dc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	f003 0303 	and.w	r3, r3, #3
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d005      	beq.n	800e278 <HAL_GPIO_Init+0x40>
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	f003 0303 	and.w	r3, r3, #3
 800e274:	2b02      	cmp	r3, #2
 800e276:	d130      	bne.n	800e2da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	005b      	lsls	r3, r3, #1
 800e282:	2203      	movs	r2, #3
 800e284:	fa02 f303 	lsl.w	r3, r2, r3
 800e288:	43db      	mvns	r3, r3
 800e28a:	693a      	ldr	r2, [r7, #16]
 800e28c:	4013      	ands	r3, r2
 800e28e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	68da      	ldr	r2, [r3, #12]
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	fa02 f303 	lsl.w	r3, r2, r3
 800e29c:	693a      	ldr	r2, [r7, #16]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	693a      	ldr	r2, [r7, #16]
 800e2a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2b6:	43db      	mvns	r3, r3
 800e2b8:	693a      	ldr	r2, [r7, #16]
 800e2ba:	4013      	ands	r3, r2
 800e2bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	091b      	lsrs	r3, r3, #4
 800e2c4:	f003 0201 	and.w	r2, r3, #1
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e2ce:	693a      	ldr	r2, [r7, #16]
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	693a      	ldr	r2, [r7, #16]
 800e2d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	f003 0303 	and.w	r3, r3, #3
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	d017      	beq.n	800e316 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	005b      	lsls	r3, r3, #1
 800e2f0:	2203      	movs	r2, #3
 800e2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2f6:	43db      	mvns	r3, r3
 800e2f8:	693a      	ldr	r2, [r7, #16]
 800e2fa:	4013      	ands	r3, r2
 800e2fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	689a      	ldr	r2, [r3, #8]
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	fa02 f303 	lsl.w	r3, r2, r3
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	4313      	orrs	r3, r2
 800e30e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	693a      	ldr	r2, [r7, #16]
 800e314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	f003 0303 	and.w	r3, r3, #3
 800e31e:	2b02      	cmp	r3, #2
 800e320:	d123      	bne.n	800e36a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	08da      	lsrs	r2, r3, #3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	3208      	adds	r2, #8
 800e32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	f003 0307 	and.w	r3, r3, #7
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	220f      	movs	r2, #15
 800e33a:	fa02 f303 	lsl.w	r3, r2, r3
 800e33e:	43db      	mvns	r3, r3
 800e340:	693a      	ldr	r2, [r7, #16]
 800e342:	4013      	ands	r3, r2
 800e344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	691a      	ldr	r2, [r3, #16]
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	f003 0307 	and.w	r3, r3, #7
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	fa02 f303 	lsl.w	r3, r2, r3
 800e356:	693a      	ldr	r2, [r7, #16]
 800e358:	4313      	orrs	r3, r2
 800e35a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	08da      	lsrs	r2, r3, #3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	3208      	adds	r2, #8
 800e364:	6939      	ldr	r1, [r7, #16]
 800e366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	005b      	lsls	r3, r3, #1
 800e374:	2203      	movs	r2, #3
 800e376:	fa02 f303 	lsl.w	r3, r2, r3
 800e37a:	43db      	mvns	r3, r3
 800e37c:	693a      	ldr	r2, [r7, #16]
 800e37e:	4013      	ands	r3, r2
 800e380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	f003 0203 	and.w	r2, r3, #3
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	005b      	lsls	r3, r3, #1
 800e38e:	fa02 f303 	lsl.w	r3, r2, r3
 800e392:	693a      	ldr	r2, [r7, #16]
 800e394:	4313      	orrs	r3, r2
 800e396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	693a      	ldr	r2, [r7, #16]
 800e39c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f000 8098 	beq.w	800e4dc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800e3ac:	4a54      	ldr	r2, [pc, #336]	; (800e500 <HAL_GPIO_Init+0x2c8>)
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	089b      	lsrs	r3, r3, #2
 800e3b2:	3302      	adds	r3, #2
 800e3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	f003 0303 	and.w	r3, r3, #3
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	220f      	movs	r2, #15
 800e3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e3c8:	43db      	mvns	r3, r3
 800e3ca:	693a      	ldr	r2, [r7, #16]
 800e3cc:	4013      	ands	r3, r2
 800e3ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e3d6:	d019      	beq.n	800e40c <HAL_GPIO_Init+0x1d4>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	4a4a      	ldr	r2, [pc, #296]	; (800e504 <HAL_GPIO_Init+0x2cc>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d013      	beq.n	800e408 <HAL_GPIO_Init+0x1d0>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4a49      	ldr	r2, [pc, #292]	; (800e508 <HAL_GPIO_Init+0x2d0>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d00d      	beq.n	800e404 <HAL_GPIO_Init+0x1cc>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4a48      	ldr	r2, [pc, #288]	; (800e50c <HAL_GPIO_Init+0x2d4>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d007      	beq.n	800e400 <HAL_GPIO_Init+0x1c8>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4a47      	ldr	r2, [pc, #284]	; (800e510 <HAL_GPIO_Init+0x2d8>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d101      	bne.n	800e3fc <HAL_GPIO_Init+0x1c4>
 800e3f8:	2304      	movs	r3, #4
 800e3fa:	e008      	b.n	800e40e <HAL_GPIO_Init+0x1d6>
 800e3fc:	2307      	movs	r3, #7
 800e3fe:	e006      	b.n	800e40e <HAL_GPIO_Init+0x1d6>
 800e400:	2303      	movs	r3, #3
 800e402:	e004      	b.n	800e40e <HAL_GPIO_Init+0x1d6>
 800e404:	2302      	movs	r3, #2
 800e406:	e002      	b.n	800e40e <HAL_GPIO_Init+0x1d6>
 800e408:	2301      	movs	r3, #1
 800e40a:	e000      	b.n	800e40e <HAL_GPIO_Init+0x1d6>
 800e40c:	2300      	movs	r3, #0
 800e40e:	697a      	ldr	r2, [r7, #20]
 800e410:	f002 0203 	and.w	r2, r2, #3
 800e414:	0092      	lsls	r2, r2, #2
 800e416:	4093      	lsls	r3, r2
 800e418:	693a      	ldr	r2, [r7, #16]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e41e:	4938      	ldr	r1, [pc, #224]	; (800e500 <HAL_GPIO_Init+0x2c8>)
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	089b      	lsrs	r3, r3, #2
 800e424:	3302      	adds	r3, #2
 800e426:	693a      	ldr	r2, [r7, #16]
 800e428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e42c:	4b39      	ldr	r3, [pc, #228]	; (800e514 <HAL_GPIO_Init+0x2dc>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	43db      	mvns	r3, r3
 800e436:	693a      	ldr	r2, [r7, #16]
 800e438:	4013      	ands	r3, r2
 800e43a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e444:	2b00      	cmp	r3, #0
 800e446:	d003      	beq.n	800e450 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800e448:	693a      	ldr	r2, [r7, #16]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	4313      	orrs	r3, r2
 800e44e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e450:	4a30      	ldr	r2, [pc, #192]	; (800e514 <HAL_GPIO_Init+0x2dc>)
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e456:	4b2f      	ldr	r3, [pc, #188]	; (800e514 <HAL_GPIO_Init+0x2dc>)
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	43db      	mvns	r3, r3
 800e460:	693a      	ldr	r2, [r7, #16]
 800e462:	4013      	ands	r3, r2
 800e464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d003      	beq.n	800e47a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800e472:	693a      	ldr	r2, [r7, #16]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	4313      	orrs	r3, r2
 800e478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e47a:	4a26      	ldr	r2, [pc, #152]	; (800e514 <HAL_GPIO_Init+0x2dc>)
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800e480:	4b24      	ldr	r3, [pc, #144]	; (800e514 <HAL_GPIO_Init+0x2dc>)
 800e482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	43db      	mvns	r3, r3
 800e48c:	693a      	ldr	r2, [r7, #16]
 800e48e:	4013      	ands	r3, r2
 800e490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d003      	beq.n	800e4a6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800e49e:	693a      	ldr	r2, [r7, #16]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e4a6:	4a1b      	ldr	r2, [pc, #108]	; (800e514 <HAL_GPIO_Init+0x2dc>)
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800e4ae:	4b19      	ldr	r3, [pc, #100]	; (800e514 <HAL_GPIO_Init+0x2dc>)
 800e4b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	43db      	mvns	r3, r3
 800e4ba:	693a      	ldr	r2, [r7, #16]
 800e4bc:	4013      	ands	r3, r2
 800e4be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d003      	beq.n	800e4d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800e4cc:	693a      	ldr	r2, [r7, #16]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e4d4:	4a0f      	ldr	r2, [pc, #60]	; (800e514 <HAL_GPIO_Init+0x2dc>)
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	fa22 f303 	lsr.w	r3, r2, r3
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	f47f aeab 	bne.w	800e248 <HAL_GPIO_Init+0x10>
  }
}
 800e4f2:	bf00      	nop
 800e4f4:	bf00      	nop
 800e4f6:	371c      	adds	r7, #28
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr
 800e500:	40010000 	.word	0x40010000
 800e504:	48000400 	.word	0x48000400
 800e508:	48000800 	.word	0x48000800
 800e50c:	48000c00 	.word	0x48000c00
 800e510:	48001000 	.word	0x48001000
 800e514:	58000800 	.word	0x58000800

0800e518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	807b      	strh	r3, [r7, #2]
 800e524:	4613      	mov	r3, r2
 800e526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e528:	787b      	ldrb	r3, [r7, #1]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d003      	beq.n	800e536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e52e:	887a      	ldrh	r2, [r7, #2]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e534:	e002      	b.n	800e53c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e536:	887a      	ldrh	r2, [r7, #2]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e53c:	bf00      	nop
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e548:	b480      	push	{r7}
 800e54a:	b085      	sub	sp, #20
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	460b      	mov	r3, r1
 800e552:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	695b      	ldr	r3, [r3, #20]
 800e558:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800e55a:	887a      	ldrh	r2, [r7, #2]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	4013      	ands	r3, r2
 800e560:	041a      	lsls	r2, r3, #16
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	43d9      	mvns	r1, r3
 800e566:	887b      	ldrh	r3, [r7, #2]
 800e568:	400b      	ands	r3, r1
 800e56a:	431a      	orrs	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	619a      	str	r2, [r3, #24]
}
 800e570:	bf00      	nop
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	4603      	mov	r3, r0
 800e584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800e586:	4b08      	ldr	r3, [pc, #32]	; (800e5a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e588:	68da      	ldr	r2, [r3, #12]
 800e58a:	88fb      	ldrh	r3, [r7, #6]
 800e58c:	4013      	ands	r3, r2
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d006      	beq.n	800e5a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e592:	4a05      	ldr	r2, [pc, #20]	; (800e5a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e594:	88fb      	ldrh	r3, [r7, #6]
 800e596:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e598:	88fb      	ldrh	r3, [r7, #6]
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fa faf2 	bl	8008b84 <HAL_GPIO_EXTI_Callback>
  }
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	58000800 	.word	0x58000800

0800e5ac <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800e5b2:	4b0a      	ldr	r3, [pc, #40]	; (800e5dc <HAL_HSEM_IRQHandler+0x30>)
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800e5b8:	4b08      	ldr	r3, [pc, #32]	; (800e5dc <HAL_HSEM_IRQHandler+0x30>)
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	43db      	mvns	r3, r3
 800e5c0:	4906      	ldr	r1, [pc, #24]	; (800e5dc <HAL_HSEM_IRQHandler+0x30>)
 800e5c2:	4013      	ands	r3, r2
 800e5c4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800e5c6:	4a05      	ldr	r2, [pc, #20]	; (800e5dc <HAL_HSEM_IRQHandler+0x30>)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 f807 	bl	800e5e0 <HAL_HSEM_FreeCallback>
}
 800e5d2:	bf00      	nop
 800e5d4:	3708      	adds	r7, #8
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	58001500 	.word	0x58001500

0800e5e0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b083      	sub	sp, #12
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800e5e8:	bf00      	nop
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e5f8:	4b05      	ldr	r3, [pc, #20]	; (800e610 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a04      	ldr	r2, [pc, #16]	; (800e610 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e5fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e602:	6013      	str	r3, [r2, #0]
}
 800e604:	bf00      	nop
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	58000400 	.word	0x58000400

0800e614 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	460b      	mov	r3, r1
 800e61e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10c      	bne.n	800e640 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800e626:	4b13      	ldr	r3, [pc, #76]	; (800e674 <HAL_PWR_EnterSLEEPMode+0x60>)
 800e628:	695b      	ldr	r3, [r3, #20]
 800e62a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e62e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e632:	d10e      	bne.n	800e652 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800e634:	f000 f888 	bl	800e748 <HAL_PWREx_DisableLowPowerRunMode>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d009      	beq.n	800e652 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800e63e:	e016      	b.n	800e66e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800e640:	4b0c      	ldr	r3, [pc, #48]	; (800e674 <HAL_PWR_EnterSLEEPMode+0x60>)
 800e642:	695b      	ldr	r3, [r3, #20]
 800e644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e64c:	d001      	beq.n	800e652 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800e64e:	f000 f86b 	bl	800e728 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e652:	4b09      	ldr	r3, [pc, #36]	; (800e678 <HAL_PWR_EnterSLEEPMode+0x64>)
 800e654:	691b      	ldr	r3, [r3, #16]
 800e656:	4a08      	ldr	r2, [pc, #32]	; (800e678 <HAL_PWR_EnterSLEEPMode+0x64>)
 800e658:	f023 0304 	bic.w	r3, r3, #4
 800e65c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800e65e:	78fb      	ldrb	r3, [r7, #3]
 800e660:	2b01      	cmp	r3, #1
 800e662:	d101      	bne.n	800e668 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800e664:	bf30      	wfi
 800e666:	e002      	b.n	800e66e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800e668:	bf40      	sev
    __WFE();
 800e66a:	bf20      	wfe
    __WFE();
 800e66c:	bf20      	wfe
  }
}
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	58000400 	.word	0x58000400
 800e678:	e000ed00 	.word	0xe000ed00

0800e67c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800e67c:	b480      	push	{r7}
 800e67e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 800e680:	bf00      	nop
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr
	...

0800e68c <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800e694:	4b04      	ldr	r3, [pc, #16]	; (800e6a8 <LL_EXTI_ReadFlag_0_31+0x1c>)
 800e696:	68da      	ldr	r2, [r3, #12]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4013      	ands	r3, r2
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr
 800e6a8:	58000800 	.word	0x58000800

0800e6ac <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 800e6b4:	4b04      	ldr	r3, [pc, #16]	; (800e6c8 <LL_EXTI_ReadFlag_32_63+0x1c>)
 800e6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4013      	ands	r3, r2
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr
 800e6c8:	58000800 	.word	0x58000800

0800e6cc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800e6d4:	4a04      	ldr	r2, [pc, #16]	; (800e6e8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	60d3      	str	r3, [r2, #12]
}
 800e6da:	bf00      	nop
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	58000800 	.word	0x58000800

0800e6ec <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800e6f4:	4a04      	ldr	r2, [pc, #16]	; (800e708 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800e6fa:	bf00      	nop
 800e6fc:	370c      	adds	r7, #12
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop
 800e708:	58000800 	.word	0x58000800

0800e70c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e70c:	b480      	push	{r7}
 800e70e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800e710:	4b04      	ldr	r3, [pc, #16]	; (800e724 <HAL_PWREx_GetVoltageRange+0x18>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800e718:	4618      	mov	r0, r3
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	58000400 	.word	0x58000400

0800e728 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800e728:	b480      	push	{r7}
 800e72a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800e72c:	4b05      	ldr	r3, [pc, #20]	; (800e744 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4a04      	ldr	r2, [pc, #16]	; (800e744 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800e732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e736:	6013      	str	r3, [r2, #0]
}
 800e738:	bf00      	nop
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr
 800e742:	bf00      	nop
 800e744:	58000400 	.word	0x58000400

0800e748 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800e74e:	4b17      	ldr	r3, [pc, #92]	; (800e7ac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4a16      	ldr	r2, [pc, #88]	; (800e7ac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800e754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e758:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000U));
 800e75a:	4b15      	ldr	r3, [pc, #84]	; (800e7b0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4a15      	ldr	r2, [pc, #84]	; (800e7b4 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800e760:	fba2 2303 	umull	r2, r3, r2, r3
 800e764:	0c9b      	lsrs	r3, r3, #18
 800e766:	2232      	movs	r2, #50	; 0x32
 800e768:	fb02 f303 	mul.w	r3, r2, r3
 800e76c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800e76e:	e002      	b.n	800e776 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	3b01      	subs	r3, #1
 800e774:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800e776:	4b0d      	ldr	r3, [pc, #52]	; (800e7ac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800e778:	695b      	ldr	r3, [r3, #20]
 800e77a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e77e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e782:	d102      	bne.n	800e78a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1f2      	bne.n	800e770 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800e78a:	4b08      	ldr	r3, [pc, #32]	; (800e7ac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800e78c:	695b      	ldr	r3, [r3, #20]
 800e78e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e796:	d101      	bne.n	800e79c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800e798:	2303      	movs	r3, #3
 800e79a:	e000      	b.n	800e79e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800e79c:	2300      	movs	r3, #0
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	58000400 	.word	0x58000400
 800e7b0:	200000b8 	.word	0x200000b8
 800e7b4:	431bde83 	.word	0x431bde83

0800e7b8 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 800e7bc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e7c0:	f7ff ff64 	bl	800e68c <LL_EXTI_ReadFlag_0_31>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d005      	beq.n	800e7d6 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800e7ca:	f7ff ff57 	bl	800e67c <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800e7ce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e7d2:	f7ff ff7b 	bl	800e6cc <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if (__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 800e7d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e7da:	f7ff ff57 	bl	800e68c <LL_EXTI_ReadFlag_0_31>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d005      	beq.n	800e7f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800e7e4:	f000 f811 	bl	800e80a <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800e7e8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e7ec:	f7ff ff6e 	bl	800e6cc <LL_EXTI_ClearFlag_0_31>
  }
#endif /* PWR_CR2_PVME1 */

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 800e7f0:	2002      	movs	r0, #2
 800e7f2:	f7ff ff5b 	bl	800e6ac <LL_EXTI_ReadFlag_32_63>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d004      	beq.n	800e806 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800e7fc:	f000 f80c 	bl	800e818 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800e800:	2002      	movs	r0, #2
 800e802:	f7ff ff73 	bl	800e6ec <LL_EXTI_ClearFlag_32_63>
  }
}
 800e806:	bf00      	nop
 800e808:	bd80      	pop	{r7, pc}

0800e80a <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800e80a:	b480      	push	{r7}
 800e80c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800e80e:	bf00      	nop
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800e818:	b480      	push	{r7}
 800e81a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800e81c:	bf00      	nop
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr

0800e826 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800e826:	b480      	push	{r7}
 800e828:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800e82a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e838:	d101      	bne.n	800e83e <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800e83a:	2301      	movs	r3, #1
 800e83c:	e000      	b.n	800e840 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr

0800e84a <LL_RCC_HSE_Enable>:
{
 800e84a:	b480      	push	{r7}
 800e84c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800e84e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e85c:	6013      	str	r3, [r2, #0]
}
 800e85e:	bf00      	nop
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <LL_RCC_HSE_Disable>:
{
 800e868:	b480      	push	{r7}
 800e86a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800e86c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e87a:	6013      	str	r3, [r2, #0]
}
 800e87c:	bf00      	nop
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr

0800e886 <LL_RCC_HSE_IsReady>:
{
 800e886:	b480      	push	{r7}
 800e888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e88a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e898:	d101      	bne.n	800e89e <LL_RCC_HSE_IsReady+0x18>
 800e89a:	2301      	movs	r3, #1
 800e89c:	e000      	b.n	800e8a0 <LL_RCC_HSE_IsReady+0x1a>
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <LL_RCC_HSI_Enable>:
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e8ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e8b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8bc:	6013      	str	r3, [r2, #0]
}
 800e8be:	bf00      	nop
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <LL_RCC_HSI_Disable>:
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800e8cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e8d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8da:	6013      	str	r3, [r2, #0]
}
 800e8dc:	bf00      	nop
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr

0800e8e6 <LL_RCC_HSI_IsReady>:
{
 800e8e6:	b480      	push	{r7}
 800e8e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e8ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8f8:	d101      	bne.n	800e8fe <LL_RCC_HSI_IsReady+0x18>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e000      	b.n	800e900 <LL_RCC_HSI_IsReady+0x1a>
 800e8fe:	2300      	movs	r3, #0
}
 800e900:	4618      	mov	r0, r3
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr

0800e90a <LL_RCC_HSI_SetCalibTrimming>:
{
 800e90a:	b480      	push	{r7}
 800e90c:	b083      	sub	sp, #12
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800e912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	061b      	lsls	r3, r3, #24
 800e920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e924:	4313      	orrs	r3, r2
 800e926:	604b      	str	r3, [r1, #4]
}
 800e928:	bf00      	nop
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <LL_RCC_HSI48_Enable>:
{
 800e934:	b480      	push	{r7}
 800e936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e93c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e944:	f043 0301 	orr.w	r3, r3, #1
 800e948:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800e94c:	bf00      	nop
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr

0800e956 <LL_RCC_HSI48_Disable>:
{
 800e956:	b480      	push	{r7}
 800e958:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e95a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e95e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e966:	f023 0301 	bic.w	r3, r3, #1
 800e96a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800e96e:	bf00      	nop
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <LL_RCC_HSI48_IsReady>:
{
 800e978:	b480      	push	{r7}
 800e97a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800e97c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e984:	f003 0302 	and.w	r3, r3, #2
 800e988:	2b02      	cmp	r3, #2
 800e98a:	d101      	bne.n	800e990 <LL_RCC_HSI48_IsReady+0x18>
 800e98c:	2301      	movs	r3, #1
 800e98e:	e000      	b.n	800e992 <LL_RCC_HSI48_IsReady+0x1a>
 800e990:	2300      	movs	r3, #0
}
 800e992:	4618      	mov	r0, r3
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <LL_RCC_LSE_Enable>:
{
 800e99c:	b480      	push	{r7}
 800e99e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e9a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e9a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e9ac:	f043 0301 	orr.w	r3, r3, #1
 800e9b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e9b4:	bf00      	nop
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr

0800e9be <LL_RCC_LSE_Disable>:
{
 800e9be:	b480      	push	{r7}
 800e9c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e9c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e9ce:	f023 0301 	bic.w	r3, r3, #1
 800e9d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e9d6:	bf00      	nop
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <LL_RCC_LSE_EnableBypass>:
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e9e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e9e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e9f0:	f043 0304 	orr.w	r3, r3, #4
 800e9f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e9f8:	bf00      	nop
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr

0800ea02 <LL_RCC_LSE_DisableBypass>:
{
 800ea02:	b480      	push	{r7}
 800ea04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ea06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ea0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ea12:	f023 0304 	bic.w	r3, r3, #4
 800ea16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ea1a:	bf00      	nop
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <LL_RCC_LSE_IsReady>:
{
 800ea24:	b480      	push	{r7}
 800ea26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ea28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ea2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea30:	f003 0302 	and.w	r3, r3, #2
 800ea34:	2b02      	cmp	r3, #2
 800ea36:	d101      	bne.n	800ea3c <LL_RCC_LSE_IsReady+0x18>
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e000      	b.n	800ea3e <LL_RCC_LSE_IsReady+0x1a>
 800ea3c:	2300      	movs	r3, #0
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <LL_RCC_LSI1_Enable>:
{
 800ea48:	b480      	push	{r7}
 800ea4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ea4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ea50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ea58:	f043 0301 	orr.w	r3, r3, #1
 800ea5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ea60:	bf00      	nop
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <LL_RCC_LSI1_Disable>:
{
 800ea6a:	b480      	push	{r7}
 800ea6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ea6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ea72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ea7a:	f023 0301 	bic.w	r3, r3, #1
 800ea7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ea82:	bf00      	nop
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <LL_RCC_LSI1_IsReady>:
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800ea90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ea94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea98:	f003 0302 	and.w	r3, r3, #2
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	d101      	bne.n	800eaa4 <LL_RCC_LSI1_IsReady+0x18>
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e000      	b.n	800eaa6 <LL_RCC_LSI1_IsReady+0x1a>
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <LL_RCC_LSI2_Enable>:
{
 800eab0:	b480      	push	{r7}
 800eab2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800eab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eabc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eac0:	f043 0304 	orr.w	r3, r3, #4
 800eac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800eac8:	bf00      	nop
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr

0800ead2 <LL_RCC_LSI2_Disable>:
{
 800ead2:	b480      	push	{r7}
 800ead4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ead6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eae2:	f023 0304 	bic.w	r3, r3, #4
 800eae6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800eaea:	bf00      	nop
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <LL_RCC_LSI2_IsReady>:
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800eaf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eafc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eb00:	f003 0308 	and.w	r3, r3, #8
 800eb04:	2b08      	cmp	r3, #8
 800eb06:	d101      	bne.n	800eb0c <LL_RCC_LSI2_IsReady+0x18>
 800eb08:	2301      	movs	r3, #1
 800eb0a:	e000      	b.n	800eb0e <LL_RCC_LSI2_IsReady+0x1a>
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr

0800eb18 <LL_RCC_LSI2_SetTrimming>:
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800eb20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eb28:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	021b      	lsls	r3, r3, #8
 800eb30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800eb34:	4313      	orrs	r3, r2
 800eb36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800eb3a:	bf00      	nop
 800eb3c:	370c      	adds	r7, #12
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr

0800eb46 <LL_RCC_MSI_Enable>:
{
 800eb46:	b480      	push	{r7}
 800eb48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800eb4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eb54:	f043 0301 	orr.w	r3, r3, #1
 800eb58:	6013      	str	r3, [r2, #0]
}
 800eb5a:	bf00      	nop
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <LL_RCC_MSI_Disable>:
{
 800eb64:	b480      	push	{r7}
 800eb66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800eb68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eb72:	f023 0301 	bic.w	r3, r3, #1
 800eb76:	6013      	str	r3, [r2, #0]
}
 800eb78:	bf00      	nop
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <LL_RCC_MSI_IsReady>:
{
 800eb82:	b480      	push	{r7}
 800eb84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800eb86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f003 0302 	and.w	r3, r3, #2
 800eb90:	2b02      	cmp	r3, #2
 800eb92:	d101      	bne.n	800eb98 <LL_RCC_MSI_IsReady+0x16>
 800eb94:	2301      	movs	r3, #1
 800eb96:	e000      	b.n	800eb9a <LL_RCC_MSI_IsReady+0x18>
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <LL_RCC_MSI_SetRange>:
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800ebac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ebb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	600b      	str	r3, [r1, #0]
}
 800ebc0:	bf00      	nop
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <LL_RCC_MSI_GetRange>:
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800ebd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebdc:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2bb0      	cmp	r3, #176	; 0xb0
 800ebe2:	d901      	bls.n	800ebe8 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800ebe4:	23b0      	movs	r3, #176	; 0xb0
 800ebe6:	607b      	str	r3, [r7, #4]
  return msiRange;
 800ebe8:	687b      	ldr	r3, [r7, #4]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	370c      	adds	r7, #12
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr

0800ebf6 <LL_RCC_MSI_SetCalibTrimming>:
{
 800ebf6:	b480      	push	{r7}
 800ebf8:	b083      	sub	sp, #12
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800ebfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	021b      	lsls	r3, r3, #8
 800ec0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ec10:	4313      	orrs	r3, r2
 800ec12:	604b      	str	r3, [r1, #4]
}
 800ec14:	bf00      	nop
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <LL_RCC_SetSysClkSource>:
{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ec28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	f023 0203 	bic.w	r2, r3, #3
 800ec32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	608b      	str	r3, [r1, #8]
}
 800ec3c:	bf00      	nop
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <LL_RCC_GetSysClkSource>:
{
 800ec48:	b480      	push	{r7}
 800ec4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ec4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	f003 030c 	and.w	r3, r3, #12
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <LL_RCC_SetAHBPrescaler>:
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ec68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ec72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	608b      	str	r3, [r1, #8]
}
 800ec7c:	bf00      	nop
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <LL_C2_RCC_SetAHBPrescaler>:
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800ec90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ec98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ec9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	4313      	orrs	r3, r2
 800eca4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800eca8:	bf00      	nop
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <LL_RCC_SetAHB4Prescaler>:
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800ecbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ecc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ecc4:	f023 020f 	bic.w	r2, r3, #15
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	091b      	lsrs	r3, r3, #4
 800eccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800ecd6:	bf00      	nop
 800ecd8:	370c      	adds	r7, #12
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr

0800ece2 <LL_RCC_SetAPB1Prescaler>:
{
 800ece2:	b480      	push	{r7}
 800ece4:	b083      	sub	sp, #12
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800ecea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ecee:	689b      	ldr	r3, [r3, #8]
 800ecf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ecf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	608b      	str	r3, [r1, #8]
}
 800ecfe:	bf00      	nop
 800ed00:	370c      	adds	r7, #12
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <LL_RCC_SetAPB2Prescaler>:
{
 800ed0a:	b480      	push	{r7}
 800ed0c:	b083      	sub	sp, #12
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800ed12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ed1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4313      	orrs	r3, r2
 800ed24:	608b      	str	r3, [r1, #8]
}
 800ed26:	bf00      	nop
 800ed28:	370c      	adds	r7, #12
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr

0800ed32 <LL_RCC_GetAHBPrescaler>:
{
 800ed32:	b480      	push	{r7}
 800ed34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ed36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr

0800ed4a <LL_RCC_GetAHB4Prescaler>:
{
 800ed4a:	b480      	push	{r7}
 800ed4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800ed4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ed56:	011b      	lsls	r3, r3, #4
 800ed58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr

0800ed66 <LL_RCC_GetAPB1Prescaler>:
{
 800ed66:	b480      	push	{r7}
 800ed68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800ed6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr

0800ed7e <LL_RCC_GetAPB2Prescaler>:
{
 800ed7e:	b480      	push	{r7}
 800ed80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800ed82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr

0800ed96 <LL_RCC_PLL_Enable>:
{
 800ed96:	b480      	push	{r7}
 800ed98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ed9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eda4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800eda8:	6013      	str	r3, [r2, #0]
}
 800edaa:	bf00      	nop
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <LL_RCC_PLL_Disable>:
{
 800edb4:	b480      	push	{r7}
 800edb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800edb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800edc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800edc6:	6013      	str	r3, [r2, #0]
}
 800edc8:	bf00      	nop
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr

0800edd2 <LL_RCC_PLL_IsReady>:
{
 800edd2:	b480      	push	{r7}
 800edd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800edd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ede0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ede4:	d101      	bne.n	800edea <LL_RCC_PLL_IsReady+0x18>
 800ede6:	2301      	movs	r3, #1
 800ede8:	e000      	b.n	800edec <LL_RCC_PLL_IsReady+0x1a>
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <LL_RCC_PLL_GetN>:
{
 800edf6:	b480      	push	{r7}
 800edf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800edfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	0a1b      	lsrs	r3, r3, #8
 800ee02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <LL_RCC_PLL_GetR>:
{
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800ee14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr

0800ee28 <LL_RCC_PLL_GetDivider>:
{
 800ee28:	b480      	push	{r7}
 800ee2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800ee2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <LL_RCC_PLL_GetMainSource>:
{
 800ee40:	b480      	push	{r7}
 800ee42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ee44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	f003 0303 	and.w	r3, r3, #3
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <LL_RCC_IsActiveFlag_HPRE>:
{
 800ee58:	b480      	push	{r7}
 800ee5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ee5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee60:	689b      	ldr	r3, [r3, #8]
 800ee62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee6a:	d101      	bne.n	800ee70 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e000      	b.n	800ee72 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ee80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ee88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee90:	d101      	bne.n	800ee96 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800ee92:	2301      	movs	r3, #1
 800ee94:	e000      	b.n	800ee98 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800ee96:	2300      	movs	r3, #0
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr

0800eea2 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800eea2:	b480      	push	{r7}
 800eea4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800eea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eeaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800eeae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eeb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eeb6:	d101      	bne.n	800eebc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e000      	b.n	800eebe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <LL_RCC_IsActiveFlag_PPRE1>:
{
 800eec8:	b480      	push	{r7}
 800eeca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800eecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eeda:	d101      	bne.n	800eee0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800eedc:	2301      	movs	r3, #1
 800eede:	e000      	b.n	800eee2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <LL_RCC_IsActiveFlag_PPRE2>:
{
 800eeec:	b480      	push	{r7}
 800eeee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800eef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eefa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eefe:	d101      	bne.n	800ef04 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800ef00:	2301      	movs	r3, #1
 800ef02:	e000      	b.n	800ef06 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ef10:	b590      	push	{r4, r7, lr}
 800ef12:	b08d      	sub	sp, #52	; 0x34
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d101      	bne.n	800ef22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e363      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f003 0320 	and.w	r3, r3, #32
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f000 808d 	beq.w	800f04a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ef30:	f7ff fe8a 	bl	800ec48 <LL_RCC_GetSysClkSource>
 800ef34:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ef36:	f7ff ff83 	bl	800ee40 <LL_RCC_PLL_GetMainSource>
 800ef3a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ef3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d005      	beq.n	800ef4e <HAL_RCC_OscConfig+0x3e>
 800ef42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef44:	2b0c      	cmp	r3, #12
 800ef46:	d147      	bne.n	800efd8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800ef48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d144      	bne.n	800efd8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	69db      	ldr	r3, [r3, #28]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d101      	bne.n	800ef5a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800ef56:	2301      	movs	r3, #1
 800ef58:	e347      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ef5e:	f7ff fe35 	bl	800ebcc <LL_RCC_MSI_GetRange>
 800ef62:	4603      	mov	r3, r0
 800ef64:	429c      	cmp	r4, r3
 800ef66:	d914      	bls.n	800ef92 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f000 fd2f 	bl	800f9d0 <RCC_SetFlashLatencyFromMSIRange>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d001      	beq.n	800ef7c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	e336      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff fe0f 	bl	800eba4 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6a1b      	ldr	r3, [r3, #32]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7ff fe33 	bl	800ebf6 <LL_RCC_MSI_SetCalibTrimming>
 800ef90:	e013      	b.n	800efba <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff fe04 	bl	800eba4 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6a1b      	ldr	r3, [r3, #32]
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7ff fe28 	bl	800ebf6 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efaa:	4618      	mov	r0, r3
 800efac:	f000 fd10 	bl	800f9d0 <RCC_SetFlashLatencyFromMSIRange>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d001      	beq.n	800efba <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800efb6:	2301      	movs	r3, #1
 800efb8:	e317      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800efba:	f000 fcc9 	bl	800f950 <HAL_RCC_GetHCLKFreq>
 800efbe:	4603      	mov	r3, r0
 800efc0:	4aa4      	ldr	r2, [pc, #656]	; (800f254 <HAL_RCC_OscConfig+0x344>)
 800efc2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800efc4:	4ba4      	ldr	r3, [pc, #656]	; (800f258 <HAL_RCC_OscConfig+0x348>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fe f937 	bl	800d23c <HAL_InitTick>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d039      	beq.n	800f048 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800efd4:	2301      	movs	r3, #1
 800efd6:	e308      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	69db      	ldr	r3, [r3, #28]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d01e      	beq.n	800f01e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800efe0:	f7ff fdb1 	bl	800eb46 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800efe4:	f7fe f978 	bl	800d2d8 <HAL_GetTick>
 800efe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800efea:	e008      	b.n	800effe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800efec:	f7fe f974 	bl	800d2d8 <HAL_GetTick>
 800eff0:	4602      	mov	r2, r0
 800eff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	2b02      	cmp	r3, #2
 800eff8:	d901      	bls.n	800effe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800effa:	2303      	movs	r3, #3
 800effc:	e2f5      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800effe:	f7ff fdc0 	bl	800eb82 <LL_RCC_MSI_IsReady>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d0f1      	beq.n	800efec <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7ff fdc9 	bl	800eba4 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a1b      	ldr	r3, [r3, #32]
 800f016:	4618      	mov	r0, r3
 800f018:	f7ff fded 	bl	800ebf6 <LL_RCC_MSI_SetCalibTrimming>
 800f01c:	e015      	b.n	800f04a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f01e:	f7ff fda1 	bl	800eb64 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f022:	f7fe f959 	bl	800d2d8 <HAL_GetTick>
 800f026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800f028:	e008      	b.n	800f03c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f02a:	f7fe f955 	bl	800d2d8 <HAL_GetTick>
 800f02e:	4602      	mov	r2, r0
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	1ad3      	subs	r3, r2, r3
 800f034:	2b02      	cmp	r3, #2
 800f036:	d901      	bls.n	800f03c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800f038:	2303      	movs	r3, #3
 800f03a:	e2d6      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800f03c:	f7ff fda1 	bl	800eb82 <LL_RCC_MSI_IsReady>
 800f040:	4603      	mov	r3, r0
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1f1      	bne.n	800f02a <HAL_RCC_OscConfig+0x11a>
 800f046:	e000      	b.n	800f04a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f048:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f003 0301 	and.w	r3, r3, #1
 800f052:	2b00      	cmp	r3, #0
 800f054:	d047      	beq.n	800f0e6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f056:	f7ff fdf7 	bl	800ec48 <LL_RCC_GetSysClkSource>
 800f05a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f05c:	f7ff fef0 	bl	800ee40 <LL_RCC_PLL_GetMainSource>
 800f060:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800f062:	6a3b      	ldr	r3, [r7, #32]
 800f064:	2b08      	cmp	r3, #8
 800f066:	d005      	beq.n	800f074 <HAL_RCC_OscConfig+0x164>
 800f068:	6a3b      	ldr	r3, [r7, #32]
 800f06a:	2b0c      	cmp	r3, #12
 800f06c:	d108      	bne.n	800f080 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800f06e:	69fb      	ldr	r3, [r7, #28]
 800f070:	2b03      	cmp	r3, #3
 800f072:	d105      	bne.n	800f080 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d134      	bne.n	800f0e6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800f07c:	2301      	movs	r3, #1
 800f07e:	e2b4      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f088:	d102      	bne.n	800f090 <HAL_RCC_OscConfig+0x180>
 800f08a:	f7ff fbde 	bl	800e84a <LL_RCC_HSE_Enable>
 800f08e:	e001      	b.n	800f094 <HAL_RCC_OscConfig+0x184>
 800f090:	f7ff fbea 	bl	800e868 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d012      	beq.n	800f0c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f09c:	f7fe f91c 	bl	800d2d8 <HAL_GetTick>
 800f0a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800f0a2:	e008      	b.n	800f0b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f0a4:	f7fe f918 	bl	800d2d8 <HAL_GetTick>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	2b64      	cmp	r3, #100	; 0x64
 800f0b0:	d901      	bls.n	800f0b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	e299      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800f0b6:	f7ff fbe6 	bl	800e886 <LL_RCC_HSE_IsReady>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d0f1      	beq.n	800f0a4 <HAL_RCC_OscConfig+0x194>
 800f0c0:	e011      	b.n	800f0e6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0c2:	f7fe f909 	bl	800d2d8 <HAL_GetTick>
 800f0c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800f0c8:	e008      	b.n	800f0dc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f0ca:	f7fe f905 	bl	800d2d8 <HAL_GetTick>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	1ad3      	subs	r3, r2, r3
 800f0d4:	2b64      	cmp	r3, #100	; 0x64
 800f0d6:	d901      	bls.n	800f0dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800f0d8:	2303      	movs	r3, #3
 800f0da:	e286      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800f0dc:	f7ff fbd3 	bl	800e886 <LL_RCC_HSE_IsReady>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d1f1      	bne.n	800f0ca <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f003 0302 	and.w	r3, r3, #2
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d04c      	beq.n	800f18c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f0f2:	f7ff fda9 	bl	800ec48 <LL_RCC_GetSysClkSource>
 800f0f6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f0f8:	f7ff fea2 	bl	800ee40 <LL_RCC_PLL_GetMainSource>
 800f0fc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	2b04      	cmp	r3, #4
 800f102:	d005      	beq.n	800f110 <HAL_RCC_OscConfig+0x200>
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	2b0c      	cmp	r3, #12
 800f108:	d10e      	bne.n	800f128 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d10b      	bne.n	800f128 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d101      	bne.n	800f11c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800f118:	2301      	movs	r3, #1
 800f11a:	e266      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	691b      	ldr	r3, [r3, #16]
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fbf2 	bl	800e90a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f126:	e031      	b.n	800f18c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d019      	beq.n	800f164 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f130:	f7ff fbbb 	bl	800e8aa <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f134:	f7fe f8d0 	bl	800d2d8 <HAL_GetTick>
 800f138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800f13a:	e008      	b.n	800f14e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f13c:	f7fe f8cc 	bl	800d2d8 <HAL_GetTick>
 800f140:	4602      	mov	r2, r0
 800f142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	2b02      	cmp	r3, #2
 800f148:	d901      	bls.n	800f14e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800f14a:	2303      	movs	r3, #3
 800f14c:	e24d      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800f14e:	f7ff fbca 	bl	800e8e6 <LL_RCC_HSI_IsReady>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d0f1      	beq.n	800f13c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	691b      	ldr	r3, [r3, #16]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7ff fbd4 	bl	800e90a <LL_RCC_HSI_SetCalibTrimming>
 800f162:	e013      	b.n	800f18c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f164:	f7ff fbb0 	bl	800e8c8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f168:	f7fe f8b6 	bl	800d2d8 <HAL_GetTick>
 800f16c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800f16e:	e008      	b.n	800f182 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f170:	f7fe f8b2 	bl	800d2d8 <HAL_GetTick>
 800f174:	4602      	mov	r2, r0
 800f176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f178:	1ad3      	subs	r3, r2, r3
 800f17a:	2b02      	cmp	r3, #2
 800f17c:	d901      	bls.n	800f182 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800f17e:	2303      	movs	r3, #3
 800f180:	e233      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800f182:	f7ff fbb0 	bl	800e8e6 <LL_RCC_HSI_IsReady>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d1f1      	bne.n	800f170 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f003 0308 	and.w	r3, r3, #8
 800f194:	2b00      	cmp	r3, #0
 800f196:	d106      	bne.n	800f1a6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f000 80a3 	beq.w	800f2ec <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d076      	beq.n	800f29c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f003 0310 	and.w	r3, r3, #16
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d046      	beq.n	800f248 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800f1ba:	f7ff fc67 	bl	800ea8c <LL_RCC_LSI1_IsReady>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d113      	bne.n	800f1ec <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800f1c4:	f7ff fc40 	bl	800ea48 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f1c8:	f7fe f886 	bl	800d2d8 <HAL_GetTick>
 800f1cc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800f1ce:	e008      	b.n	800f1e2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f1d0:	f7fe f882 	bl	800d2d8 <HAL_GetTick>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d8:	1ad3      	subs	r3, r2, r3
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d901      	bls.n	800f1e2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800f1de:	2303      	movs	r3, #3
 800f1e0:	e203      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800f1e2:	f7ff fc53 	bl	800ea8c <LL_RCC_LSI1_IsReady>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d0f1      	beq.n	800f1d0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800f1ec:	f7ff fc60 	bl	800eab0 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1f0:	f7fe f872 	bl	800d2d8 <HAL_GetTick>
 800f1f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800f1f6:	e008      	b.n	800f20a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800f1f8:	f7fe f86e 	bl	800d2d8 <HAL_GetTick>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	2b03      	cmp	r3, #3
 800f204:	d901      	bls.n	800f20a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800f206:	2303      	movs	r3, #3
 800f208:	e1ef      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800f20a:	f7ff fc73 	bl	800eaf4 <LL_RCC_LSI2_IsReady>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d0f1      	beq.n	800f1f8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	699b      	ldr	r3, [r3, #24]
 800f218:	4618      	mov	r0, r3
 800f21a:	f7ff fc7d 	bl	800eb18 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800f21e:	f7ff fc24 	bl	800ea6a <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f222:	f7fe f859 	bl	800d2d8 <HAL_GetTick>
 800f226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800f228:	e008      	b.n	800f23c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f22a:	f7fe f855 	bl	800d2d8 <HAL_GetTick>
 800f22e:	4602      	mov	r2, r0
 800f230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f232:	1ad3      	subs	r3, r2, r3
 800f234:	2b02      	cmp	r3, #2
 800f236:	d901      	bls.n	800f23c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800f238:	2303      	movs	r3, #3
 800f23a:	e1d6      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800f23c:	f7ff fc26 	bl	800ea8c <LL_RCC_LSI1_IsReady>
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1f1      	bne.n	800f22a <HAL_RCC_OscConfig+0x31a>
 800f246:	e051      	b.n	800f2ec <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800f248:	f7ff fbfe 	bl	800ea48 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f24c:	f7fe f844 	bl	800d2d8 <HAL_GetTick>
 800f250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800f252:	e00c      	b.n	800f26e <HAL_RCC_OscConfig+0x35e>
 800f254:	200000b8 	.word	0x200000b8
 800f258:	200000bc 	.word	0x200000bc
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f25c:	f7fe f83c 	bl	800d2d8 <HAL_GetTick>
 800f260:	4602      	mov	r2, r0
 800f262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f264:	1ad3      	subs	r3, r2, r3
 800f266:	2b02      	cmp	r3, #2
 800f268:	d901      	bls.n	800f26e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800f26a:	2303      	movs	r3, #3
 800f26c:	e1bd      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800f26e:	f7ff fc0d 	bl	800ea8c <LL_RCC_LSI1_IsReady>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d0f1      	beq.n	800f25c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800f278:	f7ff fc2b 	bl	800ead2 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800f27c:	e008      	b.n	800f290 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800f27e:	f7fe f82b 	bl	800d2d8 <HAL_GetTick>
 800f282:	4602      	mov	r2, r0
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	1ad3      	subs	r3, r2, r3
 800f288:	2b03      	cmp	r3, #3
 800f28a:	d901      	bls.n	800f290 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800f28c:	2303      	movs	r3, #3
 800f28e:	e1ac      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800f290:	f7ff fc30 	bl	800eaf4 <LL_RCC_LSI2_IsReady>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d1f1      	bne.n	800f27e <HAL_RCC_OscConfig+0x36e>
 800f29a:	e027      	b.n	800f2ec <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800f29c:	f7ff fc19 	bl	800ead2 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f2a0:	f7fe f81a 	bl	800d2d8 <HAL_GetTick>
 800f2a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800f2a6:	e008      	b.n	800f2ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800f2a8:	f7fe f816 	bl	800d2d8 <HAL_GetTick>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	2b03      	cmp	r3, #3
 800f2b4:	d901      	bls.n	800f2ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800f2b6:	2303      	movs	r3, #3
 800f2b8:	e197      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800f2ba:	f7ff fc1b 	bl	800eaf4 <LL_RCC_LSI2_IsReady>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d1f1      	bne.n	800f2a8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800f2c4:	f7ff fbd1 	bl	800ea6a <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f2c8:	f7fe f806 	bl	800d2d8 <HAL_GetTick>
 800f2cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800f2ce:	e008      	b.n	800f2e2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f2d0:	f7fe f802 	bl	800d2d8 <HAL_GetTick>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d901      	bls.n	800f2e2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800f2de:	2303      	movs	r3, #3
 800f2e0:	e183      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800f2e2:	f7ff fbd3 	bl	800ea8c <LL_RCC_LSI1_IsReady>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1f1      	bne.n	800f2d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f003 0304 	and.w	r3, r3, #4
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d05b      	beq.n	800f3b0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f2f8:	4ba7      	ldr	r3, [pc, #668]	; (800f598 <HAL_RCC_OscConfig+0x688>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f300:	2b00      	cmp	r3, #0
 800f302:	d114      	bne.n	800f32e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f304:	f7ff f976 	bl	800e5f4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f308:	f7fd ffe6 	bl	800d2d8 <HAL_GetTick>
 800f30c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f30e:	e008      	b.n	800f322 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f310:	f7fd ffe2 	bl	800d2d8 <HAL_GetTick>
 800f314:	4602      	mov	r2, r0
 800f316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f318:	1ad3      	subs	r3, r2, r3
 800f31a:	2b02      	cmp	r3, #2
 800f31c:	d901      	bls.n	800f322 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800f31e:	2303      	movs	r3, #3
 800f320:	e163      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f322:	4b9d      	ldr	r3, [pc, #628]	; (800f598 <HAL_RCC_OscConfig+0x688>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d0f0      	beq.n	800f310 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	2b01      	cmp	r3, #1
 800f334:	d102      	bne.n	800f33c <HAL_RCC_OscConfig+0x42c>
 800f336:	f7ff fb31 	bl	800e99c <LL_RCC_LSE_Enable>
 800f33a:	e00c      	b.n	800f356 <HAL_RCC_OscConfig+0x446>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	2b05      	cmp	r3, #5
 800f342:	d104      	bne.n	800f34e <HAL_RCC_OscConfig+0x43e>
 800f344:	f7ff fb4c 	bl	800e9e0 <LL_RCC_LSE_EnableBypass>
 800f348:	f7ff fb28 	bl	800e99c <LL_RCC_LSE_Enable>
 800f34c:	e003      	b.n	800f356 <HAL_RCC_OscConfig+0x446>
 800f34e:	f7ff fb36 	bl	800e9be <LL_RCC_LSE_Disable>
 800f352:	f7ff fb56 	bl	800ea02 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d014      	beq.n	800f388 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f35e:	f7fd ffbb 	bl	800d2d8 <HAL_GetTick>
 800f362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800f364:	e00a      	b.n	800f37c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f366:	f7fd ffb7 	bl	800d2d8 <HAL_GetTick>
 800f36a:	4602      	mov	r2, r0
 800f36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36e:	1ad3      	subs	r3, r2, r3
 800f370:	f241 3288 	movw	r2, #5000	; 0x1388
 800f374:	4293      	cmp	r3, r2
 800f376:	d901      	bls.n	800f37c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800f378:	2303      	movs	r3, #3
 800f37a:	e136      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800f37c:	f7ff fb52 	bl	800ea24 <LL_RCC_LSE_IsReady>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d0ef      	beq.n	800f366 <HAL_RCC_OscConfig+0x456>
 800f386:	e013      	b.n	800f3b0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f388:	f7fd ffa6 	bl	800d2d8 <HAL_GetTick>
 800f38c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800f38e:	e00a      	b.n	800f3a6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f390:	f7fd ffa2 	bl	800d2d8 <HAL_GetTick>
 800f394:	4602      	mov	r2, r0
 800f396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f398:	1ad3      	subs	r3, r2, r3
 800f39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d901      	bls.n	800f3a6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800f3a2:	2303      	movs	r3, #3
 800f3a4:	e121      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800f3a6:	f7ff fb3d 	bl	800ea24 <LL_RCC_LSE_IsReady>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d1ef      	bne.n	800f390 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d02c      	beq.n	800f416 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d014      	beq.n	800f3ee <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f3c4:	f7ff fab6 	bl	800e934 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f3c8:	f7fd ff86 	bl	800d2d8 <HAL_GetTick>
 800f3cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800f3ce:	e008      	b.n	800f3e2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f3d0:	f7fd ff82 	bl	800d2d8 <HAL_GetTick>
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d8:	1ad3      	subs	r3, r2, r3
 800f3da:	2b02      	cmp	r3, #2
 800f3dc:	d901      	bls.n	800f3e2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800f3de:	2303      	movs	r3, #3
 800f3e0:	e103      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800f3e2:	f7ff fac9 	bl	800e978 <LL_RCC_HSI48_IsReady>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d0f1      	beq.n	800f3d0 <HAL_RCC_OscConfig+0x4c0>
 800f3ec:	e013      	b.n	800f416 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f3ee:	f7ff fab2 	bl	800e956 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f3f2:	f7fd ff71 	bl	800d2d8 <HAL_GetTick>
 800f3f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800f3f8:	e008      	b.n	800f40c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f3fa:	f7fd ff6d 	bl	800d2d8 <HAL_GetTick>
 800f3fe:	4602      	mov	r2, r0
 800f400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f402:	1ad3      	subs	r3, r2, r3
 800f404:	2b02      	cmp	r3, #2
 800f406:	d901      	bls.n	800f40c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800f408:	2303      	movs	r3, #3
 800f40a:	e0ee      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800f40c:	f7ff fab4 	bl	800e978 <LL_RCC_HSI48_IsReady>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d1f1      	bne.n	800f3fa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f000 80e4 	beq.w	800f5e8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f420:	f7ff fc12 	bl	800ec48 <LL_RCC_GetSysClkSource>
 800f424:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800f426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f432:	2b02      	cmp	r3, #2
 800f434:	f040 80b4 	bne.w	800f5a0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f003 0203 	and.w	r2, r3, #3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f442:	429a      	cmp	r2, r3
 800f444:	d123      	bne.n	800f48e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f450:	429a      	cmp	r2, r3
 800f452:	d11c      	bne.n	800f48e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	0a1b      	lsrs	r3, r3, #8
 800f458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f460:	429a      	cmp	r2, r3
 800f462:	d114      	bne.n	800f48e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800f46e:	429a      	cmp	r2, r3
 800f470:	d10d      	bne.n	800f48e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d106      	bne.n	800f48e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d05d      	beq.n	800f54a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	2b0c      	cmp	r3, #12
 800f492:	d058      	beq.n	800f546 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d001      	beq.n	800f4a6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e0a1      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f4a6:	f7ff fc85 	bl	800edb4 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f4aa:	f7fd ff15 	bl	800d2d8 <HAL_GetTick>
 800f4ae:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f4b0:	e008      	b.n	800f4c4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f4b2:	f7fd ff11 	bl	800d2d8 <HAL_GetTick>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	2b02      	cmp	r3, #2
 800f4be:	d901      	bls.n	800f4c4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800f4c0:	2303      	movs	r3, #3
 800f4c2:	e092      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f4c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1ef      	bne.n	800f4b2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f4d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4d6:	68da      	ldr	r2, [r3, #12]
 800f4d8:	4b30      	ldr	r3, [pc, #192]	; (800f59c <HAL_RCC_OscConfig+0x68c>)
 800f4da:	4013      	ands	r3, r2
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f4e4:	4311      	orrs	r1, r2
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f4ea:	0212      	lsls	r2, r2, #8
 800f4ec:	4311      	orrs	r1, r2
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f4f2:	4311      	orrs	r1, r2
 800f4f4:	687a      	ldr	r2, [r7, #4]
 800f4f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f4f8:	4311      	orrs	r1, r2
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f4fe:	430a      	orrs	r2, r1
 800f500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f504:	4313      	orrs	r3, r2
 800f506:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f508:	f7ff fc45 	bl	800ed96 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f50c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f51a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f51c:	f7fd fedc 	bl	800d2d8 <HAL_GetTick>
 800f520:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f522:	e008      	b.n	800f536 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f524:	f7fd fed8 	bl	800d2d8 <HAL_GetTick>
 800f528:	4602      	mov	r2, r0
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	1ad3      	subs	r3, r2, r3
 800f52e:	2b02      	cmp	r3, #2
 800f530:	d901      	bls.n	800f536 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800f532:	2303      	movs	r3, #3
 800f534:	e059      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f540:	2b00      	cmp	r3, #0
 800f542:	d0ef      	beq.n	800f524 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f544:	e050      	b.n	800f5e8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f546:	2301      	movs	r3, #1
 800f548:	e04f      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f54a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f554:	2b00      	cmp	r3, #0
 800f556:	d147      	bne.n	800f5e8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f558:	f7ff fc1d 	bl	800ed96 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f55c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f560:	68db      	ldr	r3, [r3, #12]
 800f562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f56a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f56c:	f7fd feb4 	bl	800d2d8 <HAL_GetTick>
 800f570:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f572:	e008      	b.n	800f586 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f574:	f7fd feb0 	bl	800d2d8 <HAL_GetTick>
 800f578:	4602      	mov	r2, r0
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	2b02      	cmp	r3, #2
 800f580:	d901      	bls.n	800f586 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800f582:	2303      	movs	r3, #3
 800f584:	e031      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f590:	2b00      	cmp	r3, #0
 800f592:	d0ef      	beq.n	800f574 <HAL_RCC_OscConfig+0x664>
 800f594:	e028      	b.n	800f5e8 <HAL_RCC_OscConfig+0x6d8>
 800f596:	bf00      	nop
 800f598:	58000400 	.word	0x58000400
 800f59c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	2b0c      	cmp	r3, #12
 800f5a4:	d01e      	beq.n	800f5e4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f5a6:	f7ff fc05 	bl	800edb4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5aa:	f7fd fe95 	bl	800d2d8 <HAL_GetTick>
 800f5ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f5b0:	e008      	b.n	800f5c4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f5b2:	f7fd fe91 	bl	800d2d8 <HAL_GetTick>
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ba:	1ad3      	subs	r3, r2, r3
 800f5bc:	2b02      	cmp	r3, #2
 800f5be:	d901      	bls.n	800f5c4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800f5c0:	2303      	movs	r3, #3
 800f5c2:	e012      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f5c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d1ef      	bne.n	800f5b2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800f5d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f5d6:	68da      	ldr	r2, [r3, #12]
 800f5d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f5dc:	4b05      	ldr	r3, [pc, #20]	; (800f5f4 <HAL_RCC_OscConfig+0x6e4>)
 800f5de:	4013      	ands	r3, r2
 800f5e0:	60cb      	str	r3, [r1, #12]
 800f5e2:	e001      	b.n	800f5e8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	e000      	b.n	800f5ea <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800f5e8:	2300      	movs	r3, #0
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3734      	adds	r7, #52	; 0x34
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd90      	pop	{r4, r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	eefefffc 	.word	0xeefefffc

0800f5f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d101      	bne.n	800f60c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f608:	2301      	movs	r3, #1
 800f60a:	e12d      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f60c:	4b98      	ldr	r3, [pc, #608]	; (800f870 <HAL_RCC_ClockConfig+0x278>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f003 0307 	and.w	r3, r3, #7
 800f614:	683a      	ldr	r2, [r7, #0]
 800f616:	429a      	cmp	r2, r3
 800f618:	d91b      	bls.n	800f652 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f61a:	4b95      	ldr	r3, [pc, #596]	; (800f870 <HAL_RCC_ClockConfig+0x278>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f023 0207 	bic.w	r2, r3, #7
 800f622:	4993      	ldr	r1, [pc, #588]	; (800f870 <HAL_RCC_ClockConfig+0x278>)
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	4313      	orrs	r3, r2
 800f628:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f62a:	f7fd fe55 	bl	800d2d8 <HAL_GetTick>
 800f62e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f630:	e008      	b.n	800f644 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f632:	f7fd fe51 	bl	800d2d8 <HAL_GetTick>
 800f636:	4602      	mov	r2, r0
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	2b02      	cmp	r3, #2
 800f63e:	d901      	bls.n	800f644 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800f640:	2303      	movs	r3, #3
 800f642:	e111      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f644:	4b8a      	ldr	r3, [pc, #552]	; (800f870 <HAL_RCC_ClockConfig+0x278>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f003 0307 	and.w	r3, r3, #7
 800f64c:	683a      	ldr	r2, [r7, #0]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d1ef      	bne.n	800f632 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f003 0302 	and.w	r3, r3, #2
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d016      	beq.n	800f68c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	689b      	ldr	r3, [r3, #8]
 800f662:	4618      	mov	r0, r3
 800f664:	f7ff fafc 	bl	800ec60 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f668:	f7fd fe36 	bl	800d2d8 <HAL_GetTick>
 800f66c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f66e:	e008      	b.n	800f682 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f670:	f7fd fe32 	bl	800d2d8 <HAL_GetTick>
 800f674:	4602      	mov	r2, r0
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	1ad3      	subs	r3, r2, r3
 800f67a:	2b02      	cmp	r3, #2
 800f67c:	d901      	bls.n	800f682 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800f67e:	2303      	movs	r3, #3
 800f680:	e0f2      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f682:	f7ff fbe9 	bl	800ee58 <LL_RCC_IsActiveFlag_HPRE>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d0f1      	beq.n	800f670 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f003 0320 	and.w	r3, r3, #32
 800f694:	2b00      	cmp	r3, #0
 800f696:	d016      	beq.n	800f6c6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	695b      	ldr	r3, [r3, #20]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7ff faf3 	bl	800ec88 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f6a2:	f7fd fe19 	bl	800d2d8 <HAL_GetTick>
 800f6a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f6a8:	e008      	b.n	800f6bc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f6aa:	f7fd fe15 	bl	800d2d8 <HAL_GetTick>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	1ad3      	subs	r3, r2, r3
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d901      	bls.n	800f6bc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800f6b8:	2303      	movs	r3, #3
 800f6ba:	e0d5      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f6bc:	f7ff fbde 	bl	800ee7c <LL_RCC_IsActiveFlag_C2HPRE>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d0f1      	beq.n	800f6aa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d016      	beq.n	800f700 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	699b      	ldr	r3, [r3, #24]
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7ff faec 	bl	800ecb4 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f6dc:	f7fd fdfc 	bl	800d2d8 <HAL_GetTick>
 800f6e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f6e2:	e008      	b.n	800f6f6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f6e4:	f7fd fdf8 	bl	800d2d8 <HAL_GetTick>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	1ad3      	subs	r3, r2, r3
 800f6ee:	2b02      	cmp	r3, #2
 800f6f0:	d901      	bls.n	800f6f6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800f6f2:	2303      	movs	r3, #3
 800f6f4:	e0b8      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f6f6:	f7ff fbd4 	bl	800eea2 <LL_RCC_IsActiveFlag_SHDHPRE>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d0f1      	beq.n	800f6e4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f003 0304 	and.w	r3, r3, #4
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d016      	beq.n	800f73a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	4618      	mov	r0, r3
 800f712:	f7ff fae6 	bl	800ece2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f716:	f7fd fddf 	bl	800d2d8 <HAL_GetTick>
 800f71a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f71c:	e008      	b.n	800f730 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f71e:	f7fd fddb 	bl	800d2d8 <HAL_GetTick>
 800f722:	4602      	mov	r2, r0
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	1ad3      	subs	r3, r2, r3
 800f728:	2b02      	cmp	r3, #2
 800f72a:	d901      	bls.n	800f730 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800f72c:	2303      	movs	r3, #3
 800f72e:	e09b      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f730:	f7ff fbca 	bl	800eec8 <LL_RCC_IsActiveFlag_PPRE1>
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d0f1      	beq.n	800f71e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f003 0308 	and.w	r3, r3, #8
 800f742:	2b00      	cmp	r3, #0
 800f744:	d017      	beq.n	800f776 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	691b      	ldr	r3, [r3, #16]
 800f74a:	00db      	lsls	r3, r3, #3
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7ff fadc 	bl	800ed0a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f752:	f7fd fdc1 	bl	800d2d8 <HAL_GetTick>
 800f756:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f758:	e008      	b.n	800f76c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f75a:	f7fd fdbd 	bl	800d2d8 <HAL_GetTick>
 800f75e:	4602      	mov	r2, r0
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	1ad3      	subs	r3, r2, r3
 800f764:	2b02      	cmp	r3, #2
 800f766:	d901      	bls.n	800f76c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800f768:	2303      	movs	r3, #3
 800f76a:	e07d      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f76c:	f7ff fbbe 	bl	800eeec <LL_RCC_IsActiveFlag_PPRE2>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d0f1      	beq.n	800f75a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f003 0301 	and.w	r3, r3, #1
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d043      	beq.n	800f80a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	2b02      	cmp	r3, #2
 800f788:	d106      	bne.n	800f798 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800f78a:	f7ff f87c 	bl	800e886 <LL_RCC_HSE_IsReady>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d11e      	bne.n	800f7d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f794:	2301      	movs	r3, #1
 800f796:	e067      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	2b03      	cmp	r3, #3
 800f79e:	d106      	bne.n	800f7ae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800f7a0:	f7ff fb17 	bl	800edd2 <LL_RCC_PLL_IsReady>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d113      	bne.n	800f7d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	e05c      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d106      	bne.n	800f7c4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800f7b6:	f7ff f9e4 	bl	800eb82 <LL_RCC_MSI_IsReady>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d108      	bne.n	800f7d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	e051      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800f7c4:	f7ff f88f 	bl	800e8e6 <LL_RCC_HSI_IsReady>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d101      	bne.n	800f7d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e04a      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7ff fa22 	bl	800ec20 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f7dc:	f7fd fd7c 	bl	800d2d8 <HAL_GetTick>
 800f7e0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f7e2:	e00a      	b.n	800f7fa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f7e4:	f7fd fd78 	bl	800d2d8 <HAL_GetTick>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	1ad3      	subs	r3, r2, r3
 800f7ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d901      	bls.n	800f7fa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800f7f6:	2303      	movs	r3, #3
 800f7f8:	e036      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f7fa:	f7ff fa25 	bl	800ec48 <LL_RCC_GetSysClkSource>
 800f7fe:	4602      	mov	r2, r0
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	429a      	cmp	r2, r3
 800f808:	d1ec      	bne.n	800f7e4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f80a:	4b19      	ldr	r3, [pc, #100]	; (800f870 <HAL_RCC_ClockConfig+0x278>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f003 0307 	and.w	r3, r3, #7
 800f812:	683a      	ldr	r2, [r7, #0]
 800f814:	429a      	cmp	r2, r3
 800f816:	d21b      	bcs.n	800f850 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f818:	4b15      	ldr	r3, [pc, #84]	; (800f870 <HAL_RCC_ClockConfig+0x278>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f023 0207 	bic.w	r2, r3, #7
 800f820:	4913      	ldr	r1, [pc, #76]	; (800f870 <HAL_RCC_ClockConfig+0x278>)
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	4313      	orrs	r3, r2
 800f826:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f828:	f7fd fd56 	bl	800d2d8 <HAL_GetTick>
 800f82c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f82e:	e008      	b.n	800f842 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f830:	f7fd fd52 	bl	800d2d8 <HAL_GetTick>
 800f834:	4602      	mov	r2, r0
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	2b02      	cmp	r3, #2
 800f83c:	d901      	bls.n	800f842 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800f83e:	2303      	movs	r3, #3
 800f840:	e012      	b.n	800f868 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f842:	4b0b      	ldr	r3, [pc, #44]	; (800f870 <HAL_RCC_ClockConfig+0x278>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	f003 0307 	and.w	r3, r3, #7
 800f84a:	683a      	ldr	r2, [r7, #0]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d1ef      	bne.n	800f830 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f850:	f000 f87e 	bl	800f950 <HAL_RCC_GetHCLKFreq>
 800f854:	4603      	mov	r3, r0
 800f856:	4a07      	ldr	r2, [pc, #28]	; (800f874 <HAL_RCC_ClockConfig+0x27c>)
 800f858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800f85a:	f7fd fd49 	bl	800d2f0 <HAL_GetTickPrio>
 800f85e:	4603      	mov	r3, r0
 800f860:	4618      	mov	r0, r3
 800f862:	f7fd fceb 	bl	800d23c <HAL_InitTick>
 800f866:	4603      	mov	r3, r0
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3710      	adds	r7, #16
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	58004000 	.word	0x58004000
 800f874:	200000b8 	.word	0x200000b8

0800f878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f878:	b590      	push	{r4, r7, lr}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f87e:	f7ff f9e3 	bl	800ec48 <LL_RCC_GetSysClkSource>
 800f882:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d10a      	bne.n	800f8a0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f88a:	f7ff f99f 	bl	800ebcc <LL_RCC_MSI_GetRange>
 800f88e:	4603      	mov	r3, r0
 800f890:	091b      	lsrs	r3, r3, #4
 800f892:	f003 030f 	and.w	r3, r3, #15
 800f896:	4a2b      	ldr	r2, [pc, #172]	; (800f944 <HAL_RCC_GetSysClockFreq+0xcc>)
 800f898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f89c:	60fb      	str	r3, [r7, #12]
 800f89e:	e04b      	b.n	800f938 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b04      	cmp	r3, #4
 800f8a4:	d102      	bne.n	800f8ac <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f8a6:	4b28      	ldr	r3, [pc, #160]	; (800f948 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f8a8:	60fb      	str	r3, [r7, #12]
 800f8aa:	e045      	b.n	800f938 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2b08      	cmp	r3, #8
 800f8b0:	d10a      	bne.n	800f8c8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f8b2:	f7fe ffb8 	bl	800e826 <LL_RCC_HSE_IsEnabledDiv2>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d102      	bne.n	800f8c2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800f8bc:	4b22      	ldr	r3, [pc, #136]	; (800f948 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f8be:	60fb      	str	r3, [r7, #12]
 800f8c0:	e03a      	b.n	800f938 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800f8c2:	4b22      	ldr	r3, [pc, #136]	; (800f94c <HAL_RCC_GetSysClockFreq+0xd4>)
 800f8c4:	60fb      	str	r3, [r7, #12]
 800f8c6:	e037      	b.n	800f938 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800f8c8:	f7ff faba 	bl	800ee40 <LL_RCC_PLL_GetMainSource>
 800f8cc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	d003      	beq.n	800f8dc <HAL_RCC_GetSysClockFreq+0x64>
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	2b03      	cmp	r3, #3
 800f8d8:	d003      	beq.n	800f8e2 <HAL_RCC_GetSysClockFreq+0x6a>
 800f8da:	e00d      	b.n	800f8f8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800f8dc:	4b1a      	ldr	r3, [pc, #104]	; (800f948 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f8de:	60bb      	str	r3, [r7, #8]
        break;
 800f8e0:	e015      	b.n	800f90e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f8e2:	f7fe ffa0 	bl	800e826 <LL_RCC_HSE_IsEnabledDiv2>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d102      	bne.n	800f8f2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800f8ec:	4b16      	ldr	r3, [pc, #88]	; (800f948 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f8ee:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800f8f0:	e00d      	b.n	800f90e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800f8f2:	4b16      	ldr	r3, [pc, #88]	; (800f94c <HAL_RCC_GetSysClockFreq+0xd4>)
 800f8f4:	60bb      	str	r3, [r7, #8]
        break;
 800f8f6:	e00a      	b.n	800f90e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f8f8:	f7ff f968 	bl	800ebcc <LL_RCC_MSI_GetRange>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	091b      	lsrs	r3, r3, #4
 800f900:	f003 030f 	and.w	r3, r3, #15
 800f904:	4a0f      	ldr	r2, [pc, #60]	; (800f944 <HAL_RCC_GetSysClockFreq+0xcc>)
 800f906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f90a:	60bb      	str	r3, [r7, #8]
        break;
 800f90c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800f90e:	f7ff fa72 	bl	800edf6 <LL_RCC_PLL_GetN>
 800f912:	4602      	mov	r2, r0
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	fb03 f402 	mul.w	r4, r3, r2
 800f91a:	f7ff fa85 	bl	800ee28 <LL_RCC_PLL_GetDivider>
 800f91e:	4603      	mov	r3, r0
 800f920:	091b      	lsrs	r3, r3, #4
 800f922:	3301      	adds	r3, #1
 800f924:	fbb4 f4f3 	udiv	r4, r4, r3
 800f928:	f7ff fa72 	bl	800ee10 <LL_RCC_PLL_GetR>
 800f92c:	4603      	mov	r3, r0
 800f92e:	0f5b      	lsrs	r3, r3, #29
 800f930:	3301      	adds	r3, #1
 800f932:	fbb4 f3f3 	udiv	r3, r4, r3
 800f936:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800f938:	68fb      	ldr	r3, [r7, #12]
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3714      	adds	r7, #20
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd90      	pop	{r4, r7, pc}
 800f942:	bf00      	nop
 800f944:	0801a980 	.word	0x0801a980
 800f948:	00f42400 	.word	0x00f42400
 800f94c:	01e84800 	.word	0x01e84800

0800f950 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f950:	b598      	push	{r3, r4, r7, lr}
 800f952:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800f954:	f7ff ff90 	bl	800f878 <HAL_RCC_GetSysClockFreq>
 800f958:	4604      	mov	r4, r0
 800f95a:	f7ff f9ea 	bl	800ed32 <LL_RCC_GetAHBPrescaler>
 800f95e:	4603      	mov	r3, r0
 800f960:	091b      	lsrs	r3, r3, #4
 800f962:	f003 030f 	and.w	r3, r3, #15
 800f966:	4a03      	ldr	r2, [pc, #12]	; (800f974 <HAL_RCC_GetHCLKFreq+0x24>)
 800f968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f96c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800f970:	4618      	mov	r0, r3
 800f972:	bd98      	pop	{r3, r4, r7, pc}
 800f974:	0801a920 	.word	0x0801a920

0800f978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f978:	b598      	push	{r3, r4, r7, lr}
 800f97a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800f97c:	f7ff ffe8 	bl	800f950 <HAL_RCC_GetHCLKFreq>
 800f980:	4604      	mov	r4, r0
 800f982:	f7ff f9f0 	bl	800ed66 <LL_RCC_GetAPB1Prescaler>
 800f986:	4603      	mov	r3, r0
 800f988:	0a1b      	lsrs	r3, r3, #8
 800f98a:	f003 0307 	and.w	r3, r3, #7
 800f98e:	4a04      	ldr	r2, [pc, #16]	; (800f9a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f994:	f003 031f 	and.w	r3, r3, #31
 800f998:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	bd98      	pop	{r3, r4, r7, pc}
 800f9a0:	0801a960 	.word	0x0801a960

0800f9a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f9a4:	b598      	push	{r3, r4, r7, lr}
 800f9a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800f9a8:	f7ff ffd2 	bl	800f950 <HAL_RCC_GetHCLKFreq>
 800f9ac:	4604      	mov	r4, r0
 800f9ae:	f7ff f9e6 	bl	800ed7e <LL_RCC_GetAPB2Prescaler>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	0adb      	lsrs	r3, r3, #11
 800f9b6:	f003 0307 	and.w	r3, r3, #7
 800f9ba:	4a04      	ldr	r2, [pc, #16]	; (800f9cc <HAL_RCC_GetPCLK2Freq+0x28>)
 800f9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9c0:	f003 031f 	and.w	r3, r3, #31
 800f9c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	bd98      	pop	{r3, r4, r7, pc}
 800f9cc:	0801a960 	.word	0x0801a960

0800f9d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800f9d0:	b590      	push	{r4, r7, lr}
 800f9d2:	b085      	sub	sp, #20
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2bb0      	cmp	r3, #176	; 0xb0
 800f9dc:	d903      	bls.n	800f9e6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800f9de:	4b15      	ldr	r3, [pc, #84]	; (800fa34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9e2:	60fb      	str	r3, [r7, #12]
 800f9e4:	e007      	b.n	800f9f6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	091b      	lsrs	r3, r3, #4
 800f9ea:	f003 030f 	and.w	r3, r3, #15
 800f9ee:	4a11      	ldr	r2, [pc, #68]	; (800fa34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f9f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9f4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800f9f6:	f7ff f9a8 	bl	800ed4a <LL_RCC_GetAHB4Prescaler>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	091b      	lsrs	r3, r3, #4
 800f9fe:	f003 030f 	and.w	r3, r3, #15
 800fa02:	4a0d      	ldr	r2, [pc, #52]	; (800fa38 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800fa04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa0e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	4a0a      	ldr	r2, [pc, #40]	; (800fa3c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800fa14:	fba2 2303 	umull	r2, r3, r2, r3
 800fa18:	0c9c      	lsrs	r4, r3, #18
 800fa1a:	f7fe fe77 	bl	800e70c <HAL_PWREx_GetVoltageRange>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	4619      	mov	r1, r3
 800fa22:	4620      	mov	r0, r4
 800fa24:	f000 f80c 	bl	800fa40 <RCC_SetFlashLatency>
 800fa28:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3714      	adds	r7, #20
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd90      	pop	{r4, r7, pc}
 800fa32:	bf00      	nop
 800fa34:	0801a980 	.word	0x0801a980
 800fa38:	0801a920 	.word	0x0801a920
 800fa3c:	431bde83 	.word	0x431bde83

0800fa40 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800fa40:	b590      	push	{r4, r7, lr}
 800fa42:	b093      	sub	sp, #76	; 0x4c
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800fa4a:	4b37      	ldr	r3, [pc, #220]	; (800fb28 <RCC_SetFlashLatency+0xe8>)
 800fa4c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800fa50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800fa56:	4a35      	ldr	r2, [pc, #212]	; (800fb2c <RCC_SetFlashLatency+0xec>)
 800fa58:	f107 031c 	add.w	r3, r7, #28
 800fa5c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fa5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800fa62:	4b33      	ldr	r3, [pc, #204]	; (800fb30 <RCC_SetFlashLatency+0xf0>)
 800fa64:	f107 040c 	add.w	r4, r7, #12
 800fa68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800fa6e:	2300      	movs	r3, #0
 800fa70:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa78:	d11a      	bne.n	800fab0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	643b      	str	r3, [r7, #64]	; 0x40
 800fa7e:	e013      	b.n	800faa8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800fa80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	3348      	adds	r3, #72	; 0x48
 800fa86:	443b      	add	r3, r7
 800fa88:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d807      	bhi.n	800faa2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800fa92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	3348      	adds	r3, #72	; 0x48
 800fa98:	443b      	add	r3, r7
 800fa9a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800fa9e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800faa0:	e020      	b.n	800fae4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800faa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faa4:	3301      	adds	r3, #1
 800faa6:	643b      	str	r3, [r7, #64]	; 0x40
 800faa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faaa:	2b03      	cmp	r3, #3
 800faac:	d9e8      	bls.n	800fa80 <RCC_SetFlashLatency+0x40>
 800faae:	e019      	b.n	800fae4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800fab0:	2300      	movs	r3, #0
 800fab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fab4:	e013      	b.n	800fade <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800fab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	3348      	adds	r3, #72	; 0x48
 800fabc:	443b      	add	r3, r7
 800fabe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d807      	bhi.n	800fad8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800fac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	3348      	adds	r3, #72	; 0x48
 800face:	443b      	add	r3, r7
 800fad0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800fad4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800fad6:	e005      	b.n	800fae4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800fad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fada:	3301      	adds	r3, #1
 800fadc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fae0:	2b02      	cmp	r3, #2
 800fae2:	d9e8      	bls.n	800fab6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800fae4:	4b13      	ldr	r3, [pc, #76]	; (800fb34 <RCC_SetFlashLatency+0xf4>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	f023 0207 	bic.w	r2, r3, #7
 800faec:	4911      	ldr	r1, [pc, #68]	; (800fb34 <RCC_SetFlashLatency+0xf4>)
 800faee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faf0:	4313      	orrs	r3, r2
 800faf2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800faf4:	f7fd fbf0 	bl	800d2d8 <HAL_GetTick>
 800faf8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800fafa:	e008      	b.n	800fb0e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800fafc:	f7fd fbec 	bl	800d2d8 <HAL_GetTick>
 800fb00:	4602      	mov	r2, r0
 800fb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	2b02      	cmp	r3, #2
 800fb08:	d901      	bls.n	800fb0e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800fb0a:	2303      	movs	r3, #3
 800fb0c:	e007      	b.n	800fb1e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800fb0e:	4b09      	ldr	r3, [pc, #36]	; (800fb34 <RCC_SetFlashLatency+0xf4>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f003 0307 	and.w	r3, r3, #7
 800fb16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d1ef      	bne.n	800fafc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800fb1c:	2300      	movs	r3, #0
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	374c      	adds	r7, #76	; 0x4c
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd90      	pop	{r4, r7, pc}
 800fb26:	bf00      	nop
 800fb28:	0801a538 	.word	0x0801a538
 800fb2c:	0801a548 	.word	0x0801a548
 800fb30:	0801a554 	.word	0x0801a554
 800fb34:	58004000 	.word	0x58004000

0800fb38 <LL_RCC_LSE_IsEnabled>:
{
 800fb38:	b480      	push	{r7}
 800fb3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800fb3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fb40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb44:	f003 0301 	and.w	r3, r3, #1
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d101      	bne.n	800fb50 <LL_RCC_LSE_IsEnabled+0x18>
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	e000      	b.n	800fb52 <LL_RCC_LSE_IsEnabled+0x1a>
 800fb50:	2300      	movs	r3, #0
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr

0800fb5c <LL_RCC_LSE_IsReady>:
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800fb60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fb64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb68:	f003 0302 	and.w	r3, r3, #2
 800fb6c:	2b02      	cmp	r3, #2
 800fb6e:	d101      	bne.n	800fb74 <LL_RCC_LSE_IsReady+0x18>
 800fb70:	2301      	movs	r3, #1
 800fb72:	e000      	b.n	800fb76 <LL_RCC_LSE_IsReady+0x1a>
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <LL_RCC_SetRFWKPClockSource>:
{
 800fb80:	b480      	push	{r7}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800fb88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fb8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800fb94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800fba0:	bf00      	nop
 800fba2:	370c      	adds	r7, #12
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr

0800fbac <LL_RCC_SetSMPSClockSource>:
{
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800fbb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbba:	f023 0203 	bic.w	r2, r3, #3
 800fbbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800fbc8:	bf00      	nop
 800fbca:	370c      	adds	r7, #12
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr

0800fbd4 <LL_RCC_SetSMPSPrescaler>:
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800fbdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800fbe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4313      	orrs	r3, r2
 800fbee:	624b      	str	r3, [r1, #36]	; 0x24
}
 800fbf0:	bf00      	nop
 800fbf2:	370c      	adds	r7, #12
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <LL_RCC_SetUSARTClockSource>:
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800fc04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fc08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc0c:	f023 0203 	bic.w	r2, r3, #3
 800fc10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fc1c:	bf00      	nop
 800fc1e:	370c      	adds	r7, #12
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <LL_RCC_SetLPUARTClockSource>:
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800fc30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fc34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800fc3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	4313      	orrs	r3, r2
 800fc44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fc48:	bf00      	nop
 800fc4a:	370c      	adds	r7, #12
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <LL_RCC_SetI2CClockSource>:
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800fc5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fc60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	091b      	lsrs	r3, r3, #4
 800fc68:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800fc6c:	43db      	mvns	r3, r3
 800fc6e:	401a      	ands	r2, r3
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	011b      	lsls	r3, r3, #4
 800fc74:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800fc78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fc7c:	4313      	orrs	r3, r2
 800fc7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fc82:	bf00      	nop
 800fc84:	370c      	adds	r7, #12
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr

0800fc8e <LL_RCC_SetLPTIMClockSource>:
{
 800fc8e:	b480      	push	{r7}
 800fc90:	b083      	sub	sp, #12
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800fc96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fc9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	0c1b      	lsrs	r3, r3, #16
 800fca2:	041b      	lsls	r3, r3, #16
 800fca4:	43db      	mvns	r3, r3
 800fca6:	401a      	ands	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	041b      	lsls	r3, r3, #16
 800fcac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fcb6:	bf00      	nop
 800fcb8:	370c      	adds	r7, #12
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr

0800fcc2 <LL_RCC_SetSAIClockSource>:
{
 800fcc2:	b480      	push	{r7}
 800fcc4:	b083      	sub	sp, #12
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800fcca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fcce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800fcd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fce2:	bf00      	nop
 800fce4:	370c      	adds	r7, #12
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr

0800fcee <LL_RCC_SetRNGClockSource>:
{
 800fcee:	b480      	push	{r7}
 800fcf0:	b083      	sub	sp, #12
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800fcf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fcfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcfe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800fd02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fd0e:	bf00      	nop
 800fd10:	370c      	adds	r7, #12
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr

0800fd1a <LL_RCC_SetCLK48ClockSource>:
{
 800fd1a:	b480      	push	{r7}
 800fd1c:	b083      	sub	sp, #12
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800fd22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fd26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800fd2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4313      	orrs	r3, r2
 800fd36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fd3a:	bf00      	nop
 800fd3c:	370c      	adds	r7, #12
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr

0800fd46 <LL_RCC_SetUSBClockSource>:
{
 800fd46:	b580      	push	{r7, lr}
 800fd48:	b082      	sub	sp, #8
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f7ff ffe3 	bl	800fd1a <LL_RCC_SetCLK48ClockSource>
}
 800fd54:	bf00      	nop
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <LL_RCC_SetADCClockSource>:
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800fd64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fd68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800fd70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4313      	orrs	r3, r2
 800fd78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fd7c:	bf00      	nop
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <LL_RCC_SetRTCClockSource>:
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800fd90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fd94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fd9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	4313      	orrs	r3, r2
 800fda4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800fda8:	bf00      	nop
 800fdaa:	370c      	adds	r7, #12
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <LL_RCC_GetRTCClockSource>:
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800fdb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fdbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr

0800fdce <LL_RCC_ForceBackupDomainReset>:
{
 800fdce:	b480      	push	{r7}
 800fdd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800fdd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fdd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fdde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fde2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800fde6:	bf00      	nop
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr

0800fdf0 <LL_RCC_ReleaseBackupDomainReset>:
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800fdf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fdf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fe00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800fe08:	bf00      	nop
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr

0800fe12 <LL_RCC_PLLSAI1_Enable>:
{
 800fe12:	b480      	push	{r7}
 800fe14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800fe16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fe20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe24:	6013      	str	r3, [r2, #0]
}
 800fe26:	bf00      	nop
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <LL_RCC_PLLSAI1_Disable>:
{
 800fe30:	b480      	push	{r7}
 800fe32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800fe34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fe3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe42:	6013      	str	r3, [r2, #0]
}
 800fe44:	bf00      	nop
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr

0800fe4e <LL_RCC_PLLSAI1_IsReady>:
{
 800fe4e:	b480      	push	{r7}
 800fe50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800fe52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fe60:	d101      	bne.n	800fe66 <LL_RCC_PLLSAI1_IsReady+0x18>
 800fe62:	2301      	movs	r3, #1
 800fe64:	e000      	b.n	800fe68 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800fe66:	2300      	movs	r3, #0
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr

0800fe72 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800fe72:	b580      	push	{r7, lr}
 800fe74:	b088      	sub	sp, #32
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800fe7e:	2300      	movs	r3, #0
 800fe80:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d034      	beq.n	800fef8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fe96:	d021      	beq.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800fe98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fe9c:	d81b      	bhi.n	800fed6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800fe9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fea2:	d01d      	beq.n	800fee0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800fea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fea8:	d815      	bhi.n	800fed6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00b      	beq.n	800fec6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800feae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800feb2:	d110      	bne.n	800fed6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800feb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800febe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fec2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800fec4:	e00d      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	3304      	adds	r3, #4
 800feca:	4618      	mov	r0, r3
 800fecc:	f000 f947 	bl	801015e <RCCEx_PLLSAI1_ConfigNP>
 800fed0:	4603      	mov	r3, r0
 800fed2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800fed4:	e005      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800fed6:	2301      	movs	r3, #1
 800fed8:	77fb      	strb	r3, [r7, #31]
        break;
 800feda:	e002      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800fedc:	bf00      	nop
 800fede:	e000      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800fee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fee2:	7ffb      	ldrb	r3, [r7, #31]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d105      	bne.n	800fef4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feec:	4618      	mov	r0, r3
 800feee:	f7ff fee8 	bl	800fcc2 <LL_RCC_SetSAIClockSource>
 800fef2:	e001      	b.n	800fef8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fef4:	7ffb      	ldrb	r3, [r7, #31]
 800fef6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d046      	beq.n	800ff92 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800ff04:	f7ff ff56 	bl	800fdb4 <LL_RCC_GetRTCClockSource>
 800ff08:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff0e:	69ba      	ldr	r2, [r7, #24]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d03c      	beq.n	800ff8e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ff14:	f7fe fb6e 	bl	800e5f4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d105      	bne.n	800ff2a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7ff ff30 	bl	800fd88 <LL_RCC_SetRTCClockSource>
 800ff28:	e02e      	b.n	800ff88 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800ff2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ff2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff32:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800ff34:	f7ff ff4b 	bl	800fdce <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800ff38:	f7ff ff5a 	bl	800fdf0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff46:	4313      	orrs	r3, r2
 800ff48:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800ff4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800ff54:	f7ff fdf0 	bl	800fb38 <LL_RCC_LSE_IsEnabled>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d114      	bne.n	800ff88 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ff5e:	f7fd f9bb 	bl	800d2d8 <HAL_GetTick>
 800ff62:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800ff64:	e00b      	b.n	800ff7e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ff66:	f7fd f9b7 	bl	800d2d8 <HAL_GetTick>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	1ad3      	subs	r3, r2, r3
 800ff70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d902      	bls.n	800ff7e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800ff78:	2303      	movs	r3, #3
 800ff7a:	77fb      	strb	r3, [r7, #31]
              break;
 800ff7c:	e004      	b.n	800ff88 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800ff7e:	f7ff fded 	bl	800fb5c <LL_RCC_LSE_IsReady>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d1ee      	bne.n	800ff66 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800ff88:	7ffb      	ldrb	r3, [r7, #31]
 800ff8a:	77bb      	strb	r3, [r7, #30]
 800ff8c:	e001      	b.n	800ff92 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff8e:	7ffb      	ldrb	r3, [r7, #31]
 800ff90:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f003 0301 	and.w	r3, r3, #1
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d004      	beq.n	800ffa8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	699b      	ldr	r3, [r3, #24]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff fe2a 	bl	800fbfc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f003 0302 	and.w	r3, r3, #2
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d004      	beq.n	800ffbe <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	69db      	ldr	r3, [r3, #28]
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7ff fe35 	bl	800fc28 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	f003 0310 	and.w	r3, r3, #16
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d004      	beq.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7ff fe5d 	bl	800fc8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f003 0320 	and.w	r3, r3, #32
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d004      	beq.n	800ffea <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7ff fe52 	bl	800fc8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f003 0304 	and.w	r3, r3, #4
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d004      	beq.n	8010000 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a1b      	ldr	r3, [r3, #32]
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7ff fe2a 	bl	800fc54 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f003 0308 	and.w	r3, r3, #8
 8010008:	2b00      	cmp	r3, #0
 801000a:	d004      	beq.n	8010016 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff fe1f 	bl	800fc54 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801001e:	2b00      	cmp	r3, #0
 8010020:	d022      	beq.n	8010068 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010026:	4618      	mov	r0, r3
 8010028:	f7ff fe8d 	bl	800fd46 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010034:	d107      	bne.n	8010046 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8010036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010044:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801004a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801004e:	d10b      	bne.n	8010068 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	3304      	adds	r3, #4
 8010054:	4618      	mov	r0, r3
 8010056:	f000 f8dd 	bl	8010214 <RCCEx_PLLSAI1_ConfigNQ>
 801005a:	4603      	mov	r3, r0
 801005c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801005e:	7ffb      	ldrb	r3, [r7, #31]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d001      	beq.n	8010068 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8010064:	7ffb      	ldrb	r3, [r7, #31]
 8010066:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010070:	2b00      	cmp	r3, #0
 8010072:	d02b      	beq.n	80100cc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801007c:	d008      	beq.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010086:	d003      	beq.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801008c:	2b00      	cmp	r3, #0
 801008e:	d105      	bne.n	801009c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010094:	4618      	mov	r0, r3
 8010096:	f7ff fe2a 	bl	800fcee <LL_RCC_SetRNGClockSource>
 801009a:	e00a      	b.n	80100b2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80100a4:	60fb      	str	r3, [r7, #12]
 80100a6:	2000      	movs	r0, #0
 80100a8:	f7ff fe21 	bl	800fcee <LL_RCC_SetRNGClockSource>
 80100ac:	68f8      	ldr	r0, [r7, #12]
 80100ae:	f7ff fe34 	bl	800fd1a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100b6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80100ba:	d107      	bne.n	80100cc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80100bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80100c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80100ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d022      	beq.n	801011e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100dc:	4618      	mov	r0, r3
 80100de:	f7ff fe3d 	bl	800fd5c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100ea:	d107      	bne.n	80100fc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80100ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80100f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80100fa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010104:	d10b      	bne.n	801011e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	3304      	adds	r3, #4
 801010a:	4618      	mov	r0, r3
 801010c:	f000 f8dd 	bl	80102ca <RCCEx_PLLSAI1_ConfigNR>
 8010110:	4603      	mov	r3, r0
 8010112:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8010114:	7ffb      	ldrb	r3, [r7, #31]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d001      	beq.n	801011e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 801011a:	7ffb      	ldrb	r3, [r7, #31]
 801011c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010126:	2b00      	cmp	r3, #0
 8010128:	d004      	beq.n	8010134 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801012e:	4618      	mov	r0, r3
 8010130:	f7ff fd26 	bl	800fb80 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801013c:	2b00      	cmp	r3, #0
 801013e:	d009      	beq.n	8010154 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010144:	4618      	mov	r0, r3
 8010146:	f7ff fd45 	bl	800fbd4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801014e:	4618      	mov	r0, r3
 8010150:	f7ff fd2c 	bl	800fbac <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8010154:	7fbb      	ldrb	r3, [r7, #30]
}
 8010156:	4618      	mov	r0, r3
 8010158:	3720      	adds	r7, #32
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b084      	sub	sp, #16
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010166:	2300      	movs	r3, #0
 8010168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801016a:	f7ff fe61 	bl	800fe30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801016e:	f7fd f8b3 	bl	800d2d8 <HAL_GetTick>
 8010172:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010174:	e009      	b.n	801018a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010176:	f7fd f8af 	bl	800d2d8 <HAL_GetTick>
 801017a:	4602      	mov	r2, r0
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	1ad3      	subs	r3, r2, r3
 8010180:	2b02      	cmp	r3, #2
 8010182:	d902      	bls.n	801018a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8010184:	2303      	movs	r3, #3
 8010186:	73fb      	strb	r3, [r7, #15]
      break;
 8010188:	e004      	b.n	8010194 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801018a:	f7ff fe60 	bl	800fe4e <LL_RCC_PLLSAI1_IsReady>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1f0      	bne.n	8010176 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8010194:	7bfb      	ldrb	r3, [r7, #15]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d137      	bne.n	801020a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801019a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801019e:	691b      	ldr	r3, [r3, #16]
 80101a0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	021b      	lsls	r3, r3, #8
 80101aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80101ae:	4313      	orrs	r3, r2
 80101b0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80101b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101b6:	691b      	ldr	r3, [r3, #16]
 80101b8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80101c4:	4313      	orrs	r3, r2
 80101c6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80101c8:	f7ff fe23 	bl	800fe12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80101cc:	f7fd f884 	bl	800d2d8 <HAL_GetTick>
 80101d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80101d2:	e009      	b.n	80101e8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80101d4:	f7fd f880 	bl	800d2d8 <HAL_GetTick>
 80101d8:	4602      	mov	r2, r0
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	2b02      	cmp	r3, #2
 80101e0:	d902      	bls.n	80101e8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80101e2:	2303      	movs	r3, #3
 80101e4:	73fb      	strb	r3, [r7, #15]
        break;
 80101e6:	e004      	b.n	80101f2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80101e8:	f7ff fe31 	bl	800fe4e <LL_RCC_PLLSAI1_IsReady>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d1f0      	bne.n	80101d4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80101f2:	7bfb      	ldrb	r3, [r7, #15]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d108      	bne.n	801020a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80101f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101fc:	691a      	ldr	r2, [r3, #16]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	691b      	ldr	r3, [r3, #16]
 8010202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010206:	4313      	orrs	r3, r2
 8010208:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801020a:	7bfb      	ldrb	r3, [r7, #15]
}
 801020c:	4618      	mov	r0, r3
 801020e:	3710      	adds	r7, #16
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801021c:	2300      	movs	r3, #0
 801021e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8010220:	f7ff fe06 	bl	800fe30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010224:	f7fd f858 	bl	800d2d8 <HAL_GetTick>
 8010228:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801022a:	e009      	b.n	8010240 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801022c:	f7fd f854 	bl	800d2d8 <HAL_GetTick>
 8010230:	4602      	mov	r2, r0
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	2b02      	cmp	r3, #2
 8010238:	d902      	bls.n	8010240 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801023a:	2303      	movs	r3, #3
 801023c:	73fb      	strb	r3, [r7, #15]
      break;
 801023e:	e004      	b.n	801024a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010240:	f7ff fe05 	bl	800fe4e <LL_RCC_PLLSAI1_IsReady>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1f0      	bne.n	801022c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 801024a:	7bfb      	ldrb	r3, [r7, #15]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d137      	bne.n	80102c0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8010250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010254:	691b      	ldr	r3, [r3, #16]
 8010256:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	021b      	lsls	r3, r3, #8
 8010260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010264:	4313      	orrs	r3, r2
 8010266:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8010268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801026c:	691b      	ldr	r3, [r3, #16]
 801026e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	689b      	ldr	r3, [r3, #8]
 8010276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801027a:	4313      	orrs	r3, r2
 801027c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801027e:	f7ff fdc8 	bl	800fe12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010282:	f7fd f829 	bl	800d2d8 <HAL_GetTick>
 8010286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010288:	e009      	b.n	801029e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801028a:	f7fd f825 	bl	800d2d8 <HAL_GetTick>
 801028e:	4602      	mov	r2, r0
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	1ad3      	subs	r3, r2, r3
 8010294:	2b02      	cmp	r3, #2
 8010296:	d902      	bls.n	801029e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8010298:	2303      	movs	r3, #3
 801029a:	73fb      	strb	r3, [r7, #15]
        break;
 801029c:	e004      	b.n	80102a8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801029e:	f7ff fdd6 	bl	800fe4e <LL_RCC_PLLSAI1_IsReady>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d1f0      	bne.n	801028a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80102a8:	7bfb      	ldrb	r3, [r7, #15]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d108      	bne.n	80102c0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80102ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80102b2:	691a      	ldr	r2, [r3, #16]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	691b      	ldr	r3, [r3, #16]
 80102b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80102bc:	4313      	orrs	r3, r2
 80102be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80102c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}

080102ca <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b084      	sub	sp, #16
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80102d2:	2300      	movs	r3, #0
 80102d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80102d6:	f7ff fdab 	bl	800fe30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80102da:	f7fc fffd 	bl	800d2d8 <HAL_GetTick>
 80102de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80102e0:	e009      	b.n	80102f6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80102e2:	f7fc fff9 	bl	800d2d8 <HAL_GetTick>
 80102e6:	4602      	mov	r2, r0
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	2b02      	cmp	r3, #2
 80102ee:	d902      	bls.n	80102f6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80102f0:	2303      	movs	r3, #3
 80102f2:	73fb      	strb	r3, [r7, #15]
      break;
 80102f4:	e004      	b.n	8010300 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80102f6:	f7ff fdaa 	bl	800fe4e <LL_RCC_PLLSAI1_IsReady>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d1f0      	bne.n	80102e2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8010300:	7bfb      	ldrb	r3, [r7, #15]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d137      	bne.n	8010376 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8010306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801030a:	691b      	ldr	r3, [r3, #16]
 801030c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	021b      	lsls	r3, r3, #8
 8010316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801031a:	4313      	orrs	r3, r2
 801031c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 801031e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010322:	691b      	ldr	r3, [r3, #16]
 8010324:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	68db      	ldr	r3, [r3, #12]
 801032c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010330:	4313      	orrs	r3, r2
 8010332:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8010334:	f7ff fd6d 	bl	800fe12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010338:	f7fc ffce 	bl	800d2d8 <HAL_GetTick>
 801033c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801033e:	e009      	b.n	8010354 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010340:	f7fc ffca 	bl	800d2d8 <HAL_GetTick>
 8010344:	4602      	mov	r2, r0
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	1ad3      	subs	r3, r2, r3
 801034a:	2b02      	cmp	r3, #2
 801034c:	d902      	bls.n	8010354 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 801034e:	2303      	movs	r3, #3
 8010350:	73fb      	strb	r3, [r7, #15]
        break;
 8010352:	e004      	b.n	801035e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010354:	f7ff fd7b 	bl	800fe4e <LL_RCC_PLLSAI1_IsReady>
 8010358:	4603      	mov	r3, r0
 801035a:	2b01      	cmp	r3, #1
 801035c:	d1f0      	bne.n	8010340 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 801035e:	7bfb      	ldrb	r3, [r7, #15]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d108      	bne.n	8010376 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8010364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010368:	691a      	ldr	r2, [r3, #16]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	691b      	ldr	r3, [r3, #16]
 801036e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010372:	4313      	orrs	r3, r2
 8010374:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8010376:	7bfb      	ldrb	r3, [r7, #15]
}
 8010378:	4618      	mov	r0, r3
 801037a:	3710      	adds	r7, #16
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d101      	bne.n	8010392 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 801038e:	2301      	movs	r3, #1
 8010390:	e09f      	b.n	80104d2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010398:	b2db      	uxtb	r3, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	d106      	bne.n	80103ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7fa f8f0 	bl	800a58c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2202      	movs	r2, #2
 80103b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80103b4:	4b49      	ldr	r3, [pc, #292]	; (80104dc <HAL_RTC_Init+0x15c>)
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	f003 0310 	and.w	r3, r3, #16
 80103bc:	2b10      	cmp	r3, #16
 80103be:	d07e      	beq.n	80104be <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	22ca      	movs	r2, #202	; 0xca
 80103c6:	625a      	str	r2, [r3, #36]	; 0x24
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2253      	movs	r2, #83	; 0x53
 80103ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 f8ab 	bl	801052c <RTC_EnterInitMode>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d00a      	beq.n	80103f2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	22ff      	movs	r2, #255	; 0xff
 80103e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2204      	movs	r2, #4
 80103e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80103ec:	2301      	movs	r3, #1
 80103ee:	73fb      	strb	r3, [r7, #15]
 80103f0:	e067      	b.n	80104c2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	689b      	ldr	r3, [r3, #8]
 80103f8:	687a      	ldr	r2, [r7, #4]
 80103fa:	6812      	ldr	r2, [r2, #0]
 80103fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010404:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	6899      	ldr	r1, [r3, #8]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	685a      	ldr	r2, [r3, #4]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	691b      	ldr	r3, [r3, #16]
 8010414:	431a      	orrs	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	699b      	ldr	r3, [r3, #24]
 801041a:	431a      	orrs	r2, r3
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	430a      	orrs	r2, r1
 8010422:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	68d2      	ldr	r2, [r2, #12]
 801042c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	6919      	ldr	r1, [r3, #16]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	689b      	ldr	r3, [r3, #8]
 8010438:	041a      	lsls	r2, r3, #16
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	430a      	orrs	r2, r1
 8010440:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	68da      	ldr	r2, [r3, #12]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010450:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f022 0203 	bic.w	r2, r2, #3
 8010460:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	69da      	ldr	r2, [r3, #28]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	695b      	ldr	r3, [r3, #20]
 8010470:	431a      	orrs	r2, r3
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	430a      	orrs	r2, r1
 8010478:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	689b      	ldr	r3, [r3, #8]
 8010480:	f003 0320 	and.w	r3, r3, #32
 8010484:	2b00      	cmp	r3, #0
 8010486:	d113      	bne.n	80104b0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 f829 	bl	80104e0 <HAL_RTC_WaitForSynchro>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d00d      	beq.n	80104b0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	22ff      	movs	r2, #255	; 0xff
 801049a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2204      	movs	r2, #4
 80104a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80104ac:	2301      	movs	r3, #1
 80104ae:	e010      	b.n	80104d2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	22ff      	movs	r2, #255	; 0xff
 80104b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80104b8:	2300      	movs	r3, #0
 80104ba:	73fb      	strb	r3, [r7, #15]
 80104bc:	e001      	b.n	80104c2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80104be:	2300      	movs	r3, #0
 80104c0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80104c2:	7bfb      	ldrb	r3, [r7, #15]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d103      	bne.n	80104d0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80104d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3710      	adds	r7, #16
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	40002800 	.word	0x40002800

080104e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	68da      	ldr	r2, [r3, #12]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80104f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80104f8:	f7fc feee 	bl	800d2d8 <HAL_GetTick>
 80104fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80104fe:	e009      	b.n	8010514 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010500:	f7fc feea 	bl	800d2d8 <HAL_GetTick>
 8010504:	4602      	mov	r2, r0
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801050e:	d901      	bls.n	8010514 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010510:	2303      	movs	r3, #3
 8010512:	e007      	b.n	8010524 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	f003 0320 	and.w	r3, r3, #32
 801051e:	2b00      	cmp	r3, #0
 8010520:	d0ee      	beq.n	8010500 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3710      	adds	r7, #16
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801053e:	2b00      	cmp	r3, #0
 8010540:	d119      	bne.n	8010576 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f04f 32ff 	mov.w	r2, #4294967295
 801054a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801054c:	f7fc fec4 	bl	800d2d8 <HAL_GetTick>
 8010550:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010552:	e009      	b.n	8010568 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010554:	f7fc fec0 	bl	800d2d8 <HAL_GetTick>
 8010558:	4602      	mov	r2, r0
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010562:	d901      	bls.n	8010568 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8010564:	2303      	movs	r3, #3
 8010566:	e007      	b.n	8010578 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010572:	2b00      	cmp	r3, #0
 8010574:	d0ee      	beq.n	8010554 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	3710      	adds	r7, #16
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <LL_RCC_GetUSARTClockSource>:
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8010588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801058c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4013      	ands	r3, r2
}
 8010594:	4618      	mov	r0, r3
 8010596:	370c      	adds	r7, #12
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr

080105a0 <LL_RCC_GetLPUARTClockSource>:
{
 80105a0:	b480      	push	{r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80105a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80105ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	4013      	ands	r3, r2
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	370c      	adds	r7, #12
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr

080105c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d101      	bne.n	80105d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80105ce:	2301      	movs	r3, #1
 80105d0:	e042      	b.n	8010658 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d106      	bne.n	80105ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f7f9 ff03 	bl	800a3f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2224      	movs	r2, #36	; 0x24
 80105ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f022 0201 	bic.w	r2, r2, #1
 8010600:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010606:	2b00      	cmp	r3, #0
 8010608:	d002      	beq.n	8010610 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 fe60 	bl	80112d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 fc35 	bl	8010e80 <UART_SetConfig>
 8010616:	4603      	mov	r3, r0
 8010618:	2b01      	cmp	r3, #1
 801061a:	d101      	bne.n	8010620 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801061c:	2301      	movs	r3, #1
 801061e:	e01b      	b.n	8010658 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	685a      	ldr	r2, [r3, #4]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801062e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	689a      	ldr	r2, [r3, #8]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801063e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f042 0201 	orr.w	r2, r2, #1
 801064e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f000 fedf 	bl	8011414 <UART_CheckIdleState>
 8010656:	4603      	mov	r3, r0
}
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b08a      	sub	sp, #40	; 0x28
 8010664:	af00      	add	r7, sp, #0
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	4613      	mov	r3, r2
 801066c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010674:	2b20      	cmp	r3, #32
 8010676:	d137      	bne.n	80106e8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d002      	beq.n	8010684 <HAL_UART_Receive_IT+0x24>
 801067e:	88fb      	ldrh	r3, [r7, #6]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d101      	bne.n	8010688 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010684:	2301      	movs	r3, #1
 8010686:	e030      	b.n	80106ea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2200      	movs	r2, #0
 801068c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4a18      	ldr	r2, [pc, #96]	; (80106f4 <HAL_UART_Receive_IT+0x94>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d01f      	beq.n	80106d8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d018      	beq.n	80106d8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	e853 3f00 	ldrex	r3, [r3]
 80106b2:	613b      	str	r3, [r7, #16]
   return(result);
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80106ba:	627b      	str	r3, [r7, #36]	; 0x24
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	461a      	mov	r2, r3
 80106c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c4:	623b      	str	r3, [r7, #32]
 80106c6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c8:	69f9      	ldr	r1, [r7, #28]
 80106ca:	6a3a      	ldr	r2, [r7, #32]
 80106cc:	e841 2300 	strex	r3, r2, [r1]
 80106d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1e6      	bne.n	80106a6 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80106d8:	88fb      	ldrh	r3, [r7, #6]
 80106da:	461a      	mov	r2, r3
 80106dc:	68b9      	ldr	r1, [r7, #8]
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f000 ffaa 	bl	8011638 <UART_Start_Receive_IT>
 80106e4:	4603      	mov	r3, r0
 80106e6:	e000      	b.n	80106ea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80106e8:	2302      	movs	r3, #2
  }
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3728      	adds	r7, #40	; 0x28
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	40008000 	.word	0x40008000

080106f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b08a      	sub	sp, #40	; 0x28
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	60f8      	str	r0, [r7, #12]
 8010700:	60b9      	str	r1, [r7, #8]
 8010702:	4613      	mov	r3, r2
 8010704:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801070c:	2b20      	cmp	r3, #32
 801070e:	d167      	bne.n	80107e0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d002      	beq.n	801071c <HAL_UART_Transmit_DMA+0x24>
 8010716:	88fb      	ldrh	r3, [r7, #6]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d101      	bne.n	8010720 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 801071c:	2301      	movs	r3, #1
 801071e:	e060      	b.n	80107e2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	68ba      	ldr	r2, [r7, #8]
 8010724:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	88fa      	ldrh	r2, [r7, #6]
 801072a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	88fa      	ldrh	r2, [r7, #6]
 8010732:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2200      	movs	r2, #0
 801073a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2221      	movs	r2, #33	; 0x21
 8010742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801074a:	2b00      	cmp	r3, #0
 801074c:	d028      	beq.n	80107a0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010752:	4a26      	ldr	r2, [pc, #152]	; (80107ec <HAL_UART_Transmit_DMA+0xf4>)
 8010754:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801075a:	4a25      	ldr	r2, [pc, #148]	; (80107f0 <HAL_UART_Transmit_DMA+0xf8>)
 801075c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010762:	4a24      	ldr	r2, [pc, #144]	; (80107f4 <HAL_UART_Transmit_DMA+0xfc>)
 8010764:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801076a:	2200      	movs	r2, #0
 801076c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010776:	4619      	mov	r1, r3
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	3328      	adds	r3, #40	; 0x28
 801077e:	461a      	mov	r2, r3
 8010780:	88fb      	ldrh	r3, [r7, #6]
 8010782:	f7fd f82f 	bl	800d7e4 <HAL_DMA_Start_IT>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d009      	beq.n	80107a0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2210      	movs	r2, #16
 8010790:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2220      	movs	r2, #32
 8010798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 801079c:	2301      	movs	r3, #1
 801079e:	e020      	b.n	80107e2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2240      	movs	r2, #64	; 0x40
 80107a6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	3308      	adds	r3, #8
 80107ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	e853 3f00 	ldrex	r3, [r3]
 80107b6:	613b      	str	r3, [r7, #16]
   return(result);
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107be:	627b      	str	r3, [r7, #36]	; 0x24
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	3308      	adds	r3, #8
 80107c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c8:	623a      	str	r2, [r7, #32]
 80107ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107cc:	69f9      	ldr	r1, [r7, #28]
 80107ce:	6a3a      	ldr	r2, [r7, #32]
 80107d0:	e841 2300 	strex	r3, r2, [r1]
 80107d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d1e5      	bne.n	80107a8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80107dc:	2300      	movs	r3, #0
 80107de:	e000      	b.n	80107e2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80107e0:	2302      	movs	r3, #2
  }
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3728      	adds	r7, #40	; 0x28
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
 80107ea:	bf00      	nop
 80107ec:	080119cb 	.word	0x080119cb
 80107f0:	08011a65 	.word	0x08011a65
 80107f4:	08011a81 	.word	0x08011a81

080107f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b0ba      	sub	sp, #232	; 0xe8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	69db      	ldr	r3, [r3, #28]
 8010806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	689b      	ldr	r3, [r3, #8]
 801081a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801081e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010822:	f640 030f 	movw	r3, #2063	; 0x80f
 8010826:	4013      	ands	r3, r2
 8010828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801082c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010830:	2b00      	cmp	r3, #0
 8010832:	d11b      	bne.n	801086c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010838:	f003 0320 	and.w	r3, r3, #32
 801083c:	2b00      	cmp	r3, #0
 801083e:	d015      	beq.n	801086c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010844:	f003 0320 	and.w	r3, r3, #32
 8010848:	2b00      	cmp	r3, #0
 801084a:	d105      	bne.n	8010858 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801084c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010854:	2b00      	cmp	r3, #0
 8010856:	d009      	beq.n	801086c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801085c:	2b00      	cmp	r3, #0
 801085e:	f000 82e3 	beq.w	8010e28 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	4798      	blx	r3
      }
      return;
 801086a:	e2dd      	b.n	8010e28 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801086c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010870:	2b00      	cmp	r3, #0
 8010872:	f000 8123 	beq.w	8010abc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010876:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801087a:	4b8d      	ldr	r3, [pc, #564]	; (8010ab0 <HAL_UART_IRQHandler+0x2b8>)
 801087c:	4013      	ands	r3, r2
 801087e:	2b00      	cmp	r3, #0
 8010880:	d106      	bne.n	8010890 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010882:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010886:	4b8b      	ldr	r3, [pc, #556]	; (8010ab4 <HAL_UART_IRQHandler+0x2bc>)
 8010888:	4013      	ands	r3, r2
 801088a:	2b00      	cmp	r3, #0
 801088c:	f000 8116 	beq.w	8010abc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010894:	f003 0301 	and.w	r3, r3, #1
 8010898:	2b00      	cmp	r3, #0
 801089a:	d011      	beq.n	80108c0 <HAL_UART_IRQHandler+0xc8>
 801089c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00b      	beq.n	80108c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2201      	movs	r2, #1
 80108ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108b6:	f043 0201 	orr.w	r2, r3, #1
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108c4:	f003 0302 	and.w	r3, r3, #2
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d011      	beq.n	80108f0 <HAL_UART_IRQHandler+0xf8>
 80108cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108d0:	f003 0301 	and.w	r3, r3, #1
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d00b      	beq.n	80108f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2202      	movs	r2, #2
 80108de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108e6:	f043 0204 	orr.w	r2, r3, #4
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108f4:	f003 0304 	and.w	r3, r3, #4
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d011      	beq.n	8010920 <HAL_UART_IRQHandler+0x128>
 80108fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010900:	f003 0301 	and.w	r3, r3, #1
 8010904:	2b00      	cmp	r3, #0
 8010906:	d00b      	beq.n	8010920 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2204      	movs	r2, #4
 801090e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010916:	f043 0202 	orr.w	r2, r3, #2
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010924:	f003 0308 	and.w	r3, r3, #8
 8010928:	2b00      	cmp	r3, #0
 801092a:	d017      	beq.n	801095c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801092c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010930:	f003 0320 	and.w	r3, r3, #32
 8010934:	2b00      	cmp	r3, #0
 8010936:	d105      	bne.n	8010944 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010938:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801093c:	4b5c      	ldr	r3, [pc, #368]	; (8010ab0 <HAL_UART_IRQHandler+0x2b8>)
 801093e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00b      	beq.n	801095c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2208      	movs	r2, #8
 801094a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010952:	f043 0208 	orr.w	r2, r3, #8
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801095c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010964:	2b00      	cmp	r3, #0
 8010966:	d012      	beq.n	801098e <HAL_UART_IRQHandler+0x196>
 8010968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801096c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00c      	beq.n	801098e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801097c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010984:	f043 0220 	orr.w	r2, r3, #32
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010994:	2b00      	cmp	r3, #0
 8010996:	f000 8249 	beq.w	8010e2c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801099a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801099e:	f003 0320 	and.w	r3, r3, #32
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d013      	beq.n	80109ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80109a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109aa:	f003 0320 	and.w	r3, r3, #32
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d105      	bne.n	80109be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80109b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d007      	beq.n	80109ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d003      	beq.n	80109ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	689b      	ldr	r3, [r3, #8]
 80109de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109e2:	2b40      	cmp	r3, #64	; 0x40
 80109e4:	d005      	beq.n	80109f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80109e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80109ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d054      	beq.n	8010a9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 ff83 	bl	80118fe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	689b      	ldr	r3, [r3, #8]
 80109fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a02:	2b40      	cmp	r3, #64	; 0x40
 8010a04:	d146      	bne.n	8010a94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	3308      	adds	r3, #8
 8010a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a14:	e853 3f00 	ldrex	r3, [r3]
 8010a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	3308      	adds	r3, #8
 8010a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010a32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010a42:	e841 2300 	strex	r3, r2, [r1]
 8010a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d1d9      	bne.n	8010a06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d017      	beq.n	8010a8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a62:	4a15      	ldr	r2, [pc, #84]	; (8010ab8 <HAL_UART_IRQHandler+0x2c0>)
 8010a64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fc ff93 	bl	800d998 <HAL_DMA_Abort_IT>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d019      	beq.n	8010aac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010a86:	4610      	mov	r0, r2
 8010a88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a8a:	e00f      	b.n	8010aac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f000 f9e1 	bl	8010e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a92:	e00b      	b.n	8010aac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 f9dd 	bl	8010e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a9a:	e007      	b.n	8010aac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 f9d9 	bl	8010e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010aaa:	e1bf      	b.n	8010e2c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010aac:	bf00      	nop
    return;
 8010aae:	e1bd      	b.n	8010e2c <HAL_UART_IRQHandler+0x634>
 8010ab0:	10000001 	.word	0x10000001
 8010ab4:	04000120 	.word	0x04000120
 8010ab8:	08011b01 	.word	0x08011b01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	f040 8153 	bne.w	8010d6c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aca:	f003 0310 	and.w	r3, r3, #16
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f000 814c 	beq.w	8010d6c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ad8:	f003 0310 	and.w	r3, r3, #16
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	f000 8145 	beq.w	8010d6c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	2210      	movs	r2, #16
 8010ae8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	689b      	ldr	r3, [r3, #8]
 8010af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010af4:	2b40      	cmp	r3, #64	; 0x40
 8010af6:	f040 80bb 	bne.w	8010c70 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010b08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	f000 818f 	beq.w	8010e30 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	f080 8187 	bcs.w	8010e30 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	f003 0320 	and.w	r3, r3, #32
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	f040 8087 	bne.w	8010c4e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b4c:	e853 3f00 	ldrex	r3, [r3]
 8010b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	461a      	mov	r2, r3
 8010b66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b7a:	e841 2300 	strex	r3, r2, [r1]
 8010b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d1da      	bne.n	8010b40 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	3308      	adds	r3, #8
 8010b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b94:	e853 3f00 	ldrex	r3, [r3]
 8010b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b9c:	f023 0301 	bic.w	r3, r3, #1
 8010ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	3308      	adds	r3, #8
 8010baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010bba:	e841 2300 	strex	r3, r2, [r1]
 8010bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d1e1      	bne.n	8010b8a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	3308      	adds	r3, #8
 8010bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bd0:	e853 3f00 	ldrex	r3, [r3]
 8010bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	3308      	adds	r3, #8
 8010be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010bf2:	e841 2300 	strex	r3, r2, [r1]
 8010bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1e3      	bne.n	8010bc6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2220      	movs	r2, #32
 8010c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c14:	e853 3f00 	ldrex	r3, [r3]
 8010c18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c1c:	f023 0310 	bic.w	r3, r3, #16
 8010c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	461a      	mov	r2, r3
 8010c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c30:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c36:	e841 2300 	strex	r3, r2, [r1]
 8010c3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d1e4      	bne.n	8010c0c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fc fe46 	bl	800d8da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2202      	movs	r2, #2
 8010c52:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	4619      	mov	r1, r3
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f000 f8fd 	bl	8010e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010c6e:	e0df      	b.n	8010e30 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	f000 80d1 	beq.w	8010e34 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8010c92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	f000 80cc 	beq.w	8010e34 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca4:	e853 3f00 	ldrex	r3, [r3]
 8010ca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	461a      	mov	r2, r3
 8010cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8010cc0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cc6:	e841 2300 	strex	r3, r2, [r1]
 8010cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d1e4      	bne.n	8010c9c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	3308      	adds	r3, #8
 8010cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cdc:	e853 3f00 	ldrex	r3, [r3]
 8010ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8010ce2:	6a3b      	ldr	r3, [r7, #32]
 8010ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ce8:	f023 0301 	bic.w	r3, r3, #1
 8010cec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	3308      	adds	r3, #8
 8010cf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010cfa:	633a      	str	r2, [r7, #48]	; 0x30
 8010cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d02:	e841 2300 	strex	r3, r2, [r1]
 8010d06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d1e1      	bne.n	8010cd2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2220      	movs	r2, #32
 8010d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	e853 3f00 	ldrex	r3, [r3]
 8010d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	f023 0310 	bic.w	r3, r3, #16
 8010d36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	461a      	mov	r2, r3
 8010d40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d44:	61fb      	str	r3, [r7, #28]
 8010d46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d48:	69b9      	ldr	r1, [r7, #24]
 8010d4a:	69fa      	ldr	r2, [r7, #28]
 8010d4c:	e841 2300 	strex	r3, r2, [r1]
 8010d50:	617b      	str	r3, [r7, #20]
   return(result);
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d1e4      	bne.n	8010d22 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2202      	movs	r2, #2
 8010d5c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010d62:	4619      	mov	r1, r3
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f000 f87f 	bl	8010e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d6a:	e063      	b.n	8010e34 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d00e      	beq.n	8010d96 <HAL_UART_IRQHandler+0x59e>
 8010d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d008      	beq.n	8010d96 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f001 fc14 	bl	80125bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010d94:	e051      	b.n	8010e3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d014      	beq.n	8010dcc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d105      	bne.n	8010dba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d008      	beq.n	8010dcc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d03a      	beq.n	8010e38 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	4798      	blx	r3
    }
    return;
 8010dca:	e035      	b.n	8010e38 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d009      	beq.n	8010dec <HAL_UART_IRQHandler+0x5f4>
 8010dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d003      	beq.n	8010dec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 fea1 	bl	8011b2c <UART_EndTransmit_IT>
    return;
 8010dea:	e026      	b.n	8010e3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d009      	beq.n	8010e0c <HAL_UART_IRQHandler+0x614>
 8010df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d003      	beq.n	8010e0c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f001 fbed 	bl	80125e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e0a:	e016      	b.n	8010e3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d010      	beq.n	8010e3a <HAL_UART_IRQHandler+0x642>
 8010e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	da0c      	bge.n	8010e3a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f001 fbd5 	bl	80125d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e26:	e008      	b.n	8010e3a <HAL_UART_IRQHandler+0x642>
      return;
 8010e28:	bf00      	nop
 8010e2a:	e006      	b.n	8010e3a <HAL_UART_IRQHandler+0x642>
    return;
 8010e2c:	bf00      	nop
 8010e2e:	e004      	b.n	8010e3a <HAL_UART_IRQHandler+0x642>
      return;
 8010e30:	bf00      	nop
 8010e32:	e002      	b.n	8010e3a <HAL_UART_IRQHandler+0x642>
      return;
 8010e34:	bf00      	nop
 8010e36:	e000      	b.n	8010e3a <HAL_UART_IRQHandler+0x642>
    return;
 8010e38:	bf00      	nop
  }
}
 8010e3a:	37e8      	adds	r7, #232	; 0xe8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010e48:	bf00      	nop
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010e5c:	bf00      	nop
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	460b      	mov	r3, r1
 8010e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010e74:	bf00      	nop
 8010e76:	370c      	adds	r7, #12
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7e:	4770      	bx	lr

08010e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e84:	b08c      	sub	sp, #48	; 0x30
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	689a      	ldr	r2, [r3, #8]
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	691b      	ldr	r3, [r3, #16]
 8010e98:	431a      	orrs	r2, r3
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	695b      	ldr	r3, [r3, #20]
 8010e9e:	431a      	orrs	r2, r3
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	69db      	ldr	r3, [r3, #28]
 8010ea4:	4313      	orrs	r3, r2
 8010ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	4baf      	ldr	r3, [pc, #700]	; (801116c <UART_SetConfig+0x2ec>)
 8010eb0:	4013      	ands	r3, r2
 8010eb2:	697a      	ldr	r2, [r7, #20]
 8010eb4:	6812      	ldr	r2, [r2, #0]
 8010eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010eb8:	430b      	orrs	r3, r1
 8010eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	68da      	ldr	r2, [r3, #12]
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	430a      	orrs	r2, r1
 8010ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	699b      	ldr	r3, [r3, #24]
 8010ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	4aa4      	ldr	r2, [pc, #656]	; (8011170 <UART_SetConfig+0x2f0>)
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d004      	beq.n	8010eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	6a1b      	ldr	r3, [r3, #32]
 8010ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	689b      	ldr	r3, [r3, #8]
 8010ef2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8010ef6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8010efa:	697a      	ldr	r2, [r7, #20]
 8010efc:	6812      	ldr	r2, [r2, #0]
 8010efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f00:	430b      	orrs	r3, r1
 8010f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f0a:	f023 010f 	bic.w	r1, r3, #15
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	430a      	orrs	r2, r1
 8010f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4a95      	ldr	r2, [pc, #596]	; (8011174 <UART_SetConfig+0x2f4>)
 8010f20:	4293      	cmp	r3, r2
 8010f22:	d125      	bne.n	8010f70 <UART_SetConfig+0xf0>
 8010f24:	2003      	movs	r0, #3
 8010f26:	f7ff fb2b 	bl	8010580 <LL_RCC_GetUSARTClockSource>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b03      	cmp	r3, #3
 8010f2e:	d81b      	bhi.n	8010f68 <UART_SetConfig+0xe8>
 8010f30:	a201      	add	r2, pc, #4	; (adr r2, 8010f38 <UART_SetConfig+0xb8>)
 8010f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f36:	bf00      	nop
 8010f38:	08010f49 	.word	0x08010f49
 8010f3c:	08010f59 	.word	0x08010f59
 8010f40:	08010f51 	.word	0x08010f51
 8010f44:	08010f61 	.word	0x08010f61
 8010f48:	2301      	movs	r3, #1
 8010f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010f4e:	e042      	b.n	8010fd6 <UART_SetConfig+0x156>
 8010f50:	2302      	movs	r3, #2
 8010f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010f56:	e03e      	b.n	8010fd6 <UART_SetConfig+0x156>
 8010f58:	2304      	movs	r3, #4
 8010f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010f5e:	e03a      	b.n	8010fd6 <UART_SetConfig+0x156>
 8010f60:	2308      	movs	r3, #8
 8010f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010f66:	e036      	b.n	8010fd6 <UART_SetConfig+0x156>
 8010f68:	2310      	movs	r3, #16
 8010f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010f6e:	e032      	b.n	8010fd6 <UART_SetConfig+0x156>
 8010f70:	697b      	ldr	r3, [r7, #20]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4a7e      	ldr	r2, [pc, #504]	; (8011170 <UART_SetConfig+0x2f0>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d12a      	bne.n	8010fd0 <UART_SetConfig+0x150>
 8010f7a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8010f7e:	f7ff fb0f 	bl	80105a0 <LL_RCC_GetLPUARTClockSource>
 8010f82:	4603      	mov	r3, r0
 8010f84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010f88:	d01a      	beq.n	8010fc0 <UART_SetConfig+0x140>
 8010f8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010f8e:	d81b      	bhi.n	8010fc8 <UART_SetConfig+0x148>
 8010f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010f94:	d00c      	beq.n	8010fb0 <UART_SetConfig+0x130>
 8010f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010f9a:	d815      	bhi.n	8010fc8 <UART_SetConfig+0x148>
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d003      	beq.n	8010fa8 <UART_SetConfig+0x128>
 8010fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010fa4:	d008      	beq.n	8010fb8 <UART_SetConfig+0x138>
 8010fa6:	e00f      	b.n	8010fc8 <UART_SetConfig+0x148>
 8010fa8:	2300      	movs	r3, #0
 8010faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010fae:	e012      	b.n	8010fd6 <UART_SetConfig+0x156>
 8010fb0:	2302      	movs	r3, #2
 8010fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010fb6:	e00e      	b.n	8010fd6 <UART_SetConfig+0x156>
 8010fb8:	2304      	movs	r3, #4
 8010fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010fbe:	e00a      	b.n	8010fd6 <UART_SetConfig+0x156>
 8010fc0:	2308      	movs	r3, #8
 8010fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010fc6:	e006      	b.n	8010fd6 <UART_SetConfig+0x156>
 8010fc8:	2310      	movs	r3, #16
 8010fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010fce:	e002      	b.n	8010fd6 <UART_SetConfig+0x156>
 8010fd0:	2310      	movs	r3, #16
 8010fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4a65      	ldr	r2, [pc, #404]	; (8011170 <UART_SetConfig+0x2f0>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	f040 8097 	bne.w	8011110 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010fe6:	2b08      	cmp	r3, #8
 8010fe8:	d823      	bhi.n	8011032 <UART_SetConfig+0x1b2>
 8010fea:	a201      	add	r2, pc, #4	; (adr r2, 8010ff0 <UART_SetConfig+0x170>)
 8010fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ff0:	08011015 	.word	0x08011015
 8010ff4:	08011033 	.word	0x08011033
 8010ff8:	0801101d 	.word	0x0801101d
 8010ffc:	08011033 	.word	0x08011033
 8011000:	08011023 	.word	0x08011023
 8011004:	08011033 	.word	0x08011033
 8011008:	08011033 	.word	0x08011033
 801100c:	08011033 	.word	0x08011033
 8011010:	0801102b 	.word	0x0801102b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011014:	f7fe fcb0 	bl	800f978 <HAL_RCC_GetPCLK1Freq>
 8011018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801101a:	e010      	b.n	801103e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801101c:	4b56      	ldr	r3, [pc, #344]	; (8011178 <UART_SetConfig+0x2f8>)
 801101e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011020:	e00d      	b.n	801103e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011022:	f7fe fc29 	bl	800f878 <HAL_RCC_GetSysClockFreq>
 8011026:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011028:	e009      	b.n	801103e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801102a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801102e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011030:	e005      	b.n	801103e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8011032:	2300      	movs	r3, #0
 8011034:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011036:	2301      	movs	r3, #1
 8011038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801103c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011040:	2b00      	cmp	r3, #0
 8011042:	f000 812b 	beq.w	801129c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801104a:	4a4c      	ldr	r2, [pc, #304]	; (801117c <UART_SetConfig+0x2fc>)
 801104c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011050:	461a      	mov	r2, r3
 8011052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011054:	fbb3 f3f2 	udiv	r3, r3, r2
 8011058:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	685a      	ldr	r2, [r3, #4]
 801105e:	4613      	mov	r3, r2
 8011060:	005b      	lsls	r3, r3, #1
 8011062:	4413      	add	r3, r2
 8011064:	69ba      	ldr	r2, [r7, #24]
 8011066:	429a      	cmp	r2, r3
 8011068:	d305      	bcc.n	8011076 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011070:	69ba      	ldr	r2, [r7, #24]
 8011072:	429a      	cmp	r2, r3
 8011074:	d903      	bls.n	801107e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8011076:	2301      	movs	r3, #1
 8011078:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801107c:	e10e      	b.n	801129c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011080:	2200      	movs	r2, #0
 8011082:	60bb      	str	r3, [r7, #8]
 8011084:	60fa      	str	r2, [r7, #12]
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801108a:	4a3c      	ldr	r2, [pc, #240]	; (801117c <UART_SetConfig+0x2fc>)
 801108c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011090:	b29b      	uxth	r3, r3
 8011092:	2200      	movs	r2, #0
 8011094:	603b      	str	r3, [r7, #0]
 8011096:	607a      	str	r2, [r7, #4]
 8011098:	e9d7 2300 	ldrd	r2, r3, [r7]
 801109c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80110a0:	f7f7 f970 	bl	8008384 <__aeabi_uldivmod>
 80110a4:	4602      	mov	r2, r0
 80110a6:	460b      	mov	r3, r1
 80110a8:	4610      	mov	r0, r2
 80110aa:	4619      	mov	r1, r3
 80110ac:	f04f 0200 	mov.w	r2, #0
 80110b0:	f04f 0300 	mov.w	r3, #0
 80110b4:	020b      	lsls	r3, r1, #8
 80110b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80110ba:	0202      	lsls	r2, r0, #8
 80110bc:	6979      	ldr	r1, [r7, #20]
 80110be:	6849      	ldr	r1, [r1, #4]
 80110c0:	0849      	lsrs	r1, r1, #1
 80110c2:	2000      	movs	r0, #0
 80110c4:	460c      	mov	r4, r1
 80110c6:	4605      	mov	r5, r0
 80110c8:	eb12 0804 	adds.w	r8, r2, r4
 80110cc:	eb43 0905 	adc.w	r9, r3, r5
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	2200      	movs	r2, #0
 80110d6:	469a      	mov	sl, r3
 80110d8:	4693      	mov	fp, r2
 80110da:	4652      	mov	r2, sl
 80110dc:	465b      	mov	r3, fp
 80110de:	4640      	mov	r0, r8
 80110e0:	4649      	mov	r1, r9
 80110e2:	f7f7 f94f 	bl	8008384 <__aeabi_uldivmod>
 80110e6:	4602      	mov	r2, r0
 80110e8:	460b      	mov	r3, r1
 80110ea:	4613      	mov	r3, r2
 80110ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80110ee:	6a3b      	ldr	r3, [r7, #32]
 80110f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110f4:	d308      	bcc.n	8011108 <UART_SetConfig+0x288>
 80110f6:	6a3b      	ldr	r3, [r7, #32]
 80110f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110fc:	d204      	bcs.n	8011108 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	6a3a      	ldr	r2, [r7, #32]
 8011104:	60da      	str	r2, [r3, #12]
 8011106:	e0c9      	b.n	801129c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8011108:	2301      	movs	r3, #1
 801110a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801110e:	e0c5      	b.n	801129c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	69db      	ldr	r3, [r3, #28]
 8011114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011118:	d16d      	bne.n	80111f6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801111a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801111e:	3b01      	subs	r3, #1
 8011120:	2b07      	cmp	r3, #7
 8011122:	d82d      	bhi.n	8011180 <UART_SetConfig+0x300>
 8011124:	a201      	add	r2, pc, #4	; (adr r2, 801112c <UART_SetConfig+0x2ac>)
 8011126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801112a:	bf00      	nop
 801112c:	0801114d 	.word	0x0801114d
 8011130:	08011155 	.word	0x08011155
 8011134:	08011181 	.word	0x08011181
 8011138:	0801115b 	.word	0x0801115b
 801113c:	08011181 	.word	0x08011181
 8011140:	08011181 	.word	0x08011181
 8011144:	08011181 	.word	0x08011181
 8011148:	08011163 	.word	0x08011163
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801114c:	f7fe fc2a 	bl	800f9a4 <HAL_RCC_GetPCLK2Freq>
 8011150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011152:	e01b      	b.n	801118c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011154:	4b08      	ldr	r3, [pc, #32]	; (8011178 <UART_SetConfig+0x2f8>)
 8011156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011158:	e018      	b.n	801118c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801115a:	f7fe fb8d 	bl	800f878 <HAL_RCC_GetSysClockFreq>
 801115e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011160:	e014      	b.n	801118c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011168:	e010      	b.n	801118c <UART_SetConfig+0x30c>
 801116a:	bf00      	nop
 801116c:	cfff69f3 	.word	0xcfff69f3
 8011170:	40008000 	.word	0x40008000
 8011174:	40013800 	.word	0x40013800
 8011178:	00f42400 	.word	0x00f42400
 801117c:	0801a9c0 	.word	0x0801a9c0
      default:
        pclk = 0U;
 8011180:	2300      	movs	r3, #0
 8011182:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011184:	2301      	movs	r3, #1
 8011186:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801118a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118e:	2b00      	cmp	r3, #0
 8011190:	f000 8084 	beq.w	801129c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011198:	4a4b      	ldr	r2, [pc, #300]	; (80112c8 <UART_SetConfig+0x448>)
 801119a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801119e:	461a      	mov	r2, r3
 80111a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80111a6:	005a      	lsls	r2, r3, #1
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	085b      	lsrs	r3, r3, #1
 80111ae:	441a      	add	r2, r3
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80111b8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111ba:	6a3b      	ldr	r3, [r7, #32]
 80111bc:	2b0f      	cmp	r3, #15
 80111be:	d916      	bls.n	80111ee <UART_SetConfig+0x36e>
 80111c0:	6a3b      	ldr	r3, [r7, #32]
 80111c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111c6:	d212      	bcs.n	80111ee <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80111c8:	6a3b      	ldr	r3, [r7, #32]
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	f023 030f 	bic.w	r3, r3, #15
 80111d0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80111d2:	6a3b      	ldr	r3, [r7, #32]
 80111d4:	085b      	lsrs	r3, r3, #1
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	f003 0307 	and.w	r3, r3, #7
 80111dc:	b29a      	uxth	r2, r3
 80111de:	8bfb      	ldrh	r3, [r7, #30]
 80111e0:	4313      	orrs	r3, r2
 80111e2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	8bfa      	ldrh	r2, [r7, #30]
 80111ea:	60da      	str	r2, [r3, #12]
 80111ec:	e056      	b.n	801129c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80111ee:	2301      	movs	r3, #1
 80111f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80111f4:	e052      	b.n	801129c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80111f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80111fa:	3b01      	subs	r3, #1
 80111fc:	2b07      	cmp	r3, #7
 80111fe:	d822      	bhi.n	8011246 <UART_SetConfig+0x3c6>
 8011200:	a201      	add	r2, pc, #4	; (adr r2, 8011208 <UART_SetConfig+0x388>)
 8011202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011206:	bf00      	nop
 8011208:	08011229 	.word	0x08011229
 801120c:	08011231 	.word	0x08011231
 8011210:	08011247 	.word	0x08011247
 8011214:	08011237 	.word	0x08011237
 8011218:	08011247 	.word	0x08011247
 801121c:	08011247 	.word	0x08011247
 8011220:	08011247 	.word	0x08011247
 8011224:	0801123f 	.word	0x0801123f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011228:	f7fe fbbc 	bl	800f9a4 <HAL_RCC_GetPCLK2Freq>
 801122c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801122e:	e010      	b.n	8011252 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011230:	4b26      	ldr	r3, [pc, #152]	; (80112cc <UART_SetConfig+0x44c>)
 8011232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011234:	e00d      	b.n	8011252 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011236:	f7fe fb1f 	bl	800f878 <HAL_RCC_GetSysClockFreq>
 801123a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801123c:	e009      	b.n	8011252 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801123e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011244:	e005      	b.n	8011252 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8011246:	2300      	movs	r3, #0
 8011248:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801124a:	2301      	movs	r3, #1
 801124c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011250:	bf00      	nop
    }

    if (pclk != 0U)
 8011252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011254:	2b00      	cmp	r3, #0
 8011256:	d021      	beq.n	801129c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801125c:	4a1a      	ldr	r2, [pc, #104]	; (80112c8 <UART_SetConfig+0x448>)
 801125e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011262:	461a      	mov	r2, r3
 8011264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011266:	fbb3 f2f2 	udiv	r2, r3, r2
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	085b      	lsrs	r3, r3, #1
 8011270:	441a      	add	r2, r3
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	fbb2 f3f3 	udiv	r3, r2, r3
 801127a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801127c:	6a3b      	ldr	r3, [r7, #32]
 801127e:	2b0f      	cmp	r3, #15
 8011280:	d909      	bls.n	8011296 <UART_SetConfig+0x416>
 8011282:	6a3b      	ldr	r3, [r7, #32]
 8011284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011288:	d205      	bcs.n	8011296 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801128a:	6a3b      	ldr	r3, [r7, #32]
 801128c:	b29a      	uxth	r2, r3
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	60da      	str	r2, [r3, #12]
 8011294:	e002      	b.n	801129c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8011296:	2301      	movs	r3, #1
 8011298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	2201      	movs	r2, #1
 80112a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	2201      	movs	r2, #1
 80112a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	2200      	movs	r2, #0
 80112b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	2200      	movs	r2, #0
 80112b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80112b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3730      	adds	r7, #48	; 0x30
 80112c0:	46bd      	mov	sp, r7
 80112c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80112c6:	bf00      	nop
 80112c8:	0801a9c0 	.word	0x0801a9c0
 80112cc:	00f42400 	.word	0x00f42400

080112d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80112d0:	b480      	push	{r7}
 80112d2:	b083      	sub	sp, #12
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112dc:	f003 0308 	and.w	r3, r3, #8
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d00a      	beq.n	80112fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	430a      	orrs	r2, r1
 80112f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112fe:	f003 0301 	and.w	r3, r3, #1
 8011302:	2b00      	cmp	r3, #0
 8011304:	d00a      	beq.n	801131c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	685b      	ldr	r3, [r3, #4]
 801130c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	430a      	orrs	r2, r1
 801131a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011320:	f003 0302 	and.w	r3, r3, #2
 8011324:	2b00      	cmp	r3, #0
 8011326:	d00a      	beq.n	801133e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	430a      	orrs	r2, r1
 801133c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011342:	f003 0304 	and.w	r3, r3, #4
 8011346:	2b00      	cmp	r3, #0
 8011348:	d00a      	beq.n	8011360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	430a      	orrs	r2, r1
 801135e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011364:	f003 0310 	and.w	r3, r3, #16
 8011368:	2b00      	cmp	r3, #0
 801136a:	d00a      	beq.n	8011382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	430a      	orrs	r2, r1
 8011380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011386:	f003 0320 	and.w	r3, r3, #32
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00a      	beq.n	80113a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	689b      	ldr	r3, [r3, #8]
 8011394:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	430a      	orrs	r2, r1
 80113a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d01a      	beq.n	80113e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	430a      	orrs	r2, r1
 80113c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80113ce:	d10a      	bne.n	80113e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	430a      	orrs	r2, r1
 80113e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00a      	beq.n	8011408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	430a      	orrs	r2, r1
 8011406:	605a      	str	r2, [r3, #4]
  }
}
 8011408:	bf00      	nop
 801140a:	370c      	adds	r7, #12
 801140c:	46bd      	mov	sp, r7
 801140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011412:	4770      	bx	lr

08011414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b098      	sub	sp, #96	; 0x60
 8011418:	af02      	add	r7, sp, #8
 801141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2200      	movs	r2, #0
 8011420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011424:	f7fb ff58 	bl	800d2d8 <HAL_GetTick>
 8011428:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f003 0308 	and.w	r3, r3, #8
 8011434:	2b08      	cmp	r3, #8
 8011436:	d12f      	bne.n	8011498 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801143c:	9300      	str	r3, [sp, #0]
 801143e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011440:	2200      	movs	r2, #0
 8011442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f000 f88e 	bl	8011568 <UART_WaitOnFlagUntilTimeout>
 801144c:	4603      	mov	r3, r0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d022      	beq.n	8011498 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145a:	e853 3f00 	ldrex	r3, [r3]
 801145e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011466:	653b      	str	r3, [r7, #80]	; 0x50
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	461a      	mov	r2, r3
 801146e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011470:	647b      	str	r3, [r7, #68]	; 0x44
 8011472:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011474:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011478:	e841 2300 	strex	r3, r2, [r1]
 801147c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801147e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011480:	2b00      	cmp	r3, #0
 8011482:	d1e6      	bne.n	8011452 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2220      	movs	r2, #32
 8011488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2200      	movs	r2, #0
 8011490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011494:	2303      	movs	r3, #3
 8011496:	e063      	b.n	8011560 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f003 0304 	and.w	r3, r3, #4
 80114a2:	2b04      	cmp	r3, #4
 80114a4:	d149      	bne.n	801153a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114ae:	2200      	movs	r2, #0
 80114b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f000 f857 	bl	8011568 <UART_WaitOnFlagUntilTimeout>
 80114ba:	4603      	mov	r3, r0
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d03c      	beq.n	801153a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c8:	e853 3f00 	ldrex	r3, [r3]
 80114cc:	623b      	str	r3, [r7, #32]
   return(result);
 80114ce:	6a3b      	ldr	r3, [r7, #32]
 80114d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80114d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	461a      	mov	r2, r3
 80114dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114de:	633b      	str	r3, [r7, #48]	; 0x30
 80114e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80114e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114e6:	e841 2300 	strex	r3, r2, [r1]
 80114ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80114ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d1e6      	bne.n	80114c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	3308      	adds	r3, #8
 80114f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	e853 3f00 	ldrex	r3, [r3]
 8011500:	60fb      	str	r3, [r7, #12]
   return(result);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f023 0301 	bic.w	r3, r3, #1
 8011508:	64bb      	str	r3, [r7, #72]	; 0x48
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	3308      	adds	r3, #8
 8011510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011512:	61fa      	str	r2, [r7, #28]
 8011514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011516:	69b9      	ldr	r1, [r7, #24]
 8011518:	69fa      	ldr	r2, [r7, #28]
 801151a:	e841 2300 	strex	r3, r2, [r1]
 801151e:	617b      	str	r3, [r7, #20]
   return(result);
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d1e5      	bne.n	80114f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2220      	movs	r2, #32
 801152a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2200      	movs	r2, #0
 8011532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011536:	2303      	movs	r3, #3
 8011538:	e012      	b.n	8011560 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2220      	movs	r2, #32
 801153e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2220      	movs	r2, #32
 8011546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2200      	movs	r2, #0
 801154e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2200      	movs	r2, #0
 8011554:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801155e:	2300      	movs	r3, #0
}
 8011560:	4618      	mov	r0, r3
 8011562:	3758      	adds	r7, #88	; 0x58
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}

08011568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b084      	sub	sp, #16
 801156c:	af00      	add	r7, sp, #0
 801156e:	60f8      	str	r0, [r7, #12]
 8011570:	60b9      	str	r1, [r7, #8]
 8011572:	603b      	str	r3, [r7, #0]
 8011574:	4613      	mov	r3, r2
 8011576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011578:	e049      	b.n	801160e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801157a:	69bb      	ldr	r3, [r7, #24]
 801157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011580:	d045      	beq.n	801160e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011582:	f7fb fea9 	bl	800d2d8 <HAL_GetTick>
 8011586:	4602      	mov	r2, r0
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	69ba      	ldr	r2, [r7, #24]
 801158e:	429a      	cmp	r2, r3
 8011590:	d302      	bcc.n	8011598 <UART_WaitOnFlagUntilTimeout+0x30>
 8011592:	69bb      	ldr	r3, [r7, #24]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d101      	bne.n	801159c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011598:	2303      	movs	r3, #3
 801159a:	e048      	b.n	801162e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f003 0304 	and.w	r3, r3, #4
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d031      	beq.n	801160e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	69db      	ldr	r3, [r3, #28]
 80115b0:	f003 0308 	and.w	r3, r3, #8
 80115b4:	2b08      	cmp	r3, #8
 80115b6:	d110      	bne.n	80115da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	2208      	movs	r2, #8
 80115be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f000 f99c 	bl	80118fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	2208      	movs	r2, #8
 80115ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2200      	movs	r2, #0
 80115d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80115d6:	2301      	movs	r3, #1
 80115d8:	e029      	b.n	801162e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	69db      	ldr	r3, [r3, #28]
 80115e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80115e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80115e8:	d111      	bne.n	801160e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80115f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f000 f982 	bl	80118fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	2220      	movs	r2, #32
 80115fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2200      	movs	r2, #0
 8011606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801160a:	2303      	movs	r3, #3
 801160c:	e00f      	b.n	801162e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	69da      	ldr	r2, [r3, #28]
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	4013      	ands	r3, r2
 8011618:	68ba      	ldr	r2, [r7, #8]
 801161a:	429a      	cmp	r2, r3
 801161c:	bf0c      	ite	eq
 801161e:	2301      	moveq	r3, #1
 8011620:	2300      	movne	r3, #0
 8011622:	b2db      	uxtb	r3, r3
 8011624:	461a      	mov	r2, r3
 8011626:	79fb      	ldrb	r3, [r7, #7]
 8011628:	429a      	cmp	r2, r3
 801162a:	d0a6      	beq.n	801157a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801162c:	2300      	movs	r3, #0
}
 801162e:	4618      	mov	r0, r3
 8011630:	3710      	adds	r7, #16
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
	...

08011638 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011638:	b480      	push	{r7}
 801163a:	b0a3      	sub	sp, #140	; 0x8c
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	4613      	mov	r3, r2
 8011644:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	68ba      	ldr	r2, [r7, #8]
 801164a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	88fa      	ldrh	r2, [r7, #6]
 8011650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	88fa      	ldrh	r2, [r7, #6]
 8011658:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2200      	movs	r2, #0
 8011660:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	689b      	ldr	r3, [r3, #8]
 8011666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801166a:	d10e      	bne.n	801168a <UART_Start_Receive_IT+0x52>
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	691b      	ldr	r3, [r3, #16]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d105      	bne.n	8011680 <UART_Start_Receive_IT+0x48>
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f240 12ff 	movw	r2, #511	; 0x1ff
 801167a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801167e:	e02d      	b.n	80116dc <UART_Start_Receive_IT+0xa4>
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	22ff      	movs	r2, #255	; 0xff
 8011684:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011688:	e028      	b.n	80116dc <UART_Start_Receive_IT+0xa4>
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	689b      	ldr	r3, [r3, #8]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d10d      	bne.n	80116ae <UART_Start_Receive_IT+0x76>
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	691b      	ldr	r3, [r3, #16]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d104      	bne.n	80116a4 <UART_Start_Receive_IT+0x6c>
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	22ff      	movs	r2, #255	; 0xff
 801169e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80116a2:	e01b      	b.n	80116dc <UART_Start_Receive_IT+0xa4>
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	227f      	movs	r2, #127	; 0x7f
 80116a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80116ac:	e016      	b.n	80116dc <UART_Start_Receive_IT+0xa4>
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	689b      	ldr	r3, [r3, #8]
 80116b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80116b6:	d10d      	bne.n	80116d4 <UART_Start_Receive_IT+0x9c>
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	691b      	ldr	r3, [r3, #16]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d104      	bne.n	80116ca <UART_Start_Receive_IT+0x92>
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	227f      	movs	r2, #127	; 0x7f
 80116c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80116c8:	e008      	b.n	80116dc <UART_Start_Receive_IT+0xa4>
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	223f      	movs	r2, #63	; 0x3f
 80116ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80116d2:	e003      	b.n	80116dc <UART_Start_Receive_IT+0xa4>
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2200      	movs	r2, #0
 80116d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2200      	movs	r2, #0
 80116e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2222      	movs	r2, #34	; 0x22
 80116e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	3308      	adds	r3, #8
 80116f2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116f6:	e853 3f00 	ldrex	r3, [r3]
 80116fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80116fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116fe:	f043 0301 	orr.w	r3, r3, #1
 8011702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	3308      	adds	r3, #8
 801170c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011710:	673a      	str	r2, [r7, #112]	; 0x70
 8011712:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011714:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011716:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011718:	e841 2300 	strex	r3, r2, [r1]
 801171c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801171e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011720:	2b00      	cmp	r3, #0
 8011722:	d1e3      	bne.n	80116ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801172c:	d14f      	bne.n	80117ce <UART_Start_Receive_IT+0x196>
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011734:	88fa      	ldrh	r2, [r7, #6]
 8011736:	429a      	cmp	r2, r3
 8011738:	d349      	bcc.n	80117ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	689b      	ldr	r3, [r3, #8]
 801173e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011742:	d107      	bne.n	8011754 <UART_Start_Receive_IT+0x11c>
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	691b      	ldr	r3, [r3, #16]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d103      	bne.n	8011754 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	4a47      	ldr	r2, [pc, #284]	; (801186c <UART_Start_Receive_IT+0x234>)
 8011750:	675a      	str	r2, [r3, #116]	; 0x74
 8011752:	e002      	b.n	801175a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	4a46      	ldr	r2, [pc, #280]	; (8011870 <UART_Start_Receive_IT+0x238>)
 8011758:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	691b      	ldr	r3, [r3, #16]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d01a      	beq.n	8011798 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801176a:	e853 3f00 	ldrex	r3, [r3]
 801176e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011776:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	461a      	mov	r2, r3
 8011780:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011786:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011788:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801178a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801178c:	e841 2300 	strex	r3, r2, [r1]
 8011790:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011794:	2b00      	cmp	r3, #0
 8011796:	d1e4      	bne.n	8011762 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	3308      	adds	r3, #8
 801179e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a2:	e853 3f00 	ldrex	r3, [r3]
 80117a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80117a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	3308      	adds	r3, #8
 80117b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80117b8:	64ba      	str	r2, [r7, #72]	; 0x48
 80117ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80117be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80117c0:	e841 2300 	strex	r3, r2, [r1]
 80117c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80117c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d1e5      	bne.n	8011798 <UART_Start_Receive_IT+0x160>
 80117cc:	e046      	b.n	801185c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	689b      	ldr	r3, [r3, #8]
 80117d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117d6:	d107      	bne.n	80117e8 <UART_Start_Receive_IT+0x1b0>
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	691b      	ldr	r3, [r3, #16]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d103      	bne.n	80117e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	4a24      	ldr	r2, [pc, #144]	; (8011874 <UART_Start_Receive_IT+0x23c>)
 80117e4:	675a      	str	r2, [r3, #116]	; 0x74
 80117e6:	e002      	b.n	80117ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	4a23      	ldr	r2, [pc, #140]	; (8011878 <UART_Start_Receive_IT+0x240>)
 80117ec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	691b      	ldr	r3, [r3, #16]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d019      	beq.n	801182a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fe:	e853 3f00 	ldrex	r3, [r3]
 8011802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011806:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801180a:	677b      	str	r3, [r7, #116]	; 0x74
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	461a      	mov	r2, r3
 8011812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011814:	637b      	str	r3, [r7, #52]	; 0x34
 8011816:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801181a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801181c:	e841 2300 	strex	r3, r2, [r1]
 8011820:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011824:	2b00      	cmp	r3, #0
 8011826:	d1e6      	bne.n	80117f6 <UART_Start_Receive_IT+0x1be>
 8011828:	e018      	b.n	801185c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	e853 3f00 	ldrex	r3, [r3]
 8011836:	613b      	str	r3, [r7, #16]
   return(result);
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	f043 0320 	orr.w	r3, r3, #32
 801183e:	67bb      	str	r3, [r7, #120]	; 0x78
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	461a      	mov	r2, r3
 8011846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011848:	623b      	str	r3, [r7, #32]
 801184a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801184c:	69f9      	ldr	r1, [r7, #28]
 801184e:	6a3a      	ldr	r2, [r7, #32]
 8011850:	e841 2300 	strex	r3, r2, [r1]
 8011854:	61bb      	str	r3, [r7, #24]
   return(result);
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d1e6      	bne.n	801182a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801185c:	2300      	movs	r3, #0
}
 801185e:	4618      	mov	r0, r3
 8011860:	378c      	adds	r7, #140	; 0x8c
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr
 801186a:	bf00      	nop
 801186c:	08012255 	.word	0x08012255
 8011870:	08011ef5 	.word	0x08011ef5
 8011874:	08011d3d 	.word	0x08011d3d
 8011878:	08011b85 	.word	0x08011b85

0801187c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801187c:	b480      	push	{r7}
 801187e:	b08f      	sub	sp, #60	; 0x3c
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801188a:	6a3b      	ldr	r3, [r7, #32]
 801188c:	e853 3f00 	ldrex	r3, [r3]
 8011890:	61fb      	str	r3, [r7, #28]
   return(result);
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011898:	637b      	str	r3, [r7, #52]	; 0x34
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	461a      	mov	r2, r3
 80118a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80118a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118aa:	e841 2300 	strex	r3, r2, [r1]
 80118ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80118b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d1e6      	bne.n	8011884 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	3308      	adds	r3, #8
 80118bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	e853 3f00 	ldrex	r3, [r3]
 80118c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80118cc:	633b      	str	r3, [r7, #48]	; 0x30
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	3308      	adds	r3, #8
 80118d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118d6:	61ba      	str	r2, [r7, #24]
 80118d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118da:	6979      	ldr	r1, [r7, #20]
 80118dc:	69ba      	ldr	r2, [r7, #24]
 80118de:	e841 2300 	strex	r3, r2, [r1]
 80118e2:	613b      	str	r3, [r7, #16]
   return(result);
 80118e4:	693b      	ldr	r3, [r7, #16]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d1e5      	bne.n	80118b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2220      	movs	r2, #32
 80118ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80118f2:	bf00      	nop
 80118f4:	373c      	adds	r7, #60	; 0x3c
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80118fe:	b480      	push	{r7}
 8011900:	b095      	sub	sp, #84	; 0x54
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801190e:	e853 3f00 	ldrex	r3, [r3]
 8011912:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801191a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	461a      	mov	r2, r3
 8011922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011924:	643b      	str	r3, [r7, #64]	; 0x40
 8011926:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801192a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801192c:	e841 2300 	strex	r3, r2, [r1]
 8011930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011934:	2b00      	cmp	r3, #0
 8011936:	d1e6      	bne.n	8011906 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	3308      	adds	r3, #8
 801193e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011940:	6a3b      	ldr	r3, [r7, #32]
 8011942:	e853 3f00 	ldrex	r3, [r3]
 8011946:	61fb      	str	r3, [r7, #28]
   return(result);
 8011948:	69fb      	ldr	r3, [r7, #28]
 801194a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801194e:	f023 0301 	bic.w	r3, r3, #1
 8011952:	64bb      	str	r3, [r7, #72]	; 0x48
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	3308      	adds	r3, #8
 801195a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801195c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801195e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011964:	e841 2300 	strex	r3, r2, [r1]
 8011968:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1e3      	bne.n	8011938 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011974:	2b01      	cmp	r3, #1
 8011976:	d118      	bne.n	80119aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	e853 3f00 	ldrex	r3, [r3]
 8011984:	60bb      	str	r3, [r7, #8]
   return(result);
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	f023 0310 	bic.w	r3, r3, #16
 801198c:	647b      	str	r3, [r7, #68]	; 0x44
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	461a      	mov	r2, r3
 8011994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011996:	61bb      	str	r3, [r7, #24]
 8011998:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801199a:	6979      	ldr	r1, [r7, #20]
 801199c:	69ba      	ldr	r2, [r7, #24]
 801199e:	e841 2300 	strex	r3, r2, [r1]
 80119a2:	613b      	str	r3, [r7, #16]
   return(result);
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d1e6      	bne.n	8011978 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2220      	movs	r2, #32
 80119ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2200      	movs	r2, #0
 80119b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2200      	movs	r2, #0
 80119bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80119be:	bf00      	nop
 80119c0:	3754      	adds	r7, #84	; 0x54
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr

080119ca <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80119ca:	b580      	push	{r7, lr}
 80119cc:	b090      	sub	sp, #64	; 0x40
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f003 0320 	and.w	r3, r3, #32
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d137      	bne.n	8011a56 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80119e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e8:	2200      	movs	r2, #0
 80119ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80119ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	3308      	adds	r3, #8
 80119f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f8:	e853 3f00 	ldrex	r3, [r3]
 80119fc:	623b      	str	r3, [r7, #32]
   return(result);
 80119fe:	6a3b      	ldr	r3, [r7, #32]
 8011a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	3308      	adds	r3, #8
 8011a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8011a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a16:	e841 2300 	strex	r3, r2, [r1]
 8011a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d1e5      	bne.n	80119ee <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	e853 3f00 	ldrex	r3, [r3]
 8011a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a36:	637b      	str	r3, [r7, #52]	; 0x34
 8011a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a40:	61fb      	str	r3, [r7, #28]
 8011a42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a44:	69b9      	ldr	r1, [r7, #24]
 8011a46:	69fa      	ldr	r2, [r7, #28]
 8011a48:	e841 2300 	strex	r3, r2, [r1]
 8011a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d1e6      	bne.n	8011a22 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011a54:	e002      	b.n	8011a5c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011a56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011a58:	f7f8 f8ae 	bl	8009bb8 <HAL_UART_TxCpltCallback>
}
 8011a5c:	bf00      	nop
 8011a5e:	3740      	adds	r7, #64	; 0x40
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a70:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011a72:	68f8      	ldr	r0, [r7, #12]
 8011a74:	f7ff f9e4 	bl	8010e40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a78:	bf00      	nop
 8011a7a:	3710      	adds	r7, #16
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b086      	sub	sp, #24
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a8c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	689b      	ldr	r3, [r3, #8]
 8011aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011aa8:	2b80      	cmp	r3, #128	; 0x80
 8011aaa:	d109      	bne.n	8011ac0 <UART_DMAError+0x40>
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	2b21      	cmp	r3, #33	; 0x21
 8011ab0:	d106      	bne.n	8011ac0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011aba:	6978      	ldr	r0, [r7, #20]
 8011abc:	f7ff fede 	bl	801187c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	689b      	ldr	r3, [r3, #8]
 8011ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011aca:	2b40      	cmp	r3, #64	; 0x40
 8011acc:	d109      	bne.n	8011ae2 <UART_DMAError+0x62>
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2b22      	cmp	r3, #34	; 0x22
 8011ad2:	d106      	bne.n	8011ae2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011adc:	6978      	ldr	r0, [r7, #20]
 8011ade:	f7ff ff0e 	bl	80118fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ae8:	f043 0210 	orr.w	r2, r3, #16
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011af2:	6978      	ldr	r0, [r7, #20]
 8011af4:	f7ff f9ae 	bl	8010e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011af8:	bf00      	nop
 8011afa:	3718      	adds	r7, #24
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2200      	movs	r2, #0
 8011b12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011b1e:	68f8      	ldr	r0, [r7, #12]
 8011b20:	f7ff f998 	bl	8010e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b24:	bf00      	nop
 8011b26:	3710      	adds	r7, #16
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b088      	sub	sp, #32
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	e853 3f00 	ldrex	r3, [r3]
 8011b40:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b48:	61fb      	str	r3, [r7, #28]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	461a      	mov	r2, r3
 8011b50:	69fb      	ldr	r3, [r7, #28]
 8011b52:	61bb      	str	r3, [r7, #24]
 8011b54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b56:	6979      	ldr	r1, [r7, #20]
 8011b58:	69ba      	ldr	r2, [r7, #24]
 8011b5a:	e841 2300 	strex	r3, r2, [r1]
 8011b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1e6      	bne.n	8011b34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2220      	movs	r2, #32
 8011b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2200      	movs	r2, #0
 8011b72:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f7f8 f81f 	bl	8009bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b7a:	bf00      	nop
 8011b7c:	3720      	adds	r7, #32
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
	...

08011b84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b09c      	sub	sp, #112	; 0x70
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b92:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b9c:	2b22      	cmp	r3, #34	; 0x22
 8011b9e:	f040 80be 	bne.w	8011d1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011bac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011bb0:	b2d9      	uxtb	r1, r3
 8011bb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011bb6:	b2da      	uxtb	r2, r3
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bbc:	400a      	ands	r2, r1
 8011bbe:	b2d2      	uxtb	r2, r2
 8011bc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bc6:	1c5a      	adds	r2, r3, #1
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	3b01      	subs	r3, #1
 8011bd6:	b29a      	uxth	r2, r3
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	f040 80a1 	bne.w	8011d2e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bf4:	e853 3f00 	ldrex	r3, [r3]
 8011bf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	461a      	mov	r2, r3
 8011c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8011c0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c12:	e841 2300 	strex	r3, r2, [r1]
 8011c16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d1e6      	bne.n	8011bec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	3308      	adds	r3, #8
 8011c24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c28:	e853 3f00 	ldrex	r3, [r3]
 8011c2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c30:	f023 0301 	bic.w	r3, r3, #1
 8011c34:	667b      	str	r3, [r7, #100]	; 0x64
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	3308      	adds	r3, #8
 8011c3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c3e:	647a      	str	r2, [r7, #68]	; 0x44
 8011c40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011c44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c46:	e841 2300 	strex	r3, r2, [r1]
 8011c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d1e5      	bne.n	8011c1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2220      	movs	r2, #32
 8011c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2200      	movs	r2, #0
 8011c64:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	4a33      	ldr	r2, [pc, #204]	; (8011d38 <UART_RxISR_8BIT+0x1b4>)
 8011c6c:	4293      	cmp	r3, r2
 8011c6e:	d01f      	beq.n	8011cb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d018      	beq.n	8011cb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c86:	e853 3f00 	ldrex	r3, [r3]
 8011c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8011c8c:	6a3b      	ldr	r3, [r7, #32]
 8011c8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011c92:	663b      	str	r3, [r7, #96]	; 0x60
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	461a      	mov	r2, r3
 8011c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8011c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ca4:	e841 2300 	strex	r3, r2, [r1]
 8011ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d1e6      	bne.n	8011c7e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d12e      	bne.n	8011d16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	e853 3f00 	ldrex	r3, [r3]
 8011cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f023 0310 	bic.w	r3, r3, #16
 8011cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	461a      	mov	r2, r3
 8011cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cdc:	61fb      	str	r3, [r7, #28]
 8011cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ce0:	69b9      	ldr	r1, [r7, #24]
 8011ce2:	69fa      	ldr	r2, [r7, #28]
 8011ce4:	e841 2300 	strex	r3, r2, [r1]
 8011ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1e6      	bne.n	8011cbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	69db      	ldr	r3, [r3, #28]
 8011cf6:	f003 0310 	and.w	r3, r3, #16
 8011cfa:	2b10      	cmp	r3, #16
 8011cfc:	d103      	bne.n	8011d06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2210      	movs	r2, #16
 8011d04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7ff f8aa 	bl	8010e68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011d14:	e00b      	b.n	8011d2e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7f7 ff20 	bl	8009b5c <HAL_UART_RxCpltCallback>
}
 8011d1c:	e007      	b.n	8011d2e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	699a      	ldr	r2, [r3, #24]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	f042 0208 	orr.w	r2, r2, #8
 8011d2c:	619a      	str	r2, [r3, #24]
}
 8011d2e:	bf00      	nop
 8011d30:	3770      	adds	r7, #112	; 0x70
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	40008000 	.word	0x40008000

08011d3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b09c      	sub	sp, #112	; 0x70
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d54:	2b22      	cmp	r3, #34	; 0x22
 8011d56:	f040 80be 	bne.w	8011ed6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d68:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011d6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011d6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011d72:	4013      	ands	r3, r2
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d7e:	1c9a      	adds	r2, r3, #2
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	3b01      	subs	r3, #1
 8011d8e:	b29a      	uxth	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f040 80a1 	bne.w	8011ee6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011dac:	e853 3f00 	ldrex	r3, [r3]
 8011db0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011db8:	667b      	str	r3, [r7, #100]	; 0x64
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8011dc4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011dc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011dca:	e841 2300 	strex	r3, r2, [r1]
 8011dce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d1e6      	bne.n	8011da4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	3308      	adds	r3, #8
 8011ddc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011de0:	e853 3f00 	ldrex	r3, [r3]
 8011de4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de8:	f023 0301 	bic.w	r3, r3, #1
 8011dec:	663b      	str	r3, [r7, #96]	; 0x60
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	3308      	adds	r3, #8
 8011df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011df6:	643a      	str	r2, [r7, #64]	; 0x40
 8011df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011dfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011dfe:	e841 2300 	strex	r3, r2, [r1]
 8011e02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d1e5      	bne.n	8011dd6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2220      	movs	r2, #32
 8011e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2200      	movs	r2, #0
 8011e16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	4a33      	ldr	r2, [pc, #204]	; (8011ef0 <UART_RxISR_16BIT+0x1b4>)
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d01f      	beq.n	8011e68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d018      	beq.n	8011e68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e3c:	6a3b      	ldr	r3, [r7, #32]
 8011e3e:	e853 3f00 	ldrex	r3, [r3]
 8011e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e44:	69fb      	ldr	r3, [r7, #28]
 8011e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	461a      	mov	r2, r3
 8011e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e56:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e5c:	e841 2300 	strex	r3, r2, [r1]
 8011e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d1e6      	bne.n	8011e36 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d12e      	bne.n	8011ece <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	e853 3f00 	ldrex	r3, [r3]
 8011e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	f023 0310 	bic.w	r3, r3, #16
 8011e8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	461a      	mov	r2, r3
 8011e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e94:	61bb      	str	r3, [r7, #24]
 8011e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e98:	6979      	ldr	r1, [r7, #20]
 8011e9a:	69ba      	ldr	r2, [r7, #24]
 8011e9c:	e841 2300 	strex	r3, r2, [r1]
 8011ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d1e6      	bne.n	8011e76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	69db      	ldr	r3, [r3, #28]
 8011eae:	f003 0310 	and.w	r3, r3, #16
 8011eb2:	2b10      	cmp	r3, #16
 8011eb4:	d103      	bne.n	8011ebe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2210      	movs	r2, #16
 8011ebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7fe ffce 	bl	8010e68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011ecc:	e00b      	b.n	8011ee6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7f7 fe44 	bl	8009b5c <HAL_UART_RxCpltCallback>
}
 8011ed4:	e007      	b.n	8011ee6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	699a      	ldr	r2, [r3, #24]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f042 0208 	orr.w	r2, r2, #8
 8011ee4:	619a      	str	r2, [r3, #24]
}
 8011ee6:	bf00      	nop
 8011ee8:	3770      	adds	r7, #112	; 0x70
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	40008000 	.word	0x40008000

08011ef4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b0ac      	sub	sp, #176	; 0xb0
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f02:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	69db      	ldr	r3, [r3, #28]
 8011f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	689b      	ldr	r3, [r3, #8]
 8011f20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f2a:	2b22      	cmp	r3, #34	; 0x22
 8011f2c:	f040 8182 	bne.w	8012234 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011f36:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011f3a:	e125      	b.n	8012188 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f42:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011f46:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011f4a:	b2d9      	uxtb	r1, r3
 8011f4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011f50:	b2da      	uxtb	r2, r3
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f56:	400a      	ands	r2, r1
 8011f58:	b2d2      	uxtb	r2, r2
 8011f5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f60:	1c5a      	adds	r2, r3, #1
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f6c:	b29b      	uxth	r3, r3
 8011f6e:	3b01      	subs	r3, #1
 8011f70:	b29a      	uxth	r2, r3
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	69db      	ldr	r3, [r3, #28]
 8011f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f86:	f003 0307 	and.w	r3, r3, #7
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d053      	beq.n	8012036 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f92:	f003 0301 	and.w	r3, r3, #1
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d011      	beq.n	8011fbe <UART_RxISR_8BIT_FIFOEN+0xca>
 8011f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d00b      	beq.n	8011fbe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	2201      	movs	r2, #1
 8011fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fb4:	f043 0201 	orr.w	r2, r3, #1
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011fc2:	f003 0302 	and.w	r3, r3, #2
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d011      	beq.n	8011fee <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011fce:	f003 0301 	and.w	r3, r3, #1
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d00b      	beq.n	8011fee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	2202      	movs	r2, #2
 8011fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fe4:	f043 0204 	orr.w	r2, r3, #4
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ff2:	f003 0304 	and.w	r3, r3, #4
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d011      	beq.n	801201e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011ffe:	f003 0301 	and.w	r3, r3, #1
 8012002:	2b00      	cmp	r3, #0
 8012004:	d00b      	beq.n	801201e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2204      	movs	r2, #4
 801200c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012014:	f043 0202 	orr.w	r2, r3, #2
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012024:	2b00      	cmp	r3, #0
 8012026:	d006      	beq.n	8012036 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7fe ff13 	bl	8010e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2200      	movs	r2, #0
 8012032:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801203c:	b29b      	uxth	r3, r3
 801203e:	2b00      	cmp	r3, #0
 8012040:	f040 80a2 	bne.w	8012188 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801204a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801204c:	e853 3f00 	ldrex	r3, [r3]
 8012050:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	461a      	mov	r2, r3
 8012062:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012066:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012068:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801206a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801206c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801206e:	e841 2300 	strex	r3, r2, [r1]
 8012072:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012076:	2b00      	cmp	r3, #0
 8012078:	d1e4      	bne.n	8012044 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	3308      	adds	r3, #8
 8012080:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012084:	e853 3f00 	ldrex	r3, [r3]
 8012088:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801208a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012090:	f023 0301 	bic.w	r3, r3, #1
 8012094:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	3308      	adds	r3, #8
 801209e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80120a2:	66ba      	str	r2, [r7, #104]	; 0x68
 80120a4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80120a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80120aa:	e841 2300 	strex	r3, r2, [r1]
 80120ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80120b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d1e1      	bne.n	801207a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2220      	movs	r2, #32
 80120ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2200      	movs	r2, #0
 80120c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	4a5f      	ldr	r2, [pc, #380]	; (801224c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80120d0:	4293      	cmp	r3, r2
 80120d2:	d021      	beq.n	8012118 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	685b      	ldr	r3, [r3, #4]
 80120da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d01a      	beq.n	8012118 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120ea:	e853 3f00 	ldrex	r3, [r3]
 80120ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80120f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80120f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	461a      	mov	r2, r3
 8012100:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012104:	657b      	str	r3, [r7, #84]	; 0x54
 8012106:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012108:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801210a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801210c:	e841 2300 	strex	r3, r2, [r1]
 8012110:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012114:	2b00      	cmp	r3, #0
 8012116:	d1e4      	bne.n	80120e2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801211c:	2b01      	cmp	r3, #1
 801211e:	d130      	bne.n	8012182 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801212e:	e853 3f00 	ldrex	r3, [r3]
 8012132:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012136:	f023 0310 	bic.w	r3, r3, #16
 801213a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	461a      	mov	r2, r3
 8012144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012148:	643b      	str	r3, [r7, #64]	; 0x40
 801214a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801214c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801214e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012150:	e841 2300 	strex	r3, r2, [r1]
 8012154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012158:	2b00      	cmp	r3, #0
 801215a:	d1e4      	bne.n	8012126 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	69db      	ldr	r3, [r3, #28]
 8012162:	f003 0310 	and.w	r3, r3, #16
 8012166:	2b10      	cmp	r3, #16
 8012168:	d103      	bne.n	8012172 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2210      	movs	r2, #16
 8012170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012178:	4619      	mov	r1, r3
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f7fe fe74 	bl	8010e68 <HAL_UARTEx_RxEventCallback>
 8012180:	e002      	b.n	8012188 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	f7f7 fcea 	bl	8009b5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012188:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801218c:	2b00      	cmp	r3, #0
 801218e:	d006      	beq.n	801219e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8012190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012194:	f003 0320 	and.w	r3, r3, #32
 8012198:	2b00      	cmp	r3, #0
 801219a:	f47f aecf 	bne.w	8011f3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80121a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d049      	beq.n	8012244 <UART_RxISR_8BIT_FIFOEN+0x350>
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80121b6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d242      	bcs.n	8012244 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	3308      	adds	r3, #8
 80121c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121c6:	6a3b      	ldr	r3, [r7, #32]
 80121c8:	e853 3f00 	ldrex	r3, [r3]
 80121cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80121d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	3308      	adds	r3, #8
 80121de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80121e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80121e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121ea:	e841 2300 	strex	r3, r2, [r1]
 80121ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80121f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d1e3      	bne.n	80121be <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	4a15      	ldr	r2, [pc, #84]	; (8012250 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80121fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	e853 3f00 	ldrex	r3, [r3]
 8012208:	60bb      	str	r3, [r7, #8]
   return(result);
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	f043 0320 	orr.w	r3, r3, #32
 8012210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	461a      	mov	r2, r3
 801221a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801221e:	61bb      	str	r3, [r7, #24]
 8012220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012222:	6979      	ldr	r1, [r7, #20]
 8012224:	69ba      	ldr	r2, [r7, #24]
 8012226:	e841 2300 	strex	r3, r2, [r1]
 801222a:	613b      	str	r3, [r7, #16]
   return(result);
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d1e4      	bne.n	80121fc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012232:	e007      	b.n	8012244 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	699a      	ldr	r2, [r3, #24]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f042 0208 	orr.w	r2, r2, #8
 8012242:	619a      	str	r2, [r3, #24]
}
 8012244:	bf00      	nop
 8012246:	37b0      	adds	r7, #176	; 0xb0
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	40008000 	.word	0x40008000
 8012250:	08011b85 	.word	0x08011b85

08012254 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b0ae      	sub	sp, #184	; 0xb8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012262:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	69db      	ldr	r3, [r3, #28]
 801226c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	689b      	ldr	r3, [r3, #8]
 8012280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801228a:	2b22      	cmp	r3, #34	; 0x22
 801228c:	f040 8186 	bne.w	801259c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012296:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801229a:	e129      	b.n	80124f0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80122ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80122b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80122b6:	4013      	ands	r3, r2
 80122b8:	b29a      	uxth	r2, r3
 80122ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80122be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122c4:	1c9a      	adds	r2, r3, #2
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	3b01      	subs	r3, #1
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	69db      	ldr	r3, [r3, #28]
 80122e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80122e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80122ea:	f003 0307 	and.w	r3, r3, #7
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d053      	beq.n	801239a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80122f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80122f6:	f003 0301 	and.w	r3, r3, #1
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d011      	beq.n	8012322 <UART_RxISR_16BIT_FIFOEN+0xce>
 80122fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012306:	2b00      	cmp	r3, #0
 8012308:	d00b      	beq.n	8012322 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	2201      	movs	r2, #1
 8012310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012318:	f043 0201 	orr.w	r2, r3, #1
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012326:	f003 0302 	and.w	r3, r3, #2
 801232a:	2b00      	cmp	r3, #0
 801232c:	d011      	beq.n	8012352 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801232e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012332:	f003 0301 	and.w	r3, r3, #1
 8012336:	2b00      	cmp	r3, #0
 8012338:	d00b      	beq.n	8012352 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	2202      	movs	r2, #2
 8012340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012348:	f043 0204 	orr.w	r2, r3, #4
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012352:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012356:	f003 0304 	and.w	r3, r3, #4
 801235a:	2b00      	cmp	r3, #0
 801235c:	d011      	beq.n	8012382 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801235e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012362:	f003 0301 	and.w	r3, r3, #1
 8012366:	2b00      	cmp	r3, #0
 8012368:	d00b      	beq.n	8012382 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2204      	movs	r2, #4
 8012370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012378:	f043 0202 	orr.w	r2, r3, #2
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012388:	2b00      	cmp	r3, #0
 801238a:	d006      	beq.n	801239a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f7fe fd61 	bl	8010e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2200      	movs	r2, #0
 8012396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80123a0:	b29b      	uxth	r3, r3
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	f040 80a4 	bne.w	80124f0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80123b0:	e853 3f00 	ldrex	r3, [r3]
 80123b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80123b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80123bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	461a      	mov	r2, r3
 80123c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80123ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80123ce:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80123d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80123d6:	e841 2300 	strex	r3, r2, [r1]
 80123da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80123dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d1e2      	bne.n	80123a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	3308      	adds	r3, #8
 80123e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80123ec:	e853 3f00 	ldrex	r3, [r3]
 80123f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80123f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80123f8:	f023 0301 	bic.w	r3, r3, #1
 80123fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	3308      	adds	r3, #8
 8012406:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801240a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801240c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801240e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012410:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012412:	e841 2300 	strex	r3, r2, [r1]
 8012416:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801241a:	2b00      	cmp	r3, #0
 801241c:	d1e1      	bne.n	80123e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2220      	movs	r2, #32
 8012422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2200      	movs	r2, #0
 801242a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2200      	movs	r2, #0
 8012430:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	4a5f      	ldr	r2, [pc, #380]	; (80125b4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012438:	4293      	cmp	r3, r2
 801243a:	d021      	beq.n	8012480 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012446:	2b00      	cmp	r3, #0
 8012448:	d01a      	beq.n	8012480 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012452:	e853 3f00 	ldrex	r3, [r3]
 8012456:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801245a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801245e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	461a      	mov	r2, r3
 8012468:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801246c:	65bb      	str	r3, [r7, #88]	; 0x58
 801246e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012472:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012474:	e841 2300 	strex	r3, r2, [r1]
 8012478:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801247a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801247c:	2b00      	cmp	r3, #0
 801247e:	d1e4      	bne.n	801244a <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012484:	2b01      	cmp	r3, #1
 8012486:	d130      	bne.n	80124ea <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012496:	e853 3f00 	ldrex	r3, [r3]
 801249a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801249c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801249e:	f023 0310 	bic.w	r3, r3, #16
 80124a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	461a      	mov	r2, r3
 80124ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80124b0:	647b      	str	r3, [r7, #68]	; 0x44
 80124b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80124b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124b8:	e841 2300 	strex	r3, r2, [r1]
 80124bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80124be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d1e4      	bne.n	801248e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	69db      	ldr	r3, [r3, #28]
 80124ca:	f003 0310 	and.w	r3, r3, #16
 80124ce:	2b10      	cmp	r3, #16
 80124d0:	d103      	bne.n	80124da <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	2210      	movs	r2, #16
 80124d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80124e0:	4619      	mov	r1, r3
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f7fe fcc0 	bl	8010e68 <HAL_UARTEx_RxEventCallback>
 80124e8:	e002      	b.n	80124f0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f7f7 fb36 	bl	8009b5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80124f0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d006      	beq.n	8012506 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80124f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80124fc:	f003 0320 	and.w	r3, r3, #32
 8012500:	2b00      	cmp	r3, #0
 8012502:	f47f aecb 	bne.w	801229c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801250c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012510:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012514:	2b00      	cmp	r3, #0
 8012516:	d049      	beq.n	80125ac <UART_RxISR_16BIT_FIFOEN+0x358>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801251e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012522:	429a      	cmp	r2, r3
 8012524:	d242      	bcs.n	80125ac <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	3308      	adds	r3, #8
 801252c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012530:	e853 3f00 	ldrex	r3, [r3]
 8012534:	623b      	str	r3, [r7, #32]
   return(result);
 8012536:	6a3b      	ldr	r3, [r7, #32]
 8012538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801253c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	3308      	adds	r3, #8
 8012546:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801254a:	633a      	str	r2, [r7, #48]	; 0x30
 801254c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801254e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012552:	e841 2300 	strex	r3, r2, [r1]
 8012556:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255a:	2b00      	cmp	r3, #0
 801255c:	d1e3      	bne.n	8012526 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4a15      	ldr	r2, [pc, #84]	; (80125b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012562:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	e853 3f00 	ldrex	r3, [r3]
 8012570:	60fb      	str	r3, [r7, #12]
   return(result);
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	f043 0320 	orr.w	r3, r3, #32
 8012578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	461a      	mov	r2, r3
 8012582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012586:	61fb      	str	r3, [r7, #28]
 8012588:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801258a:	69b9      	ldr	r1, [r7, #24]
 801258c:	69fa      	ldr	r2, [r7, #28]
 801258e:	e841 2300 	strex	r3, r2, [r1]
 8012592:	617b      	str	r3, [r7, #20]
   return(result);
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d1e4      	bne.n	8012564 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801259a:	e007      	b.n	80125ac <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	699a      	ldr	r2, [r3, #24]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	f042 0208 	orr.w	r2, r2, #8
 80125aa:	619a      	str	r2, [r3, #24]
}
 80125ac:	bf00      	nop
 80125ae:	37b8      	adds	r7, #184	; 0xb8
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	40008000 	.word	0x40008000
 80125b8:	08011d3d 	.word	0x08011d3d

080125bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80125c4:	bf00      	nop
 80125c6:	370c      	adds	r7, #12
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr

080125d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80125d0:	b480      	push	{r7}
 80125d2:	b083      	sub	sp, #12
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80125d8:	bf00      	nop
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80125ec:	bf00      	nop
 80125ee:	370c      	adds	r7, #12
 80125f0:	46bd      	mov	sp, r7
 80125f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f6:	4770      	bx	lr

080125f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80125f8:	b480      	push	{r7}
 80125fa:	b085      	sub	sp, #20
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012606:	2b01      	cmp	r3, #1
 8012608:	d101      	bne.n	801260e <HAL_UARTEx_DisableFifoMode+0x16>
 801260a:	2302      	movs	r3, #2
 801260c:	e027      	b.n	801265e <HAL_UARTEx_DisableFifoMode+0x66>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2201      	movs	r2, #1
 8012612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2224      	movs	r2, #36	; 0x24
 801261a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	681a      	ldr	r2, [r3, #0]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	f022 0201 	bic.w	r2, r2, #1
 8012634:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801263c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2200      	movs	r2, #0
 8012642:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	68fa      	ldr	r2, [r7, #12]
 801264a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2220      	movs	r2, #32
 8012650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2200      	movs	r2, #0
 8012658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801265c:	2300      	movs	r3, #0
}
 801265e:	4618      	mov	r0, r3
 8012660:	3714      	adds	r7, #20
 8012662:	46bd      	mov	sp, r7
 8012664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012668:	4770      	bx	lr

0801266a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801266a:	b580      	push	{r7, lr}
 801266c:	b084      	sub	sp, #16
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
 8012672:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801267a:	2b01      	cmp	r3, #1
 801267c:	d101      	bne.n	8012682 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801267e:	2302      	movs	r3, #2
 8012680:	e02d      	b.n	80126de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2201      	movs	r2, #1
 8012686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2224      	movs	r2, #36	; 0x24
 801268e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	681a      	ldr	r2, [r3, #0]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f022 0201 	bic.w	r2, r2, #1
 80126a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	689b      	ldr	r3, [r3, #8]
 80126b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	683a      	ldr	r2, [r7, #0]
 80126ba:	430a      	orrs	r2, r1
 80126bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f000 f850 	bl	8012764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	68fa      	ldr	r2, [r7, #12]
 80126ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2220      	movs	r2, #32
 80126d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2200      	movs	r2, #0
 80126d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80126dc:	2300      	movs	r3, #0
}
 80126de:	4618      	mov	r0, r3
 80126e0:	3710      	adds	r7, #16
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}

080126e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80126e6:	b580      	push	{r7, lr}
 80126e8:	b084      	sub	sp, #16
 80126ea:	af00      	add	r7, sp, #0
 80126ec:	6078      	str	r0, [r7, #4]
 80126ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80126f6:	2b01      	cmp	r3, #1
 80126f8:	d101      	bne.n	80126fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80126fa:	2302      	movs	r3, #2
 80126fc:	e02d      	b.n	801275a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2201      	movs	r2, #1
 8012702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2224      	movs	r2, #36	; 0x24
 801270a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	681a      	ldr	r2, [r3, #0]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f022 0201 	bic.w	r2, r2, #1
 8012724:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	689b      	ldr	r3, [r3, #8]
 801272c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	683a      	ldr	r2, [r7, #0]
 8012736:	430a      	orrs	r2, r1
 8012738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 f812 	bl	8012764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	68fa      	ldr	r2, [r7, #12]
 8012746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2220      	movs	r2, #32
 801274c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012758:	2300      	movs	r3, #0
}
 801275a:	4618      	mov	r0, r3
 801275c:	3710      	adds	r7, #16
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
	...

08012764 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012764:	b480      	push	{r7}
 8012766:	b085      	sub	sp, #20
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012770:	2b00      	cmp	r3, #0
 8012772:	d108      	bne.n	8012786 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2201      	movs	r2, #1
 8012778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2201      	movs	r2, #1
 8012780:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012784:	e031      	b.n	80127ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012786:	2308      	movs	r3, #8
 8012788:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801278a:	2308      	movs	r3, #8
 801278c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	689b      	ldr	r3, [r3, #8]
 8012794:	0e5b      	lsrs	r3, r3, #25
 8012796:	b2db      	uxtb	r3, r3
 8012798:	f003 0307 	and.w	r3, r3, #7
 801279c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	689b      	ldr	r3, [r3, #8]
 80127a4:	0f5b      	lsrs	r3, r3, #29
 80127a6:	b2db      	uxtb	r3, r3
 80127a8:	f003 0307 	and.w	r3, r3, #7
 80127ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80127ae:	7bbb      	ldrb	r3, [r7, #14]
 80127b0:	7b3a      	ldrb	r2, [r7, #12]
 80127b2:	4911      	ldr	r1, [pc, #68]	; (80127f8 <UARTEx_SetNbDataToProcess+0x94>)
 80127b4:	5c8a      	ldrb	r2, [r1, r2]
 80127b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80127ba:	7b3a      	ldrb	r2, [r7, #12]
 80127bc:	490f      	ldr	r1, [pc, #60]	; (80127fc <UARTEx_SetNbDataToProcess+0x98>)
 80127be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80127c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80127cc:	7bfb      	ldrb	r3, [r7, #15]
 80127ce:	7b7a      	ldrb	r2, [r7, #13]
 80127d0:	4909      	ldr	r1, [pc, #36]	; (80127f8 <UARTEx_SetNbDataToProcess+0x94>)
 80127d2:	5c8a      	ldrb	r2, [r1, r2]
 80127d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80127d8:	7b7a      	ldrb	r2, [r7, #13]
 80127da:	4908      	ldr	r1, [pc, #32]	; (80127fc <UARTEx_SetNbDataToProcess+0x98>)
 80127dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80127de:	fb93 f3f2 	sdiv	r3, r3, r2
 80127e2:	b29a      	uxth	r2, r3
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80127ea:	bf00      	nop
 80127ec:	3714      	adds	r7, #20
 80127ee:	46bd      	mov	sp, r7
 80127f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	0801a9d8 	.word	0x0801a9d8
 80127fc:	0801a9e0 	.word	0x0801a9e0

08012800 <SHCI_C2_FUS_GetState>:
/**
 *  C2 COMMAND
 *  These commands are sent to the CPU2
 */
uint8_t SHCI_C2_FUS_GetState( SHCI_FUS_GetState_ErrorCode_t *p_error_code )
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b088      	sub	sp, #32
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete with payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE + 1];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012808:	f107 0308 	add.w	r3, r7, #8
 801280c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_FUS_GET_STATE,
 801280e:	69fb      	ldr	r3, [r7, #28]
 8012810:	2200      	movs	r2, #0
 8012812:	2100      	movs	r1, #0
 8012814:	f64f 4052 	movw	r0, #64594	; 0xfc52
 8012818:	f000 f982 	bl	8012b20 <shci_send>
             0,
             0,
             p_rsp );

  if(p_error_code != 0)
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d004      	beq.n	801282c <SHCI_C2_FUS_GetState+0x2c>
  {
    *p_error_code = (SHCI_FUS_GetState_ErrorCode_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[1]);
 8012822:	69fb      	ldr	r3, [r7, #28]
 8012824:	330b      	adds	r3, #11
 8012826:	791a      	ldrb	r2, [r3, #4]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	701a      	strb	r2, [r3, #0]
  }

  return (((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	330b      	adds	r3, #11
 8012830:	78db      	ldrb	r3, [r3, #3]
}
 8012832:	4618      	mov	r0, r3
 8012834:	3720      	adds	r7, #32
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}

0801283a <SHCI_C2_FUS_FwUpgrade>:

SHCI_CmdStatus_t SHCI_C2_FUS_FwUpgrade( uint32_t fw_src_add,  uint32_t fw_dest_add )
{
 801283a:	b580      	push	{r7, lr}
 801283c:	b08a      	sub	sp, #40	; 0x28
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
 8012842:	6039      	str	r1, [r7, #0]
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;
  uint32_t *p_cmd;
  uint8_t cmd_length;

  p_cmd = (uint32_t*)local_buffer;
 8012844:	f107 030c 	add.w	r3, r7, #12
 8012848:	623b      	str	r3, [r7, #32]
  cmd_length = 0;
 801284a:	2300      	movs	r3, #0
 801284c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(fw_src_add != 0)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d007      	beq.n	8012866 <SHCI_C2_FUS_FwUpgrade+0x2c>
  {
    *p_cmd = fw_src_add;
 8012856:	6a3b      	ldr	r3, [r7, #32]
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	601a      	str	r2, [r3, #0]
    cmd_length += 4;
 801285c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012860:	3304      	adds	r3, #4
 8012862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if(fw_dest_add != 0)
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d008      	beq.n	801287e <SHCI_C2_FUS_FwUpgrade+0x44>
  {
    *(p_cmd+1) = fw_dest_add;
 801286c:	6a3b      	ldr	r3, [r7, #32]
 801286e:	3304      	adds	r3, #4
 8012870:	683a      	ldr	r2, [r7, #0]
 8012872:	601a      	str	r2, [r3, #0]
    cmd_length += 4;
 8012874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012878:	3304      	adds	r3, #4
 801287a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801287e:	f107 030c 	add.w	r3, r7, #12
 8012882:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_FUS_FW_UPGRADE,
 8012884:	f107 020c 	add.w	r2, r7, #12
 8012888:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 801288c:	69fb      	ldr	r3, [r7, #28]
 801288e:	f64f 4054 	movw	r0, #64596	; 0xfc54
 8012892:	f000 f945 	bl	8012b20 <shci_send>
             cmd_length,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012896:	69fb      	ldr	r3, [r7, #28]
 8012898:	330b      	adds	r3, #11
 801289a:	78db      	ldrb	r3, [r3, #3]
}
 801289c:	4618      	mov	r0, r3
 801289e:	3728      	adds	r7, #40	; 0x28
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}

080128a4 <SHCI_C2_FUS_StartWs>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FUS_StartWs( void )
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b086      	sub	sp, #24
 80128a8:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80128aa:	1d3b      	adds	r3, r7, #4
 80128ac:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_FUS_START_WS,
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	2200      	movs	r2, #0
 80128b2:	2100      	movs	r1, #0
 80128b4:	f64f 405a 	movw	r0, #64602	; 0xfc5a
 80128b8:	f000 f932 	bl	8012b20 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80128bc:	697b      	ldr	r3, [r7, #20]
 80128be:	330b      	adds	r3, #11
 80128c0:	78db      	ldrb	r3, [r3, #3]
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3718      	adds	r7, #24
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}

080128ca <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 80128ca:	b580      	push	{r7, lr}
 80128cc:	b086      	sub	sp, #24
 80128ce:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80128d0:	1d3b      	adds	r3, r7, #4
 80128d2:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	2200      	movs	r2, #0
 80128d8:	2100      	movs	r1, #0
 80128da:	f64f 4070 	movw	r0, #64624	; 0xfc70
 80128de:	f000 f91f 	bl	8012b20 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	330b      	adds	r3, #11
 80128e6:	78db      	ldrb	r3, [r3, #3]
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3718      	adds	r7, #24
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80128f0:	b480      	push	{r7}
 80128f2:	b08b      	sub	sp, #44	; 0x2c
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80128f8:	2300      	movs	r3, #0
 80128fa:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80128fc:	2300      	movs	r3, #0
 80128fe:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8012900:	2300      	movs	r3, #0
 8012902:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8012904:	2300      	movs	r3, #0
 8012906:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8012908:	2300      	movs	r3, #0
 801290a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 801290c:	2300      	movs	r3, #0
 801290e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8012910:	2300      	movs	r3, #0
 8012912:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8012914:	2300      	movs	r3, #0
 8012916:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8012918:	4b4a      	ldr	r3, [pc, #296]	; (8012a44 <SHCI_GetWirelessFwInfo+0x154>)
 801291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801291c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012920:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	009b      	lsls	r3, r3, #2
 8012926:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801292a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4a44      	ldr	r2, [pc, #272]	; (8012a48 <SHCI_GetWirelessFwInfo+0x158>)
 8012938:	4293      	cmp	r3, r2
 801293a:	d10f      	bne.n	801295c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	695b      	ldr	r3, [r3, #20]
 8012940:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	699b      	ldr	r3, [r3, #24]
 8012946:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	69db      	ldr	r3, [r3, #28]
 801294c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	68db      	ldr	r3, [r3, #12]
 8012952:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	691b      	ldr	r3, [r3, #16]
 8012958:	617b      	str	r3, [r7, #20]
 801295a:	e01a      	b.n	8012992 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	009b      	lsls	r3, r3, #2
 8012960:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8012964:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8012968:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	691b      	ldr	r3, [r3, #16]
 8012970:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	695b      	ldr	r3, [r3, #20]
 8012978:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	699b      	ldr	r3, [r3, #24]
 8012980:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012994:	0e1b      	lsrs	r3, r3, #24
 8012996:	b2da      	uxtb	r2, r3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299e:	0c1b      	lsrs	r3, r3, #16
 80129a0:	b2da      	uxtb	r2, r3
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80129a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a8:	0a1b      	lsrs	r3, r3, #8
 80129aa:	b2da      	uxtb	r2, r3
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80129b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b2:	091b      	lsrs	r3, r3, #4
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	f003 030f 	and.w	r3, r3, #15
 80129ba:	b2da      	uxtb	r2, r3
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80129c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	f003 030f 	and.w	r3, r3, #15
 80129c8:	b2da      	uxtb	r2, r3
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80129ce:	6a3b      	ldr	r3, [r7, #32]
 80129d0:	0e1b      	lsrs	r3, r3, #24
 80129d2:	b2da      	uxtb	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80129d8:	6a3b      	ldr	r3, [r7, #32]
 80129da:	0c1b      	lsrs	r3, r3, #16
 80129dc:	b2da      	uxtb	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80129e2:	6a3b      	ldr	r3, [r7, #32]
 80129e4:	0a1b      	lsrs	r3, r3, #8
 80129e6:	b2da      	uxtb	r2, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80129ec:	6a3b      	ldr	r3, [r7, #32]
 80129ee:	b2da      	uxtb	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	b2da      	uxtb	r2, r3
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	0e1b      	lsrs	r3, r3, #24
 8012a00:	b2da      	uxtb	r2, r3
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012a06:	69bb      	ldr	r3, [r7, #24]
 8012a08:	0c1b      	lsrs	r3, r3, #16
 8012a0a:	b2da      	uxtb	r2, r3
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012a10:	69bb      	ldr	r3, [r7, #24]
 8012a12:	0a1b      	lsrs	r3, r3, #8
 8012a14:	b2da      	uxtb	r2, r3
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	0e1b      	lsrs	r3, r3, #24
 8012a1e:	b2da      	uxtb	r2, r3
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	0c1b      	lsrs	r3, r3, #16
 8012a28:	b2da      	uxtb	r2, r3
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	b2da      	uxtb	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8012a36:	2300      	movs	r3, #0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	372c      	adds	r7, #44	; 0x2c
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr
 8012a44:	58004000 	.word	0x58004000
 8012a48:	a94656b9 	.word	0xa94656b9

08012a4c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b082      	sub	sp, #8
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	4a08      	ldr	r2, [pc, #32]	; (8012a7c <shci_init+0x30>)
 8012a5c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8012a5e:	4a08      	ldr	r2, [pc, #32]	; (8012a80 <shci_init+0x34>)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8012a64:	4806      	ldr	r0, [pc, #24]	; (8012a80 <shci_init+0x34>)
 8012a66:	f000 f915 	bl	8012c94 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f000 f898 	bl	8012ba4 <TlInit>

  return;
 8012a74:	bf00      	nop
}
 8012a76:	3708      	adds	r7, #8
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	200009e4 	.word	0x200009e4
 8012a80:	200009c4 	.word	0x200009c4

08012a84 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b084      	sub	sp, #16
 8012a88:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8012a8a:	4822      	ldr	r0, [pc, #136]	; (8012b14 <shci_user_evt_proc+0x90>)
 8012a8c:	f000 fc64 	bl	8013358 <LST_is_empty>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d12b      	bne.n	8012aee <shci_user_evt_proc+0x6a>
 8012a96:	4b20      	ldr	r3, [pc, #128]	; (8012b18 <shci_user_evt_proc+0x94>)
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d027      	beq.n	8012aee <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8012a9e:	f107 030c 	add.w	r3, r7, #12
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	481b      	ldr	r0, [pc, #108]	; (8012b14 <shci_user_evt_proc+0x90>)
 8012aa6:	f000 fce6 	bl	8013476 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8012aaa:	4b1c      	ldr	r3, [pc, #112]	; (8012b1c <shci_user_evt_proc+0x98>)
 8012aac:	69db      	ldr	r3, [r3, #28]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00c      	beq.n	8012acc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8012aba:	4b18      	ldr	r3, [pc, #96]	; (8012b1c <shci_user_evt_proc+0x98>)
 8012abc:	69db      	ldr	r3, [r3, #28]
 8012abe:	1d3a      	adds	r2, r7, #4
 8012ac0:	4610      	mov	r0, r2
 8012ac2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8012ac4:	793a      	ldrb	r2, [r7, #4]
 8012ac6:	4b14      	ldr	r3, [pc, #80]	; (8012b18 <shci_user_evt_proc+0x94>)
 8012ac8:	701a      	strb	r2, [r3, #0]
 8012aca:	e002      	b.n	8012ad2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012acc:	4b12      	ldr	r3, [pc, #72]	; (8012b18 <shci_user_evt_proc+0x94>)
 8012ace:	2201      	movs	r2, #1
 8012ad0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8012ad2:	4b11      	ldr	r3, [pc, #68]	; (8012b18 <shci_user_evt_proc+0x94>)
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d004      	beq.n	8012ae4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	4618      	mov	r0, r3
 8012ade:	f000 fa8b 	bl	8012ff8 <TL_MM_EvtDone>
 8012ae2:	e004      	b.n	8012aee <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	480a      	ldr	r0, [pc, #40]	; (8012b14 <shci_user_evt_proc+0x90>)
 8012aea:	f000 fc57 	bl	801339c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8012aee:	4809      	ldr	r0, [pc, #36]	; (8012b14 <shci_user_evt_proc+0x90>)
 8012af0:	f000 fc32 	bl	8013358 <LST_is_empty>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d107      	bne.n	8012b0a <shci_user_evt_proc+0x86>
 8012afa:	4b07      	ldr	r3, [pc, #28]	; (8012b18 <shci_user_evt_proc+0x94>)
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d003      	beq.n	8012b0a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8012b02:	4804      	ldr	r0, [pc, #16]	; (8012b14 <shci_user_evt_proc+0x90>)
 8012b04:	f7f5 fff0 	bl	8008ae8 <shci_notify_asynch_evt>
  }


  return;
 8012b08:	bf00      	nop
 8012b0a:	bf00      	nop
}
 8012b0c:	3710      	adds	r7, #16
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	20000134 	.word	0x20000134
 8012b18:	20000144 	.word	0x20000144
 8012b1c:	200009c4 	.word	0x200009c4

08012b20 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b084      	sub	sp, #16
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60ba      	str	r2, [r7, #8]
 8012b28:	607b      	str	r3, [r7, #4]
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	81fb      	strh	r3, [r7, #14]
 8012b2e:	460b      	mov	r3, r1
 8012b30:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8012b32:	2000      	movs	r0, #0
 8012b34:	f000 f868 	bl	8012c08 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8012b38:	4b17      	ldr	r3, [pc, #92]	; (8012b98 <shci_send+0x78>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	89fa      	ldrh	r2, [r7, #14]
 8012b3e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8012b42:	4b15      	ldr	r3, [pc, #84]	; (8012b98 <shci_send+0x78>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	7b7a      	ldrb	r2, [r7, #13]
 8012b48:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8012b4a:	4b13      	ldr	r3, [pc, #76]	; (8012b98 <shci_send+0x78>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	330c      	adds	r3, #12
 8012b50:	7b7a      	ldrb	r2, [r7, #13]
 8012b52:	68b9      	ldr	r1, [r7, #8]
 8012b54:	4618      	mov	r0, r3
 8012b56:	f004 ffef 	bl	8017b38 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8012b5a:	4b10      	ldr	r3, [pc, #64]	; (8012b9c <shci_send+0x7c>)
 8012b5c:	2201      	movs	r2, #1
 8012b5e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8012b60:	4b0f      	ldr	r3, [pc, #60]	; (8012ba0 <shci_send+0x80>)
 8012b62:	691b      	ldr	r3, [r3, #16]
 8012b64:	2100      	movs	r1, #0
 8012b66:	2000      	movs	r0, #0
 8012b68:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8012b6a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8012b6e:	f7f5 ffd2 	bl	8008b16 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f103 0008 	add.w	r0, r3, #8
 8012b78:	4b07      	ldr	r3, [pc, #28]	; (8012b98 <shci_send+0x78>)
 8012b7a:	6819      	ldr	r1, [r3, #0]
 8012b7c:	4b06      	ldr	r3, [pc, #24]	; (8012b98 <shci_send+0x78>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	789b      	ldrb	r3, [r3, #2]
 8012b82:	3303      	adds	r3, #3
 8012b84:	461a      	mov	r2, r3
 8012b86:	f004 ffd7 	bl	8017b38 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012b8a:	2001      	movs	r0, #1
 8012b8c:	f000 f83c 	bl	8012c08 <Cmd_SetStatus>

  return;
 8012b90:	bf00      	nop
}
 8012b92:	3710      	adds	r7, #16
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	20000140 	.word	0x20000140
 8012b9c:	200009e8 	.word	0x200009e8
 8012ba0:	200009c4 	.word	0x200009c4

08012ba4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b086      	sub	sp, #24
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8012bac:	4a10      	ldr	r2, [pc, #64]	; (8012bf0 <TlInit+0x4c>)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8012bb2:	4810      	ldr	r0, [pc, #64]	; (8012bf4 <TlInit+0x50>)
 8012bb4:	f000 fbc0 	bl	8013338 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012bb8:	2001      	movs	r0, #1
 8012bba:	f000 f825 	bl	8012c08 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012bbe:	4b0e      	ldr	r3, [pc, #56]	; (8012bf8 <TlInit+0x54>)
 8012bc0:	2201      	movs	r2, #1
 8012bc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8012bc4:	4b0d      	ldr	r3, [pc, #52]	; (8012bfc <TlInit+0x58>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d00c      	beq.n	8012be6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8012bd0:	4b0b      	ldr	r3, [pc, #44]	; (8012c00 <TlInit+0x5c>)
 8012bd2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8012bd4:	4b0b      	ldr	r3, [pc, #44]	; (8012c04 <TlInit+0x60>)
 8012bd6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8012bd8:	4b08      	ldr	r3, [pc, #32]	; (8012bfc <TlInit+0x58>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	f107 020c 	add.w	r2, r7, #12
 8012be0:	4610      	mov	r0, r2
 8012be2:	4798      	blx	r3
  }

  return;
 8012be4:	bf00      	nop
 8012be6:	bf00      	nop
}
 8012be8:	3718      	adds	r7, #24
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	20000140 	.word	0x20000140
 8012bf4:	20000134 	.word	0x20000134
 8012bf8:	20000144 	.word	0x20000144
 8012bfc:	200009c4 	.word	0x200009c4
 8012c00:	08012c59 	.word	0x08012c59
 8012c04:	08012c71 	.word	0x08012c71

08012c08 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	4603      	mov	r3, r0
 8012c10:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8012c12:	79fb      	ldrb	r3, [r7, #7]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d10b      	bne.n	8012c30 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8012c18:	4b0d      	ldr	r3, [pc, #52]	; (8012c50 <Cmd_SetStatus+0x48>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d003      	beq.n	8012c28 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8012c20:	4b0b      	ldr	r3, [pc, #44]	; (8012c50 <Cmd_SetStatus+0x48>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2000      	movs	r0, #0
 8012c26:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8012c28:	4b0a      	ldr	r3, [pc, #40]	; (8012c54 <Cmd_SetStatus+0x4c>)
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8012c2e:	e00b      	b.n	8012c48 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8012c30:	4b08      	ldr	r3, [pc, #32]	; (8012c54 <Cmd_SetStatus+0x4c>)
 8012c32:	2201      	movs	r2, #1
 8012c34:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8012c36:	4b06      	ldr	r3, [pc, #24]	; (8012c50 <Cmd_SetStatus+0x48>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d004      	beq.n	8012c48 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8012c3e:	4b04      	ldr	r3, [pc, #16]	; (8012c50 <Cmd_SetStatus+0x48>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	2001      	movs	r0, #1
 8012c44:	4798      	blx	r3
  return;
 8012c46:	bf00      	nop
 8012c48:	bf00      	nop
}
 8012c4a:	3708      	adds	r7, #8
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	200009e4 	.word	0x200009e4
 8012c54:	2000013c 	.word	0x2000013c

08012c58 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8012c60:	2000      	movs	r0, #0
 8012c62:	f7f5 ff4d 	bl	8008b00 <shci_cmd_resp_release>

  return;
 8012c66:	bf00      	nop
}
 8012c68:	3708      	adds	r7, #8
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}
	...

08012c70 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b082      	sub	sp, #8
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8012c78:	6879      	ldr	r1, [r7, #4]
 8012c7a:	4805      	ldr	r0, [pc, #20]	; (8012c90 <TlUserEvtReceived+0x20>)
 8012c7c:	f000 fbb4 	bl	80133e8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8012c80:	4803      	ldr	r0, [pc, #12]	; (8012c90 <TlUserEvtReceived+0x20>)
 8012c82:	f7f5 ff31 	bl	8008ae8 <shci_notify_asynch_evt>

  return;
 8012c86:	bf00      	nop
}
 8012c88:	3708      	adds	r7, #8
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	20000134 	.word	0x20000134

08012c94 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8012c94:	b480      	push	{r7}
 8012c96:	b083      	sub	sp, #12
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	4a05      	ldr	r2, [pc, #20]	; (8012cb4 <shci_register_io_bus+0x20>)
 8012ca0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	4a04      	ldr	r2, [pc, #16]	; (8012cb8 <shci_register_io_bus+0x24>)
 8012ca6:	611a      	str	r2, [r3, #16]

  return;
 8012ca8:	bf00      	nop
}
 8012caa:	370c      	adds	r7, #12
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr
 8012cb4:	08012db1 	.word	0x08012db1
 8012cb8:	08012e05 	.word	0x08012e05

08012cbc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8012cc0:	f7f9 fee4 	bl	800ca8c <HW_IPCC_Enable>

  return;
 8012cc4:	bf00      	nop
}
 8012cc6:	bd80      	pop	{r7, pc}

08012cc8 <TL_Init>:


void TL_Init( void )
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8012ccc:	4b10      	ldr	r3, [pc, #64]	; (8012d10 <TL_Init+0x48>)
 8012cce:	4a11      	ldr	r2, [pc, #68]	; (8012d14 <TL_Init+0x4c>)
 8012cd0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8012cd2:	4b0f      	ldr	r3, [pc, #60]	; (8012d10 <TL_Init+0x48>)
 8012cd4:	4a10      	ldr	r2, [pc, #64]	; (8012d18 <TL_Init+0x50>)
 8012cd6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8012cd8:	4b0d      	ldr	r3, [pc, #52]	; (8012d10 <TL_Init+0x48>)
 8012cda:	4a10      	ldr	r2, [pc, #64]	; (8012d1c <TL_Init+0x54>)
 8012cdc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8012cde:	4b0c      	ldr	r3, [pc, #48]	; (8012d10 <TL_Init+0x48>)
 8012ce0:	4a0f      	ldr	r2, [pc, #60]	; (8012d20 <TL_Init+0x58>)
 8012ce2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8012ce4:	4b0a      	ldr	r3, [pc, #40]	; (8012d10 <TL_Init+0x48>)
 8012ce6:	4a0f      	ldr	r2, [pc, #60]	; (8012d24 <TL_Init+0x5c>)
 8012ce8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8012cea:	4b09      	ldr	r3, [pc, #36]	; (8012d10 <TL_Init+0x48>)
 8012cec:	4a0e      	ldr	r2, [pc, #56]	; (8012d28 <TL_Init+0x60>)
 8012cee:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8012cf0:	4b07      	ldr	r3, [pc, #28]	; (8012d10 <TL_Init+0x48>)
 8012cf2:	4a0e      	ldr	r2, [pc, #56]	; (8012d2c <TL_Init+0x64>)
 8012cf4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8012cf6:	4b06      	ldr	r3, [pc, #24]	; (8012d10 <TL_Init+0x48>)
 8012cf8:	4a0d      	ldr	r2, [pc, #52]	; (8012d30 <TL_Init+0x68>)
 8012cfa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8012cfc:	4b04      	ldr	r3, [pc, #16]	; (8012d10 <TL_Init+0x48>)
 8012cfe:	4a0d      	ldr	r2, [pc, #52]	; (8012d34 <TL_Init+0x6c>)
 8012d00:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8012d02:	4b03      	ldr	r3, [pc, #12]	; (8012d10 <TL_Init+0x48>)
 8012d04:	4a0c      	ldr	r2, [pc, #48]	; (8012d38 <TL_Init+0x70>)
 8012d06:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8012d08:	f7f9 fed4 	bl	800cab4 <HW_IPCC_Init>

  return;
 8012d0c:	bf00      	nop
}
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	20030000 	.word	0x20030000
 8012d14:	20030034 	.word	0x20030034
 8012d18:	20030054 	.word	0x20030054
 8012d1c:	20030064 	.word	0x20030064
 8012d20:	20030074 	.word	0x20030074
 8012d24:	2003007c 	.word	0x2003007c
 8012d28:	20030084 	.word	0x20030084
 8012d2c:	2003008c 	.word	0x2003008c
 8012d30:	200300a8 	.word	0x200300a8
 8012d34:	200300ac 	.word	0x200300ac
 8012d38:	200300b8 	.word	0x200300b8

08012d3c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b082      	sub	sp, #8
 8012d40:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8012d42:	e01c      	b.n	8012d7e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8012d44:	1d3b      	adds	r3, r7, #4
 8012d46:	4619      	mov	r1, r3
 8012d48:	4812      	ldr	r0, [pc, #72]	; (8012d94 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8012d4a:	f000 fb94 	bl	8013476 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	7a5b      	ldrb	r3, [r3, #9]
 8012d52:	2b0f      	cmp	r3, #15
 8012d54:	d003      	beq.n	8012d5e <HW_IPCC_BLE_RxEvtNot+0x22>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	7a5b      	ldrb	r3, [r3, #9]
 8012d5a:	2b0e      	cmp	r3, #14
 8012d5c:	d105      	bne.n	8012d6a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	4619      	mov	r1, r3
 8012d62:	2002      	movs	r0, #2
 8012d64:	f000 f9ac 	bl	80130c0 <OutputDbgTrace>
 8012d68:	e004      	b.n	8012d74 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	2003      	movs	r0, #3
 8012d70:	f000 f9a6 	bl	80130c0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8012d74:	4b08      	ldr	r3, [pc, #32]	; (8012d98 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	4610      	mov	r0, r2
 8012d7c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8012d7e:	4805      	ldr	r0, [pc, #20]	; (8012d94 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8012d80:	f000 faea 	bl	8013358 <LST_is_empty>
 8012d84:	4603      	mov	r3, r0
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d0dc      	beq.n	8012d44 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8012d8a:	bf00      	nop
}
 8012d8c:	3708      	adds	r7, #8
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	200300d4 	.word	0x200300d4
 8012d98:	200009f4 	.word	0x200009f4

08012d9c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8012da0:	4b02      	ldr	r3, [pc, #8]	; (8012dac <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	4798      	blx	r3

  return;
 8012da6:	bf00      	nop
}
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	200009f8 	.word	0x200009f8

08012db0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8012dbc:	480d      	ldr	r0, [pc, #52]	; (8012df4 <TL_SYS_Init+0x44>)
 8012dbe:	f000 fabb 	bl	8013338 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8012dc2:	4b0d      	ldr	r3, [pc, #52]	; (8012df8 <TL_SYS_Init+0x48>)
 8012dc4:	68db      	ldr	r3, [r3, #12]
 8012dc6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	689a      	ldr	r2, [r3, #8]
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	4a08      	ldr	r2, [pc, #32]	; (8012df4 <TL_SYS_Init+0x44>)
 8012dd4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8012dd6:	f7f9 fe9b 	bl	800cb10 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4a07      	ldr	r2, [pc, #28]	; (8012dfc <TL_SYS_Init+0x4c>)
 8012de0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	685b      	ldr	r3, [r3, #4]
 8012de6:	4a06      	ldr	r2, [pc, #24]	; (8012e00 <TL_SYS_Init+0x50>)
 8012de8:	6013      	str	r3, [r2, #0]

  return 0;
 8012dea:	2300      	movs	r3, #0
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	3710      	adds	r7, #16
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	200300dc 	.word	0x200300dc
 8012df8:	20030000 	.word	0x20030000
 8012dfc:	200009fc 	.word	0x200009fc
 8012e00:	20000a00 	.word	0x20000a00

08012e04 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8012e10:	4b09      	ldr	r3, [pc, #36]	; (8012e38 <TL_SYS_SendCmd+0x34>)
 8012e12:	68db      	ldr	r3, [r3, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	2210      	movs	r2, #16
 8012e18:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8012e1a:	4b07      	ldr	r3, [pc, #28]	; (8012e38 <TL_SYS_SendCmd+0x34>)
 8012e1c:	68db      	ldr	r3, [r3, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	4619      	mov	r1, r3
 8012e22:	2004      	movs	r0, #4
 8012e24:	f000 f94c 	bl	80130c0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8012e28:	f7f9 fe7c 	bl	800cb24 <HW_IPCC_SYS_SendCmd>

  return 0;
 8012e2c:	2300      	movs	r3, #0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3708      	adds	r7, #8
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	20030000 	.word	0x20030000

08012e3c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012e40:	4b07      	ldr	r3, [pc, #28]	; (8012e60 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8012e42:	68db      	ldr	r3, [r3, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	4619      	mov	r1, r3
 8012e48:	2005      	movs	r0, #5
 8012e4a:	f000 f939 	bl	80130c0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012e4e:	4b05      	ldr	r3, [pc, #20]	; (8012e64 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	4a03      	ldr	r2, [pc, #12]	; (8012e60 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8012e54:	68d2      	ldr	r2, [r2, #12]
 8012e56:	6812      	ldr	r2, [r2, #0]
 8012e58:	4610      	mov	r0, r2
 8012e5a:	4798      	blx	r3

  return;
 8012e5c:	bf00      	nop
}
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	20030000 	.word	0x20030000
 8012e64:	200009fc 	.word	0x200009fc

08012e68 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8012e6e:	e00e      	b.n	8012e8e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8012e70:	1d3b      	adds	r3, r7, #4
 8012e72:	4619      	mov	r1, r3
 8012e74:	480b      	ldr	r0, [pc, #44]	; (8012ea4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8012e76:	f000 fafe 	bl	8013476 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	4619      	mov	r1, r3
 8012e7e:	2006      	movs	r0, #6
 8012e80:	f000 f91e 	bl	80130c0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8012e84:	4b08      	ldr	r3, [pc, #32]	; (8012ea8 <HW_IPCC_SYS_EvtNot+0x40>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	687a      	ldr	r2, [r7, #4]
 8012e8a:	4610      	mov	r0, r2
 8012e8c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8012e8e:	4805      	ldr	r0, [pc, #20]	; (8012ea4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8012e90:	f000 fa62 	bl	8013358 <LST_is_empty>
 8012e94:	4603      	mov	r3, r0
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d0ea      	beq.n	8012e70 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8012e9a:	bf00      	nop
}
 8012e9c:	3708      	adds	r7, #8
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	200300dc 	.word	0x200300dc
 8012ea8:	20000a00 	.word	0x20000a00

08012eac <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b084      	sub	sp, #16
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 8012eb4:	4b0a      	ldr	r3, [pc, #40]	; (8012ee0 <TL_ZIGBEE_Init+0x34>)
 8012eb6:	69db      	ldr	r3, [r3, #28]
 8012eb8:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681a      	ldr	r2, [r3, #0]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	685a      	ldr	r2, [r3, #4]
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	689a      	ldr	r2, [r3, #8]
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 8012ed2:	f7f9 fe4d 	bl	800cb70 <HW_IPCC_ZIGBEE_Init>

  return;
 8012ed6:	bf00      	nop
}
 8012ed8:	3710      	adds	r7, #16
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	20030000 	.word	0x20030000

08012ee4 <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8012ee8:	4b04      	ldr	r3, [pc, #16]	; (8012efc <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 8012eea:	69db      	ldr	r3, [r3, #28]
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	2208      	movs	r2, #8
 8012ef0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 8012ef2:	f7f9 fe4b 	bl	800cb8c <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 8012ef6:	bf00      	nop
}
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	20030000 	.word	0x20030000

08012f00 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 8012f04:	4b03      	ldr	r3, [pc, #12]	; (8012f14 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 8012f06:	69db      	ldr	r3, [r3, #28]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7f9 fb68 	bl	800c5e0 <TL_ZIGBEE_CmdEvtReceived>

  return;
 8012f10:	bf00      	nop
}
 8012f12:	bd80      	pop	{r7, pc}
 8012f14:	20030000 	.word	0x20030000

08012f18 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 8012f1c:	4b03      	ldr	r3, [pc, #12]	; (8012f2c <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 8012f1e:	69db      	ldr	r3, [r3, #28]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7f9 fb66 	bl	800c5f4 <TL_ZIGBEE_NotReceived>

  return;
 8012f28:	bf00      	nop
}
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	20030000 	.word	0x20030000

08012f30 <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8012f34:	4b04      	ldr	r3, [pc, #16]	; (8012f48 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8012f36:	69db      	ldr	r3, [r3, #28]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	220d      	movs	r2, #13
 8012f3c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 8012f3e:	f7f9 fe33 	bl	800cba8 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 8012f42:	bf00      	nop
}
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	20030000 	.word	0x20030000

08012f4c <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 8012f50:	4b03      	ldr	r3, [pc, #12]	; (8012f60 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 8012f52:	69db      	ldr	r3, [r3, #28]
 8012f54:	689b      	ldr	r3, [r3, #8]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7f9 fb82 	bl	800c660 <TL_ZIGBEE_M0RequestReceived>

  return;
 8012f5c:	bf00      	nop
}
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	20030000 	.word	0x20030000

08012f64 <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8012f68:	4b04      	ldr	r3, [pc, #16]	; (8012f7c <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 8012f6a:	69db      	ldr	r3, [r3, #28]
 8012f6c:	689b      	ldr	r3, [r3, #8]
 8012f6e:	220d      	movs	r2, #13
 8012f70:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 8012f72:	f7f9 fe4b 	bl	800cc0c <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 8012f76:	bf00      	nop
}
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	20030000 	.word	0x20030000

08012f80 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8012f88:	4817      	ldr	r0, [pc, #92]	; (8012fe8 <TL_MM_Init+0x68>)
 8012f8a:	f000 f9d5 	bl	8013338 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8012f8e:	4817      	ldr	r0, [pc, #92]	; (8012fec <TL_MM_Init+0x6c>)
 8012f90:	f000 f9d2 	bl	8013338 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8012f94:	4b16      	ldr	r3, [pc, #88]	; (8012ff0 <TL_MM_Init+0x70>)
 8012f96:	691b      	ldr	r3, [r3, #16]
 8012f98:	4a16      	ldr	r2, [pc, #88]	; (8012ff4 <TL_MM_Init+0x74>)
 8012f9a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8012f9c:	4b15      	ldr	r3, [pc, #84]	; (8012ff4 <TL_MM_Init+0x74>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	6892      	ldr	r2, [r2, #8]
 8012fa4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8012fa6:	4b13      	ldr	r3, [pc, #76]	; (8012ff4 <TL_MM_Init+0x74>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	68d2      	ldr	r2, [r2, #12]
 8012fae:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8012fb0:	4b10      	ldr	r3, [pc, #64]	; (8012ff4 <TL_MM_Init+0x74>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4a0c      	ldr	r2, [pc, #48]	; (8012fe8 <TL_MM_Init+0x68>)
 8012fb6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8012fb8:	4b0e      	ldr	r3, [pc, #56]	; (8012ff4 <TL_MM_Init+0x74>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	687a      	ldr	r2, [r7, #4]
 8012fbe:	6812      	ldr	r2, [r2, #0]
 8012fc0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8012fc2:	4b0c      	ldr	r3, [pc, #48]	; (8012ff4 <TL_MM_Init+0x74>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	6852      	ldr	r2, [r2, #4]
 8012fca:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8012fcc:	4b09      	ldr	r3, [pc, #36]	; (8012ff4 <TL_MM_Init+0x74>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	6912      	ldr	r2, [r2, #16]
 8012fd4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8012fd6:	4b07      	ldr	r3, [pc, #28]	; (8012ff4 <TL_MM_Init+0x74>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	6952      	ldr	r2, [r2, #20]
 8012fde:	619a      	str	r2, [r3, #24]

  return;
 8012fe0:	bf00      	nop
}
 8012fe2:	3708      	adds	r7, #8
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	200300c4 	.word	0x200300c4
 8012fec:	200009ec 	.word	0x200009ec
 8012ff0:	20030000 	.word	0x20030000
 8012ff4:	20000a04 	.word	0x20000a04

08012ff8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8013000:	6879      	ldr	r1, [r7, #4]
 8013002:	4807      	ldr	r0, [pc, #28]	; (8013020 <TL_MM_EvtDone+0x28>)
 8013004:	f000 f9f0 	bl	80133e8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8013008:	6879      	ldr	r1, [r7, #4]
 801300a:	2000      	movs	r0, #0
 801300c:	f000 f858 	bl	80130c0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8013010:	4804      	ldr	r0, [pc, #16]	; (8013024 <TL_MM_EvtDone+0x2c>)
 8013012:	f7f9 fe09 	bl	800cc28 <HW_IPCC_MM_SendFreeBuf>

  return;
 8013016:	bf00      	nop
}
 8013018:	3708      	adds	r7, #8
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	200009ec 	.word	0x200009ec
 8013024:	08013029 	.word	0x08013029

08013028 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801302e:	e00c      	b.n	801304a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8013030:	1d3b      	adds	r3, r7, #4
 8013032:	4619      	mov	r1, r3
 8013034:	480a      	ldr	r0, [pc, #40]	; (8013060 <SendFreeBuf+0x38>)
 8013036:	f000 fa1e 	bl	8013476 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801303a:	4b0a      	ldr	r3, [pc, #40]	; (8013064 <SendFreeBuf+0x3c>)
 801303c:	691b      	ldr	r3, [r3, #16]
 801303e:	691b      	ldr	r3, [r3, #16]
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	4611      	mov	r1, r2
 8013044:	4618      	mov	r0, r3
 8013046:	f000 f9cf 	bl	80133e8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801304a:	4805      	ldr	r0, [pc, #20]	; (8013060 <SendFreeBuf+0x38>)
 801304c:	f000 f984 	bl	8013358 <LST_is_empty>
 8013050:	4603      	mov	r3, r0
 8013052:	2b00      	cmp	r3, #0
 8013054:	d0ec      	beq.n	8013030 <SendFreeBuf+0x8>
  }

  return;
 8013056:	bf00      	nop
}
 8013058:	3708      	adds	r7, #8
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}
 801305e:	bf00      	nop
 8013060:	200009ec 	.word	0x200009ec
 8013064:	20030000 	.word	0x20030000

08013068 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8013068:	b580      	push	{r7, lr}
 801306a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 801306c:	4805      	ldr	r0, [pc, #20]	; (8013084 <TL_TRACES_Init+0x1c>)
 801306e:	f000 f963 	bl	8013338 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8013072:	4b05      	ldr	r3, [pc, #20]	; (8013088 <TL_TRACES_Init+0x20>)
 8013074:	695b      	ldr	r3, [r3, #20]
 8013076:	4a03      	ldr	r2, [pc, #12]	; (8013084 <TL_TRACES_Init+0x1c>)
 8013078:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801307a:	f7f9 fe0b 	bl	800cc94 <HW_IPCC_TRACES_Init>

  return;
 801307e:	bf00      	nop
}
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop
 8013084:	200300cc 	.word	0x200300cc
 8013088:	20030000 	.word	0x20030000

0801308c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8013092:	e008      	b.n	80130a6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8013094:	1d3b      	adds	r3, r7, #4
 8013096:	4619      	mov	r1, r3
 8013098:	4808      	ldr	r0, [pc, #32]	; (80130bc <HW_IPCC_TRACES_EvtNot+0x30>)
 801309a:	f000 f9ec 	bl	8013476 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7f5 fd43 	bl	8008b2c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80130a6:	4805      	ldr	r0, [pc, #20]	; (80130bc <HW_IPCC_TRACES_EvtNot+0x30>)
 80130a8:	f000 f956 	bl	8013358 <LST_is_empty>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d0f0      	beq.n	8013094 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80130b2:	bf00      	nop
}
 80130b4:	3708      	adds	r7, #8
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	200300cc 	.word	0x200300cc

080130c0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80130c0:	b480      	push	{r7}
 80130c2:	b085      	sub	sp, #20
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	4603      	mov	r3, r0
 80130c8:	6039      	str	r1, [r7, #0]
 80130ca:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80130cc:	79fb      	ldrb	r3, [r7, #7]
 80130ce:	2b06      	cmp	r3, #6
 80130d0:	d845      	bhi.n	801315e <OutputDbgTrace+0x9e>
 80130d2:	a201      	add	r2, pc, #4	; (adr r2, 80130d8 <OutputDbgTrace+0x18>)
 80130d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130d8:	080130f5 	.word	0x080130f5
 80130dc:	08013119 	.word	0x08013119
 80130e0:	0801311f 	.word	0x0801311f
 80130e4:	08013133 	.word	0x08013133
 80130e8:	0801313f 	.word	0x0801313f
 80130ec:	08013145 	.word	0x08013145
 80130f0:	08013153 	.word	0x08013153
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	7a5b      	ldrb	r3, [r3, #9]
 80130fc:	2bff      	cmp	r3, #255	; 0xff
 80130fe:	d005      	beq.n	801310c <OutputDbgTrace+0x4c>
 8013100:	2bff      	cmp	r3, #255	; 0xff
 8013102:	dc05      	bgt.n	8013110 <OutputDbgTrace+0x50>
 8013104:	2b0e      	cmp	r3, #14
 8013106:	d005      	beq.n	8013114 <OutputDbgTrace+0x54>
 8013108:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 801310a:	e001      	b.n	8013110 <OutputDbgTrace+0x50>
          break;
 801310c:	bf00      	nop
 801310e:	e027      	b.n	8013160 <OutputDbgTrace+0xa0>
          break;
 8013110:	bf00      	nop
 8013112:	e025      	b.n	8013160 <OutputDbgTrace+0xa0>
          break;
 8013114:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8013116:	e023      	b.n	8013160 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801311c:	e020      	b.n	8013160 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	7a5b      	ldrb	r3, [r3, #9]
 8013126:	2b0e      	cmp	r3, #14
 8013128:	d001      	beq.n	801312e <OutputDbgTrace+0x6e>
 801312a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801312c:	e000      	b.n	8013130 <OutputDbgTrace+0x70>
          break;
 801312e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8013130:	e016      	b.n	8013160 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	7a5b      	ldrb	r3, [r3, #9]
 801313a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801313c:	e010      	b.n	8013160 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8013142:	e00d      	b.n	8013160 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	7a5b      	ldrb	r3, [r3, #9]
 801314c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801314e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8013150:	e006      	b.n	8013160 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	7a5b      	ldrb	r3, [r3, #9]
 801315a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801315c:	e000      	b.n	8013160 <OutputDbgTrace+0xa0>

    default:
      break;
 801315e:	bf00      	nop
  }

  return;
 8013160:	bf00      	nop
}
 8013162:	3714      	adds	r7, #20
 8013164:	46bd      	mov	sp, r7
 8013166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316a:	4770      	bx	lr

0801316c <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 801316c:	b480      	push	{r7}
 801316e:	af00      	add	r7, sp, #0
 8013170:	bf00      	nop
 8013172:	46bd      	mov	sp, r7
 8013174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013178:	4770      	bx	lr
	...

0801317c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b086      	sub	sp, #24
 8013180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013182:	f3ef 8310 	mrs	r3, PRIMASK
 8013186:	60fb      	str	r3, [r7, #12]
  return(result);
 8013188:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 801318a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801318c:	b672      	cpsid	i
}
 801318e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8013190:	1cbb      	adds	r3, r7, #2
 8013192:	4619      	mov	r1, r3
 8013194:	4812      	ldr	r0, [pc, #72]	; (80131e0 <DbgTrace_TxCpltCallback+0x64>)
 8013196:	f000 fbe6 	bl	8013966 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 801319a:	1cbb      	adds	r3, r7, #2
 801319c:	4619      	mov	r1, r3
 801319e:	4810      	ldr	r0, [pc, #64]	; (80131e0 <DbgTrace_TxCpltCallback+0x64>)
 80131a0:	f000 fcd2 	bl	8013b48 <CircularQueue_Sense>
 80131a4:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d00c      	beq.n	80131c6 <DbgTrace_TxCpltCallback+0x4a>
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	f383 8810 	msr	PRIMASK, r3
}
 80131b6:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80131b8:	887b      	ldrh	r3, [r7, #2]
 80131ba:	4a0a      	ldr	r2, [pc, #40]	; (80131e4 <DbgTrace_TxCpltCallback+0x68>)
 80131bc:	4619      	mov	r1, r3
 80131be:	6938      	ldr	r0, [r7, #16]
 80131c0:	f7f5 fccf 	bl	8008b62 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80131c4:	e008      	b.n	80131d8 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80131c6:	4b08      	ldr	r3, [pc, #32]	; (80131e8 <DbgTrace_TxCpltCallback+0x6c>)
 80131c8:	2201      	movs	r2, #1
 80131ca:	701a      	strb	r2, [r3, #0]
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f383 8810 	msr	PRIMASK, r3
}
 80131d6:	bf00      	nop
}
 80131d8:	bf00      	nop
 80131da:	3718      	adds	r7, #24
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	20000a08 	.word	0x20000a08
 80131e4:	0801317d 	.word	0x0801317d
 80131e8:	200000c1 	.word	0x200000c1

080131ec <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80131f2:	f7f5 fcb0 	bl	8008b56 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80131f6:	2302      	movs	r3, #2
 80131f8:	9300      	str	r3, [sp, #0]
 80131fa:	2300      	movs	r3, #0
 80131fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013200:	4903      	ldr	r1, [pc, #12]	; (8013210 <DbgTraceInit+0x24>)
 8013202:	4804      	ldr	r0, [pc, #16]	; (8013214 <DbgTraceInit+0x28>)
 8013204:	f000 f956 	bl	80134b4 <CircularQueue_Init>
#endif 
#endif
  return;
 8013208:	bf00      	nop
}
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	20000a28 	.word	0x20000a28
 8013214:	20000a08 	.word	0x20000a08

08013218 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8013224:	687a      	ldr	r2, [r7, #4]
 8013226:	68b9      	ldr	r1, [r7, #8]
 8013228:	68f8      	ldr	r0, [r7, #12]
 801322a:	f000 f805 	bl	8013238 <DbgTraceWrite>
 801322e:	4603      	mov	r3, r0
}
 8013230:	4618      	mov	r0, r3
 8013232:	3710      	adds	r7, #16
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b08a      	sub	sp, #40	; 0x28
 801323c:	af00      	add	r7, sp, #0
 801323e:	60f8      	str	r0, [r7, #12]
 8013240:	60b9      	str	r1, [r7, #8]
 8013242:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8013244:	2300      	movs	r3, #0
 8013246:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013248:	f3ef 8310 	mrs	r3, PRIMASK
 801324c:	61bb      	str	r3, [r7, #24]
  return(result);
 801324e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8013250:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013258:	d102      	bne.n	8013260 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 801325a:	2300      	movs	r3, #0
 801325c:	627b      	str	r3, [r7, #36]	; 0x24
 801325e:	e037      	b.n	80132d0 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	2b01      	cmp	r3, #1
 8013264:	d006      	beq.n	8013274 <DbgTraceWrite+0x3c>
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	2b02      	cmp	r3, #2
 801326a:	d003      	beq.n	8013274 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 801326c:	f04f 33ff 	mov.w	r3, #4294967295
 8013270:	627b      	str	r3, [r7, #36]	; 0x24
 8013272:	e02d      	b.n	80132d0 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d02a      	beq.n	80132d0 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 801327e:	b672      	cpsid	i
}
 8013280:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	b29a      	uxth	r2, r3
 8013286:	2301      	movs	r3, #1
 8013288:	68b9      	ldr	r1, [r7, #8]
 801328a:	4814      	ldr	r0, [pc, #80]	; (80132dc <DbgTraceWrite+0xa4>)
 801328c:	f000 f944 	bl	8013518 <CircularQueue_Add>
 8013290:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8013292:	69fb      	ldr	r3, [r7, #28]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d015      	beq.n	80132c4 <DbgTraceWrite+0x8c>
 8013298:	4b11      	ldr	r3, [pc, #68]	; (80132e0 <DbgTraceWrite+0xa8>)
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	b2db      	uxtb	r3, r3
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d010      	beq.n	80132c4 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 80132a2:	4b0f      	ldr	r3, [pc, #60]	; (80132e0 <DbgTraceWrite+0xa8>)
 80132a4:	2200      	movs	r2, #0
 80132a6:	701a      	strb	r2, [r3, #0]
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	f383 8810 	msr	PRIMASK, r3
}
 80132b2:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	4a0a      	ldr	r2, [pc, #40]	; (80132e4 <DbgTraceWrite+0xac>)
 80132ba:	4619      	mov	r1, r3
 80132bc:	69f8      	ldr	r0, [r7, #28]
 80132be:	f7f5 fc50 	bl	8008b62 <DbgOutputTraces>
 80132c2:	e005      	b.n	80132d0 <DbgTraceWrite+0x98>
 80132c4:	6a3b      	ldr	r3, [r7, #32]
 80132c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	f383 8810 	msr	PRIMASK, r3
}
 80132ce:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80132d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3728      	adds	r7, #40	; 0x28
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
 80132da:	bf00      	nop
 80132dc:	20000a08 	.word	0x20000a08
 80132e0:	200000c1 	.word	0x200000c1
 80132e4:	0801317d 	.word	0x0801317d

080132e8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80132e8:	b480      	push	{r7}
 80132ea:	b085      	sub	sp, #20
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	4603      	mov	r3, r0
 80132f0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80132f2:	4b0f      	ldr	r3, [pc, #60]	; (8013330 <OTP_Read+0x48>)
 80132f4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80132f6:	e002      	b.n	80132fe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	3b08      	subs	r3, #8
 80132fc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	3307      	adds	r3, #7
 8013302:	781b      	ldrb	r3, [r3, #0]
 8013304:	79fa      	ldrb	r2, [r7, #7]
 8013306:	429a      	cmp	r2, r3
 8013308:	d003      	beq.n	8013312 <OTP_Read+0x2a>
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	4a09      	ldr	r2, [pc, #36]	; (8013334 <OTP_Read+0x4c>)
 801330e:	4293      	cmp	r3, r2
 8013310:	d1f2      	bne.n	80132f8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	3307      	adds	r3, #7
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	79fa      	ldrb	r2, [r7, #7]
 801331a:	429a      	cmp	r2, r3
 801331c:	d001      	beq.n	8013322 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801331e:	2300      	movs	r3, #0
 8013320:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8013322:	68fb      	ldr	r3, [r7, #12]
}
 8013324:	4618      	mov	r0, r3
 8013326:	3714      	adds	r7, #20
 8013328:	46bd      	mov	sp, r7
 801332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332e:	4770      	bx	lr
 8013330:	1fff73f8 	.word	0x1fff73f8
 8013334:	1fff7000 	.word	0x1fff7000

08013338 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8013338:	b480      	push	{r7}
 801333a:	b083      	sub	sp, #12
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	605a      	str	r2, [r3, #4]
}
 801334c:	bf00      	nop
 801334e:	370c      	adds	r7, #12
 8013350:	46bd      	mov	sp, r7
 8013352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013356:	4770      	bx	lr

08013358 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8013358:	b480      	push	{r7}
 801335a:	b087      	sub	sp, #28
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013360:	f3ef 8310 	mrs	r3, PRIMASK
 8013364:	60fb      	str	r3, [r7, #12]
  return(result);
 8013366:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801336a:	b672      	cpsid	i
}
 801336c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	429a      	cmp	r2, r3
 8013376:	d102      	bne.n	801337e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8013378:	2301      	movs	r3, #1
 801337a:	75fb      	strb	r3, [r7, #23]
 801337c:	e001      	b.n	8013382 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 801337e:	2300      	movs	r3, #0
 8013380:	75fb      	strb	r3, [r7, #23]
 8013382:	693b      	ldr	r3, [r7, #16]
 8013384:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	f383 8810 	msr	PRIMASK, r3
}
 801338c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801338e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013390:	4618      	mov	r0, r3
 8013392:	371c      	adds	r7, #28
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr

0801339c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 801339c:	b480      	push	{r7}
 801339e:	b087      	sub	sp, #28
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133a6:	f3ef 8310 	mrs	r3, PRIMASK
 80133aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80133ac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80133ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80133b0:	b672      	cpsid	i
}
 80133b2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681a      	ldr	r2, [r3, #0]
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	683a      	ldr	r2, [r7, #0]
 80133c6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	683a      	ldr	r2, [r7, #0]
 80133ce:	605a      	str	r2, [r3, #4]
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	f383 8810 	msr	PRIMASK, r3
}
 80133da:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80133dc:	bf00      	nop
 80133de:	371c      	adds	r7, #28
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr

080133e8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80133e8:	b480      	push	{r7}
 80133ea:	b087      	sub	sp, #28
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133f2:	f3ef 8310 	mrs	r3, PRIMASK
 80133f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80133f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80133fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80133fc:	b672      	cpsid	i
}
 80133fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	687a      	ldr	r2, [r7, #4]
 8013404:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	685a      	ldr	r2, [r3, #4]
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	683a      	ldr	r2, [r7, #0]
 8013412:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	683a      	ldr	r2, [r7, #0]
 801341a:	601a      	str	r2, [r3, #0]
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	f383 8810 	msr	PRIMASK, r3
}
 8013426:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013428:	bf00      	nop
 801342a:	371c      	adds	r7, #28
 801342c:	46bd      	mov	sp, r7
 801342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013432:	4770      	bx	lr

08013434 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8013434:	b480      	push	{r7}
 8013436:	b087      	sub	sp, #28
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801343c:	f3ef 8310 	mrs	r3, PRIMASK
 8013440:	60fb      	str	r3, [r7, #12]
  return(result);
 8013442:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013444:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013446:	b672      	cpsid	i
}
 8013448:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	687a      	ldr	r2, [r7, #4]
 8013450:	6812      	ldr	r2, [r2, #0]
 8013452:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	6852      	ldr	r2, [r2, #4]
 801345c:	605a      	str	r2, [r3, #4]
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	f383 8810 	msr	PRIMASK, r3
}
 8013468:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801346a:	bf00      	nop
 801346c:	371c      	adds	r7, #28
 801346e:	46bd      	mov	sp, r7
 8013470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013474:	4770      	bx	lr

08013476 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8013476:	b580      	push	{r7, lr}
 8013478:	b086      	sub	sp, #24
 801347a:	af00      	add	r7, sp, #0
 801347c:	6078      	str	r0, [r7, #4]
 801347e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013480:	f3ef 8310 	mrs	r3, PRIMASK
 8013484:	60fb      	str	r3, [r7, #12]
  return(result);
 8013486:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013488:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801348a:	b672      	cpsid	i
}
 801348c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681a      	ldr	r2, [r3, #0]
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	4618      	mov	r0, r3
 801349c:	f7ff ffca 	bl	8013434 <LST_remove_node>
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	f383 8810 	msr	PRIMASK, r3
}
 80134aa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80134ac:	bf00      	nop
 80134ae:	3718      	adds	r7, #24
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}

080134b4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 80134b4:	b480      	push	{r7}
 80134b6:	b085      	sub	sp, #20
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	60b9      	str	r1, [r7, #8]
 80134be:	607a      	str	r2, [r7, #4]
 80134c0:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	601a      	str	r2, [r3, #0]
  q->first = 0;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2200      	movs	r2, #0
 80134cc:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	2200      	movs	r2, #0
 80134d2:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	2200      	movs	r2, #0
 80134d8:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2200      	movs	r2, #0
 80134de:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	887a      	ldrh	r2, [r7, #2]
 80134ea:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	7e3a      	ldrb	r2, [r7, #24]
 80134f0:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80134f2:	7e3b      	ldrb	r3, [r7, #24]
 80134f4:	f003 0302 	and.w	r3, r3, #2
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d006      	beq.n	801350a <CircularQueue_Init+0x56>
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	891b      	ldrh	r3, [r3, #8]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d002      	beq.n	801350a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8013504:	f04f 33ff 	mov.w	r3, #4294967295
 8013508:	e000      	b.n	801350c <CircularQueue_Init+0x58>
  }
  return 0;
 801350a:	2300      	movs	r3, #0
}
 801350c:	4618      	mov	r0, r3
 801350e:	3714      	adds	r7, #20
 8013510:	46bd      	mov	sp, r7
 8013512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013516:	4770      	bx	lr

08013518 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b08e      	sub	sp, #56	; 0x38
 801351c:	af00      	add	r7, sp, #0
 801351e:	60f8      	str	r0, [r7, #12]
 8013520:	60b9      	str	r1, [r7, #8]
 8013522:	603b      	str	r3, [r7, #0]
 8013524:	4613      	mov	r3, r2
 8013526:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8013528:	2300      	movs	r3, #0
 801352a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 801352c:	2300      	movs	r3, #0
 801352e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8013530:	2300      	movs	r3, #0
 8013532:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8013534:	2300      	movs	r3, #0
 8013536:	62bb      	str	r3, [r7, #40]	; 0x28
 8013538:	2300      	movs	r3, #0
 801353a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 801353c:	2300      	movs	r3, #0
 801353e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8013540:	2300      	movs	r3, #0
 8013542:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	891b      	ldrh	r3, [r3, #8]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d101      	bne.n	8013550 <CircularQueue_Add+0x38>
 801354c:	2302      	movs	r3, #2
 801354e:	e000      	b.n	8013552 <CircularQueue_Add+0x3a>
 8013550:	2300      	movs	r3, #0
 8013552:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	695b      	ldr	r3, [r3, #20]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d02a      	beq.n	80135b2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	891b      	ldrh	r3, [r3, #8]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d123      	bne.n	80135ac <CircularQueue_Add+0x94>
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	691b      	ldr	r3, [r3, #16]
 801356c:	4413      	add	r3, r2
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	b29a      	uxth	r2, r3
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	6819      	ldr	r1, [r3, #0]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	691b      	ldr	r3, [r3, #16]
 801357a:	1c58      	adds	r0, r3, #1
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	4298      	cmp	r0, r3
 8013582:	d306      	bcc.n	8013592 <CircularQueue_Add+0x7a>
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	6918      	ldr	r0, [r3, #16]
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	1ac3      	subs	r3, r0, r3
 801358e:	3301      	adds	r3, #1
 8013590:	e002      	b.n	8013598 <CircularQueue_Add+0x80>
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	691b      	ldr	r3, [r3, #16]
 8013596:	3301      	adds	r3, #1
 8013598:	440b      	add	r3, r1
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	b29b      	uxth	r3, r3
 801359e:	021b      	lsls	r3, r3, #8
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	4413      	add	r3, r2
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	3302      	adds	r3, #2
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	e001      	b.n	80135b0 <CircularQueue_Add+0x98>
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	891b      	ldrh	r3, [r3, #8]
 80135b0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	891b      	ldrh	r3, [r3, #8]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d002      	beq.n	80135c0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	891b      	ldrh	r3, [r3, #8]
 80135be:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	691a      	ldr	r2, [r3, #16]
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	68db      	ldr	r3, [r3, #12]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d307      	bcc.n	80135dc <CircularQueue_Add+0xc4>
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	685a      	ldr	r2, [r3, #4]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	6919      	ldr	r1, [r3, #16]
 80135d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80135d6:	440b      	add	r3, r1
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	e000      	b.n	80135de <CircularQueue_Add+0xc6>
 80135dc:	2300      	movs	r3, #0
 80135de:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80135e0:	88fa      	ldrh	r2, [r7, #6]
 80135e2:	7ffb      	ldrb	r3, [r7, #31]
 80135e4:	4413      	add	r3, r2
 80135e6:	461a      	mov	r2, r3
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	fb02 f303 	mul.w	r3, r2, r3
 80135ee:	69ba      	ldr	r2, [r7, #24]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d80b      	bhi.n	801360c <CircularQueue_Add+0xf4>
 80135f4:	88fa      	ldrh	r2, [r7, #6]
 80135f6:	7ffb      	ldrb	r3, [r7, #31]
 80135f8:	4413      	add	r3, r2
 80135fa:	461a      	mov	r2, r3
 80135fc:	69bb      	ldr	r3, [r7, #24]
 80135fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8013602:	fb01 f202 	mul.w	r2, r1, r2
 8013606:	1a9b      	subs	r3, r3, r2
 8013608:	b2db      	uxtb	r3, r3
 801360a:	e000      	b.n	801360e <CircularQueue_Add+0xf6>
 801360c:	2300      	movs	r3, #0
 801360e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8013610:	7dfa      	ldrb	r2, [r7, #23]
 8013612:	7ffb      	ldrb	r3, [r7, #31]
 8013614:	429a      	cmp	r2, r3
 8013616:	bf8c      	ite	hi
 8013618:	2301      	movhi	r3, #1
 801361a:	2300      	movls	r3, #0
 801361c:	b2db      	uxtb	r3, r3
 801361e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8013620:	7fbb      	ldrb	r3, [r7, #30]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d008      	beq.n	8013638 <CircularQueue_Add+0x120>
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	7f1b      	ldrb	r3, [r3, #28]
 801362a:	f003 0301 	and.w	r3, r3, #1
 801362e:	2b00      	cmp	r3, #0
 8013630:	d002      	beq.n	8013638 <CircularQueue_Add+0x120>
 8013632:	7dfb      	ldrb	r3, [r7, #23]
 8013634:	b29b      	uxth	r3, r3
 8013636:	e000      	b.n	801363a <CircularQueue_Add+0x122>
 8013638:	8bbb      	ldrh	r3, [r7, #28]
 801363a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 801363c:	7fbb      	ldrb	r3, [r7, #30]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d008      	beq.n	8013654 <CircularQueue_Add+0x13c>
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	7f1b      	ldrb	r3, [r3, #28]
 8013646:	f003 0302 	and.w	r3, r3, #2
 801364a:	2b00      	cmp	r3, #0
 801364c:	d002      	beq.n	8013654 <CircularQueue_Add+0x13c>
 801364e:	7ffb      	ldrb	r3, [r7, #31]
 8013650:	b29b      	uxth	r3, r3
 8013652:	e000      	b.n	8013656 <CircularQueue_Add+0x13e>
 8013654:	8bbb      	ldrh	r3, [r7, #28]
 8013656:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8013658:	88fb      	ldrh	r3, [r7, #6]
 801365a:	2b00      	cmp	r3, #0
 801365c:	f000 817e 	beq.w	801395c <CircularQueue_Add+0x444>
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	695a      	ldr	r2, [r3, #20]
 8013664:	88f9      	ldrh	r1, [r7, #6]
 8013666:	7ffb      	ldrb	r3, [r7, #31]
 8013668:	440b      	add	r3, r1
 801366a:	4619      	mov	r1, r3
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	fb01 f303 	mul.w	r3, r1, r3
 8013672:	441a      	add	r2, r3
 8013674:	8bbb      	ldrh	r3, [r7, #28]
 8013676:	441a      	add	r2, r3
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	685b      	ldr	r3, [r3, #4]
 801367c:	429a      	cmp	r2, r3
 801367e:	f200 816d 	bhi.w	801395c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8013682:	2300      	movs	r3, #0
 8013684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013686:	e14a      	b.n	801391e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	691a      	ldr	r2, [r3, #16]
 801368c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801368e:	441a      	add	r2, r3
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	429a      	cmp	r2, r3
 8013696:	d307      	bcc.n	80136a8 <CircularQueue_Add+0x190>
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	691a      	ldr	r2, [r3, #16]
 801369c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801369e:	441a      	add	r2, r3
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	685b      	ldr	r3, [r3, #4]
 80136a4:	1ad3      	subs	r3, r2, r3
 80136a6:	e003      	b.n	80136b0 <CircularQueue_Add+0x198>
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	691a      	ldr	r2, [r3, #16]
 80136ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80136ae:	4413      	add	r3, r2
 80136b0:	68fa      	ldr	r2, [r7, #12]
 80136b2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	691b      	ldr	r3, [r3, #16]
 80136b8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	891b      	ldrh	r3, [r3, #8]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d130      	bne.n	8013724 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c8:	1c59      	adds	r1, r3, #1
 80136ca:	6339      	str	r1, [r7, #48]	; 0x30
 80136cc:	4413      	add	r3, r2
 80136ce:	88fa      	ldrh	r2, [r7, #6]
 80136d0:	b2d2      	uxtb	r2, r2
 80136d2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	685b      	ldr	r3, [r3, #4]
 80136d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136da:	429a      	cmp	r2, r3
 80136dc:	d304      	bcc.n	80136e8 <CircularQueue_Add+0x1d0>
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136e4:	1ad3      	subs	r3, r2, r3
 80136e6:	e000      	b.n	80136ea <CircularQueue_Add+0x1d2>
 80136e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ea:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80136ec:	88fb      	ldrh	r3, [r7, #6]
 80136ee:	0a1b      	lsrs	r3, r3, #8
 80136f0:	b298      	uxth	r0, r3
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	681a      	ldr	r2, [r3, #0]
 80136f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f8:	1c59      	adds	r1, r3, #1
 80136fa:	6339      	str	r1, [r7, #48]	; 0x30
 80136fc:	4413      	add	r3, r2
 80136fe:	b2c2      	uxtb	r2, r0
 8013700:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013708:	429a      	cmp	r2, r3
 801370a:	d304      	bcc.n	8013716 <CircularQueue_Add+0x1fe>
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013712:	1ad3      	subs	r3, r2, r3
 8013714:	e000      	b.n	8013718 <CircularQueue_Add+0x200>
 8013716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013718:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	695b      	ldr	r3, [r3, #20]
 801371e:	1c9a      	adds	r2, r3, #2
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8013724:	88fa      	ldrh	r2, [r7, #6]
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	6859      	ldr	r1, [r3, #4]
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	1acb      	subs	r3, r1, r3
 801372e:	4293      	cmp	r3, r2
 8013730:	bf28      	it	cs
 8013732:	4613      	movcs	r3, r2
 8013734:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8013736:	88fb      	ldrh	r3, [r7, #6]
 8013738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801373a:	429a      	cmp	r2, r3
 801373c:	d007      	beq.n	801374e <CircularQueue_Add+0x236>
 801373e:	88fb      	ldrh	r3, [r7, #6]
 8013740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013742:	429a      	cmp	r2, r3
 8013744:	d225      	bcs.n	8013792 <CircularQueue_Add+0x27a>
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	7f1b      	ldrb	r3, [r3, #28]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d121      	bne.n	8013792 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	681a      	ldr	r2, [r3, #0]
 8013752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013754:	18d0      	adds	r0, r2, r3
 8013756:	88fb      	ldrh	r3, [r7, #6]
 8013758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801375a:	fb02 f303 	mul.w	r3, r2, r3
 801375e:	68ba      	ldr	r2, [r7, #8]
 8013760:	4413      	add	r3, r2
 8013762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013764:	4619      	mov	r1, r3
 8013766:	f004 f9e7 	bl	8017b38 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	695a      	ldr	r2, [r3, #20]
 801376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013770:	441a      	add	r2, r3
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8013776:	2300      	movs	r3, #0
 8013778:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 801377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801377c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 801377e:	88fa      	ldrh	r2, [r7, #6]
 8013780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013782:	1ad3      	subs	r3, r2, r3
 8013784:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8013786:	7ffb      	ldrb	r3, [r7, #31]
 8013788:	b29a      	uxth	r2, r3
 801378a:	88fb      	ldrh	r3, [r7, #6]
 801378c:	4413      	add	r3, r2
 801378e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8013790:	e0a4      	b.n	80138dc <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8013792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013794:	2b00      	cmp	r3, #0
 8013796:	f000 80a1 	beq.w	80138dc <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	7f1b      	ldrb	r3, [r3, #28]
 801379e:	f003 0301 	and.w	r3, r3, #1
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d03a      	beq.n	801381c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	891b      	ldrh	r3, [r3, #8]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d10d      	bne.n	80137ca <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b4:	3b02      	subs	r3, #2
 80137b6:	4413      	add	r3, r2
 80137b8:	22ff      	movs	r2, #255	; 0xff
 80137ba:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	681a      	ldr	r2, [r3, #0]
 80137c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c2:	3b01      	subs	r3, #1
 80137c4:	4413      	add	r3, r2
 80137c6:	22ff      	movs	r2, #255	; 0xff
 80137c8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	695a      	ldr	r2, [r3, #20]
 80137ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d0:	441a      	add	r2, r3
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 80137d6:	2300      	movs	r3, #0
 80137d8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 80137da:	88fb      	ldrh	r3, [r7, #6]
 80137dc:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 80137de:	2300      	movs	r3, #0
 80137e0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	891b      	ldrh	r3, [r3, #8]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d16f      	bne.n	80138ca <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	681a      	ldr	r2, [r3, #0]
 80137ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f0:	1c59      	adds	r1, r3, #1
 80137f2:	6339      	str	r1, [r7, #48]	; 0x30
 80137f4:	4413      	add	r3, r2
 80137f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137f8:	b2d2      	uxtb	r2, r2
 80137fa:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80137fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fe:	0a18      	lsrs	r0, r3, #8
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	681a      	ldr	r2, [r3, #0]
 8013804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013806:	1c59      	adds	r1, r3, #1
 8013808:	6339      	str	r1, [r7, #48]	; 0x30
 801380a:	4413      	add	r3, r2
 801380c:	b2c2      	uxtb	r2, r0
 801380e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	695b      	ldr	r3, [r3, #20]
 8013814:	1c9a      	adds	r2, r3, #2
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	615a      	str	r2, [r3, #20]
 801381a:	e056      	b.n	80138ca <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	7f1b      	ldrb	r3, [r3, #28]
 8013820:	f003 0302 	and.w	r3, r3, #2
 8013824:	2b00      	cmp	r3, #0
 8013826:	d050      	beq.n	80138ca <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	891b      	ldrh	r3, [r3, #8]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d14a      	bne.n	80138c6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	681a      	ldr	r2, [r3, #0]
 8013834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013836:	3b02      	subs	r3, #2
 8013838:	4413      	add	r3, r2
 801383a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801383c:	b2d2      	uxtb	r2, r2
 801383e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8013840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013842:	0a19      	lsrs	r1, r3, #8
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	681a      	ldr	r2, [r3, #0]
 8013848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384a:	3b01      	subs	r3, #1
 801384c:	4413      	add	r3, r2
 801384e:	b2ca      	uxtb	r2, r1
 8013850:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013858:	18d0      	adds	r0, r2, r3
 801385a:	88fb      	ldrh	r3, [r7, #6]
 801385c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801385e:	fb02 f303 	mul.w	r3, r2, r3
 8013862:	68ba      	ldr	r2, [r7, #8]
 8013864:	4413      	add	r3, r2
 8013866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013868:	4619      	mov	r1, r3
 801386a:	f004 f965 	bl	8017b38 <memcpy>
             q->byteCount += NbBytesToCopy; 
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	695a      	ldr	r2, [r3, #20]
 8013872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013874:	441a      	add	r2, r3
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 801387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801387c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 801387e:	88fa      	ldrh	r2, [r7, #6]
 8013880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013882:	1ad3      	subs	r3, r2, r3
 8013884:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	699b      	ldr	r3, [r3, #24]
 801388a:	1c5a      	adds	r2, r3, #1
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8013890:	2300      	movs	r3, #0
 8013892:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	681a      	ldr	r2, [r3, #0]
 8013898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389a:	1c59      	adds	r1, r3, #1
 801389c:	6339      	str	r1, [r7, #48]	; 0x30
 801389e:	4413      	add	r3, r2
 80138a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138a2:	b2d2      	uxtb	r2, r2
 80138a4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80138a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a8:	0a18      	lsrs	r0, r3, #8
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b0:	1c59      	adds	r1, r3, #1
 80138b2:	6339      	str	r1, [r7, #48]	; 0x30
 80138b4:	4413      	add	r3, r2
 80138b6:	b2c2      	uxtb	r2, r0
 80138b8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	695b      	ldr	r3, [r3, #20]
 80138be:	1c9a      	adds	r2, r3, #2
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	615a      	str	r2, [r3, #20]
 80138c4:	e001      	b.n	80138ca <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 80138c6:	2300      	movs	r3, #0
 80138c8:	e049      	b.n	801395e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80138ca:	7ffb      	ldrb	r3, [r7, #31]
 80138cc:	b29a      	uxth	r2, r3
 80138ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	4413      	add	r3, r2
 80138d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2200      	movs	r2, #0
 80138da:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 80138dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d015      	beq.n	801390e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	681a      	ldr	r2, [r3, #0]
 80138e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e8:	18d0      	adds	r0, r2, r3
 80138ea:	88fb      	ldrh	r3, [r7, #6]
 80138ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138ee:	fb03 f202 	mul.w	r2, r3, r2
 80138f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f4:	4413      	add	r3, r2
 80138f6:	68ba      	ldr	r2, [r7, #8]
 80138f8:	4413      	add	r3, r2
 80138fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138fc:	4619      	mov	r1, r3
 80138fe:	f004 f91b 	bl	8017b38 <memcpy>
        q->byteCount += NbBytesToCopy;
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	695a      	ldr	r2, [r3, #20]
 8013906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013908:	441a      	add	r2, r3
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	699b      	ldr	r3, [r3, #24]
 8013912:	1c5a      	adds	r2, r3, #1
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8013918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391a:	3301      	adds	r3, #1
 801391c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801391e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	429a      	cmp	r2, r3
 8013924:	f4ff aeb0 	bcc.w	8013688 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	681a      	ldr	r2, [r3, #0]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	6919      	ldr	r1, [r3, #16]
 8013930:	7ffb      	ldrb	r3, [r7, #31]
 8013932:	4419      	add	r1, r3
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	4299      	cmp	r1, r3
 801393a:	d307      	bcc.n	801394c <CircularQueue_Add+0x434>
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	6919      	ldr	r1, [r3, #16]
 8013940:	7ffb      	ldrb	r3, [r7, #31]
 8013942:	4419      	add	r1, r3
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	1acb      	subs	r3, r1, r3
 801394a:	e003      	b.n	8013954 <CircularQueue_Add+0x43c>
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	6919      	ldr	r1, [r3, #16]
 8013950:	7ffb      	ldrb	r3, [r7, #31]
 8013952:	440b      	add	r3, r1
 8013954:	4413      	add	r3, r2
 8013956:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8013958:	6a3b      	ldr	r3, [r7, #32]
 801395a:	e000      	b.n	801395e <CircularQueue_Add+0x446>
    return NULL;
 801395c:	2300      	movs	r3, #0
}
 801395e:	4618      	mov	r0, r3
 8013960:	3738      	adds	r7, #56	; 0x38
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}

08013966 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8013966:	b480      	push	{r7}
 8013968:	b085      	sub	sp, #20
 801396a:	af00      	add	r7, sp, #0
 801396c:	6078      	str	r0, [r7, #4]
 801396e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8013970:	2300      	movs	r3, #0
 8013972:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8013974:	2300      	movs	r3, #0
 8013976:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	891b      	ldrh	r3, [r3, #8]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d101      	bne.n	8013984 <CircularQueue_Remove+0x1e>
 8013980:	2302      	movs	r3, #2
 8013982:	e000      	b.n	8013986 <CircularQueue_Remove+0x20>
 8013984:	2300      	movs	r3, #0
 8013986:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8013988:	2300      	movs	r3, #0
 801398a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	695b      	ldr	r3, [r3, #20]
 8013990:	2b00      	cmp	r3, #0
 8013992:	f000 80cc 	beq.w	8013b2e <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	891b      	ldrh	r3, [r3, #8]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d121      	bne.n	80139e2 <CircularQueue_Remove+0x7c>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	68db      	ldr	r3, [r3, #12]
 80139a6:	4413      	add	r3, r2
 80139a8:	781b      	ldrb	r3, [r3, #0]
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6819      	ldr	r1, [r3, #0]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	68db      	ldr	r3, [r3, #12]
 80139b4:	1c58      	adds	r0, r3, #1
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	4298      	cmp	r0, r3
 80139bc:	d306      	bcc.n	80139cc <CircularQueue_Remove+0x66>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	68d8      	ldr	r0, [r3, #12]
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	1ac3      	subs	r3, r0, r3
 80139c8:	3301      	adds	r3, #1
 80139ca:	e002      	b.n	80139d2 <CircularQueue_Remove+0x6c>
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	3301      	adds	r3, #1
 80139d2:	440b      	add	r3, r1
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	021b      	lsls	r3, r3, #8
 80139da:	b29b      	uxth	r3, r3
 80139dc:	4413      	add	r3, r2
 80139de:	b29b      	uxth	r3, r3
 80139e0:	e001      	b.n	80139e6 <CircularQueue_Remove+0x80>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	891b      	ldrh	r3, [r3, #8]
 80139e6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	7f1b      	ldrb	r3, [r3, #28]
 80139ec:	f003 0301 	and.w	r3, r3, #1
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d057      	beq.n	8013aa4 <CircularQueue_Remove+0x13e>
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	7f1b      	ldrb	r3, [r3, #28]
 80139f8:	f003 0302 	and.w	r3, r3, #2
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d151      	bne.n	8013aa4 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013a00:	897b      	ldrh	r3, [r7, #10]
 8013a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d103      	bne.n	8013a12 <CircularQueue_Remove+0xac>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	891b      	ldrh	r3, [r3, #8]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d012      	beq.n	8013a38 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	68da      	ldr	r2, [r3, #12]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d942      	bls.n	8013aa4 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	891b      	ldrh	r3, [r3, #8]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d03e      	beq.n	8013aa4 <CircularQueue_Remove+0x13e>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	685a      	ldr	r2, [r3, #4]
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	1ad3      	subs	r3, r2, r3
 8013a30:	687a      	ldr	r2, [r7, #4]
 8013a32:	8912      	ldrh	r2, [r2, #8]
 8013a34:	4293      	cmp	r3, r2
 8013a36:	d235      	bcs.n	8013aa4 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	695a      	ldr	r2, [r3, #20]
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	68d9      	ldr	r1, [r3, #12]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	685b      	ldr	r3, [r3, #4]
 8013a44:	1acb      	subs	r3, r1, r3
 8013a46:	441a      	add	r2, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2200      	movs	r2, #0
 8013a50:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	891b      	ldrh	r3, [r3, #8]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d121      	bne.n	8013a9e <CircularQueue_Remove+0x138>
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681a      	ldr	r2, [r3, #0]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	68db      	ldr	r3, [r3, #12]
 8013a62:	4413      	add	r3, r2
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	b29a      	uxth	r2, r3
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6819      	ldr	r1, [r3, #0]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	68db      	ldr	r3, [r3, #12]
 8013a70:	1c58      	adds	r0, r3, #1
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	685b      	ldr	r3, [r3, #4]
 8013a76:	4298      	cmp	r0, r3
 8013a78:	d306      	bcc.n	8013a88 <CircularQueue_Remove+0x122>
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	68d8      	ldr	r0, [r3, #12]
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	1ac3      	subs	r3, r0, r3
 8013a84:	3301      	adds	r3, #1
 8013a86:	e002      	b.n	8013a8e <CircularQueue_Remove+0x128>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	3301      	adds	r3, #1
 8013a8e:	440b      	add	r3, r1
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	021b      	lsls	r3, r3, #8
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	4413      	add	r3, r2
 8013a9a:	b29b      	uxth	r3, r3
 8013a9c:	e001      	b.n	8013aa2 <CircularQueue_Remove+0x13c>
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	891b      	ldrh	r3, [r3, #8]
 8013aa2:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681a      	ldr	r2, [r3, #0]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	68d9      	ldr	r1, [r3, #12]
 8013aac:	7a7b      	ldrb	r3, [r7, #9]
 8013aae:	4419      	add	r1, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	4299      	cmp	r1, r3
 8013ab6:	d307      	bcc.n	8013ac8 <CircularQueue_Remove+0x162>
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	68d9      	ldr	r1, [r3, #12]
 8013abc:	7a7b      	ldrb	r3, [r7, #9]
 8013abe:	4419      	add	r1, r3
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	685b      	ldr	r3, [r3, #4]
 8013ac4:	1acb      	subs	r3, r1, r3
 8013ac6:	e003      	b.n	8013ad0 <CircularQueue_Remove+0x16a>
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	68d9      	ldr	r1, [r3, #12]
 8013acc:	7a7b      	ldrb	r3, [r7, #9]
 8013ace:	440b      	add	r3, r1
 8013ad0:	4413      	add	r3, r2
 8013ad2:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	695b      	ldr	r3, [r3, #20]
 8013ad8:	8979      	ldrh	r1, [r7, #10]
 8013ada:	7a7a      	ldrb	r2, [r7, #9]
 8013adc:	440a      	add	r2, r1
 8013ade:	1a9a      	subs	r2, r3, r2
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	695b      	ldr	r3, [r3, #20]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d01b      	beq.n	8013b24 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	68da      	ldr	r2, [r3, #12]
 8013af0:	897b      	ldrh	r3, [r7, #10]
 8013af2:	441a      	add	r2, r3
 8013af4:	7a7b      	ldrb	r3, [r7, #9]
 8013af6:	441a      	add	r2, r3
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	685b      	ldr	r3, [r3, #4]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d309      	bcc.n	8013b14 <CircularQueue_Remove+0x1ae>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	68da      	ldr	r2, [r3, #12]
 8013b04:	897b      	ldrh	r3, [r7, #10]
 8013b06:	441a      	add	r2, r3
 8013b08:	7a7b      	ldrb	r3, [r7, #9]
 8013b0a:	441a      	add	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	685b      	ldr	r3, [r3, #4]
 8013b10:	1ad3      	subs	r3, r2, r3
 8013b12:	e005      	b.n	8013b20 <CircularQueue_Remove+0x1ba>
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	68da      	ldr	r2, [r3, #12]
 8013b18:	897b      	ldrh	r3, [r7, #10]
 8013b1a:	441a      	add	r2, r3
 8013b1c:	7a7b      	ldrb	r3, [r7, #9]
 8013b1e:	4413      	add	r3, r2
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	699b      	ldr	r3, [r3, #24]
 8013b28:	1e5a      	subs	r2, r3, #1
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d002      	beq.n	8013b3a <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	897a      	ldrh	r2, [r7, #10]
 8013b38:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3714      	adds	r7, #20
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr

08013b48 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8013b48:	b480      	push	{r7}
 8013b4a:	b087      	sub	sp, #28
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8013b52:	2300      	movs	r3, #0
 8013b54:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8013b56:	2300      	movs	r3, #0
 8013b58:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	891b      	ldrh	r3, [r3, #8]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d101      	bne.n	8013b66 <CircularQueue_Sense+0x1e>
 8013b62:	2302      	movs	r3, #2
 8013b64:	e000      	b.n	8013b68 <CircularQueue_Sense+0x20>
 8013b66:	2300      	movs	r3, #0
 8013b68:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	695b      	ldr	r3, [r3, #20]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	f000 8090 	beq.w	8013c9c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	68db      	ldr	r3, [r3, #12]
 8013b80:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	891b      	ldrh	r3, [r3, #8]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d121      	bne.n	8013bce <CircularQueue_Sense+0x86>
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681a      	ldr	r2, [r3, #0]
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	68db      	ldr	r3, [r3, #12]
 8013b92:	4413      	add	r3, r2
 8013b94:	781b      	ldrb	r3, [r3, #0]
 8013b96:	b29a      	uxth	r2, r3
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6819      	ldr	r1, [r3, #0]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	68db      	ldr	r3, [r3, #12]
 8013ba0:	1c58      	adds	r0, r3, #1
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	4298      	cmp	r0, r3
 8013ba8:	d306      	bcc.n	8013bb8 <CircularQueue_Sense+0x70>
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	68d8      	ldr	r0, [r3, #12]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	1ac3      	subs	r3, r0, r3
 8013bb4:	3301      	adds	r3, #1
 8013bb6:	e002      	b.n	8013bbe <CircularQueue_Sense+0x76>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	68db      	ldr	r3, [r3, #12]
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	440b      	add	r3, r1
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	b29b      	uxth	r3, r3
 8013bc4:	021b      	lsls	r3, r3, #8
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	4413      	add	r3, r2
 8013bca:	b29b      	uxth	r3, r3
 8013bcc:	e001      	b.n	8013bd2 <CircularQueue_Sense+0x8a>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	891b      	ldrh	r3, [r3, #8]
 8013bd2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	7f1b      	ldrb	r3, [r3, #28]
 8013bd8:	f003 0301 	and.w	r3, r3, #1
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d048      	beq.n	8013c72 <CircularQueue_Sense+0x12a>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	7f1b      	ldrb	r3, [r3, #28]
 8013be4:	f003 0302 	and.w	r3, r3, #2
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d142      	bne.n	8013c72 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013bec:	8a7b      	ldrh	r3, [r7, #18]
 8013bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d103      	bne.n	8013bfe <CircularQueue_Sense+0xb6>
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	891b      	ldrh	r3, [r3, #8]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d012      	beq.n	8013c24 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	68da      	ldr	r2, [r3, #12]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d933      	bls.n	8013c72 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	891b      	ldrh	r3, [r3, #8]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d02f      	beq.n	8013c72 <CircularQueue_Sense+0x12a>
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	685a      	ldr	r2, [r3, #4]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	68db      	ldr	r3, [r3, #12]
 8013c1a:	1ad3      	subs	r3, r2, r3
 8013c1c:	687a      	ldr	r2, [r7, #4]
 8013c1e:	8912      	ldrh	r2, [r2, #8]
 8013c20:	4293      	cmp	r3, r2
 8013c22:	d226      	bcs.n	8013c72 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8013c24:	2300      	movs	r3, #0
 8013c26:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	891b      	ldrh	r3, [r3, #8]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d11d      	bne.n	8013c6c <CircularQueue_Sense+0x124>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	4413      	add	r3, r2
 8013c38:	781b      	ldrb	r3, [r3, #0]
 8013c3a:	b29a      	uxth	r2, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6819      	ldr	r1, [r3, #0]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	1c58      	adds	r0, r3, #1
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	4298      	cmp	r0, r3
 8013c4a:	d305      	bcc.n	8013c58 <CircularQueue_Sense+0x110>
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	68f8      	ldr	r0, [r7, #12]
 8013c52:	1ac3      	subs	r3, r0, r3
 8013c54:	3301      	adds	r3, #1
 8013c56:	e001      	b.n	8013c5c <CircularQueue_Sense+0x114>
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	440b      	add	r3, r1
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	021b      	lsls	r3, r3, #8
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	4413      	add	r3, r2
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	e001      	b.n	8013c70 <CircularQueue_Sense+0x128>
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	891b      	ldrh	r3, [r3, #8]
 8013c70:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	7af9      	ldrb	r1, [r7, #11]
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	4419      	add	r1, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	4299      	cmp	r1, r3
 8013c82:	d306      	bcc.n	8013c92 <CircularQueue_Sense+0x14a>
 8013c84:	7af9      	ldrb	r1, [r7, #11]
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	4419      	add	r1, r3
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	1acb      	subs	r3, r1, r3
 8013c90:	e002      	b.n	8013c98 <CircularQueue_Sense+0x150>
 8013c92:	7af9      	ldrb	r1, [r7, #11]
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	440b      	add	r3, r1
 8013c98:	4413      	add	r3, r2
 8013c9a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d002      	beq.n	8013ca8 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	8a7a      	ldrh	r2, [r7, #18]
 8013ca6:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8013ca8:	697b      	ldr	r3, [r7, #20]
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	371c      	adds	r7, #28
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb4:	4770      	bx	lr

08013cb6 <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 8013cb6:	b480      	push	{r7}
 8013cb8:	b087      	sub	sp, #28
 8013cba:	af00      	add	r7, sp, #0
 8013cbc:	60f8      	str	r0, [r7, #12]
 8013cbe:	60b9      	str	r1, [r7, #8]
 8013cc0:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	617b      	str	r3, [r7, #20]
 8013cc6:	e00a      	b.n	8013cde <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 8013cc8:	68ba      	ldr	r2, [r7, #8]
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	441a      	add	r2, r3
 8013cce:	68f9      	ldr	r1, [r7, #12]
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	440b      	add	r3, r1
 8013cd4:	7812      	ldrb	r2, [r2, #0]
 8013cd6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	3301      	adds	r3, #1
 8013cdc:	617b      	str	r3, [r7, #20]
 8013cde:	697a      	ldr	r2, [r7, #20]
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d3f0      	bcc.n	8013cc8 <zb_ipc_m4_memcpy2+0x12>
    }
}
 8013ce6:	bf00      	nop
 8013ce8:	bf00      	nop
 8013cea:	371c      	adds	r7, #28
 8013cec:	46bd      	mov	sp, r7
 8013cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf2:	4770      	bx	lr

08013cf4 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
 8013cfc:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 8013cfe:	200c      	movs	r0, #12
 8013d00:	f003 ff0a 	bl	8017b18 <malloc>
 8013d04:	4603      	mov	r3, r0
 8013d06:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d00a      	beq.n	8013d24 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 8013d0e:	220c      	movs	r2, #12
 8013d10:	2100      	movs	r1, #0
 8013d12:	68f8      	ldr	r0, [r7, #12]
 8013d14:	f003 ff1e 	bl	8017b54 <memset>
        info->callback = callback;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	687a      	ldr	r2, [r7, #4]
 8013d1c:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	683a      	ldr	r2, [r7, #0]
 8013d22:	605a      	str	r2, [r3, #4]
    }
    return info;
 8013d24:	68fb      	ldr	r3, [r7, #12]
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3710      	adds	r7, #16
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}

08013d2e <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b082      	sub	sp, #8
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
    free(info);
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f003 fef6 	bl	8017b28 <free>
}
 8013d3c:	bf00      	nop
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}

08013d44 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 8013d4a:	f7f8 fc01 	bl	800c550 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 8013d4e:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	2b01      	cmp	r3, #1
 8013d56:	d006      	beq.n	8013d66 <zb_ipc_m4_get_retval+0x22>
 8013d58:	4b09      	ldr	r3, [pc, #36]	; (8013d80 <zb_ipc_m4_get_retval+0x3c>)
 8013d5a:	4a0a      	ldr	r2, [pc, #40]	; (8013d84 <zb_ipc_m4_get_retval+0x40>)
 8013d5c:	f240 114d 	movw	r1, #333	; 0x14d
 8013d60:	4809      	ldr	r0, [pc, #36]	; (8013d88 <zb_ipc_m4_get_retval+0x44>)
 8013d62:	f003 fe7f 	bl	8017a64 <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f103 0108 	add.w	r1, r3, #8
 8013d6c:	463b      	mov	r3, r7
 8013d6e:	2204      	movs	r2, #4
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7ff ffa0 	bl	8013cb6 <zb_ipc_m4_memcpy2>
    return retval;
 8013d76:	683b      	ldr	r3, [r7, #0]
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3708      	adds	r7, #8
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}
 8013d80:	0801a564 	.word	0x0801a564
 8013d84:	0801ac0c 	.word	0x0801ac0c
 8013d88:	0801a578 	.word	0x0801a578

08013d8c <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b086      	sub	sp, #24
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8013d96:	607a      	str	r2, [r7, #4]
 8013d98:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 8013d9a:	4b25      	ldr	r3, [pc, #148]	; (8013e30 <ZbInit+0xa4>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d001      	beq.n	8013da6 <ZbInit+0x1a>
        return NULL;
 8013da2:	2300      	movs	r3, #0
 8013da4:	e03f      	b.n	8013e26 <ZbInit+0x9a>
    }
    Pre_ZigbeeCmdProcessing();
 8013da6:	f7f8 fc35 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013daa:	f7f8 fbc5 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013dae:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 8013db0:	697b      	ldr	r3, [r7, #20]
 8013db2:	2200      	movs	r2, #0
 8013db4:	f042 020a 	orr.w	r2, r2, #10
 8013db8:	701a      	strb	r2, [r3, #0]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	705a      	strb	r2, [r3, #1]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	709a      	strb	r2, [r3, #2]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8013dc6:	697b      	ldr	r3, [r7, #20]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	f042 0204 	orr.w	r2, r2, #4
 8013dce:	711a      	strb	r2, [r3, #4]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	715a      	strb	r2, [r3, #5]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	719a      	strb	r2, [r3, #6]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	3308      	adds	r3, #8
 8013de0:	f107 0108 	add.w	r1, r7, #8
 8013de4:	2208      	movs	r2, #8
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7ff ff65 	bl	8013cb6 <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 8013df2:	683a      	ldr	r2, [r7, #0]
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8013df8:	f7f8 fbce 	bl	800c598 <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 8013dfc:	f7ff ffa2 	bl	8013d44 <zb_ipc_m4_get_retval>
 8013e00:	4603      	mov	r3, r0
 8013e02:	461a      	mov	r2, r3
 8013e04:	4b0a      	ldr	r3, [pc, #40]	; (8013e30 <ZbInit+0xa4>)
 8013e06:	601a      	str	r2, [r3, #0]
    if (setLogging != NULL) {
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d007      	beq.n	8013e1e <ZbInit+0x92>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	4a07      	ldr	r2, [pc, #28]	; (8013e30 <ZbInit+0xa4>)
 8013e14:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4a05      	ldr	r2, [pc, #20]	; (8013e30 <ZbInit+0xa4>)
 8013e1c:	6093      	str	r3, [r2, #8]
    }
    Post_ZigbeeCmdProcessing();
 8013e1e:	f7ff f9a5 	bl	801316c <Post_ZigbeeCmdProcessing>
    return zb_ipc_globals.zb;
 8013e22:	4b03      	ldr	r3, [pc, #12]	; (8013e30 <ZbInit+0xa4>)
 8013e24:	681b      	ldr	r3, [r3, #0]
}
 8013e26:	4618      	mov	r0, r3
 8013e28:	3718      	adds	r7, #24
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
 8013e2e:	bf00      	nop
 8013e30:	20001a3c 	.word	0x20001a3c

08013e34 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b086      	sub	sp, #24
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	60f8      	str	r0, [r7, #12]
 8013e3c:	60b9      	str	r1, [r7, #8]
 8013e3e:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8013e40:	f7f8 fbe8 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013e44:	f7f8 fb78 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013e48:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	f042 0213 	orr.w	r2, r2, #19
 8013e52:	701a      	strb	r2, [r3, #0]
 8013e54:	2200      	movs	r2, #0
 8013e56:	705a      	strb	r2, [r3, #1]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	709a      	strb	r2, [r3, #2]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	2200      	movs	r2, #0
 8013e64:	f042 0202 	orr.w	r2, r2, #2
 8013e68:	711a      	strb	r2, [r3, #4]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	715a      	strb	r2, [r3, #5]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	719a      	strb	r2, [r3, #6]
 8013e72:	2200      	movs	r2, #0
 8013e74:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 8013e76:	697b      	ldr	r3, [r7, #20]
 8013e78:	68ba      	ldr	r2, [r7, #8]
 8013e7a:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 8013e7c:	4b0c      	ldr	r3, [pc, #48]	; (8013eb0 <ZbSetLogging+0x7c>)
 8013e7e:	7b1b      	ldrb	r3, [r3, #12]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d102      	bne.n	8013e8a <ZbSetLogging+0x56>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <ZbSetLogging+0x5a>
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	e000      	b.n	8013e90 <ZbSetLogging+0x5c>
 8013e8e:	2200      	movs	r2, #0
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013e94:	f7f8 fb80 	bl	800c598 <ZIGBEE_CmdTransfer>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 8013e98:	4a05      	ldr	r2, [pc, #20]	; (8013eb0 <ZbSetLogging+0x7c>)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 8013e9e:	4a04      	ldr	r2, [pc, #16]	; (8013eb0 <ZbSetLogging+0x7c>)
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	6093      	str	r3, [r2, #8]
    Post_ZigbeeCmdProcessing();
 8013ea4:	f7ff f962 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 8013ea8:	bf00      	nop
 8013eaa:	3718      	adds	r7, #24
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	20001a3c 	.word	0x20001a3c

08013eb4 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b086      	sub	sp, #24
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 8013ebc:	f04f 0200 	mov.w	r2, #0
 8013ec0:	f04f 0300 	mov.w	r3, #0
 8013ec4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 8013ec8:	f7f8 fba4 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013ecc:	f7f8 fb34 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013ed0:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	f042 020e 	orr.w	r2, r2, #14
 8013eda:	701a      	strb	r2, [r3, #0]
 8013edc:	2200      	movs	r2, #0
 8013ede:	705a      	strb	r2, [r3, #1]
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	709a      	strb	r2, [r3, #2]
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	2200      	movs	r2, #0
 8013eec:	711a      	strb	r2, [r3, #4]
 8013eee:	2200      	movs	r2, #0
 8013ef0:	715a      	strb	r2, [r3, #5]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	719a      	strb	r2, [r3, #6]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 8013efa:	f7f8 fb4d 	bl	800c598 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 8013efe:	f7f8 fb27 	bl	800c550 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 8013f02:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	685b      	ldr	r3, [r3, #4]
 8013f08:	2b02      	cmp	r3, #2
 8013f0a:	d006      	beq.n	8013f1a <ZbExtendedAddress+0x66>
 8013f0c:	4b0c      	ldr	r3, [pc, #48]	; (8013f40 <ZbExtendedAddress+0x8c>)
 8013f0e:	4a0d      	ldr	r2, [pc, #52]	; (8013f44 <ZbExtendedAddress+0x90>)
 8013f10:	f240 11c9 	movw	r1, #457	; 0x1c9
 8013f14:	480c      	ldr	r0, [pc, #48]	; (8013f48 <ZbExtendedAddress+0x94>)
 8013f16:	f003 fda5 	bl	8017a64 <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	f103 0108 	add.w	r1, r3, #8
 8013f20:	f107 0308 	add.w	r3, r7, #8
 8013f24:	2208      	movs	r2, #8
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7ff fec5 	bl	8013cb6 <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 8013f2c:	f7ff f91e 	bl	801316c <Post_ZigbeeCmdProcessing>
    return ext_addr;
 8013f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8013f34:	4610      	mov	r0, r2
 8013f36:	4619      	mov	r1, r3
 8013f38:	3718      	adds	r7, #24
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	0801a5f0 	.word	0x0801a5f0
 8013f44:	0801ac24 	.word	0x0801ac24
 8013f48:	0801a578 	.word	0x0801a578

08013f4c <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b084      	sub	sp, #16
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 8013f54:	2300      	movs	r3, #0
 8013f56:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 8013f58:	f107 020e 	add.w	r2, r7, #14
 8013f5c:	2302      	movs	r3, #2
 8013f5e:	2196      	movs	r1, #150	; 0x96
 8013f60:	6878      	ldr	r0, [r7, #4]
 8013f62:	f000 fd9f 	bl	8014aa4 <ZbNwkGet>
    return nwkAddr;
 8013f66:	89fb      	ldrh	r3, [r7, #14]
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3710      	adds	r7, #16
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <ZbStartupConfigGetProDefaults>:
    Post_ZigbeeCmdProcessing();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b084      	sub	sp, #16
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8013f78:	f7f8 fb4c 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013f7c:	f7f8 fadc 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013f80:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	2200      	movs	r2, #0
 8013f86:	f042 021b 	orr.w	r2, r2, #27
 8013f8a:	701a      	strb	r2, [r3, #0]
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	705a      	strb	r2, [r3, #1]
 8013f90:	2200      	movs	r2, #0
 8013f92:	709a      	strb	r2, [r3, #2]
 8013f94:	2200      	movs	r2, #0
 8013f96:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	f042 0201 	orr.w	r2, r2, #1
 8013fa0:	711a      	strb	r2, [r3, #4]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	715a      	strb	r2, [r3, #5]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	719a      	strb	r2, [r3, #6]
 8013faa:	2200      	movs	r2, #0
 8013fac:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8013fb4:	f7f8 faf0 	bl	800c598 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013fb8:	f7ff f8d8 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 8013fbc:	bf00      	nop
 8013fbe:	3710      	adds	r7, #16
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}

08013fc4 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b088      	sub	sp, #32
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	607a      	str	r2, [r7, #4]
 8013fd0:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT          error_status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8013fd2:	6839      	ldr	r1, [r7, #0]
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7ff fe8d 	bl	8013cf4 <zb_ipc_m4_cb_info_alloc>
 8013fda:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 8013fdc:	69fb      	ldr	r3, [r7, #28]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d101      	bne.n	8013fe6 <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8013fe2:	2370      	movs	r3, #112	; 0x70
 8013fe4:	e030      	b.n	8014048 <ZbStartup+0x84>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	461a      	mov	r2, r3
 8013ff0:	4b17      	ldr	r3, [pc, #92]	; (8014050 <ZbStartup+0x8c>)
 8013ff2:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 8013ff4:	f7f8 fb0e 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013ff8:	f7f8 fa9e 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013ffc:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	2200      	movs	r2, #0
 8014002:	f042 021c 	orr.w	r2, r2, #28
 8014006:	701a      	strb	r2, [r3, #0]
 8014008:	2200      	movs	r2, #0
 801400a:	705a      	strb	r2, [r3, #1]
 801400c:	2200      	movs	r2, #0
 801400e:	709a      	strb	r2, [r3, #2]
 8014010:	2200      	movs	r2, #0
 8014012:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014014:	69bb      	ldr	r3, [r7, #24]
 8014016:	2200      	movs	r2, #0
 8014018:	f042 0202 	orr.w	r2, r2, #2
 801401c:	711a      	strb	r2, [r3, #4]
 801401e:	2200      	movs	r2, #0
 8014020:	715a      	strb	r2, [r3, #5]
 8014022:	2200      	movs	r2, #0
 8014024:	719a      	strb	r2, [r3, #6]
 8014026:	2200      	movs	r2, #0
 8014028:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 801402a:	68ba      	ldr	r2, [r7, #8]
 801402c:	69bb      	ldr	r3, [r7, #24]
 801402e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8014030:	69fa      	ldr	r2, [r7, #28]
 8014032:	69bb      	ldr	r3, [r7, #24]
 8014034:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014036:	f7f8 faaf 	bl	800c598 <ZIGBEE_CmdTransfer>

    error_status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 801403a:	f7ff fe83 	bl	8013d44 <zb_ipc_m4_get_retval>
 801403e:	4603      	mov	r3, r0
 8014040:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8014042:	f7ff f893 	bl	801316c <Post_ZigbeeCmdProcessing>
    return error_status;
 8014046:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 8014048:	4618      	mov	r0, r3
 801404a:	3720      	adds	r7, #32
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}
 8014050:	20001a28 	.word	0x20001a28

08014054 <ZbStartupPersist>:

enum ZbStatusCodeT
ZbStartupPersist(struct ZigBeeT *zb, const void *pdata, unsigned int plen,
    struct ZbStartupCbkeT *cbke_config,
    void (*callback)(enum ZbStatusCodeT status, void *arg), void *arg)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b088      	sub	sp, #32
 8014058:	af00      	add	r7, sp, #0
 801405a:	60f8      	str	r0, [r7, #12]
 801405c:	60b9      	str	r1, [r7, #8]
 801405e:	607a      	str	r2, [r7, #4]
 8014060:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8014062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014066:	f7ff fe45 	bl	8013cf4 <zb_ipc_m4_cb_info_alloc>
 801406a:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 801406c:	69fb      	ldr	r3, [r7, #28]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d101      	bne.n	8014076 <ZbStartupPersist+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8014072:	2370      	movs	r3, #112	; 0x70
 8014074:	e035      	b.n	80140e2 <ZbStartupPersist+0x8e>
    }
    Pre_ZigbeeCmdProcessing();
 8014076:	f7f8 facd 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801407a:	f7f8 fa5d 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801407e:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_PERSIST;
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	2200      	movs	r2, #0
 8014084:	f042 0220 	orr.w	r2, r2, #32
 8014088:	701a      	strb	r2, [r3, #0]
 801408a:	2200      	movs	r2, #0
 801408c:	705a      	strb	r2, [r3, #1]
 801408e:	2200      	movs	r2, #0
 8014090:	709a      	strb	r2, [r3, #2]
 8014092:	2200      	movs	r2, #0
 8014094:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8014096:	69bb      	ldr	r3, [r7, #24]
 8014098:	2200      	movs	r2, #0
 801409a:	f042 0204 	orr.w	r2, r2, #4
 801409e:	711a      	strb	r2, [r3, #4]
 80140a0:	2200      	movs	r2, #0
 80140a2:	715a      	strb	r2, [r3, #5]
 80140a4:	2200      	movs	r2, #0
 80140a6:	719a      	strb	r2, [r3, #6]
 80140a8:	2200      	movs	r2, #0
 80140aa:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)pdata;
 80140ac:	68ba      	ldr	r2, [r7, #8]
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)plen;
 80140b2:	69bb      	ldr	r3, [r7, #24]
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cbke_config;
 80140b8:	683a      	ldr	r2, [r7, #0]
 80140ba:	69bb      	ldr	r3, [r7, #24]
 80140bc:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)info;
 80140be:	69fa      	ldr	r2, [r7, #28]
 80140c0:	69bb      	ldr	r3, [r7, #24]
 80140c2:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 80140c4:	f7f8 fa68 	bl	800c598 <ZIGBEE_CmdTransfer>
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 80140c8:	f7ff fe3c 	bl	8013d44 <zb_ipc_m4_get_retval>
 80140cc:	4603      	mov	r3, r0
 80140ce:	75fb      	strb	r3, [r7, #23]
    if (status != ZB_STATUS_SUCCESS) {
 80140d0:	7dfb      	ldrb	r3, [r7, #23]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d002      	beq.n	80140dc <ZbStartupPersist+0x88>
        zb_ipc_m4_cb_info_free(info);
 80140d6:	69f8      	ldr	r0, [r7, #28]
 80140d8:	f7ff fe29 	bl	8013d2e <zb_ipc_m4_cb_info_free>
    }
    Post_ZigbeeCmdProcessing();
 80140dc:	f7ff f846 	bl	801316c <Post_ZigbeeCmdProcessing>
    return status;
 80140e0:	7dfb      	ldrb	r3, [r7, #23]
    /* If ZB_STATUS_SUCECSS, followed up in MSG_M0TOM4_STARTUP_PERSIST_CB handler */
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	3720      	adds	r7, #32
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
	...

080140ec <ZbPersistNotifyRegister>:
    /* Followed up in MSG_M0TOM4_STARTUP_TC_REJOIN_CB handler */
}

bool
ZbPersistNotifyRegister(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cbarg), void *cbarg)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b086      	sub	sp, #24
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	60f8      	str	r0, [r7, #12]
 80140f4:	60b9      	str	r1, [r7, #8]
 80140f6:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool result;

    Pre_ZigbeeCmdProcessing();
 80140f8:	f7f8 fa8c 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80140fc:	f7f8 fa1c 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014100:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_PERSIST_ENABLE;
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	2200      	movs	r2, #0
 8014106:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 801410a:	701a      	strb	r2, [r3, #0]
 801410c:	2200      	movs	r2, #0
 801410e:	705a      	strb	r2, [r3, #1]
 8014110:	2200      	movs	r2, #0
 8014112:	709a      	strb	r2, [r3, #2]
 8014114:	2200      	movs	r2, #0
 8014116:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	2200      	movs	r2, #0
 801411c:	711a      	strb	r2, [r3, #4]
 801411e:	2200      	movs	r2, #0
 8014120:	715a      	strb	r2, [r3, #5]
 8014122:	2200      	movs	r2, #0
 8014124:	719a      	strb	r2, [r3, #6]
 8014126:	2200      	movs	r2, #0
 8014128:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 801412a:	f7f8 fa35 	bl	800c598 <ZIGBEE_CmdTransfer>
    result = zb_ipc_m4_get_retval() != 0U ? true : false;
 801412e:	f7ff fe09 	bl	8013d44 <zb_ipc_m4_get_retval>
 8014132:	4603      	mov	r3, r0
 8014134:	2b00      	cmp	r3, #0
 8014136:	bf14      	ite	ne
 8014138:	2301      	movne	r3, #1
 801413a:	2300      	moveq	r3, #0
 801413c:	74fb      	strb	r3, [r7, #19]
    if (result) {
 801413e:	7cfb      	ldrb	r3, [r7, #19]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d006      	beq.n	8014152 <ZbPersistNotifyRegister+0x66>
        zb_persist_arg = cbarg;
 8014144:	4a09      	ldr	r2, [pc, #36]	; (801416c <ZbPersistNotifyRegister+0x80>)
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6013      	str	r3, [r2, #0]
        zb_persist_cb = callback;
 801414a:	4a09      	ldr	r2, [pc, #36]	; (8014170 <ZbPersistNotifyRegister+0x84>)
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	6013      	str	r3, [r2, #0]
 8014150:	e005      	b.n	801415e <ZbPersistNotifyRegister+0x72>
    }
    else {
        zb_persist_arg = NULL;
 8014152:	4b06      	ldr	r3, [pc, #24]	; (801416c <ZbPersistNotifyRegister+0x80>)
 8014154:	2200      	movs	r2, #0
 8014156:	601a      	str	r2, [r3, #0]
        zb_persist_cb = NULL;
 8014158:	4b05      	ldr	r3, [pc, #20]	; (8014170 <ZbPersistNotifyRegister+0x84>)
 801415a:	2200      	movs	r2, #0
 801415c:	601a      	str	r2, [r3, #0]
    }
    Post_ZigbeeCmdProcessing();
 801415e:	f7ff f805 	bl	801316c <Post_ZigbeeCmdProcessing>
    return result;
 8014162:	7cfb      	ldrb	r3, [r7, #19]
    /* Followed up by M0 calls to MSG_M0TOM4_PERSIST_CB */
}
 8014164:	4618      	mov	r0, r3
 8014166:	3718      	adds	r7, #24
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}
 801416c:	20001a30 	.word	0x20001a30
 8014170:	20001a2c 	.word	0x20001a2c

08014174 <ZbPersistGet>:

unsigned int
ZbPersistGet(struct ZigBeeT *zb, uint8_t *buf, unsigned int maxlen)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b086      	sub	sp, #24
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t                   res;

    Pre_ZigbeeCmdProcessing();
 8014180:	f7f8 fa48 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014184:	f7f8 f9d8 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014188:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_PERSIST_GET;
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	2200      	movs	r2, #0
 801418e:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
 8014192:	701a      	strb	r2, [r3, #0]
 8014194:	2200      	movs	r2, #0
 8014196:	705a      	strb	r2, [r3, #1]
 8014198:	2200      	movs	r2, #0
 801419a:	709a      	strb	r2, [r3, #2]
 801419c:	2200      	movs	r2, #0
 801419e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	2200      	movs	r2, #0
 80141a4:	f042 0202 	orr.w	r2, r2, #2
 80141a8:	711a      	strb	r2, [r3, #4]
 80141aa:	2200      	movs	r2, #0
 80141ac:	715a      	strb	r2, [r3, #5]
 80141ae:	2200      	movs	r2, #0
 80141b0:	719a      	strb	r2, [r3, #6]
 80141b2:	2200      	movs	r2, #0
 80141b4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)buf;
 80141b6:	68ba      	ldr	r2, [r7, #8]
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)maxlen;
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80141c2:	f7f8 f9e9 	bl	800c598 <ZIGBEE_CmdTransfer>
    res = zb_ipc_m4_get_retval();
 80141c6:	f7ff fdbd 	bl	8013d44 <zb_ipc_m4_get_retval>
 80141ca:	6138      	str	r0, [r7, #16]
    Post_ZigbeeCmdProcessing();
 80141cc:	f7fe ffce 	bl	801316c <Post_ZigbeeCmdProcessing>
    return (unsigned int) res;
 80141d0:	693b      	ldr	r3, [r7, #16]
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3718      	adds	r7, #24
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}

080141da <ZbReset>:
    /* Followed up in MSG_M0TOM4_ZB_LEAVE_CB handler */
}

void
ZbReset(struct ZigBeeT *zb)
{
 80141da:	b580      	push	{r7, lr}
 80141dc:	b084      	sub	sp, #16
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80141e2:	f7f8 fa17 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80141e6:	f7f8 f9a7 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80141ea:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZB_RESET_REQ;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	2200      	movs	r2, #0
 80141f0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80141f4:	701a      	strb	r2, [r3, #0]
 80141f6:	2200      	movs	r2, #0
 80141f8:	705a      	strb	r2, [r3, #1]
 80141fa:	2200      	movs	r2, #0
 80141fc:	709a      	strb	r2, [r3, #2]
 80141fe:	2200      	movs	r2, #0
 8014200:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	2200      	movs	r2, #0
 8014206:	711a      	strb	r2, [r3, #4]
 8014208:	2200      	movs	r2, #0
 801420a:	715a      	strb	r2, [r3, #5]
 801420c:	2200      	movs	r2, #0
 801420e:	719a      	strb	r2, [r3, #6]
 8014210:	2200      	movs	r2, #0
 8014212:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 8014214:	f7f8 f9c0 	bl	800c598 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014218:	f7fe ffa8 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 801421c:	bf00      	nop
 801421e:	3710      	adds	r7, #16
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b08c      	sub	sp, #48	; 0x30
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	607a      	str	r2, [r7, #4]
 801422e:	603b      	str	r3, [r7, #0]
 8014230:	460b      	mov	r3, r1
 8014232:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT   bdbGetReq;
    struct ZbBdbGetConfT  bdbGetConf;
    enum ZbStatusCodeT    error_code;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 8014234:	897b      	ldrh	r3, [r7, #10]
 8014236:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 8014240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014242:	627b      	str	r3, [r7, #36]	; 0x24

    Pre_ZigbeeCmdProcessing();
 8014244:	f7f8 f9e6 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014248:	f7f8 f976 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801424c:	62f8      	str	r0, [r7, #44]	; 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 801424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014250:	2200      	movs	r2, #0
 8014252:	701a      	strb	r2, [r3, #0]
 8014254:	2200      	movs	r2, #0
 8014256:	f042 0202 	orr.w	r2, r2, #2
 801425a:	705a      	strb	r2, [r3, #1]
 801425c:	2200      	movs	r2, #0
 801425e:	709a      	strb	r2, [r3, #2]
 8014260:	2200      	movs	r2, #0
 8014262:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014266:	2200      	movs	r2, #0
 8014268:	f042 0202 	orr.w	r2, r2, #2
 801426c:	711a      	strb	r2, [r3, #4]
 801426e:	2200      	movs	r2, #0
 8014270:	715a      	strb	r2, [r3, #5]
 8014272:	2200      	movs	r2, #0
 8014274:	719a      	strb	r2, [r3, #6]
 8014276:	2200      	movs	r2, #0
 8014278:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 801427a:	f107 0218 	add.w	r2, r7, #24
 801427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014280:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 8014282:	f107 0214 	add.w	r2, r7, #20
 8014286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014288:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801428a:	f7f8 f985 	bl	800c598 <ZIGBEE_CmdTransfer>
    error_code = (enum ZbStatusCodeT)bdbGetConf.status;
 801428e:	7d3b      	ldrb	r3, [r7, #20]
 8014290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    Post_ZigbeeCmdProcessing();
 8014294:	f7fe ff6a 	bl	801316c <Post_ZigbeeCmdProcessing>
    return error_code;
 8014298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801429c:	4618      	mov	r0, r3
 801429e:	3730      	adds	r7, #48	; 0x30
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <aps_req_sanity_check>:
/* arbitrary, but even with fragmentation we can't send packets longer than this */
#define APS_REQ_BUFV_ELEM_MAX_LEN       2048U

static bool
aps_req_sanity_check(struct ZbApsdeDataReqT *req)
{
 80142a4:	b480      	push	{r7}
 80142a6:	b087      	sub	sp, #28
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
    if ((req->txOptions & ((uint16_t)ZB_APSDE_DATAREQ_TXOPTIONS_VECTOR)) != 0U) {
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80142b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d02e      	beq.n	8014316 <aps_req_sanity_check+0x72>
        const struct ZbApsBufT *bufv;
        unsigned int i, length;

        if (req->asduLength > APS_REQ_BUFV_NUM_ELEM_MAX) {
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	8b9b      	ldrh	r3, [r3, #28]
 80142bc:	2b10      	cmp	r3, #16
 80142be:	d901      	bls.n	80142c4 <aps_req_sanity_check+0x20>
            return false;
 80142c0:	2300      	movs	r3, #0
 80142c2:	e030      	b.n	8014326 <aps_req_sanity_check+0x82>
        }

        bufv = (const struct ZbApsBufT *)req->asdu;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	699b      	ldr	r3, [r3, #24]
 80142c8:	60fb      	str	r3, [r7, #12]
        length = 0;
 80142ca:	2300      	movs	r3, #0
 80142cc:	613b      	str	r3, [r7, #16]
        for (i = 0; i < req->asduLength; i++) {
 80142ce:	2300      	movs	r3, #0
 80142d0:	617b      	str	r3, [r7, #20]
 80142d2:	e014      	b.n	80142fe <aps_req_sanity_check+0x5a>
            if (bufv[i].len > APS_REQ_BUFV_ELEM_MAX_LEN) {
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	00db      	lsls	r3, r3, #3
 80142d8:	68fa      	ldr	r2, [r7, #12]
 80142da:	4413      	add	r3, r2
 80142dc:	685b      	ldr	r3, [r3, #4]
 80142de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80142e2:	d901      	bls.n	80142e8 <aps_req_sanity_check+0x44>
                return false;
 80142e4:	2300      	movs	r3, #0
 80142e6:	e01e      	b.n	8014326 <aps_req_sanity_check+0x82>
            }
            length += bufv[i].len;
 80142e8:	697b      	ldr	r3, [r7, #20]
 80142ea:	00db      	lsls	r3, r3, #3
 80142ec:	68fa      	ldr	r2, [r7, #12]
 80142ee:	4413      	add	r3, r2
 80142f0:	685b      	ldr	r3, [r3, #4]
 80142f2:	693a      	ldr	r2, [r7, #16]
 80142f4:	4413      	add	r3, r2
 80142f6:	613b      	str	r3, [r7, #16]
        for (i = 0; i < req->asduLength; i++) {
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	3301      	adds	r3, #1
 80142fc:	617b      	str	r3, [r7, #20]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	8b9b      	ldrh	r3, [r3, #28]
 8014302:	461a      	mov	r2, r3
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	4293      	cmp	r3, r2
 8014308:	d3e4      	bcc.n	80142d4 <aps_req_sanity_check+0x30>
        }
        if (length > APS_REQ_BUFV_ELEM_MAX_LEN) {
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014310:	d908      	bls.n	8014324 <aps_req_sanity_check+0x80>
            return false;
 8014312:	2300      	movs	r3, #0
 8014314:	e007      	b.n	8014326 <aps_req_sanity_check+0x82>
        }
    }
    else {
        if (req->asduLength > APS_REQ_BUFV_ELEM_MAX_LEN) {
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	8b9b      	ldrh	r3, [r3, #28]
 801431a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801431e:	d901      	bls.n	8014324 <aps_req_sanity_check+0x80>
            return false;
 8014320:	2300      	movs	r3, #0
 8014322:	e000      	b.n	8014326 <aps_req_sanity_check+0x82>
        }
    }
    return true;
 8014324:	2301      	movs	r3, #1
}
 8014326:	4618      	mov	r0, r3
 8014328:	371c      	adds	r7, #28
 801432a:	46bd      	mov	sp, r7
 801432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014330:	4770      	bx	lr
	...

08014334 <ZbApsdeDataReqCallback>:

enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b088      	sub	sp, #32
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	60b9      	str	r1, [r7, #8]
 801433e:	607a      	str	r2, [r7, #4]
 8014340:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;
    struct zb_ipc_m4_cb_info_t *info;

    /* Sanity check request before we send it across the IPCC */
    if (!aps_req_sanity_check(req)) {
 8014342:	68b8      	ldr	r0, [r7, #8]
 8014344:	f7ff ffae 	bl	80142a4 <aps_req_sanity_check>
 8014348:	4603      	mov	r3, r0
 801434a:	f083 0301 	eor.w	r3, r3, #1
 801434e:	b2db      	uxtb	r3, r3
 8014350:	2b00      	cmp	r3, #0
 8014352:	d006      	beq.n	8014362 <ZbApsdeDataReqCallback+0x2e>
        assert(false);
 8014354:	4b23      	ldr	r3, [pc, #140]	; (80143e4 <ZbApsdeDataReqCallback+0xb0>)
 8014356:	4a24      	ldr	r2, [pc, #144]	; (80143e8 <ZbApsdeDataReqCallback+0xb4>)
 8014358:	f240 415c 	movw	r1, #1116	; 0x45c
 801435c:	4823      	ldr	r0, [pc, #140]	; (80143ec <ZbApsdeDataReqCallback+0xb8>)
 801435e:	f003 fb81 	bl	8017a64 <__assert_func>
        return ZB_APS_STATUS_ILLEGAL_REQUEST;
    }

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8014362:	6839      	ldr	r1, [r7, #0]
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f7ff fcc5 	bl	8013cf4 <zb_ipc_m4_cb_info_alloc>
 801436a:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 801436c:	69fb      	ldr	r3, [r7, #28]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d101      	bne.n	8014376 <ZbApsdeDataReqCallback+0x42>
        return ZB_STATUS_ALLOC_FAIL;
 8014372:	2370      	movs	r3, #112	; 0x70
 8014374:	e031      	b.n	80143da <ZbApsdeDataReqCallback+0xa6>
    }
    Pre_ZigbeeCmdProcessing();
 8014376:	f7f8 f94d 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801437a:	f7f8 f8dd 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801437e:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 8014380:	69bb      	ldr	r3, [r7, #24]
 8014382:	2200      	movs	r2, #0
 8014384:	f042 0204 	orr.w	r2, r2, #4
 8014388:	701a      	strb	r2, [r3, #0]
 801438a:	2200      	movs	r2, #0
 801438c:	f042 0202 	orr.w	r2, r2, #2
 8014390:	705a      	strb	r2, [r3, #1]
 8014392:	2200      	movs	r2, #0
 8014394:	709a      	strb	r2, [r3, #2]
 8014396:	2200      	movs	r2, #0
 8014398:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801439a:	69bb      	ldr	r3, [r7, #24]
 801439c:	2200      	movs	r2, #0
 801439e:	f042 0202 	orr.w	r2, r2, #2
 80143a2:	711a      	strb	r2, [r3, #4]
 80143a4:	2200      	movs	r2, #0
 80143a6:	715a      	strb	r2, [r3, #5]
 80143a8:	2200      	movs	r2, #0
 80143aa:	719a      	strb	r2, [r3, #6]
 80143ac:	2200      	movs	r2, #0
 80143ae:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 80143b0:	68ba      	ldr	r2, [r7, #8]
 80143b2:	69bb      	ldr	r3, [r7, #24]
 80143b4:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 80143b6:	69fa      	ldr	r2, [r7, #28]
 80143b8:	69bb      	ldr	r3, [r7, #24]
 80143ba:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80143bc:	f7f8 f8ec 	bl	800c598 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    retval = zb_ipc_m4_get_retval();
 80143c0:	f7ff fcc0 	bl	8013d44 <zb_ipc_m4_get_retval>
 80143c4:	6178      	str	r0, [r7, #20]
    if (retval != 0x00) {
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d002      	beq.n	80143d2 <ZbApsdeDataReqCallback+0x9e>
        zb_ipc_m4_cb_info_free(info);
 80143cc:	69f8      	ldr	r0, [r7, #28]
 80143ce:	f7ff fcae 	bl	8013d2e <zb_ipc_m4_cb_info_free>
    }
    Post_ZigbeeCmdProcessing();
 80143d2:	f7fe fecb 	bl	801316c <Post_ZigbeeCmdProcessing>
    return (enum ZbStatusCodeT)retval;
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	b2db      	uxtb	r3, r3
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 80143da:	4618      	mov	r0, r3
 80143dc:	3720      	adds	r7, #32
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}
 80143e2:	bf00      	nop
 80143e4:	0801a604 	.word	0x0801a604
 80143e8:	0801ac38 	.word	0x0801ac38
 80143ec:	0801a578 	.word	0x0801a578

080143f0 <ZbApsEndpointProfile>:
    return bool_result;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b084      	sub	sp, #16
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	460b      	mov	r3, r1
 80143fa:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t              val_ret;

    Pre_ZigbeeCmdProcessing();
 80143fc:	f7f8 f90a 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014400:	f7f8 f89a 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014404:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	2200      	movs	r2, #0
 801440a:	f042 020d 	orr.w	r2, r2, #13
 801440e:	701a      	strb	r2, [r3, #0]
 8014410:	2200      	movs	r2, #0
 8014412:	f042 0202 	orr.w	r2, r2, #2
 8014416:	705a      	strb	r2, [r3, #1]
 8014418:	2200      	movs	r2, #0
 801441a:	709a      	strb	r2, [r3, #2]
 801441c:	2200      	movs	r2, #0
 801441e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2200      	movs	r2, #0
 8014424:	f042 0201 	orr.w	r2, r2, #1
 8014428:	711a      	strb	r2, [r3, #4]
 801442a:	2200      	movs	r2, #0
 801442c:	715a      	strb	r2, [r3, #5]
 801442e:	2200      	movs	r2, #0
 8014430:	719a      	strb	r2, [r3, #6]
 8014432:	2200      	movs	r2, #0
 8014434:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 8014436:	78fa      	ldrb	r2, [r7, #3]
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801443c:	f7f8 f8ac 	bl	800c598 <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 8014440:	f7ff fc80 	bl	8013d44 <zb_ipc_m4_get_retval>
 8014444:	4603      	mov	r3, r0
 8014446:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 8014448:	f7fe fe90 	bl	801316c <Post_ZigbeeCmdProcessing>
    return val_ret;
 801444c:	897b      	ldrh	r3, [r7, #10]
}
 801444e:	4618      	mov	r0, r3
 8014450:	3710      	adds	r7, #16
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}

08014456 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 8014456:	b480      	push	{r7}
 8014458:	b083      	sub	sp, #12
 801445a:	af00      	add	r7, sp, #0
 801445c:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	781b      	ldrb	r3, [r3, #0]
 8014462:	2b01      	cmp	r3, #1
 8014464:	d101      	bne.n	801446a <ZbApsAddrIsBcast+0x14>
        return true;
 8014466:	2301      	movs	r3, #1
 8014468:	e012      	b.n	8014490 <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	781b      	ldrb	r3, [r3, #0]
 801446e:	2b02      	cmp	r3, #2
 8014470:	d10d      	bne.n	801448e <ZbApsAddrIsBcast+0x38>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	88db      	ldrh	r3, [r3, #6]
 8014476:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801447a:	4293      	cmp	r3, r2
 801447c:	d907      	bls.n	801448e <ZbApsAddrIsBcast+0x38>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	88db      	ldrh	r3, [r3, #6]
 8014482:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014486:	4293      	cmp	r3, r2
 8014488:	d001      	beq.n	801448e <ZbApsAddrIsBcast+0x38>
        return true;
 801448a:	2301      	movs	r3, #1
 801448c:	e000      	b.n	8014490 <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 801448e:	2300      	movs	r3, #0
}
 8014490:	4618      	mov	r0, r3
 8014492:	370c      	adds	r7, #12
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr

0801449c <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 801449c:	b5b0      	push	{r4, r5, r7, lr}
 801449e:	b082      	sub	sp, #8
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
 80144a4:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 80144a6:	683b      	ldr	r3, [r7, #0]
 80144a8:	781b      	ldrb	r3, [r3, #0]
 80144aa:	2b03      	cmp	r3, #3
 80144ac:	d10d      	bne.n	80144ca <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f7ff fcfd 	bl	8013eb4 <ZbExtendedAddress>
 80144ba:	4602      	mov	r2, r0
 80144bc:	460b      	mov	r3, r1
 80144be:	429d      	cmp	r5, r3
 80144c0:	bf08      	it	eq
 80144c2:	4294      	cmpeq	r4, r2
 80144c4:	d101      	bne.n	80144ca <ZbApsAddrIsLocal+0x2e>
            return true;
 80144c6:	2301      	movs	r3, #1
 80144c8:	e00e      	b.n	80144e8 <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	2b02      	cmp	r3, #2
 80144d0:	d109      	bne.n	80144e6 <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 80144d2:	683b      	ldr	r3, [r7, #0]
 80144d4:	88dc      	ldrh	r4, [r3, #6]
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f7ff fd38 	bl	8013f4c <ZbShortAddress>
 80144dc:	4603      	mov	r3, r0
 80144de:	429c      	cmp	r4, r3
 80144e0:	d101      	bne.n	80144e6 <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 80144e2:	2301      	movs	r3, #1
 80144e4:	e000      	b.n	80144e8 <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 80144e6:	2300      	movs	r3, #0
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3708      	adds	r7, #8
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bdb0      	pop	{r4, r5, r7, pc}

080144f0 <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b08a      	sub	sp, #40	; 0x28
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	607a      	str	r2, [r7, #4]
 80144fa:	603b      	str	r3, [r7, #0]
 80144fc:	460b      	mov	r3, r1
 80144fe:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 8014500:	897b      	ldrh	r3, [r7, #10]
 8014502:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 801450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801450e:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 8014510:	f7f8 f880 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014514:	f7f8 f810 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014518:	6278      	str	r0, [r7, #36]	; 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 801451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801451c:	2200      	movs	r2, #0
 801451e:	f042 0210 	orr.w	r2, r2, #16
 8014522:	701a      	strb	r2, [r3, #0]
 8014524:	2200      	movs	r2, #0
 8014526:	f042 0202 	orr.w	r2, r2, #2
 801452a:	705a      	strb	r2, [r3, #1]
 801452c:	2200      	movs	r2, #0
 801452e:	709a      	strb	r2, [r3, #2]
 8014530:	2200      	movs	r2, #0
 8014532:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014536:	2200      	movs	r2, #0
 8014538:	f042 0202 	orr.w	r2, r2, #2
 801453c:	711a      	strb	r2, [r3, #4]
 801453e:	2200      	movs	r2, #0
 8014540:	715a      	strb	r2, [r3, #5]
 8014542:	2200      	movs	r2, #0
 8014544:	719a      	strb	r2, [r3, #6]
 8014546:	2200      	movs	r2, #0
 8014548:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 801454a:	f107 0214 	add.w	r2, r7, #20
 801454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014550:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 8014552:	f107 0210 	add.w	r2, r7, #16
 8014556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014558:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801455a:	f7f8 f81d 	bl	800c598 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801455e:	f7fe fe05 	bl	801316c <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 8014562:	7c3b      	ldrb	r3, [r7, #16]
}
 8014564:	4618      	mov	r0, r3
 8014566:	3728      	adds	r7, #40	; 0x28
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 801456c:	b580      	push	{r7, lr}
 801456e:	b086      	sub	sp, #24
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	607a      	str	r2, [r7, #4]
 8014578:	f7f8 f84c 	bl	800c614 <Pre_ZigbeeCmdProcessing>
 801457c:	f7f7 ffdc 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014580:	6178      	str	r0, [r7, #20]
 8014582:	697b      	ldr	r3, [r7, #20]
 8014584:	2200      	movs	r2, #0
 8014586:	f042 0215 	orr.w	r2, r2, #21
 801458a:	701a      	strb	r2, [r3, #0]
 801458c:	2200      	movs	r2, #0
 801458e:	f042 0202 	orr.w	r2, r2, #2
 8014592:	705a      	strb	r2, [r3, #1]
 8014594:	2200      	movs	r2, #0
 8014596:	709a      	strb	r2, [r3, #2]
 8014598:	2200      	movs	r2, #0
 801459a:	70da      	strb	r2, [r3, #3]
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	2200      	movs	r2, #0
 80145a0:	f042 0202 	orr.w	r2, r2, #2
 80145a4:	711a      	strb	r2, [r3, #4]
 80145a6:	2200      	movs	r2, #0
 80145a8:	715a      	strb	r2, [r3, #5]
 80145aa:	2200      	movs	r2, #0
 80145ac:	719a      	strb	r2, [r3, #6]
 80145ae:	2200      	movs	r2, #0
 80145b0:	71da      	strb	r2, [r3, #7]
 80145b2:	68ba      	ldr	r2, [r7, #8]
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	609a      	str	r2, [r3, #8]
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	60da      	str	r2, [r3, #12]
 80145be:	f7f7 ffeb 	bl	800c598 <ZIGBEE_CmdTransfer>
 80145c2:	f7fe fdd3 	bl	801316c <Post_ZigbeeCmdProcessing>
 80145c6:	bf00      	nop
 80145c8:	3718      	adds	r7, #24
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}

080145ce <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 80145ce:	b580      	push	{r7, lr}
 80145d0:	b092      	sub	sp, #72	; 0x48
 80145d2:	af02      	add	r7, sp, #8
 80145d4:	6078      	str	r0, [r7, #4]
 80145d6:	460b      	mov	r3, r1
 80145d8:	70fb      	strb	r3, [r7, #3]
 80145da:	4613      	mov	r3, r2
 80145dc:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f7ff fc68 	bl	8013eb4 <ZbExtendedAddress>
 80145e4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 80145e8:	2300      	movs	r3, #0
 80145ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 80145ec:	f107 0208 	add.w	r2, r7, #8
 80145f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	2320      	movs	r3, #32
 80145f6:	21c1      	movs	r1, #193	; 0xc1
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f7ff ff79 	bl	80144f0 <ZbApsGetIndex>
 80145fe:	4603      	mov	r3, r0
 8014600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 8014604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014608:	2b00      	cmp	r3, #0
 801460a:	d120      	bne.n	801464e <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 801460c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014610:	4313      	orrs	r3, r2
 8014612:	d011      	beq.n	8014638 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 8014614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014618:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801461c:	4299      	cmp	r1, r3
 801461e:	bf08      	it	eq
 8014620:	4290      	cmpeq	r0, r2
 8014622:	d10b      	bne.n	801463c <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 8014624:	7c3b      	ldrb	r3, [r7, #16]
 8014626:	78fa      	ldrb	r2, [r7, #3]
 8014628:	429a      	cmp	r2, r3
 801462a:	d109      	bne.n	8014640 <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 801462c:	8a7b      	ldrh	r3, [r7, #18]
 801462e:	883a      	ldrh	r2, [r7, #0]
 8014630:	429a      	cmp	r2, r3
 8014632:	d107      	bne.n	8014644 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 8014634:	2301      	movs	r3, #1
 8014636:	e00c      	b.n	8014652 <ZbApsBindSrcExists+0x84>
            continue;
 8014638:	bf00      	nop
 801463a:	e004      	b.n	8014646 <ZbApsBindSrcExists+0x78>
            continue;
 801463c:	bf00      	nop
 801463e:	e002      	b.n	8014646 <ZbApsBindSrcExists+0x78>
            continue;
 8014640:	bf00      	nop
 8014642:	e000      	b.n	8014646 <ZbApsBindSrcExists+0x78>
            continue;
 8014644:	bf00      	nop
    for (i = 0;; i++) {
 8014646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014648:	3301      	adds	r3, #1
 801464a:	63fb      	str	r3, [r7, #60]	; 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 801464c:	e7ce      	b.n	80145ec <ZbApsBindSrcExists+0x1e>
            break;
 801464e:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 8014650:	2300      	movs	r3, #0
}
 8014652:	4618      	mov	r0, r3
 8014654:	3740      	adds	r7, #64	; 0x40
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
	...

0801465c <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b088      	sub	sp, #32
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	603b      	str	r3, [r7, #0]
 8014668:	4613      	mov	r3, r2
 801466a:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 801466c:	2300      	movs	r3, #0
 801466e:	61bb      	str	r3, [r7, #24]
 8014670:	e00e      	b.n	8014690 <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 8014672:	69ba      	ldr	r2, [r7, #24]
 8014674:	4613      	mov	r3, r2
 8014676:	005b      	lsls	r3, r3, #1
 8014678:	4413      	add	r3, r2
 801467a:	009b      	lsls	r3, r3, #2
 801467c:	4a28      	ldr	r2, [pc, #160]	; (8014720 <ZbMsgFilterRegister+0xc4>)
 801467e:	4413      	add	r3, r2
 8014680:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 8014682:	69fb      	ldr	r3, [r7, #28]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d006      	beq.n	8014698 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 801468a:	69bb      	ldr	r3, [r7, #24]
 801468c:	3301      	adds	r3, #1
 801468e:	61bb      	str	r3, [r7, #24]
 8014690:	69bb      	ldr	r3, [r7, #24]
 8014692:	2b1f      	cmp	r3, #31
 8014694:	d9ed      	bls.n	8014672 <ZbMsgFilterRegister+0x16>
 8014696:	e000      	b.n	801469a <ZbMsgFilterRegister+0x3e>
            break;
 8014698:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 801469a:	69bb      	ldr	r3, [r7, #24]
 801469c:	2b20      	cmp	r3, #32
 801469e:	d101      	bne.n	80146a4 <ZbMsgFilterRegister+0x48>
        return NULL;
 80146a0:	2300      	movs	r3, #0
 80146a2:	e038      	b.n	8014716 <ZbMsgFilterRegister+0xba>
    }

    Pre_ZigbeeCmdProcessing();
 80146a4:	f7f7 ffb6 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80146a8:	f7f7 ff46 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80146ac:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	2200      	movs	r2, #0
 80146b2:	f042 0210 	orr.w	r2, r2, #16
 80146b6:	701a      	strb	r2, [r3, #0]
 80146b8:	2200      	movs	r2, #0
 80146ba:	705a      	strb	r2, [r3, #1]
 80146bc:	2200      	movs	r2, #0
 80146be:	709a      	strb	r2, [r3, #2]
 80146c0:	2200      	movs	r2, #0
 80146c2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 80146c4:	697b      	ldr	r3, [r7, #20]
 80146c6:	2200      	movs	r2, #0
 80146c8:	f042 0203 	orr.w	r2, r2, #3
 80146cc:	711a      	strb	r2, [r3, #4]
 80146ce:	2200      	movs	r2, #0
 80146d0:	715a      	strb	r2, [r3, #5]
 80146d2:	2200      	movs	r2, #0
 80146d4:	719a      	strb	r2, [r3, #6]
 80146d6:	2200      	movs	r2, #0
 80146d8:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	68ba      	ldr	r2, [r7, #8]
 80146de:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 80146e0:	79fa      	ldrb	r2, [r7, #7]
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 80146e6:	69fa      	ldr	r2, [r7, #28]
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 80146ec:	f7f7 ff54 	bl	800c598 <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 80146f0:	f7ff fb28 	bl	8013d44 <zb_ipc_m4_get_retval>
 80146f4:	4603      	mov	r3, r0
 80146f6:	613b      	str	r3, [r7, #16]
    if (filter != NULL) {
 80146f8:	693b      	ldr	r3, [r7, #16]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d008      	beq.n	8014710 <ZbMsgFilterRegister+0xb4>
        cb_info->filter = filter;
 80146fe:	69fb      	ldr	r3, [r7, #28]
 8014700:	693a      	ldr	r2, [r7, #16]
 8014702:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 8014704:	69fb      	ldr	r3, [r7, #28]
 8014706:	683a      	ldr	r2, [r7, #0]
 8014708:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 801470a:	69fb      	ldr	r3, [r7, #28]
 801470c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801470e:	609a      	str	r2, [r3, #8]
    }
    Post_ZigbeeCmdProcessing();
 8014710:	f7fe fd2c 	bl	801316c <Post_ZigbeeCmdProcessing>
    return filter;
 8014714:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 8014716:	4618      	mov	r0, r3
 8014718:	3720      	adds	r7, #32
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}
 801471e:	bf00      	nop
 8014720:	20001a50 	.word	0x20001a50

08014724 <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b086      	sub	sp, #24
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d046      	beq.n	80147c2 <ZbMsgFilterRemove+0x9e>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8014734:	2300      	movs	r3, #0
 8014736:	613b      	str	r3, [r7, #16]
 8014738:	e00f      	b.n	801475a <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 801473a:	693a      	ldr	r2, [r7, #16]
 801473c:	4613      	mov	r3, r2
 801473e:	005b      	lsls	r3, r3, #1
 8014740:	4413      	add	r3, r2
 8014742:	009b      	lsls	r3, r3, #2
 8014744:	4a22      	ldr	r2, [pc, #136]	; (80147d0 <ZbMsgFilterRemove+0xac>)
 8014746:	4413      	add	r3, r2
 8014748:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	683a      	ldr	r2, [r7, #0]
 8014750:	429a      	cmp	r2, r3
 8014752:	d006      	beq.n	8014762 <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	3301      	adds	r3, #1
 8014758:	613b      	str	r3, [r7, #16]
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	2b1f      	cmp	r3, #31
 801475e:	d9ec      	bls.n	801473a <ZbMsgFilterRemove+0x16>
 8014760:	e000      	b.n	8014764 <ZbMsgFilterRemove+0x40>
            break;
 8014762:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	2b20      	cmp	r3, #32
 8014768:	d02d      	beq.n	80147c6 <ZbMsgFilterRemove+0xa2>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 801476a:	f7f7 ff53 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801476e:	f7f7 fee3 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014772:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	2200      	movs	r2, #0
 8014778:	f042 0211 	orr.w	r2, r2, #17
 801477c:	701a      	strb	r2, [r3, #0]
 801477e:	2200      	movs	r2, #0
 8014780:	705a      	strb	r2, [r3, #1]
 8014782:	2200      	movs	r2, #0
 8014784:	709a      	strb	r2, [r3, #2]
 8014786:	2200      	movs	r2, #0
 8014788:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	2200      	movs	r2, #0
 801478e:	f042 0201 	orr.w	r2, r2, #1
 8014792:	711a      	strb	r2, [r3, #4]
 8014794:	2200      	movs	r2, #0
 8014796:	715a      	strb	r2, [r3, #5]
 8014798:	2200      	movs	r2, #0
 801479a:	719a      	strb	r2, [r3, #6]
 801479c:	2200      	movs	r2, #0
 801479e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 80147a0:	683a      	ldr	r2, [r7, #0]
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80147a6:	f7f7 fef7 	bl	800c598 <ZIGBEE_CmdTransfer>
    cb_info->filter = NULL;
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	2200      	movs	r2, #0
 80147ae:	701a      	strb	r2, [r3, #0]
 80147b0:	2200      	movs	r2, #0
 80147b2:	705a      	strb	r2, [r3, #1]
 80147b4:	2200      	movs	r2, #0
 80147b6:	709a      	strb	r2, [r3, #2]
 80147b8:	2200      	movs	r2, #0
 80147ba:	70da      	strb	r2, [r3, #3]
    Post_ZigbeeCmdProcessing();
 80147bc:	f7fe fcd6 	bl	801316c <Post_ZigbeeCmdProcessing>
 80147c0:	e002      	b.n	80147c8 <ZbMsgFilterRemove+0xa4>
        return;
 80147c2:	bf00      	nop
 80147c4:	e000      	b.n	80147c8 <ZbMsgFilterRemove+0xa4>
        return;
 80147c6:	bf00      	nop
}
 80147c8:	3718      	adds	r7, #24
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	20001a50 	.word	0x20001a50

080147d4 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b086      	sub	sp, #24
 80147d8:	af00      	add	r7, sp, #0
 80147da:	60f8      	str	r0, [r7, #12]
 80147dc:	60b9      	str	r1, [r7, #8]
 80147de:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 80147e0:	2300      	movs	r3, #0
 80147e2:	4a24      	ldr	r2, [pc, #144]	; (8014874 <ZbTimerAlloc+0xa0>)
 80147e4:	210c      	movs	r1, #12
 80147e6:	2000      	movs	r0, #0
 80147e8:	f000 fd41 	bl	801526e <zb_heap_alloc>
 80147ec:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d039      	beq.n	8014868 <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	68ba      	ldr	r2, [r7, #8]
 80147f8:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	687a      	ldr	r2, [r7, #4]
 80147fe:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 8014800:	f7f7 ff08 	bl	800c614 <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014804:	f7f7 fe98 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014808:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	2200      	movs	r2, #0
 801480e:	f042 0214 	orr.w	r2, r2, #20
 8014812:	701a      	strb	r2, [r3, #0]
 8014814:	2200      	movs	r2, #0
 8014816:	705a      	strb	r2, [r3, #1]
 8014818:	2200      	movs	r2, #0
 801481a:	709a      	strb	r2, [r3, #2]
 801481c:	2200      	movs	r2, #0
 801481e:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	2200      	movs	r2, #0
 8014824:	f042 0201 	orr.w	r2, r2, #1
 8014828:	711a      	strb	r2, [r3, #4]
 801482a:	2200      	movs	r2, #0
 801482c:	715a      	strb	r2, [r3, #5]
 801482e:	2200      	movs	r2, #0
 8014830:	719a      	strb	r2, [r3, #6]
 8014832:	2200      	movs	r2, #0
 8014834:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 8014836:	697a      	ldr	r2, [r7, #20]
 8014838:	693b      	ldr	r3, [r7, #16]
 801483a:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 801483c:	f7f7 feac 	bl	800c598 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 8014840:	f7ff fa80 	bl	8013d44 <zb_ipc_m4_get_retval>
 8014844:	4603      	mov	r3, r0
 8014846:	461a      	mov	r2, r3
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	609a      	str	r2, [r3, #8]
        if (timer->m0_timer == NULL) {
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	689b      	ldr	r3, [r3, #8]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d107      	bne.n	8014864 <ZbTimerAlloc+0x90>
            ZbHeapFree(NULL, timer);
 8014854:	2300      	movs	r3, #0
 8014856:	4a07      	ldr	r2, [pc, #28]	; (8014874 <ZbTimerAlloc+0xa0>)
 8014858:	6979      	ldr	r1, [r7, #20]
 801485a:	2000      	movs	r0, #0
 801485c:	f000 fd16 	bl	801528c <zb_heap_free>
            timer = NULL;
 8014860:	2300      	movs	r3, #0
 8014862:	617b      	str	r3, [r7, #20]
        }
        Post_ZigbeeCmdProcessing();
 8014864:	f7fe fc82 	bl	801316c <Post_ZigbeeCmdProcessing>
    }
    return timer;
 8014868:	697b      	ldr	r3, [r7, #20]
}
 801486a:	4618      	mov	r0, r3
 801486c:	3718      	adds	r7, #24
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	0801a60c 	.word	0x0801a60c

08014878 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b084      	sub	sp, #16
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 8014880:	f7f7 fec8 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014884:	f7f7 fe58 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014888:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	2200      	movs	r2, #0
 801488e:	f042 0215 	orr.w	r2, r2, #21
 8014892:	701a      	strb	r2, [r3, #0]
 8014894:	2200      	movs	r2, #0
 8014896:	705a      	strb	r2, [r3, #1]
 8014898:	2200      	movs	r2, #0
 801489a:	709a      	strb	r2, [r3, #2]
 801489c:	2200      	movs	r2, #0
 801489e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2200      	movs	r2, #0
 80148a4:	f042 0201 	orr.w	r2, r2, #1
 80148a8:	711a      	strb	r2, [r3, #4]
 80148aa:	2200      	movs	r2, #0
 80148ac:	715a      	strb	r2, [r3, #5]
 80148ae:	2200      	movs	r2, #0
 80148b0:	719a      	strb	r2, [r3, #6]
 80148b2:	2200      	movs	r2, #0
 80148b4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	689b      	ldr	r3, [r3, #8]
 80148ba:	461a      	mov	r2, r3
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80148c0:	f7f7 fe6a 	bl	800c598 <ZIGBEE_CmdTransfer>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 80148c4:	2300      	movs	r3, #0
 80148c6:	4a05      	ldr	r2, [pc, #20]	; (80148dc <ZbTimerFree+0x64>)
 80148c8:	6879      	ldr	r1, [r7, #4]
 80148ca:	2000      	movs	r0, #0
 80148cc:	f000 fcde 	bl	801528c <zb_heap_free>
    Post_ZigbeeCmdProcessing();
 80148d0:	f7fe fc4c 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 80148d4:	bf00      	nop
 80148d6:	3710      	adds	r7, #16
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	0801a60c 	.word	0x0801a60c

080148e0 <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b084      	sub	sp, #16
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80148ea:	f7f7 fe93 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80148ee:	f7f7 fe23 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80148f2:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	2200      	movs	r2, #0
 80148f8:	f042 0217 	orr.w	r2, r2, #23
 80148fc:	701a      	strb	r2, [r3, #0]
 80148fe:	2200      	movs	r2, #0
 8014900:	705a      	strb	r2, [r3, #1]
 8014902:	2200      	movs	r2, #0
 8014904:	709a      	strb	r2, [r3, #2]
 8014906:	2200      	movs	r2, #0
 8014908:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	2200      	movs	r2, #0
 801490e:	f042 0202 	orr.w	r2, r2, #2
 8014912:	711a      	strb	r2, [r3, #4]
 8014914:	2200      	movs	r2, #0
 8014916:	715a      	strb	r2, [r3, #5]
 8014918:	2200      	movs	r2, #0
 801491a:	719a      	strb	r2, [r3, #6]
 801491c:	2200      	movs	r2, #0
 801491e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	689b      	ldr	r3, [r3, #8]
 8014924:	461a      	mov	r2, r3
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	683a      	ldr	r2, [r7, #0]
 801492e:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014930:	f7f7 fe32 	bl	800c598 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014934:	f7fe fc1a 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 8014938:	bf00      	nop
 801493a:	3710      	adds	r7, #16
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}

08014940 <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 8014940:	b480      	push	{r7}
 8014942:	b085      	sub	sp, #20
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	4a13      	ldr	r2, [pc, #76]	; (801499c <ZbTimeoutRemaining+0x5c>)
 801494e:	4293      	cmp	r3, r2
 8014950:	d909      	bls.n	8014966 <ZbTimeoutRemaining+0x26>
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014958:	d805      	bhi.n	8014966 <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 801495a:	683a      	ldr	r2, [r7, #0]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	1ad3      	subs	r3, r2, r3
 8014960:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	e014      	b.n	8014990 <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	4a0c      	ldr	r2, [pc, #48]	; (801499c <ZbTimeoutRemaining+0x5c>)
 801496a:	4293      	cmp	r3, r2
 801496c:	d905      	bls.n	801497a <ZbTimeoutRemaining+0x3a>
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014974:	d801      	bhi.n	801497a <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 8014976:	2300      	movs	r3, #0
 8014978:	e00a      	b.n	8014990 <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 801497a:	687a      	ldr	r2, [r7, #4]
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	429a      	cmp	r2, r3
 8014980:	d301      	bcc.n	8014986 <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 8014982:	2300      	movs	r3, #0
 8014984:	e004      	b.n	8014990 <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 8014986:	683a      	ldr	r2, [r7, #0]
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	1ad3      	subs	r3, r2, r3
 801498c:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 801498e:	68fb      	ldr	r3, [r7, #12]
}
 8014990:	4618      	mov	r0, r3
 8014992:	3714      	adds	r7, #20
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr
 801499c:	bffffffd 	.word	0xbffffffd

080149a0 <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b08c      	sub	sp, #48	; 0x30
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	60f8      	str	r0, [r7, #12]
 80149a8:	607a      	str	r2, [r7, #4]
 80149aa:	603b      	str	r3, [r7, #0]
 80149ac:	460b      	mov	r3, r1
 80149ae:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT    res;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 80149b0:	897b      	ldrh	r3, [r7, #10]
 80149b2:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 80149bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149be:	627b      	str	r3, [r7, #36]	; 0x24

    Pre_ZigbeeCmdProcessing();
 80149c0:	f7f7 fe28 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80149c4:	f7f7 fdb8 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80149c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 80149ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149cc:	2200      	movs	r2, #0
 80149ce:	701a      	strb	r2, [r3, #0]
 80149d0:	2200      	movs	r2, #0
 80149d2:	f042 0203 	orr.w	r2, r2, #3
 80149d6:	705a      	strb	r2, [r3, #1]
 80149d8:	2200      	movs	r2, #0
 80149da:	709a      	strb	r2, [r3, #2]
 80149dc:	2200      	movs	r2, #0
 80149de:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80149e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e2:	2200      	movs	r2, #0
 80149e4:	f042 0202 	orr.w	r2, r2, #2
 80149e8:	711a      	strb	r2, [r3, #4]
 80149ea:	2200      	movs	r2, #0
 80149ec:	715a      	strb	r2, [r3, #5]
 80149ee:	2200      	movs	r2, #0
 80149f0:	719a      	strb	r2, [r3, #6]
 80149f2:	2200      	movs	r2, #0
 80149f4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 80149f6:	f107 0218 	add.w	r2, r7, #24
 80149fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149fc:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 80149fe:	f107 0214 	add.w	r2, r7, #20
 8014a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a04:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014a06:	f7f7 fdc7 	bl	800c598 <ZIGBEE_CmdTransfer>
    res = nlmeGetConf.status;
 8014a0a:	7d3b      	ldrb	r3, [r7, #20]
 8014a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    Post_ZigbeeCmdProcessing();
 8014a10:	f7fe fbac 	bl	801316c <Post_ZigbeeCmdProcessing>
    return res;
 8014a14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3730      	adds	r7, #48	; 0x30
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}

08014a20 <ZbNwkSetIndex>:

enum ZbStatusCodeT
ZbNwkSetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b08c      	sub	sp, #48	; 0x30
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	607a      	str	r2, [r7, #4]
 8014a2a:	603b      	str	r3, [r7, #0]
 8014a2c:	460b      	mov	r3, r1
 8014a2e:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeSetReqT nlmeSetReq;
    struct ZbNlmeSetConfT nlmeSetConf;
    enum ZbStatusCodeT    res;

    /* Form the NLME-SET.request */
    nlmeSetReq.attrId = attrId;
 8014a30:	897b      	ldrh	r3, [r7, #10]
 8014a32:	833b      	strh	r3, [r7, #24]
    nlmeSetReq.attr = attrPtr;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	61fb      	str	r3, [r7, #28]
    nlmeSetReq.attrLength = attrSz;
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	623b      	str	r3, [r7, #32]
    nlmeSetReq.attrIndex = attrIndex;
 8014a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3e:	627b      	str	r3, [r7, #36]	; 0x24

    Pre_ZigbeeCmdProcessing();
 8014a40:	f7f7 fde8 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014a44:	f7f7 fd78 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014a48:	62f8      	str	r0, [r7, #44]	; 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_SET_INDEX;
 8014a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	f042 0201 	orr.w	r2, r2, #1
 8014a52:	701a      	strb	r2, [r3, #0]
 8014a54:	2200      	movs	r2, #0
 8014a56:	f042 0203 	orr.w	r2, r2, #3
 8014a5a:	705a      	strb	r2, [r3, #1]
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	709a      	strb	r2, [r3, #2]
 8014a60:	2200      	movs	r2, #0
 8014a62:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a66:	2200      	movs	r2, #0
 8014a68:	f042 0202 	orr.w	r2, r2, #2
 8014a6c:	711a      	strb	r2, [r3, #4]
 8014a6e:	2200      	movs	r2, #0
 8014a70:	715a      	strb	r2, [r3, #5]
 8014a72:	2200      	movs	r2, #0
 8014a74:	719a      	strb	r2, [r3, #6]
 8014a76:	2200      	movs	r2, #0
 8014a78:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeSetReq;
 8014a7a:	f107 0218 	add.w	r2, r7, #24
 8014a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a80:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeSetConf;
 8014a82:	f107 0214 	add.w	r2, r7, #20
 8014a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a88:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014a8a:	f7f7 fd85 	bl	800c598 <ZIGBEE_CmdTransfer>
    res = nlmeSetConf.status;
 8014a8e:	7d3b      	ldrb	r3, [r7, #20]
 8014a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    Post_ZigbeeCmdProcessing();
 8014a94:	f7fe fb6a 	bl	801316c <Post_ZigbeeCmdProcessing>
    return res;
 8014a98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	3730      	adds	r7, #48	; 0x30
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}

08014aa4 <ZbNwkGet>:

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b086      	sub	sp, #24
 8014aa8:	af02      	add	r7, sp, #8
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	607a      	str	r2, [r7, #4]
 8014aae:	603b      	str	r3, [r7, #0]
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 8014ab4:	8979      	ldrh	r1, [r7, #10]
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	9300      	str	r3, [sp, #0]
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	687a      	ldr	r2, [r7, #4]
 8014abe:	68f8      	ldr	r0, [r7, #12]
 8014ac0:	f7ff ff6e 	bl	80149a0 <ZbNwkGetIndex>
 8014ac4:	4603      	mov	r3, r0
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3710      	adds	r7, #16
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}

08014ace <ZbNwkSet>:

enum ZbStatusCodeT
ZbNwkSet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 8014ace:	b580      	push	{r7, lr}
 8014ad0:	b086      	sub	sp, #24
 8014ad2:	af02      	add	r7, sp, #8
 8014ad4:	60f8      	str	r0, [r7, #12]
 8014ad6:	607a      	str	r2, [r7, #4]
 8014ad8:	603b      	str	r3, [r7, #0]
 8014ada:	460b      	mov	r3, r1
 8014adc:	817b      	strh	r3, [r7, #10]
    return ZbNwkSetIndex(zb, attrId, attrPtr, attrSz, 0);
 8014ade:	8979      	ldrh	r1, [r7, #10]
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	9300      	str	r3, [sp, #0]
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	687a      	ldr	r2, [r7, #4]
 8014ae8:	68f8      	ldr	r0, [r7, #12]
 8014aea:	f7ff ff99 	bl	8014a20 <ZbNwkSetIndex>
 8014aee:	4603      	mov	r3, r0
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3710      	adds	r7, #16
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <ZbZdoNwkAddrReq>:

/******************************************************************************
 * ZDO
 ******************************************************************************
 */
IPC_REQ_CALLBACK_FUNC(ZbZdoNwkAddrReq, MSG_M4TOM0_ZDO_NWK_ADDR, struct ZbZdoNwkAddrReqT, struct ZbZdoNwkAddrRspT);
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b088      	sub	sp, #32
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	60f8      	str	r0, [r7, #12]
 8014b00:	60b9      	str	r1, [r7, #8]
 8014b02:	607a      	str	r2, [r7, #4]
 8014b04:	603b      	str	r3, [r7, #0]
 8014b06:	6839      	ldr	r1, [r7, #0]
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f7ff f8f3 	bl	8013cf4 <zb_ipc_m4_cb_info_alloc>
 8014b0e:	61f8      	str	r0, [r7, #28]
 8014b10:	69fb      	ldr	r3, [r7, #28]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d101      	bne.n	8014b1a <ZbZdoNwkAddrReq+0x22>
 8014b16:	2370      	movs	r3, #112	; 0x70
 8014b18:	e029      	b.n	8014b6e <ZbZdoNwkAddrReq+0x76>
 8014b1a:	f7f7 fd7b 	bl	800c614 <Pre_ZigbeeCmdProcessing>
 8014b1e:	f7f7 fd0b 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014b22:	61b8      	str	r0, [r7, #24]
 8014b24:	69bb      	ldr	r3, [r7, #24]
 8014b26:	2200      	movs	r2, #0
 8014b28:	701a      	strb	r2, [r3, #0]
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	f042 0201 	orr.w	r2, r2, #1
 8014b30:	705a      	strb	r2, [r3, #1]
 8014b32:	2200      	movs	r2, #0
 8014b34:	709a      	strb	r2, [r3, #2]
 8014b36:	2200      	movs	r2, #0
 8014b38:	70da      	strb	r2, [r3, #3]
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	f042 0202 	orr.w	r2, r2, #2
 8014b42:	711a      	strb	r2, [r3, #4]
 8014b44:	2200      	movs	r2, #0
 8014b46:	715a      	strb	r2, [r3, #5]
 8014b48:	2200      	movs	r2, #0
 8014b4a:	719a      	strb	r2, [r3, #6]
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	71da      	strb	r2, [r3, #7]
 8014b50:	68ba      	ldr	r2, [r7, #8]
 8014b52:	69bb      	ldr	r3, [r7, #24]
 8014b54:	609a      	str	r2, [r3, #8]
 8014b56:	69fa      	ldr	r2, [r7, #28]
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	60da      	str	r2, [r3, #12]
 8014b5c:	f7f7 fd1c 	bl	800c598 <ZIGBEE_CmdTransfer>
 8014b60:	f7ff f8f0 	bl	8013d44 <zb_ipc_m4_get_retval>
 8014b64:	4603      	mov	r3, r0
 8014b66:	75fb      	strb	r3, [r7, #23]
 8014b68:	f7fe fb00 	bl	801316c <Post_ZigbeeCmdProcessing>
 8014b6c:	7dfb      	ldrb	r3, [r7, #23]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3720      	adds	r7, #32
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}

08014b76 <ZbZdoIeeeAddrReq>:
/* Followed up in MSG_M0TOM4_ZDO_NWK_ADDR_CB handler */

IPC_REQ_CALLBACK_FUNC(ZbZdoIeeeAddrReq, MSG_M4TOM0_ZDO_IEEE_ADDR, struct ZbZdoIeeeAddrReqT, struct ZbZdoIeeeAddrRspT);
 8014b76:	b580      	push	{r7, lr}
 8014b78:	b088      	sub	sp, #32
 8014b7a:	af00      	add	r7, sp, #0
 8014b7c:	60f8      	str	r0, [r7, #12]
 8014b7e:	60b9      	str	r1, [r7, #8]
 8014b80:	607a      	str	r2, [r7, #4]
 8014b82:	603b      	str	r3, [r7, #0]
 8014b84:	6839      	ldr	r1, [r7, #0]
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f7ff f8b4 	bl	8013cf4 <zb_ipc_m4_cb_info_alloc>
 8014b8c:	61f8      	str	r0, [r7, #28]
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d101      	bne.n	8014b98 <ZbZdoIeeeAddrReq+0x22>
 8014b94:	2370      	movs	r3, #112	; 0x70
 8014b96:	e02b      	b.n	8014bf0 <ZbZdoIeeeAddrReq+0x7a>
 8014b98:	f7f7 fd3c 	bl	800c614 <Pre_ZigbeeCmdProcessing>
 8014b9c:	f7f7 fccc 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014ba0:	61b8      	str	r0, [r7, #24]
 8014ba2:	69bb      	ldr	r3, [r7, #24]
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	f042 0202 	orr.w	r2, r2, #2
 8014baa:	701a      	strb	r2, [r3, #0]
 8014bac:	2200      	movs	r2, #0
 8014bae:	f042 0201 	orr.w	r2, r2, #1
 8014bb2:	705a      	strb	r2, [r3, #1]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	709a      	strb	r2, [r3, #2]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	70da      	strb	r2, [r3, #3]
 8014bbc:	69bb      	ldr	r3, [r7, #24]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	f042 0202 	orr.w	r2, r2, #2
 8014bc4:	711a      	strb	r2, [r3, #4]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	715a      	strb	r2, [r3, #5]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	719a      	strb	r2, [r3, #6]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	71da      	strb	r2, [r3, #7]
 8014bd2:	68ba      	ldr	r2, [r7, #8]
 8014bd4:	69bb      	ldr	r3, [r7, #24]
 8014bd6:	609a      	str	r2, [r3, #8]
 8014bd8:	69fa      	ldr	r2, [r7, #28]
 8014bda:	69bb      	ldr	r3, [r7, #24]
 8014bdc:	60da      	str	r2, [r3, #12]
 8014bde:	f7f7 fcdb 	bl	800c598 <ZIGBEE_CmdTransfer>
 8014be2:	f7ff f8af 	bl	8013d44 <zb_ipc_m4_get_retval>
 8014be6:	4603      	mov	r3, r0
 8014be8:	75fb      	strb	r3, [r7, #23]
 8014bea:	f7fe fabf 	bl	801316c <Post_ZigbeeCmdProcessing>
 8014bee:	7dfb      	ldrb	r3, [r7, #23]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	3720      	adds	r7, #32
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <ZbZdoMatchDescReq>:
/* Followed up in MSG_M0TOM4_ZDO_SIMPLE_DESC_CB handler */

IPC_REQ_CALLBACK_FUNC(ZbZdoActiveEpReq, MSG_M4TOM0_ZDO_ACTIVE_EP, struct ZbZdoActiveEpReqT, struct ZbZdoActiveEpRspT);
/* Followed up in MSG_M0TOM4_ZDO_ACTIVE_EP_CB handler */

IPC_REQ_CALLBACK_FUNC(ZbZdoMatchDescReq, MSG_M4TOM0_ZDO_MATCH_DESC, struct ZbZdoMatchDescReqT, struct ZbZdoMatchDescRspT);
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b088      	sub	sp, #32
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	60f8      	str	r0, [r7, #12]
 8014c00:	60b9      	str	r1, [r7, #8]
 8014c02:	607a      	str	r2, [r7, #4]
 8014c04:	603b      	str	r3, [r7, #0]
 8014c06:	6839      	ldr	r1, [r7, #0]
 8014c08:	6878      	ldr	r0, [r7, #4]
 8014c0a:	f7ff f873 	bl	8013cf4 <zb_ipc_m4_cb_info_alloc>
 8014c0e:	61f8      	str	r0, [r7, #28]
 8014c10:	69fb      	ldr	r3, [r7, #28]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d101      	bne.n	8014c1a <ZbZdoMatchDescReq+0x22>
 8014c16:	2370      	movs	r3, #112	; 0x70
 8014c18:	e02b      	b.n	8014c72 <ZbZdoMatchDescReq+0x7a>
 8014c1a:	f7f7 fcfb 	bl	800c614 <Pre_ZigbeeCmdProcessing>
 8014c1e:	f7f7 fc8b 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014c22:	61b8      	str	r0, [r7, #24]
 8014c24:	69bb      	ldr	r3, [r7, #24]
 8014c26:	2200      	movs	r2, #0
 8014c28:	f042 020c 	orr.w	r2, r2, #12
 8014c2c:	701a      	strb	r2, [r3, #0]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	f042 0201 	orr.w	r2, r2, #1
 8014c34:	705a      	strb	r2, [r3, #1]
 8014c36:	2200      	movs	r2, #0
 8014c38:	709a      	strb	r2, [r3, #2]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	70da      	strb	r2, [r3, #3]
 8014c3e:	69bb      	ldr	r3, [r7, #24]
 8014c40:	2200      	movs	r2, #0
 8014c42:	f042 0202 	orr.w	r2, r2, #2
 8014c46:	711a      	strb	r2, [r3, #4]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	715a      	strb	r2, [r3, #5]
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	719a      	strb	r2, [r3, #6]
 8014c50:	2200      	movs	r2, #0
 8014c52:	71da      	strb	r2, [r3, #7]
 8014c54:	68ba      	ldr	r2, [r7, #8]
 8014c56:	69bb      	ldr	r3, [r7, #24]
 8014c58:	609a      	str	r2, [r3, #8]
 8014c5a:	69fa      	ldr	r2, [r7, #28]
 8014c5c:	69bb      	ldr	r3, [r7, #24]
 8014c5e:	60da      	str	r2, [r3, #12]
 8014c60:	f7f7 fc9a 	bl	800c598 <ZIGBEE_CmdTransfer>
 8014c64:	f7ff f86e 	bl	8013d44 <zb_ipc_m4_get_retval>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	75fb      	strb	r3, [r7, #23]
 8014c6c:	f7fe fa7e 	bl	801316c <Post_ZigbeeCmdProcessing>
 8014c70:	7dfb      	ldrb	r3, [r7, #23]
 8014c72:	4618      	mov	r0, r3
 8014c74:	3720      	adds	r7, #32
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}

08014c7a <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 8014c7a:	b580      	push	{r7, lr}
 8014c7c:	b086      	sub	sp, #24
 8014c7e:	af02      	add	r7, sp, #8
 8014c80:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 8014c82:	f107 020c 	add.w	r2, r7, #12
 8014c86:	2300      	movs	r3, #0
 8014c88:	9300      	str	r3, [sp, #0]
 8014c8a:	2304      	movs	r3, #4
 8014c8c:	f241 111d 	movw	r1, #4381	; 0x111d
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f7ff fac7 	bl	8014224 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 8014c96:	68fb      	ldr	r3, [r7, #12]
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3710      	adds	r7, #16
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b086      	sub	sp, #24
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	60f8      	str	r0, [r7, #12]
 8014ca8:	60b9      	str	r1, [r7, #8]
 8014caa:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool                  res;

    Pre_ZigbeeCmdProcessing();
 8014cac:	f7f7 fcb2 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014cb0:	f7f7 fc42 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014cb4:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	2200      	movs	r2, #0
 8014cba:	f042 021d 	orr.w	r2, r2, #29
 8014cbe:	701a      	strb	r2, [r3, #0]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	f042 0204 	orr.w	r2, r2, #4
 8014cc6:	705a      	strb	r2, [r3, #1]
 8014cc8:	2200      	movs	r2, #0
 8014cca:	709a      	strb	r2, [r3, #2]
 8014ccc:	2200      	movs	r2, #0
 8014cce:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	f042 0202 	orr.w	r2, r2, #2
 8014cd8:	711a      	strb	r2, [r3, #4]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	715a      	strb	r2, [r3, #5]
 8014cde:	2200      	movs	r2, #0
 8014ce0:	719a      	strb	r2, [r3, #6]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 8014ce6:	68ba      	ldr	r2, [r7, #8]
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 8014cec:	687a      	ldr	r2, [r7, #4]
 8014cee:	697b      	ldr	r3, [r7, #20]
 8014cf0:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014cf2:	f7f7 fc51 	bl	800c598 <ZIGBEE_CmdTransfer>
    res = zb_ipc_m4_get_retval() != 0U ? true : false;
 8014cf6:	f7ff f825 	bl	8013d44 <zb_ipc_m4_get_retval>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	bf14      	ite	ne
 8014d00:	2301      	movne	r3, #1
 8014d02:	2300      	moveq	r3, #0
 8014d04:	74fb      	strb	r3, [r7, #19]
    Post_ZigbeeCmdProcessing();
 8014d06:	f7fe fa31 	bl	801316c <Post_ZigbeeCmdProcessing>
    return res;
 8014d0a:	7cfb      	ldrb	r3, [r7, #19]
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3718      	adds	r7, #24
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <ZbZclAddEndpoint>:
    return res;
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b086      	sub	sp, #24
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	60f8      	str	r0, [r7, #12]
 8014d1c:	60b9      	str	r1, [r7, #8]
 8014d1e:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8014d20:	f7f7 fc78 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014d24:	f7f7 fc08 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014d28:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 8014d2a:	697b      	ldr	r3, [r7, #20]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	701a      	strb	r2, [r3, #0]
 8014d30:	2200      	movs	r2, #0
 8014d32:	f042 0204 	orr.w	r2, r2, #4
 8014d36:	705a      	strb	r2, [r3, #1]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	709a      	strb	r2, [r3, #2]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014d40:	697b      	ldr	r3, [r7, #20]
 8014d42:	2200      	movs	r2, #0
 8014d44:	f042 0202 	orr.w	r2, r2, #2
 8014d48:	711a      	strb	r2, [r3, #4]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	715a      	strb	r2, [r3, #5]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	719a      	strb	r2, [r3, #6]
 8014d52:	2200      	movs	r2, #0
 8014d54:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8014d56:	68ba      	ldr	r2, [r7, #8]
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 8014d5c:	687a      	ldr	r2, [r7, #4]
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014d62:	f7f7 fc19 	bl	800c598 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014d66:	f7fe fa01 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 8014d6a:	bf00      	nop
 8014d6c:	3718      	adds	r7, #24
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}

08014d72 <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 8014d72:	b580      	push	{r7, lr}
 8014d74:	b082      	sub	sp, #8
 8014d76:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t               res;

    Pre_ZigbeeCmdProcessing();
 8014d78:	f7f7 fc4c 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014d7c:	f7f7 fbdc 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014d80:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2200      	movs	r2, #0
 8014d86:	f042 0211 	orr.w	r2, r2, #17
 8014d8a:	701a      	strb	r2, [r3, #0]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	f042 0204 	orr.w	r2, r2, #4
 8014d92:	705a      	strb	r2, [r3, #1]
 8014d94:	2200      	movs	r2, #0
 8014d96:	709a      	strb	r2, [r3, #2]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	711a      	strb	r2, [r3, #4]
 8014da2:	2200      	movs	r2, #0
 8014da4:	715a      	strb	r2, [r3, #5]
 8014da6:	2200      	movs	r2, #0
 8014da8:	719a      	strb	r2, [r3, #6]
 8014daa:	2200      	movs	r2, #0
 8014dac:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 8014dae:	f7f7 fbf3 	bl	800c598 <ZIGBEE_CmdTransfer>
    res = (uint8_t)zb_ipc_m4_get_retval();
 8014db2:	f7fe ffc7 	bl	8013d44 <zb_ipc_m4_get_retval>
 8014db6:	4603      	mov	r3, r0
 8014db8:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 8014dba:	f7fe f9d7 	bl	801316c <Post_ZigbeeCmdProcessing>
    return res;
 8014dbe:	78fb      	ldrb	r3, [r7, #3]
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3708      	adds	r7, #8
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}

08014dc8 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b088      	sub	sp, #32
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	60b9      	str	r1, [r7, #8]
 8014dd2:	607a      	str	r2, [r7, #4]
 8014dd4:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT res;

    if (callback != NULL) {
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d013      	beq.n	8014e08 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8014de0:	6839      	ldr	r1, [r7, #0]
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f7fe ff86 	bl	8013cf4 <zb_ipc_m4_cb_info_alloc>
 8014de8:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 8014dea:	69fb      	ldr	r3, [r7, #28]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d101      	bne.n	8014df4 <ZbZclCommandReq+0x2c>
            return (enum ZclStatusCodeT) ZB_STATUS_ALLOC_FAIL;
 8014df0:	2370      	movs	r3, #112	; 0x70
 8014df2:	e035      	b.n	8014e60 <ZbZclCommandReq+0x98>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	4618      	mov	r0, r3
 8014df8:	f7ff fb2d 	bl	8014456 <ZbApsAddrIsBcast>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d002      	beq.n	8014e08 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 8014e02:	69fb      	ldr	r3, [r7, #28]
 8014e04:	2201      	movs	r2, #1
 8014e06:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 8014e08:	f7f7 fc04 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014e0c:	f7f7 fb94 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014e10:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 8014e12:	69bb      	ldr	r3, [r7, #24]
 8014e14:	2200      	movs	r2, #0
 8014e16:	f042 0212 	orr.w	r2, r2, #18
 8014e1a:	701a      	strb	r2, [r3, #0]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	f042 0204 	orr.w	r2, r2, #4
 8014e22:	705a      	strb	r2, [r3, #1]
 8014e24:	2200      	movs	r2, #0
 8014e26:	709a      	strb	r2, [r3, #2]
 8014e28:	2200      	movs	r2, #0
 8014e2a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014e2c:	69bb      	ldr	r3, [r7, #24]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	f042 0202 	orr.w	r2, r2, #2
 8014e34:	711a      	strb	r2, [r3, #4]
 8014e36:	2200      	movs	r2, #0
 8014e38:	715a      	strb	r2, [r3, #5]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	719a      	strb	r2, [r3, #6]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 8014e42:	68ba      	ldr	r2, [r7, #8]
 8014e44:	69bb      	ldr	r3, [r7, #24]
 8014e46:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8014e48:	69fa      	ldr	r2, [r7, #28]
 8014e4a:	69bb      	ldr	r3, [r7, #24]
 8014e4c:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014e4e:	f7f7 fba3 	bl	800c598 <ZIGBEE_CmdTransfer>
    res = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 8014e52:	f7fe ff77 	bl	8013d44 <zb_ipc_m4_get_retval>
 8014e56:	4603      	mov	r3, r0
 8014e58:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8014e5a:	f7fe f987 	bl	801316c <Post_ZigbeeCmdProcessing>
    return res;
 8014e5e:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	3720      	adds	r7, #32
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}

08014e68 <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b086      	sub	sp, #24
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	60f8      	str	r0, [r7, #12]
 8014e70:	60b9      	str	r1, [r7, #8]
 8014e72:	607a      	str	r2, [r7, #4]
 8014e74:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8014e76:	f7f7 fbcd 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014e7a:	f7f7 fb5d 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014e7e:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	2200      	movs	r2, #0
 8014e84:	f042 0214 	orr.w	r2, r2, #20
 8014e88:	701a      	strb	r2, [r3, #0]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	f042 0204 	orr.w	r2, r2, #4
 8014e90:	705a      	strb	r2, [r3, #1]
 8014e92:	2200      	movs	r2, #0
 8014e94:	709a      	strb	r2, [r3, #2]
 8014e96:	2200      	movs	r2, #0
 8014e98:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	f042 0204 	orr.w	r2, r2, #4
 8014ea2:	711a      	strb	r2, [r3, #4]
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	715a      	strb	r2, [r3, #5]
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	719a      	strb	r2, [r3, #6]
 8014eac:	2200      	movs	r2, #0
 8014eae:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8014eb0:	68fa      	ldr	r2, [r7, #12]
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 8014eb6:	68ba      	ldr	r2, [r7, #8]
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 8014ebc:	687a      	ldr	r2, [r7, #4]
 8014ebe:	697b      	ldr	r3, [r7, #20]
 8014ec0:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 8014ec2:	78fa      	ldrb	r2, [r7, #3]
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8014ec8:	f7f7 fb66 	bl	800c598 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014ecc:	f7fe f94e 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 8014ed0:	bf00      	nop
 8014ed2:	3718      	adds	r7, #24
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}

08014ed8 <ZbZclClusterCommandReq>:

enum ZclStatusCodeT
ZbZclClusterCommandReq(struct ZbZclClusterT *clusterPtr, struct ZbZclClusterCommandReqT *req,
    void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg), void *arg)
{
 8014ed8:	b590      	push	{r4, r7, lr}
 8014eda:	b091      	sub	sp, #68	; 0x44
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	60f8      	str	r0, [r7, #12]
 8014ee0:	60b9      	str	r1, [r7, #8]
 8014ee2:	607a      	str	r2, [r7, #4]
 8014ee4:	603b      	str	r3, [r7, #0]
    struct ZbZclCommandReqT zcl_req;

    /* Configure the request */
    ZbZclClusterInitCommandReq(clusterPtr, &zcl_req);
 8014ee6:	f107 0310 	add.w	r3, r7, #16
 8014eea:	4619      	mov	r1, r3
 8014eec:	68f8      	ldr	r0, [r7, #12]
 8014eee:	f7eb ffd4 	bl	8000e9a <ZbZclClusterInitCommandReq>
    zcl_req.dst = req->dst;
 8014ef2:	68bb      	ldr	r3, [r7, #8]
 8014ef4:	f107 0410 	add.w	r4, r7, #16
 8014ef8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014efa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* ZCL Header */
    zcl_req.hdr.cmdId = req->cmdId;
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	7c1b      	ldrb	r3, [r3, #16]
 8014f02:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    zcl_req.hdr.frameCtrl.frameType = ZCL_FRAMETYPE_CLUSTER;
 8014f06:	2301      	movs	r3, #1
 8014f08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    zcl_req.hdr.frameCtrl.manufacturer = (clusterPtr->mfrCode != 0U) ? 1U : 0U;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	8a1b      	ldrh	r3, [r3, #16]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d001      	beq.n	8014f18 <ZbZclClusterCommandReq+0x40>
 8014f14:	2301      	movs	r3, #1
 8014f16:	e000      	b.n	8014f1a <ZbZclClusterCommandReq+0x42>
 8014f18:	2300      	movs	r3, #0
 8014f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? ZCL_DIRECTION_TO_CLIENT : ZCL_DIRECTION_TO_SERVER;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	7f1b      	ldrb	r3, [r3, #28]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	bf0c      	ite	eq
 8014f26:	2301      	moveq	r3, #1
 8014f28:	2300      	movne	r3, #0
 8014f2a:	b2db      	uxtb	r3, r3
 8014f2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    zcl_req.hdr.frameCtrl.noDefaultResp = req->noDefaultResp;
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	7c5b      	ldrb	r3, [r3, #17]
 8014f34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    zcl_req.hdr.manufacturerCode = clusterPtr->mfrCode;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	8a1b      	ldrh	r3, [r3, #16]
 8014f3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    zcl_req.hdr.seqNum = ZbZclGetNextSeqnum();
 8014f3e:	f7ff ff18 	bl	8014d72 <ZbZclGetNextSeqnum>
 8014f42:	4603      	mov	r3, r0
 8014f44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

    /* Payload */
    zcl_req.payload = req->payload;
 8014f48:	68bb      	ldr	r3, [r7, #8]
 8014f4a:	695b      	ldr	r3, [r3, #20]
 8014f4c:	637b      	str	r3, [r7, #52]	; 0x34
    zcl_req.length = req->length;
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	699b      	ldr	r3, [r3, #24]
 8014f52:	63bb      	str	r3, [r7, #56]	; 0x38

    return ZbZclCommandReq(clusterPtr->zb, &zcl_req, callback, arg);
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	6898      	ldr	r0, [r3, #8]
 8014f58:	f107 0110 	add.w	r1, r7, #16
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	687a      	ldr	r2, [r7, #4]
 8014f60:	f7ff ff32 	bl	8014dc8 <ZbZclCommandReq>
 8014f64:	4603      	mov	r3, r0
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3744      	adds	r7, #68	; 0x44
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd90      	pop	{r4, r7, pc}

08014f6e <ZbZclClusterEndpointRegister>:
    return res;
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 8014f6e:	b580      	push	{r7, lr}
 8014f70:	b086      	sub	sp, #24
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool res;
    uint32_t retval;

    Pre_ZigbeeCmdProcessing();
 8014f76:	f7f7 fb4d 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014f7a:	f7f7 fadd 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014f7e:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	2200      	movs	r2, #0
 8014f84:	f042 0202 	orr.w	r2, r2, #2
 8014f88:	701a      	strb	r2, [r3, #0]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	f042 0204 	orr.w	r2, r2, #4
 8014f90:	705a      	strb	r2, [r3, #1]
 8014f92:	2200      	movs	r2, #0
 8014f94:	709a      	strb	r2, [r3, #2]
 8014f96:	2200      	movs	r2, #0
 8014f98:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8014f9a:	697b      	ldr	r3, [r7, #20]
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	f042 0201 	orr.w	r2, r2, #1
 8014fa2:	711a      	strb	r2, [r3, #4]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	715a      	strb	r2, [r3, #5]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	719a      	strb	r2, [r3, #6]
 8014fac:	2200      	movs	r2, #0
 8014fae:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8014fb6:	f7f7 faef 	bl	800c598 <ZIGBEE_CmdTransfer>
    retval = zb_ipc_m4_get_retval();
 8014fba:	f7fe fec3 	bl	8013d44 <zb_ipc_m4_get_retval>
 8014fbe:	6138      	str	r0, [r7, #16]
    res    = (bool)retval != 0 ? true : false;
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	bf14      	ite	ne
 8014fc6:	2301      	movne	r3, #1
 8014fc8:	2300      	moveq	r3, #0
 8014fca:	73fb      	strb	r3, [r7, #15]
    Post_ZigbeeCmdProcessing();
 8014fcc:	f7fe f8ce 	bl	801316c <Post_ZigbeeCmdProcessing>
    return res;
 8014fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	3718      	adds	r7, #24
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}

08014fda <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 8014fda:	b580      	push	{r7, lr}
 8014fdc:	b086      	sub	sp, #24
 8014fde:	af00      	add	r7, sp, #0
 8014fe0:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t              retval;
    bool                  res;

    Pre_ZigbeeCmdProcessing();
 8014fe2:	f7f7 fb17 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014fe6:	f7f7 faa7 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014fea:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	2200      	movs	r2, #0
 8014ff0:	f042 0203 	orr.w	r2, r2, #3
 8014ff4:	701a      	strb	r2, [r3, #0]
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	f042 0204 	orr.w	r2, r2, #4
 8014ffc:	705a      	strb	r2, [r3, #1]
 8014ffe:	2200      	movs	r2, #0
 8015000:	709a      	strb	r2, [r3, #2]
 8015002:	2200      	movs	r2, #0
 8015004:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	2200      	movs	r2, #0
 801500a:	f042 0201 	orr.w	r2, r2, #1
 801500e:	711a      	strb	r2, [r3, #4]
 8015010:	2200      	movs	r2, #0
 8015012:	715a      	strb	r2, [r3, #5]
 8015014:	2200      	movs	r2, #0
 8015016:	719a      	strb	r2, [r3, #6]
 8015018:	2200      	movs	r2, #0
 801501a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801501c:	687a      	ldr	r2, [r7, #4]
 801501e:	697b      	ldr	r3, [r7, #20]
 8015020:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8015022:	f7f7 fab9 	bl	800c598 <ZIGBEE_CmdTransfer>
    retval = zb_ipc_m4_get_retval();
 8015026:	f7fe fe8d 	bl	8013d44 <zb_ipc_m4_get_retval>
 801502a:	6138      	str	r0, [r7, #16]
    res    = (bool)retval != 0 ? true : false;
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	2b00      	cmp	r3, #0
 8015030:	bf14      	ite	ne
 8015032:	2301      	movne	r3, #1
 8015034:	2300      	moveq	r3, #0
 8015036:	73fb      	strb	r3, [r7, #15]
    Post_ZigbeeCmdProcessing();
 8015038:	f7fe f898 	bl	801316c <Post_ZigbeeCmdProcessing>
    return res;
 801503c:	7bfb      	ldrb	r3, [r7, #15]
}
 801503e:	4618      	mov	r0, r3
 8015040:	3718      	adds	r7, #24
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}

08015046 <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 8015046:	b580      	push	{r7, lr}
 8015048:	b084      	sub	sp, #16
 801504a:	af00      	add	r7, sp, #0
 801504c:	6078      	str	r0, [r7, #4]
 801504e:	4608      	mov	r0, r1
 8015050:	4611      	mov	r1, r2
 8015052:	461a      	mov	r2, r3
 8015054:	4603      	mov	r3, r0
 8015056:	70fb      	strb	r3, [r7, #3]
 8015058:	460b      	mov	r3, r1
 801505a:	803b      	strh	r3, [r7, #0]
 801505c:	4613      	mov	r3, r2
 801505e:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT   error_status;

    Pre_ZigbeeCmdProcessing();
 8015060:	f7f7 fad8 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015064:	f7f7 fa68 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015068:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	2200      	movs	r2, #0
 801506e:	f042 0204 	orr.w	r2, r2, #4
 8015072:	701a      	strb	r2, [r3, #0]
 8015074:	2200      	movs	r2, #0
 8015076:	f042 0204 	orr.w	r2, r2, #4
 801507a:	705a      	strb	r2, [r3, #1]
 801507c:	2200      	movs	r2, #0
 801507e:	709a      	strb	r2, [r3, #2]
 8015080:	2200      	movs	r2, #0
 8015082:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	2200      	movs	r2, #0
 8015088:	f042 0204 	orr.w	r2, r2, #4
 801508c:	711a      	strb	r2, [r3, #4]
 801508e:	2200      	movs	r2, #0
 8015090:	715a      	strb	r2, [r3, #5]
 8015092:	2200      	movs	r2, #0
 8015094:	719a      	strb	r2, [r3, #6]
 8015096:	2200      	movs	r2, #0
 8015098:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801509a:	687a      	ldr	r2, [r7, #4]
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 80150a0:	78fa      	ldrb	r2, [r7, #3]
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 80150a6:	883a      	ldrh	r2, [r7, #0]
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 80150ac:	78ba      	ldrb	r2, [r7, #2]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 80150b2:	f7f7 fa71 	bl	800c598 <ZIGBEE_CmdTransfer>
    error_status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 80150b6:	f7fe fe45 	bl	8013d44 <zb_ipc_m4_get_retval>
 80150ba:	4603      	mov	r3, r0
 80150bc:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 80150be:	f7fe f855 	bl	801316c <Post_ZigbeeCmdProcessing>
    return error_status;
 80150c2:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3710      	adds	r7, #16
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}

080150cc <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b084      	sub	sp, #16
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80150d4:	f7f7 fa9e 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80150d8:	f7f7 fa2e 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80150dc:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	2200      	movs	r2, #0
 80150e2:	f042 0206 	orr.w	r2, r2, #6
 80150e6:	701a      	strb	r2, [r3, #0]
 80150e8:	2200      	movs	r2, #0
 80150ea:	f042 0204 	orr.w	r2, r2, #4
 80150ee:	705a      	strb	r2, [r3, #1]
 80150f0:	2200      	movs	r2, #0
 80150f2:	709a      	strb	r2, [r3, #2]
 80150f4:	2200      	movs	r2, #0
 80150f6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	2200      	movs	r2, #0
 80150fc:	f042 0201 	orr.w	r2, r2, #1
 8015100:	711a      	strb	r2, [r3, #4]
 8015102:	2200      	movs	r2, #0
 8015104:	715a      	strb	r2, [r3, #5]
 8015106:	2200      	movs	r2, #0
 8015108:	719a      	strb	r2, [r3, #6]
 801510a:	2200      	movs	r2, #0
 801510c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8015114:	f7f7 fa40 	bl	800c598 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8015118:	f7fe f828 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 801511c:	bf00      	nop
 801511e:	3710      	adds	r7, #16
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}

08015124 <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b084      	sub	sp, #16
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 801512c:	f7f7 fa72 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015130:	f7f7 fa02 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015134:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	2200      	movs	r2, #0
 801513a:	f042 020b 	orr.w	r2, r2, #11
 801513e:	701a      	strb	r2, [r3, #0]
 8015140:	2200      	movs	r2, #0
 8015142:	f042 0204 	orr.w	r2, r2, #4
 8015146:	705a      	strb	r2, [r3, #1]
 8015148:	2200      	movs	r2, #0
 801514a:	709a      	strb	r2, [r3, #2]
 801514c:	2200      	movs	r2, #0
 801514e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	2200      	movs	r2, #0
 8015154:	f042 0201 	orr.w	r2, r2, #1
 8015158:	711a      	strb	r2, [r3, #4]
 801515a:	2200      	movs	r2, #0
 801515c:	715a      	strb	r2, [r3, #5]
 801515e:	2200      	movs	r2, #0
 8015160:	719a      	strb	r2, [r3, #6]
 8015162:	2200      	movs	r2, #0
 8015164:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8015166:	687a      	ldr	r2, [r7, #4]
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801516c:	f7f7 fa14 	bl	800c598 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8015170:	f7fd fffc 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 8015174:	bf00      	nop
 8015176:	3710      	adds	r7, #16
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}

0801517c <ZbHashInit>:
    return true;
}

void
ZbHashInit(struct ZbHash *h)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
    (void)memset(h->m, 0, sizeof(h->m));
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	2210      	movs	r2, #16
 8015188:	2100      	movs	r1, #0
 801518a:	4618      	mov	r0, r3
 801518c:	f002 fce2 	bl	8017b54 <memset>
    (void)memset(h->hash, 0, sizeof(h->hash));
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	3310      	adds	r3, #16
 8015194:	2210      	movs	r2, #16
 8015196:	2100      	movs	r1, #0
 8015198:	4618      	mov	r0, r3
 801519a:	f002 fcdb 	bl	8017b54 <memset>
    /* Don't touch h->key */
    h->length = 0;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	2200      	movs	r2, #0
 80151a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 80151a6:	bf00      	nop
 80151a8:	3708      	adds	r7, #8
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}

080151ae <ZbHashAdd>:

void
ZbHashAdd(struct ZbHash *h, const void *data, uint32_t len)
{
 80151ae:	b580      	push	{r7, lr}
 80151b0:	b086      	sub	sp, #24
 80151b2:	af00      	add	r7, sp, #0
 80151b4:	60f8      	str	r0, [r7, #12]
 80151b6:	60b9      	str	r1, [r7, #8]
 80151b8:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80151ba:	f7f7 fa2b 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80151be:	f7f7 f9bb 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80151c2:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_HASH_ADD;
 80151c4:	697b      	ldr	r3, [r7, #20]
 80151c6:	2200      	movs	r2, #0
 80151c8:	f042 0235 	orr.w	r2, r2, #53	; 0x35
 80151cc:	701a      	strb	r2, [r3, #0]
 80151ce:	2200      	movs	r2, #0
 80151d0:	705a      	strb	r2, [r3, #1]
 80151d2:	2200      	movs	r2, #0
 80151d4:	709a      	strb	r2, [r3, #2]
 80151d6:	2200      	movs	r2, #0
 80151d8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 80151da:	697b      	ldr	r3, [r7, #20]
 80151dc:	2200      	movs	r2, #0
 80151de:	f042 0203 	orr.w	r2, r2, #3
 80151e2:	711a      	strb	r2, [r3, #4]
 80151e4:	2200      	movs	r2, #0
 80151e6:	715a      	strb	r2, [r3, #5]
 80151e8:	2200      	movs	r2, #0
 80151ea:	719a      	strb	r2, [r3, #6]
 80151ec:	2200      	movs	r2, #0
 80151ee:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)h;
 80151f0:	68fa      	ldr	r2, [r7, #12]
 80151f2:	697b      	ldr	r3, [r7, #20]
 80151f4:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)data;
 80151f6:	68ba      	ldr	r2, [r7, #8]
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)len;
 80151fc:	697b      	ldr	r3, [r7, #20]
 80151fe:	687a      	ldr	r2, [r7, #4]
 8015200:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 8015202:	f7f7 f9c9 	bl	800c598 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8015206:	f7fd ffb1 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 801520a:	bf00      	nop
 801520c:	3718      	adds	r7, #24
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}

08015212 <ZbHashDigest>:

#endif /*ZIGBEE_DIRECT_ACTIVATED */

void
ZbHashDigest(struct ZbHash *h, void *digest)
{
 8015212:	b580      	push	{r7, lr}
 8015214:	b084      	sub	sp, #16
 8015216:	af00      	add	r7, sp, #0
 8015218:	6078      	str	r0, [r7, #4]
 801521a:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 801521c:	f7f7 f9fa 	bl	800c614 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015220:	f7f7 f98a 	bl	800c538 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015224:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZB_HASH_DIGEST;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	2200      	movs	r2, #0
 801522a:	f042 0236 	orr.w	r2, r2, #54	; 0x36
 801522e:	701a      	strb	r2, [r3, #0]
 8015230:	2200      	movs	r2, #0
 8015232:	705a      	strb	r2, [r3, #1]
 8015234:	2200      	movs	r2, #0
 8015236:	709a      	strb	r2, [r3, #2]
 8015238:	2200      	movs	r2, #0
 801523a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	2200      	movs	r2, #0
 8015240:	f042 0202 	orr.w	r2, r2, #2
 8015244:	711a      	strb	r2, [r3, #4]
 8015246:	2200      	movs	r2, #0
 8015248:	715a      	strb	r2, [r3, #5]
 801524a:	2200      	movs	r2, #0
 801524c:	719a      	strb	r2, [r3, #6]
 801524e:	2200      	movs	r2, #0
 8015250:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)h;
 8015252:	687a      	ldr	r2, [r7, #4]
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)digest;
 8015258:	683a      	ldr	r2, [r7, #0]
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801525e:	f7f7 f99b 	bl	800c598 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8015262:	f7fd ff83 	bl	801316c <Post_ZigbeeCmdProcessing>
}
 8015266:	bf00      	nop
 8015268:	3710      	adds	r7, #16
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}

0801526e <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 801526e:	b580      	push	{r7, lr}
 8015270:	b084      	sub	sp, #16
 8015272:	af00      	add	r7, sp, #0
 8015274:	60f8      	str	r0, [r7, #12]
 8015276:	60b9      	str	r1, [r7, #8]
 8015278:	607a      	str	r2, [r7, #4]
 801527a:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 801527c:	68b8      	ldr	r0, [r7, #8]
 801527e:	f002 fc4b 	bl	8017b18 <malloc>
 8015282:	4603      	mov	r3, r0
}
 8015284:	4618      	mov	r0, r3
 8015286:	3710      	adds	r7, #16
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}

0801528c <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b084      	sub	sp, #16
 8015290:	af00      	add	r7, sp, #0
 8015292:	60f8      	str	r0, [r7, #12]
 8015294:	60b9      	str	r1, [r7, #8]
 8015296:	607a      	str	r2, [r7, #4]
 8015298:	603b      	str	r3, [r7, #0]
    free(ptr);
 801529a:	68b8      	ldr	r0, [r7, #8]
 801529c:	f002 fc44 	bl	8017b28 <free>
}
 80152a0:	bf00      	nop
 80152a2:	3710      	adds	r7, #16
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}

080152a8 <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 80152a8:	b480      	push	{r7}
 80152aa:	b087      	sub	sp, #28
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	4603      	mov	r3, r0
 80152b0:	60b9      	str	r1, [r7, #8]
 80152b2:	607a      	str	r2, [r7, #4]
 80152b4:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 80152ba:	e00e      	b.n	80152da <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 80152bc:	89fb      	ldrh	r3, [r7, #14]
 80152be:	0a1b      	lsrs	r3, r3, #8
 80152c0:	b29a      	uxth	r2, r3
 80152c2:	89fb      	ldrh	r3, [r7, #14]
 80152c4:	b2d9      	uxtb	r1, r3
 80152c6:	697b      	ldr	r3, [r7, #20]
 80152c8:	1c58      	adds	r0, r3, #1
 80152ca:	6178      	str	r0, [r7, #20]
 80152cc:	781b      	ldrb	r3, [r3, #0]
 80152ce:	404b      	eors	r3, r1
 80152d0:	4908      	ldr	r1, [pc, #32]	; (80152f4 <WpanCrc+0x4c>)
 80152d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80152d6:	4053      	eors	r3, r2
 80152d8:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	1e5a      	subs	r2, r3, #1
 80152de:	607a      	str	r2, [r7, #4]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d1eb      	bne.n	80152bc <WpanCrc+0x14>
    }
    return crc;
 80152e4:	89fb      	ldrh	r3, [r7, #14]
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	371c      	adds	r7, #28
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr
 80152f2:	bf00      	nop
 80152f4:	0801aa0c 	.word	0x0801aa0c

080152f8 <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 80152f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152fa:	b0cf      	sub	sp, #316	; 0x13c
 80152fc:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 80152fe:	2300      	movs	r3, #0
 8015300:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 8015304:	2300      	movs	r3, #0
 8015306:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 801530a:	2300      	movs	r3, #0
 801530c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 8015310:	f7f7 f92a 	bl	800c568 <ZIGBEE_Get_NotificationPayloadBuffer>
 8015314:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

    switch (p_notification->ID) {
 8015318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	f240 421c 	movw	r2, #1052	; 0x41c
 8015322:	4293      	cmp	r3, r2
 8015324:	f201 82f0 	bhi.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 8015328:	f240 4205 	movw	r2, #1029	; 0x405
 801532c:	4293      	cmp	r3, r2
 801532e:	d22d      	bcs.n	801538c <Zigbee_CallBackProcessing+0x94>
 8015330:	f240 321d 	movw	r2, #797	; 0x31d
 8015334:	4293      	cmp	r3, r2
 8015336:	f201 82e7 	bhi.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 801533a:	f240 3206 	movw	r2, #774	; 0x306
 801533e:	4293      	cmp	r3, r2
 8015340:	d25c      	bcs.n	80153fc <Zigbee_CallBackProcessing+0x104>
 8015342:	f240 2209 	movw	r2, #521	; 0x209
 8015346:	4293      	cmp	r3, r2
 8015348:	f000 847e 	beq.w	8015c48 <Zigbee_CallBackProcessing+0x950>
 801534c:	f240 2209 	movw	r2, #521	; 0x209
 8015350:	4293      	cmp	r3, r2
 8015352:	f201 82d9 	bhi.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 8015356:	f240 2207 	movw	r2, #519	; 0x207
 801535a:	4293      	cmp	r3, r2
 801535c:	f000 8443 	beq.w	8015be6 <Zigbee_CallBackProcessing+0x8ee>
 8015360:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8015364:	f081 82d0 	bcs.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 8015368:	f240 2205 	movw	r2, #517	; 0x205
 801536c:	4293      	cmp	r3, r2
 801536e:	f000 840c 	beq.w	8015b8a <Zigbee_CallBackProcessing+0x892>
 8015372:	f240 2205 	movw	r2, #517	; 0x205
 8015376:	4293      	cmp	r3, r2
 8015378:	f201 82c6 	bhi.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 801537c:	2b3e      	cmp	r3, #62	; 0x3e
 801537e:	f200 8133 	bhi.w	80155e8 <Zigbee_CallBackProcessing+0x2f0>
 8015382:	2b0d      	cmp	r3, #13
 8015384:	f080 80c4 	bcs.w	8015510 <Zigbee_CallBackProcessing+0x218>
 8015388:	f001 babe 	b.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 801538c:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8015390:	2b17      	cmp	r3, #23
 8015392:	f201 82b9 	bhi.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 8015396:	a201      	add	r2, pc, #4	; (adr r2, 801539c <Zigbee_CallBackProcessing+0xa4>)
 8015398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801539c:	0801659f 	.word	0x0801659f
 80153a0:	08016909 	.word	0x08016909
 80153a4:	08016909 	.word	0x08016909
 80153a8:	08016909 	.word	0x08016909
 80153ac:	08016909 	.word	0x08016909
 80153b0:	080165e7 	.word	0x080165e7
 80153b4:	08016909 	.word	0x08016909
 80153b8:	08016909 	.word	0x08016909
 80153bc:	08016909 	.word	0x08016909
 80153c0:	08016909 	.word	0x08016909
 80153c4:	0801662f 	.word	0x0801662f
 80153c8:	08016909 	.word	0x08016909
 80153cc:	08016909 	.word	0x08016909
 80153d0:	08016909 	.word	0x08016909
 80153d4:	080166a3 	.word	0x080166a3
 80153d8:	08016909 	.word	0x08016909
 80153dc:	08016909 	.word	0x08016909
 80153e0:	0801672d 	.word	0x0801672d
 80153e4:	08016909 	.word	0x08016909
 80153e8:	08016787 	.word	0x08016787
 80153ec:	08016909 	.word	0x08016909
 80153f0:	080167e1 	.word	0x080167e1
 80153f4:	08016909 	.word	0x08016909
 80153f8:	0801683b 	.word	0x0801683b
 80153fc:	f2a3 3306 	subw	r3, r3, #774	; 0x306
 8015400:	2b17      	cmp	r3, #23
 8015402:	f201 8281 	bhi.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 8015406:	a201      	add	r2, pc, #4	; (adr r2, 801540c <Zigbee_CallBackProcessing+0x114>)
 8015408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801540c:	08015cc9 	.word	0x08015cc9
 8015410:	08016909 	.word	0x08016909
 8015414:	08015d81 	.word	0x08015d81
 8015418:	08016909 	.word	0x08016909
 801541c:	08016909 	.word	0x08016909
 8015420:	08016909 	.word	0x08016909
 8015424:	08015ddd 	.word	0x08015ddd
 8015428:	08016909 	.word	0x08016909
 801542c:	08015e39 	.word	0x08015e39
 8015430:	08016909 	.word	0x08016909
 8015434:	08016909 	.word	0x08016909
 8015438:	08016909 	.word	0x08016909
 801543c:	08016909 	.word	0x08016909
 8015440:	08016909 	.word	0x08016909
 8015444:	08016909 	.word	0x08016909
 8015448:	08016909 	.word	0x08016909
 801544c:	08016909 	.word	0x08016909
 8015450:	08016909 	.word	0x08016909
 8015454:	08016909 	.word	0x08016909
 8015458:	08016909 	.word	0x08016909
 801545c:	08016909 	.word	0x08016909
 8015460:	08016909 	.word	0x08016909
 8015464:	08016909 	.word	0x08016909
 8015468:	08015d25 	.word	0x08015d25
 801546c:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8015470:	2b24      	cmp	r3, #36	; 0x24
 8015472:	f201 8249 	bhi.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 8015476:	a201      	add	r2, pc, #4	; (adr r2, 801547c <Zigbee_CallBackProcessing+0x184>)
 8015478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801547c:	08015f37 	.word	0x08015f37
 8015480:	08016909 	.word	0x08016909
 8015484:	08015f8f 	.word	0x08015f8f
 8015488:	08016909 	.word	0x08016909
 801548c:	08016001 	.word	0x08016001
 8015490:	08016909 	.word	0x08016909
 8015494:	08016059 	.word	0x08016059
 8015498:	08016909 	.word	0x08016909
 801549c:	080160b1 	.word	0x080160b1
 80154a0:	08016909 	.word	0x08016909
 80154a4:	08016109 	.word	0x08016109
 80154a8:	08016909 	.word	0x08016909
 80154ac:	08016161 	.word	0x08016161
 80154b0:	08016909 	.word	0x08016909
 80154b4:	080161b7 	.word	0x080161b7
 80154b8:	08016909 	.word	0x08016909
 80154bc:	08016909 	.word	0x08016909
 80154c0:	08016909 	.word	0x08016909
 80154c4:	08015e95 	.word	0x08015e95
 80154c8:	08016909 	.word	0x08016909
 80154cc:	08016201 	.word	0x08016201
 80154d0:	08016909 	.word	0x08016909
 80154d4:	0801625b 	.word	0x0801625b
 80154d8:	08016909 	.word	0x08016909
 80154dc:	080162b5 	.word	0x080162b5
 80154e0:	08016909 	.word	0x08016909
 80154e4:	08016329 	.word	0x08016329
 80154e8:	08016909 	.word	0x08016909
 80154ec:	08016383 	.word	0x08016383
 80154f0:	08016909 	.word	0x08016909
 80154f4:	080163dd 	.word	0x080163dd
 80154f8:	08016909 	.word	0x08016909
 80154fc:	08016437 	.word	0x08016437
 8015500:	08016909 	.word	0x08016909
 8015504:	08016491 	.word	0x08016491
 8015508:	08016909 	.word	0x08016909
 801550c:	080164eb 	.word	0x080164eb
 8015510:	3b0d      	subs	r3, #13
 8015512:	2b31      	cmp	r3, #49	; 0x31
 8015514:	f201 81f8 	bhi.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 8015518:	a201      	add	r2, pc, #4	; (adr r2, 8015520 <Zigbee_CallBackProcessing+0x228>)
 801551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801551e:	bf00      	nop
 8015520:	080155fd 	.word	0x080155fd
 8015524:	08016909 	.word	0x08016909
 8015528:	08016909 	.word	0x08016909
 801552c:	08016909 	.word	0x08016909
 8015530:	08016909 	.word	0x08016909
 8015534:	08015663 	.word	0x08015663
 8015538:	08016909 	.word	0x08016909
 801553c:	08016909 	.word	0x08016909
 8015540:	08016909 	.word	0x08016909
 8015544:	08016909 	.word	0x08016909
 8015548:	08016909 	.word	0x08016909
 801554c:	08016909 	.word	0x08016909
 8015550:	08016909 	.word	0x08016909
 8015554:	080156d7 	.word	0x080156d7
 8015558:	08016909 	.word	0x08016909
 801555c:	08016909 	.word	0x08016909
 8015560:	08015733 	.word	0x08015733
 8015564:	08016909 	.word	0x08016909
 8015568:	0801579b 	.word	0x0801579b
 801556c:	08016909 	.word	0x08016909
 8015570:	08015803 	.word	0x08015803
 8015574:	08016909 	.word	0x08016909
 8015578:	0801586b 	.word	0x0801586b
 801557c:	08016909 	.word	0x08016909
 8015580:	08016909 	.word	0x08016909
 8015584:	080158d3 	.word	0x080158d3
 8015588:	08016909 	.word	0x08016909
 801558c:	08016909 	.word	0x08016909
 8015590:	08015955 	.word	0x08015955
 8015594:	08016909 	.word	0x08016909
 8015598:	080159bd 	.word	0x080159bd
 801559c:	08016909 	.word	0x08016909
 80155a0:	08016909 	.word	0x08016909
 80155a4:	08016909 	.word	0x08016909
 80155a8:	080159db 	.word	0x080159db
 80155ac:	08016909 	.word	0x08016909
 80155b0:	08016909 	.word	0x08016909
 80155b4:	08016909 	.word	0x08016909
 80155b8:	08015a33 	.word	0x08015a33
 80155bc:	08016909 	.word	0x08016909
 80155c0:	08016909 	.word	0x08016909
 80155c4:	08016909 	.word	0x08016909
 80155c8:	08016909 	.word	0x08016909
 80155cc:	08016909 	.word	0x08016909
 80155d0:	08015a83 	.word	0x08015a83
 80155d4:	08016909 	.word	0x08016909
 80155d8:	08015adb 	.word	0x08015adb
 80155dc:	08016909 	.word	0x08016909
 80155e0:	08015b33 	.word	0x08015b33
 80155e4:	080168b5 	.word	0x080168b5
 80155e8:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80155ec:	f081 818c 	bcs.w	8016908 <Zigbee_CallBackProcessing+0x1610>
 80155f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80155f4:	f63f af3a 	bhi.w	801546c <Zigbee_CallBackProcessing+0x174>
 80155f8:	f001 b986 	b.w	8016908 <Zigbee_CallBackProcessing+0x1610>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 80155fc:	4bbb      	ldr	r3, [pc, #748]	; (80158ec <Zigbee_CallBackProcessing+0x5f4>)
 80155fe:	2200      	movs	r2, #0
 8015600:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 8015602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015606:	685b      	ldr	r3, [r3, #4]
 8015608:	2b01      	cmp	r3, #1
 801560a:	d006      	beq.n	801561a <Zigbee_CallBackProcessing+0x322>
 801560c:	4bb8      	ldr	r3, [pc, #736]	; (80158f0 <Zigbee_CallBackProcessing+0x5f8>)
 801560e:	4ab9      	ldr	r2, [pc, #740]	; (80158f4 <Zigbee_CallBackProcessing+0x5fc>)
 8015610:	f640 6157 	movw	r1, #3671	; 0xe57
 8015614:	48b8      	ldr	r0, [pc, #736]	; (80158f8 <Zigbee_CallBackProcessing+0x600>)
 8015616:	f002 fa25 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 801561a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801561e:	689b      	ldr	r3, [r3, #8]
 8015620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015624:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015628:	2b00      	cmp	r3, #0
 801562a:	f001 8171 	beq.w	8016910 <Zigbee_CallBackProcessing+0x1618>
 801562e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	f001 816b 	beq.w	8016910 <Zigbee_CallBackProcessing+0x1618>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 801563a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801563e:	681a      	ldr	r2, [r3, #0]
 8015640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015644:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8015648:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 801564a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801564e:	685a      	ldr	r2, [r3, #4]
 8015650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015654:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	4610      	mov	r0, r2
 801565c:	4798      	blx	r3
            }
            break;
 801565e:	f001 b957 	b.w	8016910 <Zigbee_CallBackProcessing+0x1618>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 8015662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015666:	685b      	ldr	r3, [r3, #4]
 8015668:	2b03      	cmp	r3, #3
 801566a:	d006      	beq.n	801567a <Zigbee_CallBackProcessing+0x382>
 801566c:	4ba3      	ldr	r3, [pc, #652]	; (80158fc <Zigbee_CallBackProcessing+0x604>)
 801566e:	4aa1      	ldr	r2, [pc, #644]	; (80158f4 <Zigbee_CallBackProcessing+0x5fc>)
 8015670:	f640 6166 	movw	r1, #3686	; 0xe66
 8015674:	48a0      	ldr	r0, [pc, #640]	; (80158f8 <Zigbee_CallBackProcessing+0x600>)
 8015676:	f002 f9f5 	bl	8017a64 <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 801567a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801567e:	691a      	ldr	r2, [r3, #16]
 8015680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015684:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015688:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 801568a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801568e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	685d      	ldr	r5, [r3, #4]
 8015696:	4b95      	ldr	r3, [pc, #596]	; (80158ec <Zigbee_CallBackProcessing+0x5f4>)
 8015698:	6818      	ldr	r0, [r3, #0]
 801569a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801569e:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 80156a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80156a4:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 80156a6:	461e      	mov	r6, r3
 80156a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80156ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	689b      	ldr	r3, [r3, #8]
 80156b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80156b8:	f2a2 141d 	subw	r4, r2, #285	; 0x11d
 80156bc:	4632      	mov	r2, r6
 80156be:	47a8      	blx	r5
 80156c0:	4603      	mov	r3, r0
 80156c2:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 80156c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80156c8:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            break;
 80156d2:	f001 b980 	b.w	80169d6 <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 80156d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	2b01      	cmp	r3, #1
 80156de:	d006      	beq.n	80156ee <Zigbee_CallBackProcessing+0x3f6>
 80156e0:	4b83      	ldr	r3, [pc, #524]	; (80158f0 <Zigbee_CallBackProcessing+0x5f8>)
 80156e2:	4a84      	ldr	r2, [pc, #528]	; (80158f4 <Zigbee_CallBackProcessing+0x5fc>)
 80156e4:	f640 6172 	movw	r1, #3698	; 0xe72
 80156e8:	4883      	ldr	r0, [pc, #524]	; (80158f8 <Zigbee_CallBackProcessing+0x600>)
 80156ea:	f002 f9bb 	bl	8017a64 <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 80156ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80156f2:	689a      	ldr	r2, [r3, #8]
 80156f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80156f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80156fc:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 80156fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015702:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	2b00      	cmp	r3, #0
 801570c:	f001 8102 	beq.w	8016914 <Zigbee_CallBackProcessing+0x161c>
                timer->callback(NULL, timer->arg);
 8015710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015714:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015720:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8015724:	6812      	ldr	r2, [r2, #0]
 8015726:	6852      	ldr	r2, [r2, #4]
 8015728:	4611      	mov	r1, r2
 801572a:	2000      	movs	r0, #0
 801572c:	4798      	blx	r3
            }
            break;
 801572e:	f001 b8f1 	b.w	8016914 <Zigbee_CallBackProcessing+0x161c>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 8015732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015736:	685b      	ldr	r3, [r3, #4]
 8015738:	2b02      	cmp	r3, #2
 801573a:	d006      	beq.n	801574a <Zigbee_CallBackProcessing+0x452>
 801573c:	4b70      	ldr	r3, [pc, #448]	; (8015900 <Zigbee_CallBackProcessing+0x608>)
 801573e:	4a6d      	ldr	r2, [pc, #436]	; (80158f4 <Zigbee_CallBackProcessing+0x5fc>)
 8015740:	f640 617b 	movw	r1, #3707	; 0xe7b
 8015744:	486c      	ldr	r0, [pc, #432]	; (80158f8 <Zigbee_CallBackProcessing+0x600>)
 8015746:	f002 f98d 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801574a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801574e:	68db      	ldr	r3, [r3, #12]
 8015750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015754:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015758:	2b00      	cmp	r3, #0
 801575a:	f001 80dd 	beq.w	8016918 <Zigbee_CallBackProcessing+0x1620>
 801575e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	2b00      	cmp	r3, #0
 8015766:	f001 80d7 	beq.w	8016918 <Zigbee_CallBackProcessing+0x1620>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 801576a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801576e:	681a      	ldr	r2, [r3, #0]
 8015770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015774:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8015778:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 801577a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801577e:	689b      	ldr	r3, [r3, #8]
 8015780:	b2da      	uxtb	r2, r3
 8015782:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015786:	6859      	ldr	r1, [r3, #4]
 8015788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801578c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	4610      	mov	r0, r2
 8015794:	4798      	blx	r3
            }
            break;
 8015796:	f001 b8bf 	b.w	8016918 <Zigbee_CallBackProcessing+0x1620>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 801579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801579e:	685b      	ldr	r3, [r3, #4]
 80157a0:	2b02      	cmp	r3, #2
 80157a2:	d006      	beq.n	80157b2 <Zigbee_CallBackProcessing+0x4ba>
 80157a4:	4b56      	ldr	r3, [pc, #344]	; (8015900 <Zigbee_CallBackProcessing+0x608>)
 80157a6:	4a53      	ldr	r2, [pc, #332]	; (80158f4 <Zigbee_CallBackProcessing+0x5fc>)
 80157a8:	f640 6186 	movw	r1, #3718	; 0xe86
 80157ac:	4852      	ldr	r0, [pc, #328]	; (80158f8 <Zigbee_CallBackProcessing+0x600>)
 80157ae:	f002 f959 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80157b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80157b6:	68db      	ldr	r3, [r3, #12]
 80157b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80157bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	f001 80ab 	beq.w	801691c <Zigbee_CallBackProcessing+0x1624>
 80157c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	f001 80a5 	beq.w	801691c <Zigbee_CallBackProcessing+0x1624>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 80157d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80157d6:	681a      	ldr	r2, [r3, #0]
 80157d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80157dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80157e0:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 80157e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80157e6:	689b      	ldr	r3, [r3, #8]
 80157e8:	4618      	mov	r0, r3
 80157ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80157ee:	685a      	ldr	r2, [r3, #4]
 80157f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80157f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	4611      	mov	r1, r2
 80157fc:	4798      	blx	r3
            }
            break;
 80157fe:	f001 b88d 	b.w	801691c <Zigbee_CallBackProcessing+0x1624>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 8015802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	2b02      	cmp	r3, #2
 801580a:	d006      	beq.n	801581a <Zigbee_CallBackProcessing+0x522>
 801580c:	4b3c      	ldr	r3, [pc, #240]	; (8015900 <Zigbee_CallBackProcessing+0x608>)
 801580e:	4a39      	ldr	r2, [pc, #228]	; (80158f4 <Zigbee_CallBackProcessing+0x5fc>)
 8015810:	f640 6191 	movw	r1, #3729	; 0xe91
 8015814:	4838      	ldr	r0, [pc, #224]	; (80158f8 <Zigbee_CallBackProcessing+0x600>)
 8015816:	f002 f925 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801581a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801581e:	68db      	ldr	r3, [r3, #12]
 8015820:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015824:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015828:	2b00      	cmp	r3, #0
 801582a:	f001 8079 	beq.w	8016920 <Zigbee_CallBackProcessing+0x1628>
 801582e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	2b00      	cmp	r3, #0
 8015836:	f001 8073 	beq.w	8016920 <Zigbee_CallBackProcessing+0x1628>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 801583a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801583e:	681a      	ldr	r2, [r3, #0]
 8015840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015844:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015848:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 801584a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801584e:	689b      	ldr	r3, [r3, #8]
 8015850:	b2da      	uxtb	r2, r3
 8015852:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015856:	6859      	ldr	r1, [r3, #4]
 8015858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801585c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	4610      	mov	r0, r2
 8015864:	4798      	blx	r3
            }
            break;
 8015866:	f001 b85b 	b.w	8016920 <Zigbee_CallBackProcessing+0x1628>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 801586a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801586e:	685b      	ldr	r3, [r3, #4]
 8015870:	2b02      	cmp	r3, #2
 8015872:	d006      	beq.n	8015882 <Zigbee_CallBackProcessing+0x58a>
 8015874:	4b22      	ldr	r3, [pc, #136]	; (8015900 <Zigbee_CallBackProcessing+0x608>)
 8015876:	4a1f      	ldr	r2, [pc, #124]	; (80158f4 <Zigbee_CallBackProcessing+0x5fc>)
 8015878:	f640 619c 	movw	r1, #3740	; 0xe9c
 801587c:	481e      	ldr	r0, [pc, #120]	; (80158f8 <Zigbee_CallBackProcessing+0x600>)
 801587e:	f002 f8f1 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015886:	68db      	ldr	r3, [r3, #12]
 8015888:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801588c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015890:	2b00      	cmp	r3, #0
 8015892:	f001 8047 	beq.w	8016924 <Zigbee_CallBackProcessing+0x162c>
 8015896:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	2b00      	cmp	r3, #0
 801589e:	f001 8041 	beq.w	8016924 <Zigbee_CallBackProcessing+0x162c>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 80158a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80158a6:	681a      	ldr	r2, [r3, #0]
 80158a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80158ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80158b0:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 80158b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80158b6:	689b      	ldr	r3, [r3, #8]
 80158b8:	b2da      	uxtb	r2, r3
 80158ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80158be:	6859      	ldr	r1, [r3, #4]
 80158c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80158c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	4610      	mov	r0, r2
 80158cc:	4798      	blx	r3
            }
            break;
 80158ce:	f001 b829 	b.w	8016924 <Zigbee_CallBackProcessing+0x162c>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 80158d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80158d6:	685b      	ldr	r3, [r3, #4]
 80158d8:	2b02      	cmp	r3, #2
 80158da:	d013      	beq.n	8015904 <Zigbee_CallBackProcessing+0x60c>
 80158dc:	4b08      	ldr	r3, [pc, #32]	; (8015900 <Zigbee_CallBackProcessing+0x608>)
 80158de:	4a05      	ldr	r2, [pc, #20]	; (80158f4 <Zigbee_CallBackProcessing+0x5fc>)
 80158e0:	f640 61a7 	movw	r1, #3751	; 0xea7
 80158e4:	4804      	ldr	r0, [pc, #16]	; (80158f8 <Zigbee_CallBackProcessing+0x600>)
 80158e6:	f002 f8bd 	bl	8017a64 <__assert_func>
 80158ea:	bf00      	nop
 80158ec:	20001a3c 	.word	0x20001a3c
 80158f0:	0801a610 	.word	0x0801a610
 80158f4:	0801ac50 	.word	0x0801ac50
 80158f8:	0801a578 	.word	0x0801a578
 80158fc:	0801a62c 	.word	0x0801a62c
 8015900:	0801a648 	.word	0x0801a648
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015908:	68db      	ldr	r3, [r3, #12]
 801590a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801590e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015912:	2b00      	cmp	r3, #0
 8015914:	f001 8008 	beq.w	8016928 <Zigbee_CallBackProcessing+0x1630>
 8015918:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	f001 8002 	beq.w	8016928 <Zigbee_CallBackProcessing+0x1630>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 8015924:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015928:	681a      	ldr	r2, [r3, #0]
 801592a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801592e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015932:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 8015934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015938:	689b      	ldr	r3, [r3, #8]
 801593a:	b2da      	uxtb	r2, r3
 801593c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015940:	6859      	ldr	r1, [r3, #4]
 8015942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	4610      	mov	r0, r2
 801594e:	4798      	blx	r3
            }
            break;
 8015950:	f000 bfea 	b.w	8016928 <Zigbee_CallBackProcessing+0x1630>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 8015954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	2b02      	cmp	r3, #2
 801595c:	d006      	beq.n	801596c <Zigbee_CallBackProcessing+0x674>
 801595e:	4bc2      	ldr	r3, [pc, #776]	; (8015c68 <Zigbee_CallBackProcessing+0x970>)
 8015960:	4ac2      	ldr	r2, [pc, #776]	; (8015c6c <Zigbee_CallBackProcessing+0x974>)
 8015962:	f640 61b2 	movw	r1, #3762	; 0xeb2
 8015966:	48c2      	ldr	r0, [pc, #776]	; (8015c70 <Zigbee_CallBackProcessing+0x978>)
 8015968:	f002 f87c 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801596c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015970:	68db      	ldr	r3, [r3, #12]
 8015972:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015976:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801597a:	2b00      	cmp	r3, #0
 801597c:	f000 87d6 	beq.w	801692c <Zigbee_CallBackProcessing+0x1634>
 8015980:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	f000 87d0 	beq.w	801692c <Zigbee_CallBackProcessing+0x1634>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 801598c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015990:	681a      	ldr	r2, [r3, #0]
 8015992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015996:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801599a:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 801599c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80159a0:	689b      	ldr	r3, [r3, #8]
 80159a2:	b2da      	uxtb	r2, r3
 80159a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80159a8:	6859      	ldr	r1, [r3, #4]
 80159aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80159ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	4610      	mov	r0, r2
 80159b6:	4798      	blx	r3
            }
            break;
 80159b8:	f000 bfb8 	b.w	801692c <Zigbee_CallBackProcessing+0x1634>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 80159bc:	4bad      	ldr	r3, [pc, #692]	; (8015c74 <Zigbee_CallBackProcessing+0x97c>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	f000 87b5 	beq.w	8016930 <Zigbee_CallBackProcessing+0x1638>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 80159c6:	4bab      	ldr	r3, [pc, #684]	; (8015c74 <Zigbee_CallBackProcessing+0x97c>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	4aab      	ldr	r2, [pc, #684]	; (8015c78 <Zigbee_CallBackProcessing+0x980>)
 80159cc:	6812      	ldr	r2, [r2, #0]
 80159ce:	49ab      	ldr	r1, [pc, #684]	; (8015c7c <Zigbee_CallBackProcessing+0x984>)
 80159d0:	6809      	ldr	r1, [r1, #0]
 80159d2:	4610      	mov	r0, r2
 80159d4:	4798      	blx	r3
            }
            break;
 80159d6:	f000 bfab 	b.w	8016930 <Zigbee_CallBackProcessing+0x1638>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 80159da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80159de:	685b      	ldr	r3, [r3, #4]
 80159e0:	2b02      	cmp	r3, #2
 80159e2:	d006      	beq.n	80159f2 <Zigbee_CallBackProcessing+0x6fa>
 80159e4:	4ba0      	ldr	r3, [pc, #640]	; (8015c68 <Zigbee_CallBackProcessing+0x970>)
 80159e6:	4aa1      	ldr	r2, [pc, #644]	; (8015c6c <Zigbee_CallBackProcessing+0x974>)
 80159e8:	f640 61c3 	movw	r1, #3779	; 0xec3
 80159ec:	48a0      	ldr	r0, [pc, #640]	; (8015c70 <Zigbee_CallBackProcessing+0x978>)
 80159ee:	f002 f839 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80159f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80159f6:	68db      	ldr	r3, [r3, #12]
 80159f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80159fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	f000 8797 	beq.w	8016934 <Zigbee_CallBackProcessing+0x163c>
 8015a06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	f000 8791 	beq.w	8016934 <Zigbee_CallBackProcessing+0x163c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8015a12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	637b      	str	r3, [r7, #52]	; 0x34
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8015a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015a1e:	689b      	ldr	r3, [r3, #8]
 8015a20:	4618      	mov	r0, r3
 8015a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a26:	685a      	ldr	r2, [r3, #4]
 8015a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a2a:	4611      	mov	r1, r2
 8015a2c:	4798      	blx	r3
            }
            break;
 8015a2e:	f000 bf81 	b.w	8016934 <Zigbee_CallBackProcessing+0x163c>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 8015a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015a36:	685b      	ldr	r3, [r3, #4]
 8015a38:	2b01      	cmp	r3, #1
 8015a3a:	d006      	beq.n	8015a4a <Zigbee_CallBackProcessing+0x752>
 8015a3c:	4b90      	ldr	r3, [pc, #576]	; (8015c80 <Zigbee_CallBackProcessing+0x988>)
 8015a3e:	4a8b      	ldr	r2, [pc, #556]	; (8015c6c <Zigbee_CallBackProcessing+0x974>)
 8015a40:	f640 61ce 	movw	r1, #3790	; 0xece
 8015a44:	488a      	ldr	r0, [pc, #552]	; (8015c70 <Zigbee_CallBackProcessing+0x978>)
 8015a46:	f002 f80d 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8015a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015a4e:	689b      	ldr	r3, [r3, #8]
 8015a50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	f000 876d 	beq.w	8016938 <Zigbee_CallBackProcessing+0x1640>
 8015a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	f000 8767 	beq.w	8016938 <Zigbee_CallBackProcessing+0x1640>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8015a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	63bb      	str	r3, [r7, #56]	; 0x38
                callback(info->arg);
 8015a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a76:	685a      	ldr	r2, [r3, #4]
 8015a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a7a:	4610      	mov	r0, r2
 8015a7c:	4798      	blx	r3
            }
            break;
 8015a7e:	f000 bf5b 	b.w	8016938 <Zigbee_CallBackProcessing+0x1640>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 8015a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015a86:	685b      	ldr	r3, [r3, #4]
 8015a88:	2b02      	cmp	r3, #2
 8015a8a:	d006      	beq.n	8015a9a <Zigbee_CallBackProcessing+0x7a2>
 8015a8c:	4b76      	ldr	r3, [pc, #472]	; (8015c68 <Zigbee_CallBackProcessing+0x970>)
 8015a8e:	4a77      	ldr	r2, [pc, #476]	; (8015c6c <Zigbee_CallBackProcessing+0x974>)
 8015a90:	f640 61da 	movw	r1, #3802	; 0xeda
 8015a94:	4876      	ldr	r0, [pc, #472]	; (8015c70 <Zigbee_CallBackProcessing+0x978>)
 8015a96:	f001 ffe5 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015a9e:	68db      	ldr	r3, [r3, #12]
 8015aa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015aa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	f000 8747 	beq.w	801693c <Zigbee_CallBackProcessing+0x1644>
 8015aae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	f000 8741 	beq.w	801693c <Zigbee_CallBackProcessing+0x1644>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 8015aba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 8015ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015ac6:	689b      	ldr	r3, [r3, #8]
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015ace:	685a      	ldr	r2, [r3, #4]
 8015ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ad2:	4611      	mov	r1, r2
 8015ad4:	4798      	blx	r3
            }
            break;
 8015ad6:	f000 bf31 	b.w	801693c <Zigbee_CallBackProcessing+0x1644>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 8015ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015ade:	685b      	ldr	r3, [r3, #4]
 8015ae0:	2b02      	cmp	r3, #2
 8015ae2:	d006      	beq.n	8015af2 <Zigbee_CallBackProcessing+0x7fa>
 8015ae4:	4b60      	ldr	r3, [pc, #384]	; (8015c68 <Zigbee_CallBackProcessing+0x970>)
 8015ae6:	4a61      	ldr	r2, [pc, #388]	; (8015c6c <Zigbee_CallBackProcessing+0x974>)
 8015ae8:	f640 61e6 	movw	r1, #3814	; 0xee6
 8015aec:	4860      	ldr	r0, [pc, #384]	; (8015c70 <Zigbee_CallBackProcessing+0x978>)
 8015aee:	f001 ffb9 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015af6:	68db      	ldr	r3, [r3, #12]
 8015af8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	f000 871d 	beq.w	8016940 <Zigbee_CallBackProcessing+0x1648>
 8015b06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	f000 8717 	beq.w	8016940 <Zigbee_CallBackProcessing+0x1648>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 8015b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	643b      	str	r3, [r7, #64]	; 0x40
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 8015b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015b1e:	689b      	ldr	r3, [r3, #8]
 8015b20:	4618      	mov	r0, r3
 8015b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b26:	685a      	ldr	r2, [r3, #4]
 8015b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b2a:	4611      	mov	r1, r2
 8015b2c:	4798      	blx	r3
            }
            break;
 8015b2e:	f000 bf07 	b.w	8016940 <Zigbee_CallBackProcessing+0x1648>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 8015b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015b36:	685b      	ldr	r3, [r3, #4]
 8015b38:	2b02      	cmp	r3, #2
 8015b3a:	d006      	beq.n	8015b4a <Zigbee_CallBackProcessing+0x852>
 8015b3c:	4b4a      	ldr	r3, [pc, #296]	; (8015c68 <Zigbee_CallBackProcessing+0x970>)
 8015b3e:	4a4b      	ldr	r2, [pc, #300]	; (8015c6c <Zigbee_CallBackProcessing+0x974>)
 8015b40:	f640 61f2 	movw	r1, #3826	; 0xef2
 8015b44:	484a      	ldr	r0, [pc, #296]	; (8015c70 <Zigbee_CallBackProcessing+0x978>)
 8015b46:	f001 ff8d 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015b4e:	68db      	ldr	r3, [r3, #12]
 8015b50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015b54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	f000 86f3 	beq.w	8016944 <Zigbee_CallBackProcessing+0x164c>
 8015b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	f000 86ed 	beq.w	8016944 <Zigbee_CallBackProcessing+0x164c>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8015b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	647b      	str	r3, [r7, #68]	; 0x44
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 8015b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015b76:	689b      	ldr	r3, [r3, #8]
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b7e:	685a      	ldr	r2, [r3, #4]
 8015b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b82:	4611      	mov	r1, r2
 8015b84:	4798      	blx	r3
            }
            break;
 8015b86:	f000 bedd 	b.w	8016944 <Zigbee_CallBackProcessing+0x164c>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 8015b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015b8e:	685b      	ldr	r3, [r3, #4]
 8015b90:	2b02      	cmp	r3, #2
 8015b92:	d006      	beq.n	8015ba2 <Zigbee_CallBackProcessing+0x8aa>
 8015b94:	4b34      	ldr	r3, [pc, #208]	; (8015c68 <Zigbee_CallBackProcessing+0x970>)
 8015b96:	4a35      	ldr	r2, [pc, #212]	; (8015c6c <Zigbee_CallBackProcessing+0x974>)
 8015b98:	f640 61fd 	movw	r1, #3837	; 0xefd
 8015b9c:	4834      	ldr	r0, [pc, #208]	; (8015c70 <Zigbee_CallBackProcessing+0x978>)
 8015b9e:	f001 ff61 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015ba6:	68db      	ldr	r3, [r3, #12]
 8015ba8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015bac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	f000 86c9 	beq.w	8016948 <Zigbee_CallBackProcessing+0x1650>
 8015bb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	f000 86c3 	beq.w	8016948 <Zigbee_CallBackProcessing+0x1650>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8015bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8015bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015bd0:	689b      	ldr	r3, [r3, #8]
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bd8:	685a      	ldr	r2, [r3, #4]
 8015bda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015bde:	4611      	mov	r1, r2
 8015be0:	4798      	blx	r3
            }
            break;
 8015be2:	f000 beb1 	b.w	8016948 <Zigbee_CallBackProcessing+0x1650>

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8015be6:	2300      	movs	r3, #0
 8015be8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

            assert(p_notification->Size == 2);
 8015bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015bf0:	685b      	ldr	r3, [r3, #4]
 8015bf2:	2b02      	cmp	r3, #2
 8015bf4:	d006      	beq.n	8015c04 <Zigbee_CallBackProcessing+0x90c>
 8015bf6:	4b1c      	ldr	r3, [pc, #112]	; (8015c68 <Zigbee_CallBackProcessing+0x970>)
 8015bf8:	4a1c      	ldr	r2, [pc, #112]	; (8015c6c <Zigbee_CallBackProcessing+0x974>)
 8015bfa:	f640 710d 	movw	r1, #3853	; 0xf0d
 8015bfe:	481c      	ldr	r0, [pc, #112]	; (8015c70 <Zigbee_CallBackProcessing+0x978>)
 8015c00:	f001 ff30 	bl	8017a64 <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8015c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015c08:	689b      	ldr	r3, [r3, #8]
 8015c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8015c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015c12:	68db      	ldr	r3, [r3, #12]
 8015c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            if (aps_filter_cb->callback != NULL) {
 8015c18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d00b      	beq.n	8015c3a <Zigbee_CallBackProcessing+0x942>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8015c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015c26:	685b      	ldr	r3, [r3, #4]
 8015c28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015c2c:	6892      	ldr	r2, [r2, #8]
 8015c2e:	4611      	mov	r1, r2
 8015c30:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8015c34:	4798      	blx	r3
 8015c36:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8015c3a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015c42:	60da      	str	r2, [r3, #12]
            break;
 8015c44:	f000 bec7 	b.w	80169d6 <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8015c48:	2300      	movs	r3, #0
 8015c4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

            assert(p_notification->Size == 2);
 8015c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	2b02      	cmp	r3, #2
 8015c56:	d015      	beq.n	8015c84 <Zigbee_CallBackProcessing+0x98c>
 8015c58:	4b03      	ldr	r3, [pc, #12]	; (8015c68 <Zigbee_CallBackProcessing+0x970>)
 8015c5a:	4a04      	ldr	r2, [pc, #16]	; (8015c6c <Zigbee_CallBackProcessing+0x974>)
 8015c5c:	f640 711e 	movw	r1, #3870	; 0xf1e
 8015c60:	4803      	ldr	r0, [pc, #12]	; (8015c70 <Zigbee_CallBackProcessing+0x978>)
 8015c62:	f001 feff 	bl	8017a64 <__assert_func>
 8015c66:	bf00      	nop
 8015c68:	0801a648 	.word	0x0801a648
 8015c6c:	0801ac50 	.word	0x0801ac50
 8015c70:	0801a578 	.word	0x0801a578
 8015c74:	20001a2c 	.word	0x20001a2c
 8015c78:	20001a3c 	.word	0x20001a3c
 8015c7c:	20001a30 	.word	0x20001a30
 8015c80:	0801a610 	.word	0x0801a610
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8015c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015c88:	689b      	ldr	r3, [r3, #8]
 8015c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8015c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015c92:	68db      	ldr	r3, [r3, #12]
 8015c94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (aps_filter_cb->callback != NULL) {
 8015c98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015c9c:	685b      	ldr	r3, [r3, #4]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d00b      	beq.n	8015cba <Zigbee_CallBackProcessing+0x9c2>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8015ca2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015cac:	6892      	ldr	r2, [r2, #8]
 8015cae:	4611      	mov	r1, r2
 8015cb0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8015cb4:	4798      	blx	r3
 8015cb6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8015cba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8015cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015cc2:	60da      	str	r2, [r3, #12]
            break;
 8015cc4:	f000 be87 	b.w	80169d6 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 8015cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015ccc:	685b      	ldr	r3, [r3, #4]
 8015cce:	2b02      	cmp	r3, #2
 8015cd0:	d006      	beq.n	8015ce0 <Zigbee_CallBackProcessing+0x9e8>
 8015cd2:	4bc5      	ldr	r3, [pc, #788]	; (8015fe8 <Zigbee_CallBackProcessing+0xcf0>)
 8015cd4:	4ac5      	ldr	r2, [pc, #788]	; (8015fec <Zigbee_CallBackProcessing+0xcf4>)
 8015cd6:	f640 712a 	movw	r1, #3882	; 0xf2a
 8015cda:	48c5      	ldr	r0, [pc, #788]	; (8015ff0 <Zigbee_CallBackProcessing+0xcf8>)
 8015cdc:	f001 fec2 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015ce4:	68db      	ldr	r3, [r3, #12]
 8015ce6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015cea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	f000 862c 	beq.w	801694c <Zigbee_CallBackProcessing+0x1654>
 8015cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	f000 8626 	beq.w	801694c <Zigbee_CallBackProcessing+0x1654>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 8015d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 8015d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015d0e:	689b      	ldr	r3, [r3, #8]
 8015d10:	4618      	mov	r0, r3
 8015d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d16:	685a      	ldr	r2, [r3, #4]
 8015d18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015d1c:	4611      	mov	r1, r2
 8015d1e:	4798      	blx	r3
            }
            break;
 8015d20:	f000 be14 	b.w	801694c <Zigbee_CallBackProcessing+0x1654>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 8015d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015d28:	685b      	ldr	r3, [r3, #4]
 8015d2a:	2b02      	cmp	r3, #2
 8015d2c:	d006      	beq.n	8015d3c <Zigbee_CallBackProcessing+0xa44>
 8015d2e:	4bae      	ldr	r3, [pc, #696]	; (8015fe8 <Zigbee_CallBackProcessing+0xcf0>)
 8015d30:	4aae      	ldr	r2, [pc, #696]	; (8015fec <Zigbee_CallBackProcessing+0xcf4>)
 8015d32:	f640 7136 	movw	r1, #3894	; 0xf36
 8015d36:	48ae      	ldr	r0, [pc, #696]	; (8015ff0 <Zigbee_CallBackProcessing+0xcf8>)
 8015d38:	f001 fe94 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015d40:	68db      	ldr	r3, [r3, #12]
 8015d42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	f000 8600 	beq.w	8016950 <Zigbee_CallBackProcessing+0x1658>
 8015d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	f000 85fa 	beq.w	8016950 <Zigbee_CallBackProcessing+0x1658>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 8015d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 8015d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015d6a:	689b      	ldr	r3, [r3, #8]
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d72:	685a      	ldr	r2, [r3, #4]
 8015d74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015d78:	4611      	mov	r1, r2
 8015d7a:	4798      	blx	r3
            }
            break;
 8015d7c:	f000 bde8 	b.w	8016950 <Zigbee_CallBackProcessing+0x1658>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 8015d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015d84:	685b      	ldr	r3, [r3, #4]
 8015d86:	2b02      	cmp	r3, #2
 8015d88:	d006      	beq.n	8015d98 <Zigbee_CallBackProcessing+0xaa0>
 8015d8a:	4b97      	ldr	r3, [pc, #604]	; (8015fe8 <Zigbee_CallBackProcessing+0xcf0>)
 8015d8c:	4a97      	ldr	r2, [pc, #604]	; (8015fec <Zigbee_CallBackProcessing+0xcf4>)
 8015d8e:	f640 7142 	movw	r1, #3906	; 0xf42
 8015d92:	4897      	ldr	r0, [pc, #604]	; (8015ff0 <Zigbee_CallBackProcessing+0xcf8>)
 8015d94:	f001 fe66 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015d9c:	68db      	ldr	r3, [r3, #12]
 8015d9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015da2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	f000 85d4 	beq.w	8016954 <Zigbee_CallBackProcessing+0x165c>
 8015dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	f000 85ce 	beq.w	8016954 <Zigbee_CallBackProcessing+0x165c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8015db8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8015dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015dc6:	689b      	ldr	r3, [r3, #8]
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015dce:	685a      	ldr	r2, [r3, #4]
 8015dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015dd4:	4611      	mov	r1, r2
 8015dd6:	4798      	blx	r3
            }
            break;
 8015dd8:	f000 bdbc 	b.w	8016954 <Zigbee_CallBackProcessing+0x165c>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 8015ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	2b02      	cmp	r3, #2
 8015de4:	d006      	beq.n	8015df4 <Zigbee_CallBackProcessing+0xafc>
 8015de6:	4b80      	ldr	r3, [pc, #512]	; (8015fe8 <Zigbee_CallBackProcessing+0xcf0>)
 8015de8:	4a80      	ldr	r2, [pc, #512]	; (8015fec <Zigbee_CallBackProcessing+0xcf4>)
 8015dea:	f640 714d 	movw	r1, #3917	; 0xf4d
 8015dee:	4880      	ldr	r0, [pc, #512]	; (8015ff0 <Zigbee_CallBackProcessing+0xcf8>)
 8015df0:	f001 fe38 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015df8:	68db      	ldr	r3, [r3, #12]
 8015dfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	f000 85a8 	beq.w	8016958 <Zigbee_CallBackProcessing+0x1660>
 8015e08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	f000 85a2 	beq.w	8016958 <Zigbee_CallBackProcessing+0x1660>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 8015e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 8015e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015e22:	689b      	ldr	r3, [r3, #8]
 8015e24:	4618      	mov	r0, r3
 8015e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015e2a:	685a      	ldr	r2, [r3, #4]
 8015e2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015e30:	4611      	mov	r1, r2
 8015e32:	4798      	blx	r3
            }
            break;
 8015e34:	f000 bd90 	b.w	8016958 <Zigbee_CallBackProcessing+0x1660>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 8015e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015e3c:	685b      	ldr	r3, [r3, #4]
 8015e3e:	2b02      	cmp	r3, #2
 8015e40:	d006      	beq.n	8015e50 <Zigbee_CallBackProcessing+0xb58>
 8015e42:	4b69      	ldr	r3, [pc, #420]	; (8015fe8 <Zigbee_CallBackProcessing+0xcf0>)
 8015e44:	4a69      	ldr	r2, [pc, #420]	; (8015fec <Zigbee_CallBackProcessing+0xcf4>)
 8015e46:	f640 7158 	movw	r1, #3928	; 0xf58
 8015e4a:	4869      	ldr	r0, [pc, #420]	; (8015ff0 <Zigbee_CallBackProcessing+0xcf8>)
 8015e4c:	f001 fe0a 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015e54:	68db      	ldr	r3, [r3, #12]
 8015e56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015e5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	f000 857c 	beq.w	801695c <Zigbee_CallBackProcessing+0x1664>
 8015e64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	f000 8576 	beq.w	801695c <Zigbee_CallBackProcessing+0x1664>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 8015e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 8015e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015e7e:	689b      	ldr	r3, [r3, #8]
 8015e80:	4618      	mov	r0, r3
 8015e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015e86:	685a      	ldr	r2, [r3, #4]
 8015e88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015e8c:	4611      	mov	r1, r2
 8015e8e:	4798      	blx	r3
            }
            break;
 8015e90:	f000 bd64 	b.w	801695c <Zigbee_CallBackProcessing+0x1664>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 8015e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	2b03      	cmp	r3, #3
 8015e9c:	d006      	beq.n	8015eac <Zigbee_CallBackProcessing+0xbb4>
 8015e9e:	4b55      	ldr	r3, [pc, #340]	; (8015ff4 <Zigbee_CallBackProcessing+0xcfc>)
 8015ea0:	4a52      	ldr	r2, [pc, #328]	; (8015fec <Zigbee_CallBackProcessing+0xcf4>)
 8015ea2:	f640 7166 	movw	r1, #3942	; 0xf66
 8015ea6:	4852      	ldr	r0, [pc, #328]	; (8015ff0 <Zigbee_CallBackProcessing+0xcf8>)
 8015ea8:	f001 fddc 	bl	8017a64 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8015eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015eb0:	691b      	ldr	r3, [r3, #16]
 8015eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8015eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	f000 8552 	beq.w	8016960 <Zigbee_CallBackProcessing+0x1668>
 8015ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015ebe:	685b      	ldr	r3, [r3, #4]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	f000 854d 	beq.w	8016960 <Zigbee_CallBackProcessing+0x1668>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8015ecc:	e02a      	b.n	8015f24 <Zigbee_CallBackProcessing+0xc2c>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8015ece:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8015ed2:	4613      	mov	r3, r2
 8015ed4:	005b      	lsls	r3, r3, #1
 8015ed6:	4413      	add	r3, r2
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	4a47      	ldr	r2, [pc, #284]	; (8015ff8 <Zigbee_CallBackProcessing+0xd00>)
 8015edc:	4413      	add	r3, r2
 8015ede:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015ee0:	429a      	cmp	r2, r3
 8015ee2:	d005      	beq.n	8015ef0 <Zigbee_CallBackProcessing+0xbf8>
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8015ee4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8015ee8:	3301      	adds	r3, #1
 8015eea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8015eee:	e019      	b.n	8015f24 <Zigbee_CallBackProcessing+0xc2c>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 8015ef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d01b      	beq.n	8015f30 <Zigbee_CallBackProcessing+0xc38>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 8015ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015efc:	689b      	ldr	r3, [r3, #8]
 8015efe:	67bb      	str	r3, [r7, #120]	; 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 8015f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015f04:	68db      	ldr	r3, [r3, #12]
 8015f06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 8015f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015f0c:	685b      	ldr	r3, [r3, #4]
 8015f0e:	673b      	str	r3, [r7, #112]	; 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 8015f10:	4b3a      	ldr	r3, [pc, #232]	; (8015ffc <Zigbee_CallBackProcessing+0xd04>)
 8015f12:	6818      	ldr	r0, [r3, #0]
 8015f14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015f16:	689b      	ldr	r3, [r3, #8]
 8015f18:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8015f1c:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8015f1e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8015f20:	47a0      	blx	r4
                    break;
 8015f22:	e006      	b.n	8015f32 <Zigbee_CallBackProcessing+0xc3a>
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8015f24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8015f28:	2b07      	cmp	r3, #7
 8015f2a:	d9d0      	bls.n	8015ece <Zigbee_CallBackProcessing+0xbd6>
                }
            }
            break;
 8015f2c:	f000 bd18 	b.w	8016960 <Zigbee_CallBackProcessing+0x1668>
                        break;
 8015f30:	bf00      	nop
            break;
 8015f32:	f000 bd15 	b.w	8016960 <Zigbee_CallBackProcessing+0x1668>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 8015f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	2b02      	cmp	r3, #2
 8015f3e:	d006      	beq.n	8015f4e <Zigbee_CallBackProcessing+0xc56>
 8015f40:	4b29      	ldr	r3, [pc, #164]	; (8015fe8 <Zigbee_CallBackProcessing+0xcf0>)
 8015f42:	4a2a      	ldr	r2, [pc, #168]	; (8015fec <Zigbee_CallBackProcessing+0xcf4>)
 8015f44:	f640 7183 	movw	r1, #3971	; 0xf83
 8015f48:	4829      	ldr	r0, [pc, #164]	; (8015ff0 <Zigbee_CallBackProcessing+0xcf8>)
 8015f4a:	f001 fd8b 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015f52:	68db      	ldr	r3, [r3, #12]
 8015f54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	f000 8501 	beq.w	8016964 <Zigbee_CallBackProcessing+0x166c>
 8015f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	f000 84fb 	beq.w	8016964 <Zigbee_CallBackProcessing+0x166c>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 8015f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	653b      	str	r3, [r7, #80]	; 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 8015f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015f7a:	689b      	ldr	r3, [r3, #8]
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015f82:	685a      	ldr	r2, [r3, #4]
 8015f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f86:	4611      	mov	r1, r2
 8015f88:	4798      	blx	r3
            }
            break;
 8015f8a:	f000 bceb 	b.w	8016964 <Zigbee_CallBackProcessing+0x166c>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 8015f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	2b02      	cmp	r3, #2
 8015f96:	d006      	beq.n	8015fa6 <Zigbee_CallBackProcessing+0xcae>
 8015f98:	4b13      	ldr	r3, [pc, #76]	; (8015fe8 <Zigbee_CallBackProcessing+0xcf0>)
 8015f9a:	4a14      	ldr	r2, [pc, #80]	; (8015fec <Zigbee_CallBackProcessing+0xcf4>)
 8015f9c:	f640 718e 	movw	r1, #3982	; 0xf8e
 8015fa0:	4813      	ldr	r0, [pc, #76]	; (8015ff0 <Zigbee_CallBackProcessing+0xcf8>)
 8015fa2:	f001 fd5f 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015faa:	68db      	ldr	r3, [r3, #12]
 8015fac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015fb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	f000 84d7 	beq.w	8016968 <Zigbee_CallBackProcessing+0x1670>
 8015fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	f000 84d1 	beq.w	8016968 <Zigbee_CallBackProcessing+0x1670>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 8015fc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	657b      	str	r3, [r7, #84]	; 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 8015fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015fd2:	689b      	ldr	r3, [r3, #8]
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015fda:	685a      	ldr	r2, [r3, #4]
 8015fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015fde:	4611      	mov	r1, r2
 8015fe0:	4798      	blx	r3
            }
            break;
 8015fe2:	f000 bcc1 	b.w	8016968 <Zigbee_CallBackProcessing+0x1670>
 8015fe6:	bf00      	nop
 8015fe8:	0801a648 	.word	0x0801a648
 8015fec:	0801ac50 	.word	0x0801ac50
 8015ff0:	0801a578 	.word	0x0801a578
 8015ff4:	0801a62c 	.word	0x0801a62c
 8015ff8:	20001bd0 	.word	0x20001bd0
 8015ffc:	20001a3c 	.word	0x20001a3c

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 8016000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016004:	685b      	ldr	r3, [r3, #4]
 8016006:	2b02      	cmp	r3, #2
 8016008:	d006      	beq.n	8016018 <Zigbee_CallBackProcessing+0xd20>
 801600a:	4bc1      	ldr	r3, [pc, #772]	; (8016310 <Zigbee_CallBackProcessing+0x1018>)
 801600c:	4ac1      	ldr	r2, [pc, #772]	; (8016314 <Zigbee_CallBackProcessing+0x101c>)
 801600e:	f640 7199 	movw	r1, #3993	; 0xf99
 8016012:	48c1      	ldr	r0, [pc, #772]	; (8016318 <Zigbee_CallBackProcessing+0x1020>)
 8016014:	f001 fd26 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801601c:	68db      	ldr	r3, [r3, #12]
 801601e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016022:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016026:	2b00      	cmp	r3, #0
 8016028:	f000 84a0 	beq.w	801696c <Zigbee_CallBackProcessing+0x1674>
 801602c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	2b00      	cmp	r3, #0
 8016034:	f000 849a 	beq.w	801696c <Zigbee_CallBackProcessing+0x1674>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 8016038:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	65bb      	str	r3, [r7, #88]	; 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 8016040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016044:	689b      	ldr	r3, [r3, #8]
 8016046:	4618      	mov	r0, r3
 8016048:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801604c:	685a      	ldr	r2, [r3, #4]
 801604e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016050:	4611      	mov	r1, r2
 8016052:	4798      	blx	r3
            }
            break;
 8016054:	f000 bc8a 	b.w	801696c <Zigbee_CallBackProcessing+0x1674>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 8016058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	2b02      	cmp	r3, #2
 8016060:	d006      	beq.n	8016070 <Zigbee_CallBackProcessing+0xd78>
 8016062:	4bab      	ldr	r3, [pc, #684]	; (8016310 <Zigbee_CallBackProcessing+0x1018>)
 8016064:	4aab      	ldr	r2, [pc, #684]	; (8016314 <Zigbee_CallBackProcessing+0x101c>)
 8016066:	f640 71a4 	movw	r1, #4004	; 0xfa4
 801606a:	48ab      	ldr	r0, [pc, #684]	; (8016318 <Zigbee_CallBackProcessing+0x1020>)
 801606c:	f001 fcfa 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016074:	68db      	ldr	r3, [r3, #12]
 8016076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801607a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801607e:	2b00      	cmp	r3, #0
 8016080:	f000 8476 	beq.w	8016970 <Zigbee_CallBackProcessing+0x1678>
 8016084:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	2b00      	cmp	r3, #0
 801608c:	f000 8470 	beq.w	8016970 <Zigbee_CallBackProcessing+0x1678>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 8016090:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	65fb      	str	r3, [r7, #92]	; 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 8016098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801609c:	689b      	ldr	r3, [r3, #8]
 801609e:	4618      	mov	r0, r3
 80160a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80160a4:	685a      	ldr	r2, [r3, #4]
 80160a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160a8:	4611      	mov	r1, r2
 80160aa:	4798      	blx	r3
            }
            break;
 80160ac:	f000 bc60 	b.w	8016970 <Zigbee_CallBackProcessing+0x1678>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 80160b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80160b4:	685b      	ldr	r3, [r3, #4]
 80160b6:	2b02      	cmp	r3, #2
 80160b8:	d006      	beq.n	80160c8 <Zigbee_CallBackProcessing+0xdd0>
 80160ba:	4b95      	ldr	r3, [pc, #596]	; (8016310 <Zigbee_CallBackProcessing+0x1018>)
 80160bc:	4a95      	ldr	r2, [pc, #596]	; (8016314 <Zigbee_CallBackProcessing+0x101c>)
 80160be:	f640 71af 	movw	r1, #4015	; 0xfaf
 80160c2:	4895      	ldr	r0, [pc, #596]	; (8016318 <Zigbee_CallBackProcessing+0x1020>)
 80160c4:	f001 fcce 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80160c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80160cc:	68db      	ldr	r3, [r3, #12]
 80160ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80160d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	f000 844c 	beq.w	8016974 <Zigbee_CallBackProcessing+0x167c>
 80160dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	f000 8446 	beq.w	8016974 <Zigbee_CallBackProcessing+0x167c>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 80160e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	663b      	str	r3, [r7, #96]	; 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 80160f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80160f4:	689b      	ldr	r3, [r3, #8]
 80160f6:	4618      	mov	r0, r3
 80160f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80160fc:	685a      	ldr	r2, [r3, #4]
 80160fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016100:	4611      	mov	r1, r2
 8016102:	4798      	blx	r3
            }
            break;
 8016104:	f000 bc36 	b.w	8016974 <Zigbee_CallBackProcessing+0x167c>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 8016108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	2b02      	cmp	r3, #2
 8016110:	d006      	beq.n	8016120 <Zigbee_CallBackProcessing+0xe28>
 8016112:	4b7f      	ldr	r3, [pc, #508]	; (8016310 <Zigbee_CallBackProcessing+0x1018>)
 8016114:	4a7f      	ldr	r2, [pc, #508]	; (8016314 <Zigbee_CallBackProcessing+0x101c>)
 8016116:	f640 71ba 	movw	r1, #4026	; 0xfba
 801611a:	487f      	ldr	r0, [pc, #508]	; (8016318 <Zigbee_CallBackProcessing+0x1020>)
 801611c:	f001 fca2 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016124:	68db      	ldr	r3, [r3, #12]
 8016126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801612a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801612e:	2b00      	cmp	r3, #0
 8016130:	f000 8422 	beq.w	8016978 <Zigbee_CallBackProcessing+0x1680>
 8016134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	2b00      	cmp	r3, #0
 801613c:	f000 841c 	beq.w	8016978 <Zigbee_CallBackProcessing+0x1680>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 8016140:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	667b      	str	r3, [r7, #100]	; 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 8016148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801614c:	689b      	ldr	r3, [r3, #8]
 801614e:	4618      	mov	r0, r3
 8016150:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016154:	685a      	ldr	r2, [r3, #4]
 8016156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016158:	4611      	mov	r1, r2
 801615a:	4798      	blx	r3
            }
            break;
 801615c:	f000 bc0c 	b.w	8016978 <Zigbee_CallBackProcessing+0x1680>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 8016160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016164:	685b      	ldr	r3, [r3, #4]
 8016166:	2b02      	cmp	r3, #2
 8016168:	d006      	beq.n	8016178 <Zigbee_CallBackProcessing+0xe80>
 801616a:	4b69      	ldr	r3, [pc, #420]	; (8016310 <Zigbee_CallBackProcessing+0x1018>)
 801616c:	4a69      	ldr	r2, [pc, #420]	; (8016314 <Zigbee_CallBackProcessing+0x101c>)
 801616e:	f640 71c5 	movw	r1, #4037	; 0xfc5
 8016172:	4869      	ldr	r0, [pc, #420]	; (8016318 <Zigbee_CallBackProcessing+0x1020>)
 8016174:	f001 fc76 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801617c:	68db      	ldr	r3, [r3, #12]
 801617e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016182:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016186:	2b00      	cmp	r3, #0
 8016188:	f000 83f8 	beq.w	801697c <Zigbee_CallBackProcessing+0x1684>
 801618c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	2b00      	cmp	r3, #0
 8016194:	f000 83f2 	beq.w	801697c <Zigbee_CallBackProcessing+0x1684>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 8016198:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	66bb      	str	r3, [r7, #104]	; 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 80161a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80161a4:	689b      	ldr	r3, [r3, #8]
 80161a6:	4618      	mov	r0, r3
 80161a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80161ac:	685a      	ldr	r2, [r3, #4]
 80161ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80161b0:	4611      	mov	r1, r2
 80161b2:	4798      	blx	r3
            }
            break;
 80161b4:	e3e2      	b.n	801697c <Zigbee_CallBackProcessing+0x1684>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 80161b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80161ba:	685b      	ldr	r3, [r3, #4]
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d006      	beq.n	80161ce <Zigbee_CallBackProcessing+0xed6>
 80161c0:	4b56      	ldr	r3, [pc, #344]	; (801631c <Zigbee_CallBackProcessing+0x1024>)
 80161c2:	4a54      	ldr	r2, [pc, #336]	; (8016314 <Zigbee_CallBackProcessing+0x101c>)
 80161c4:	f640 71d2 	movw	r1, #4050	; 0xfd2
 80161c8:	4853      	ldr	r0, [pc, #332]	; (8016318 <Zigbee_CallBackProcessing+0x1020>)
 80161ca:	f001 fc4b 	bl	8017a64 <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 80161ce:	4b54      	ldr	r3, [pc, #336]	; (8016320 <Zigbee_CallBackProcessing+0x1028>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	f000 83d4 	beq.w	8016980 <Zigbee_CallBackProcessing+0x1688>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 80161d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80161dc:	689b      	ldr	r3, [r3, #8]
 80161de:	66fb      	str	r3, [r7, #108]	; 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 80161e0:	4b4f      	ldr	r3, [pc, #316]	; (8016320 <Zigbee_CallBackProcessing+0x1028>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	4a4f      	ldr	r2, [pc, #316]	; (8016324 <Zigbee_CallBackProcessing+0x102c>)
 80161e6:	6812      	ldr	r2, [r2, #0]
 80161e8:	4611      	mov	r1, r2
 80161ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80161ec:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 80161ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161f0:	781b      	ldrb	r3, [r3, #0]
 80161f2:	2b85      	cmp	r3, #133	; 0x85
 80161f4:	f040 83c4 	bne.w	8016980 <Zigbee_CallBackProcessing+0x1688>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 80161f8:	4b49      	ldr	r3, [pc, #292]	; (8016320 <Zigbee_CallBackProcessing+0x1028>)
 80161fa:	2200      	movs	r2, #0
 80161fc:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 80161fe:	e3bf      	b.n	8016980 <Zigbee_CallBackProcessing+0x1688>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 8016200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	2b02      	cmp	r3, #2
 8016208:	d006      	beq.n	8016218 <Zigbee_CallBackProcessing+0xf20>
 801620a:	4b41      	ldr	r3, [pc, #260]	; (8016310 <Zigbee_CallBackProcessing+0x1018>)
 801620c:	4a41      	ldr	r2, [pc, #260]	; (8016314 <Zigbee_CallBackProcessing+0x101c>)
 801620e:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8016212:	4841      	ldr	r0, [pc, #260]	; (8016318 <Zigbee_CallBackProcessing+0x1020>)
 8016214:	f001 fc26 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801621c:	68db      	ldr	r3, [r3, #12]
 801621e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016222:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016226:	2b00      	cmp	r3, #0
 8016228:	f000 83ac 	beq.w	8016984 <Zigbee_CallBackProcessing+0x168c>
 801622c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	f000 83a6 	beq.w	8016984 <Zigbee_CallBackProcessing+0x168c>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 8016238:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 8016242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016246:	689b      	ldr	r3, [r3, #8]
 8016248:	4618      	mov	r0, r3
 801624a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801624e:	685a      	ldr	r2, [r3, #4]
 8016250:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016254:	4611      	mov	r1, r2
 8016256:	4798      	blx	r3
            }
            break;
 8016258:	e394      	b.n	8016984 <Zigbee_CallBackProcessing+0x168c>

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 801625a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801625e:	685b      	ldr	r3, [r3, #4]
 8016260:	2b02      	cmp	r3, #2
 8016262:	d006      	beq.n	8016272 <Zigbee_CallBackProcessing+0xf7a>
 8016264:	4b2a      	ldr	r3, [pc, #168]	; (8016310 <Zigbee_CallBackProcessing+0x1018>)
 8016266:	4a2b      	ldr	r2, [pc, #172]	; (8016314 <Zigbee_CallBackProcessing+0x101c>)
 8016268:	f640 71eb 	movw	r1, #4075	; 0xfeb
 801626c:	482a      	ldr	r0, [pc, #168]	; (8016318 <Zigbee_CallBackProcessing+0x1020>)
 801626e:	f001 fbf9 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016276:	68db      	ldr	r3, [r3, #12]
 8016278:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801627c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016280:	2b00      	cmp	r3, #0
 8016282:	f000 8381 	beq.w	8016988 <Zigbee_CallBackProcessing+0x1690>
 8016286:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	2b00      	cmp	r3, #0
 801628e:	f000 837b 	beq.w	8016988 <Zigbee_CallBackProcessing+0x1690>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 8016292:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 801629c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80162a0:	689b      	ldr	r3, [r3, #8]
 80162a2:	4618      	mov	r0, r3
 80162a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80162a8:	685a      	ldr	r2, [r3, #4]
 80162aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80162ae:	4611      	mov	r1, r2
 80162b0:	4798      	blx	r3
            }
            break;
 80162b2:	e369      	b.n	8016988 <Zigbee_CallBackProcessing+0x1690>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 80162b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	2b02      	cmp	r3, #2
 80162bc:	d006      	beq.n	80162cc <Zigbee_CallBackProcessing+0xfd4>
 80162be:	4b14      	ldr	r3, [pc, #80]	; (8016310 <Zigbee_CallBackProcessing+0x1018>)
 80162c0:	4a14      	ldr	r2, [pc, #80]	; (8016314 <Zigbee_CallBackProcessing+0x101c>)
 80162c2:	f640 71f6 	movw	r1, #4086	; 0xff6
 80162c6:	4814      	ldr	r0, [pc, #80]	; (8016318 <Zigbee_CallBackProcessing+0x1020>)
 80162c8:	f001 fbcc 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80162cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80162d0:	68db      	ldr	r3, [r3, #12]
 80162d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80162d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80162da:	2b00      	cmp	r3, #0
 80162dc:	f000 8356 	beq.w	801698c <Zigbee_CallBackProcessing+0x1694>
 80162e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	f000 8350 	beq.w	801698c <Zigbee_CallBackProcessing+0x1694>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 80162ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 80162f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80162fa:	689b      	ldr	r3, [r3, #8]
 80162fc:	4618      	mov	r0, r3
 80162fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016302:	685a      	ldr	r2, [r3, #4]
 8016304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016308:	4611      	mov	r1, r2
 801630a:	4798      	blx	r3
            }
            break;
 801630c:	e33e      	b.n	801698c <Zigbee_CallBackProcessing+0x1694>
 801630e:	bf00      	nop
 8016310:	0801a648 	.word	0x0801a648
 8016314:	0801ac50 	.word	0x0801ac50
 8016318:	0801a578 	.word	0x0801a578
 801631c:	0801a610 	.word	0x0801a610
 8016320:	20001a34 	.word	0x20001a34
 8016324:	20001a38 	.word	0x20001a38

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 8016328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	2b02      	cmp	r3, #2
 8016330:	d006      	beq.n	8016340 <Zigbee_CallBackProcessing+0x1048>
 8016332:	4bc5      	ldr	r3, [pc, #788]	; (8016648 <Zigbee_CallBackProcessing+0x1350>)
 8016334:	4ac5      	ldr	r2, [pc, #788]	; (801664c <Zigbee_CallBackProcessing+0x1354>)
 8016336:	f241 0101 	movw	r1, #4097	; 0x1001
 801633a:	48c5      	ldr	r0, [pc, #788]	; (8016650 <Zigbee_CallBackProcessing+0x1358>)
 801633c:	f001 fb92 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016344:	68db      	ldr	r3, [r3, #12]
 8016346:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801634a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801634e:	2b00      	cmp	r3, #0
 8016350:	f000 831e 	beq.w	8016990 <Zigbee_CallBackProcessing+0x1698>
 8016354:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	f000 8318 	beq.w	8016990 <Zigbee_CallBackProcessing+0x1698>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 8016360:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 801636a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801636e:	689b      	ldr	r3, [r3, #8]
 8016370:	4618      	mov	r0, r3
 8016372:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016376:	685a      	ldr	r2, [r3, #4]
 8016378:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801637c:	4611      	mov	r1, r2
 801637e:	4798      	blx	r3
            }
            break;
 8016380:	e306      	b.n	8016990 <Zigbee_CallBackProcessing+0x1698>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 8016382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016386:	685b      	ldr	r3, [r3, #4]
 8016388:	2b02      	cmp	r3, #2
 801638a:	d006      	beq.n	801639a <Zigbee_CallBackProcessing+0x10a2>
 801638c:	4bae      	ldr	r3, [pc, #696]	; (8016648 <Zigbee_CallBackProcessing+0x1350>)
 801638e:	4aaf      	ldr	r2, [pc, #700]	; (801664c <Zigbee_CallBackProcessing+0x1354>)
 8016390:	f241 010c 	movw	r1, #4108	; 0x100c
 8016394:	48ae      	ldr	r0, [pc, #696]	; (8016650 <Zigbee_CallBackProcessing+0x1358>)
 8016396:	f001 fb65 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801639a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801639e:	68db      	ldr	r3, [r3, #12]
 80163a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80163a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	f000 82f3 	beq.w	8016994 <Zigbee_CallBackProcessing+0x169c>
 80163ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	f000 82ed 	beq.w	8016994 <Zigbee_CallBackProcessing+0x169c>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 80163ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 80163c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80163c8:	689b      	ldr	r3, [r3, #8]
 80163ca:	4618      	mov	r0, r3
 80163cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80163d0:	685a      	ldr	r2, [r3, #4]
 80163d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80163d6:	4611      	mov	r1, r2
 80163d8:	4798      	blx	r3
            }
            break;
 80163da:	e2db      	b.n	8016994 <Zigbee_CallBackProcessing+0x169c>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 80163dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80163e0:	685b      	ldr	r3, [r3, #4]
 80163e2:	2b02      	cmp	r3, #2
 80163e4:	d006      	beq.n	80163f4 <Zigbee_CallBackProcessing+0x10fc>
 80163e6:	4b98      	ldr	r3, [pc, #608]	; (8016648 <Zigbee_CallBackProcessing+0x1350>)
 80163e8:	4a98      	ldr	r2, [pc, #608]	; (801664c <Zigbee_CallBackProcessing+0x1354>)
 80163ea:	f241 0117 	movw	r1, #4119	; 0x1017
 80163ee:	4898      	ldr	r0, [pc, #608]	; (8016650 <Zigbee_CallBackProcessing+0x1358>)
 80163f0:	f001 fb38 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80163f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80163f8:	68db      	ldr	r3, [r3, #12]
 80163fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80163fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016402:	2b00      	cmp	r3, #0
 8016404:	f000 82c8 	beq.w	8016998 <Zigbee_CallBackProcessing+0x16a0>
 8016408:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	2b00      	cmp	r3, #0
 8016410:	f000 82c2 	beq.w	8016998 <Zigbee_CallBackProcessing+0x16a0>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 8016414:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 801641e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016422:	689b      	ldr	r3, [r3, #8]
 8016424:	4618      	mov	r0, r3
 8016426:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801642a:	685a      	ldr	r2, [r3, #4]
 801642c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016430:	4611      	mov	r1, r2
 8016432:	4798      	blx	r3
            }
            break;
 8016434:	e2b0      	b.n	8016998 <Zigbee_CallBackProcessing+0x16a0>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 8016436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801643a:	685b      	ldr	r3, [r3, #4]
 801643c:	2b02      	cmp	r3, #2
 801643e:	d006      	beq.n	801644e <Zigbee_CallBackProcessing+0x1156>
 8016440:	4b81      	ldr	r3, [pc, #516]	; (8016648 <Zigbee_CallBackProcessing+0x1350>)
 8016442:	4a82      	ldr	r2, [pc, #520]	; (801664c <Zigbee_CallBackProcessing+0x1354>)
 8016444:	f241 0122 	movw	r1, #4130	; 0x1022
 8016448:	4881      	ldr	r0, [pc, #516]	; (8016650 <Zigbee_CallBackProcessing+0x1358>)
 801644a:	f001 fb0b 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801644e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016452:	68db      	ldr	r3, [r3, #12]
 8016454:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016458:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801645c:	2b00      	cmp	r3, #0
 801645e:	f000 829d 	beq.w	801699c <Zigbee_CallBackProcessing+0x16a4>
 8016462:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	2b00      	cmp	r3, #0
 801646a:	f000 8297 	beq.w	801699c <Zigbee_CallBackProcessing+0x16a4>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 801646e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 8016478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801647c:	689b      	ldr	r3, [r3, #8]
 801647e:	4618      	mov	r0, r3
 8016480:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016484:	685a      	ldr	r2, [r3, #4]
 8016486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801648a:	4611      	mov	r1, r2
 801648c:	4798      	blx	r3
            }
            break;
 801648e:	e285      	b.n	801699c <Zigbee_CallBackProcessing+0x16a4>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 8016490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016494:	685b      	ldr	r3, [r3, #4]
 8016496:	2b02      	cmp	r3, #2
 8016498:	d006      	beq.n	80164a8 <Zigbee_CallBackProcessing+0x11b0>
 801649a:	4b6b      	ldr	r3, [pc, #428]	; (8016648 <Zigbee_CallBackProcessing+0x1350>)
 801649c:	4a6b      	ldr	r2, [pc, #428]	; (801664c <Zigbee_CallBackProcessing+0x1354>)
 801649e:	f241 012d 	movw	r1, #4141	; 0x102d
 80164a2:	486b      	ldr	r0, [pc, #428]	; (8016650 <Zigbee_CallBackProcessing+0x1358>)
 80164a4:	f001 fade 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80164a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80164ac:	68db      	ldr	r3, [r3, #12]
 80164ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80164b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	f000 8272 	beq.w	80169a0 <Zigbee_CallBackProcessing+0x16a8>
 80164bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	f000 826c 	beq.w	80169a0 <Zigbee_CallBackProcessing+0x16a8>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 80164c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 80164d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80164d6:	689b      	ldr	r3, [r3, #8]
 80164d8:	4618      	mov	r0, r3
 80164da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80164de:	685a      	ldr	r2, [r3, #4]
 80164e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80164e4:	4611      	mov	r1, r2
 80164e6:	4798      	blx	r3
            }
            break;
 80164e8:	e25a      	b.n	80169a0 <Zigbee_CallBackProcessing+0x16a8>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 80164ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80164ee:	685b      	ldr	r3, [r3, #4]
 80164f0:	2b03      	cmp	r3, #3
 80164f2:	d006      	beq.n	8016502 <Zigbee_CallBackProcessing+0x120a>
 80164f4:	4b57      	ldr	r3, [pc, #348]	; (8016654 <Zigbee_CallBackProcessing+0x135c>)
 80164f6:	4a55      	ldr	r2, [pc, #340]	; (801664c <Zigbee_CallBackProcessing+0x1354>)
 80164f8:	f241 013b 	movw	r1, #4155	; 0x103b
 80164fc:	4854      	ldr	r0, [pc, #336]	; (8016650 <Zigbee_CallBackProcessing+0x1358>)
 80164fe:	f001 fab1 	bl	8017a64 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8016502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016506:	691b      	ldr	r3, [r3, #16]
 8016508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 801650c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016510:	2b00      	cmp	r3, #0
 8016512:	f000 8247 	beq.w	80169a4 <Zigbee_CallBackProcessing+0x16ac>
 8016516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	2b00      	cmp	r3, #0
 801651e:	f000 8241 	beq.w	80169a4 <Zigbee_CallBackProcessing+0x16ac>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8016522:	2300      	movs	r3, #0
 8016524:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8016528:	e032      	b.n	8016590 <Zigbee_CallBackProcessing+0x1298>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 801652a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801652e:	4613      	mov	r3, r2
 8016530:	005b      	lsls	r3, r3, #1
 8016532:	4413      	add	r3, r2
 8016534:	009b      	lsls	r3, r3, #2
 8016536:	4a48      	ldr	r2, [pc, #288]	; (8016658 <Zigbee_CallBackProcessing+0x1360>)
 8016538:	4413      	add	r3, r2
 801653a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801653e:	429a      	cmp	r2, r3
 8016540:	d005      	beq.n	801654e <Zigbee_CallBackProcessing+0x1256>
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8016542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016546:	3301      	adds	r3, #1
 8016548:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801654c:	e020      	b.n	8016590 <Zigbee_CallBackProcessing+0x1298>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 801654e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d020      	beq.n	801659a <Zigbee_CallBackProcessing+0x12a2>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 8016558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801655c:	689b      	ldr	r3, [r3, #8]
 801655e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 8016562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016566:	68db      	ldr	r3, [r3, #12]
 8016568:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 801656c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 8016576:	4b39      	ldr	r3, [pc, #228]	; (801665c <Zigbee_CallBackProcessing+0x1364>)
 8016578:	6818      	ldr	r0, [r3, #0]
 801657a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801657e:	689b      	ldr	r3, [r3, #8]
 8016580:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8016584:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8016588:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801658c:	47a0      	blx	r4
                    break;
 801658e:	e005      	b.n	801659c <Zigbee_CallBackProcessing+0x12a4>
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8016590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016594:	2b07      	cmp	r3, #7
 8016596:	d9c8      	bls.n	801652a <Zigbee_CallBackProcessing+0x1232>
                }
            }
            break;
 8016598:	e204      	b.n	80169a4 <Zigbee_CallBackProcessing+0x16ac>
                        break;
 801659a:	bf00      	nop
            break;
 801659c:	e202      	b.n	80169a4 <Zigbee_CallBackProcessing+0x16ac>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 801659e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80165a2:	685b      	ldr	r3, [r3, #4]
 80165a4:	2b02      	cmp	r3, #2
 80165a6:	d006      	beq.n	80165b6 <Zigbee_CallBackProcessing+0x12be>
 80165a8:	4b27      	ldr	r3, [pc, #156]	; (8016648 <Zigbee_CallBackProcessing+0x1350>)
 80165aa:	4a28      	ldr	r2, [pc, #160]	; (801664c <Zigbee_CallBackProcessing+0x1354>)
 80165ac:	f241 015c 	movw	r1, #4188	; 0x105c
 80165b0:	4827      	ldr	r0, [pc, #156]	; (8016650 <Zigbee_CallBackProcessing+0x1358>)
 80165b2:	f001 fa57 	bl	8017a64 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 80165b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80165ba:	689b      	ldr	r3, [r3, #8]
 80165bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            cb_arg = (void *)p_notification->Data[1];
 80165c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80165c4:	68db      	ldr	r3, [r3, #12]
 80165c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 80165ca:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80165ce:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80165d2:	f7eb f853 	bl	800167c <zcl_cluster_data_ind>
 80165d6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 80165da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80165de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80165e2:	60da      	str	r2, [r3, #12]
            break;
 80165e4:	e1f7      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 80165e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80165ea:	685b      	ldr	r3, [r3, #4]
 80165ec:	2b02      	cmp	r3, #2
 80165ee:	d006      	beq.n	80165fe <Zigbee_CallBackProcessing+0x1306>
 80165f0:	4b15      	ldr	r3, [pc, #84]	; (8016648 <Zigbee_CallBackProcessing+0x1350>)
 80165f2:	4a16      	ldr	r2, [pc, #88]	; (801664c <Zigbee_CallBackProcessing+0x1354>)
 80165f4:	f241 016b 	movw	r1, #4203	; 0x106b
 80165f8:	4815      	ldr	r0, [pc, #84]	; (8016650 <Zigbee_CallBackProcessing+0x1358>)
 80165fa:	f001 fa33 	bl	8017a64 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 80165fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016602:	689b      	ldr	r3, [r3, #8]
 8016604:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            cb_arg = (void *)p_notification->Data[1];
 8016608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801660c:	68db      	ldr	r3, [r3, #12]
 801660e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 8016612:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8016616:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 801661a:	f7eb f849 	bl	80016b0 <zcl_cluster_alarm_data_ind>
 801661e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8016622:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8016626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801662a:	60da      	str	r2, [r3, #12]
            break;
 801662c:	e1d3      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 801662e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016632:	685b      	ldr	r3, [r3, #4]
 8016634:	2b02      	cmp	r3, #2
 8016636:	d013      	beq.n	8016660 <Zigbee_CallBackProcessing+0x1368>
 8016638:	4b03      	ldr	r3, [pc, #12]	; (8016648 <Zigbee_CallBackProcessing+0x1350>)
 801663a:	4a04      	ldr	r2, [pc, #16]	; (801664c <Zigbee_CallBackProcessing+0x1354>)
 801663c:	f241 0175 	movw	r1, #4213	; 0x1075
 8016640:	4803      	ldr	r0, [pc, #12]	; (8016650 <Zigbee_CallBackProcessing+0x1358>)
 8016642:	f001 fa0f 	bl	8017a64 <__assert_func>
 8016646:	bf00      	nop
 8016648:	0801a648 	.word	0x0801a648
 801664c:	0801ac50 	.word	0x0801ac50
 8016650:	0801a578 	.word	0x0801a578
 8016654:	0801a62c 	.word	0x0801a62c
 8016658:	20001bd0 	.word	0x20001bd0
 801665c:	20001a3c 	.word	0x20001a3c
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016664:	68db      	ldr	r3, [r3, #12]
 8016666:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801666a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801666e:	2b00      	cmp	r3, #0
 8016670:	f000 81a8 	beq.w	80169c4 <Zigbee_CallBackProcessing+0x16cc>
 8016674:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	f000 81a2 	beq.w	80169c4 <Zigbee_CallBackProcessing+0x16cc>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8016680:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 801668a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801668e:	689b      	ldr	r3, [r3, #8]
 8016690:	4618      	mov	r0, r3
 8016692:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016696:	685a      	ldr	r2, [r3, #4]
 8016698:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801669c:	4611      	mov	r1, r2
 801669e:	4798      	blx	r3
            }
            break;
 80166a0:	e190      	b.n	80169c4 <Zigbee_CallBackProcessing+0x16cc>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 80166a2:	2300      	movs	r3, #0
 80166a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

            assert(p_notification->Size == 2);
 80166a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80166ac:	685b      	ldr	r3, [r3, #4]
 80166ae:	2b02      	cmp	r3, #2
 80166b0:	d006      	beq.n	80166c0 <Zigbee_CallBackProcessing+0x13c8>
 80166b2:	4bbd      	ldr	r3, [pc, #756]	; (80169a8 <Zigbee_CallBackProcessing+0x16b0>)
 80166b4:	4abd      	ldr	r2, [pc, #756]	; (80169ac <Zigbee_CallBackProcessing+0x16b4>)
 80166b6:	f241 0183 	movw	r1, #4227	; 0x1083
 80166ba:	48bd      	ldr	r0, [pc, #756]	; (80169b0 <Zigbee_CallBackProcessing+0x16b8>)
 80166bc:	f001 f9d2 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80166c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80166c4:	68db      	ldr	r3, [r3, #12]
 80166c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 80166ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d026      	beq.n	8016720 <Zigbee_CallBackProcessing+0x1428>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 80166d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80166d6:	689b      	ldr	r3, [r3, #8]
 80166d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

                if (info->callback != NULL) {
 80166dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d00f      	beq.n	8016706 <Zigbee_CallBackProcessing+0x140e>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 80166e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    err = callback(zcl_rsp, info->arg);
 80166f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80166f4:	685a      	ldr	r2, [r3, #4]
 80166f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80166fa:	4611      	mov	r1, r2
 80166fc:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8016700:	4798      	blx	r3
 8016702:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 8016706:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801670a:	7a1b      	ldrb	r3, [r3, #8]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d007      	beq.n	8016720 <Zigbee_CallBackProcessing+0x1428>
 8016710:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8016714:	785b      	ldrb	r3, [r3, #1]
 8016716:	2b94      	cmp	r3, #148	; 0x94
 8016718:	d002      	beq.n	8016720 <Zigbee_CallBackProcessing+0x1428>
                    /* Don't free the callback yet */
                    info = NULL;
 801671a:	2300      	movs	r3, #0
 801671c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8016720:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8016724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016728:	60da      	str	r2, [r3, #12]
            break;
 801672a:	e154      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 801672c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016730:	685b      	ldr	r3, [r3, #4]
 8016732:	2b02      	cmp	r3, #2
 8016734:	d006      	beq.n	8016744 <Zigbee_CallBackProcessing+0x144c>
 8016736:	4b9c      	ldr	r3, [pc, #624]	; (80169a8 <Zigbee_CallBackProcessing+0x16b0>)
 8016738:	4a9c      	ldr	r2, [pc, #624]	; (80169ac <Zigbee_CallBackProcessing+0x16b4>)
 801673a:	f241 019b 	movw	r1, #4251	; 0x109b
 801673e:	489c      	ldr	r0, [pc, #624]	; (80169b0 <Zigbee_CallBackProcessing+0x16b8>)
 8016740:	f001 f990 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016748:	68db      	ldr	r3, [r3, #12]
 801674a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801674e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016752:	2b00      	cmp	r3, #0
 8016754:	f000 8138 	beq.w	80169c8 <Zigbee_CallBackProcessing+0x16d0>
 8016758:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	2b00      	cmp	r3, #0
 8016760:	f000 8132 	beq.w	80169c8 <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 8016764:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 801676e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016772:	689b      	ldr	r3, [r3, #8]
 8016774:	4618      	mov	r0, r3
 8016776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801677a:	685a      	ldr	r2, [r3, #4]
 801677c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016780:	4611      	mov	r1, r2
 8016782:	4798      	blx	r3
            }
            break;
 8016784:	e120      	b.n	80169c8 <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 8016786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801678a:	685b      	ldr	r3, [r3, #4]
 801678c:	2b02      	cmp	r3, #2
 801678e:	d006      	beq.n	801679e <Zigbee_CallBackProcessing+0x14a6>
 8016790:	4b85      	ldr	r3, [pc, #532]	; (80169a8 <Zigbee_CallBackProcessing+0x16b0>)
 8016792:	4a86      	ldr	r2, [pc, #536]	; (80169ac <Zigbee_CallBackProcessing+0x16b4>)
 8016794:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8016798:	4885      	ldr	r0, [pc, #532]	; (80169b0 <Zigbee_CallBackProcessing+0x16b8>)
 801679a:	f001 f963 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801679e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80167a2:	68db      	ldr	r3, [r3, #12]
 80167a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80167a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	f000 810d 	beq.w	80169cc <Zigbee_CallBackProcessing+0x16d4>
 80167b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	f000 8107 	beq.w	80169cc <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 80167be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 80167c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80167cc:	689b      	ldr	r3, [r3, #8]
 80167ce:	4618      	mov	r0, r3
 80167d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80167d4:	685a      	ldr	r2, [r3, #4]
 80167d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80167da:	4611      	mov	r1, r2
 80167dc:	4798      	blx	r3
            }
            break;
 80167de:	e0f5      	b.n	80169cc <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 80167e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80167e4:	685b      	ldr	r3, [r3, #4]
 80167e6:	2b02      	cmp	r3, #2
 80167e8:	d006      	beq.n	80167f8 <Zigbee_CallBackProcessing+0x1500>
 80167ea:	4b6f      	ldr	r3, [pc, #444]	; (80169a8 <Zigbee_CallBackProcessing+0x16b0>)
 80167ec:	4a6f      	ldr	r2, [pc, #444]	; (80169ac <Zigbee_CallBackProcessing+0x16b4>)
 80167ee:	f241 01b1 	movw	r1, #4273	; 0x10b1
 80167f2:	486f      	ldr	r0, [pc, #444]	; (80169b0 <Zigbee_CallBackProcessing+0x16b8>)
 80167f4:	f001 f936 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80167f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80167fc:	68db      	ldr	r3, [r3, #12]
 80167fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016802:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016806:	2b00      	cmp	r3, #0
 8016808:	f000 80e2 	beq.w	80169d0 <Zigbee_CallBackProcessing+0x16d8>
 801680c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	f000 80dc 	beq.w	80169d0 <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 8016818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 8016822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016826:	689b      	ldr	r3, [r3, #8]
 8016828:	4618      	mov	r0, r3
 801682a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801682e:	685a      	ldr	r2, [r3, #4]
 8016830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016834:	4611      	mov	r1, r2
 8016836:	4798      	blx	r3
            }
            break;
 8016838:	e0ca      	b.n	80169d0 <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 801683a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801683e:	685b      	ldr	r3, [r3, #4]
 8016840:	2b05      	cmp	r3, #5
 8016842:	d006      	beq.n	8016852 <Zigbee_CallBackProcessing+0x155a>
 8016844:	4b5b      	ldr	r3, [pc, #364]	; (80169b4 <Zigbee_CallBackProcessing+0x16bc>)
 8016846:	4a59      	ldr	r2, [pc, #356]	; (80169ac <Zigbee_CallBackProcessing+0x16b4>)
 8016848:	f241 01bc 	movw	r1, #4284	; 0x10bc
 801684c:	4858      	ldr	r0, [pc, #352]	; (80169b0 <Zigbee_CallBackProcessing+0x16b8>)
 801684e:	f001 f909 	bl	8017a64 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 8016852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016856:	699b      	ldr	r3, [r3, #24]
 8016858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801685c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016860:	2b00      	cmp	r3, #0
 8016862:	f000 80b7 	beq.w	80169d4 <Zigbee_CallBackProcessing+0x16dc>
 8016866:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	2b00      	cmp	r3, #0
 801686e:	f000 80b1 	beq.w	80169d4 <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 8016872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016876:	f103 0108 	add.w	r1, r3, #8
 801687a:	463b      	mov	r3, r7
 801687c:	2208      	movs	r2, #8
 801687e:	4618      	mov	r0, r3
 8016880:	f7fd fa19 	bl	8013cb6 <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 8016884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 801688e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016896:	691b      	ldr	r3, [r3, #16]
 8016898:	b29a      	uxth	r2, r3
 801689a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801689e:	695b      	ldr	r3, [r3, #20]
 80168a0:	b2dd      	uxtb	r5, r3
 80168a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80168a6:	685b      	ldr	r3, [r3, #4]
 80168a8:	9300      	str	r3, [sp, #0]
 80168aa:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 80168ae:	462b      	mov	r3, r5
 80168b0:	47a0      	blx	r4
            }
            break;
 80168b2:	e08f      	b.n	80169d4 <Zigbee_CallBackProcessing+0x16dc>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 80168b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80168b8:	685b      	ldr	r3, [r3, #4]
 80168ba:	2b03      	cmp	r3, #3
 80168bc:	d006      	beq.n	80168cc <Zigbee_CallBackProcessing+0x15d4>
 80168be:	4b3e      	ldr	r3, [pc, #248]	; (80169b8 <Zigbee_CallBackProcessing+0x16c0>)
 80168c0:	4a3a      	ldr	r2, [pc, #232]	; (80169ac <Zigbee_CallBackProcessing+0x16b4>)
 80168c2:	f241 01cd 	movw	r1, #4301	; 0x10cd
 80168c6:	483a      	ldr	r0, [pc, #232]	; (80169b0 <Zigbee_CallBackProcessing+0x16b8>)
 80168c8:	f001 f8cc 	bl	8017a64 <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 80168cc:	4b3b      	ldr	r3, [pc, #236]	; (80169bc <Zigbee_CallBackProcessing+0x16c4>)
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d103      	bne.n	80168dc <Zigbee_CallBackProcessing+0x15e4>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 80168d4:	2381      	movs	r3, #129	; 0x81
 80168d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                break;
 80168da:	e07c      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 80168dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80168e0:	689b      	ldr	r3, [r3, #8]
 80168e2:	64fb      	str	r3, [r7, #76]	; 0x4c
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 80168e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80168e8:	68db      	ldr	r3, [r3, #12]
 80168ea:	64bb      	str	r3, [r7, #72]	; 0x48
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 80168ec:	4b33      	ldr	r3, [pc, #204]	; (80169bc <Zigbee_CallBackProcessing+0x16c4>)
 80168ee:	681c      	ldr	r4, [r3, #0]
 80168f0:	4b33      	ldr	r3, [pc, #204]	; (80169c0 <Zigbee_CallBackProcessing+0x16c8>)
 80168f2:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 80168f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80168f8:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 80168fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80168fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80168fe:	47a0      	blx	r4
 8016900:	4603      	mov	r3, r0
 8016902:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            break;
 8016906:	e066      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
        }

        default:
            status = HAL_ERROR;
 8016908:	2301      	movs	r3, #1
 801690a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 801690e:	e062      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016910:	bf00      	nop
 8016912:	e060      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016914:	bf00      	nop
 8016916:	e05e      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016918:	bf00      	nop
 801691a:	e05c      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 801691c:	bf00      	nop
 801691e:	e05a      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016920:	bf00      	nop
 8016922:	e058      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016924:	bf00      	nop
 8016926:	e056      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016928:	bf00      	nop
 801692a:	e054      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 801692c:	bf00      	nop
 801692e:	e052      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016930:	bf00      	nop
 8016932:	e050      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016934:	bf00      	nop
 8016936:	e04e      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016938:	bf00      	nop
 801693a:	e04c      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 801693c:	bf00      	nop
 801693e:	e04a      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016940:	bf00      	nop
 8016942:	e048      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016944:	bf00      	nop
 8016946:	e046      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016948:	bf00      	nop
 801694a:	e044      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 801694c:	bf00      	nop
 801694e:	e042      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016950:	bf00      	nop
 8016952:	e040      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016954:	bf00      	nop
 8016956:	e03e      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016958:	bf00      	nop
 801695a:	e03c      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 801695c:	bf00      	nop
 801695e:	e03a      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016960:	bf00      	nop
 8016962:	e038      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016964:	bf00      	nop
 8016966:	e036      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016968:	bf00      	nop
 801696a:	e034      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 801696c:	bf00      	nop
 801696e:	e032      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016970:	bf00      	nop
 8016972:	e030      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016974:	bf00      	nop
 8016976:	e02e      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016978:	bf00      	nop
 801697a:	e02c      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 801697c:	bf00      	nop
 801697e:	e02a      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016980:	bf00      	nop
 8016982:	e028      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016984:	bf00      	nop
 8016986:	e026      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016988:	bf00      	nop
 801698a:	e024      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 801698c:	bf00      	nop
 801698e:	e022      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016990:	bf00      	nop
 8016992:	e020      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016994:	bf00      	nop
 8016996:	e01e      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016998:	bf00      	nop
 801699a:	e01c      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 801699c:	bf00      	nop
 801699e:	e01a      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 80169a0:	bf00      	nop
 80169a2:	e018      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 80169a4:	bf00      	nop
 80169a6:	e016      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
 80169a8:	0801a648 	.word	0x0801a648
 80169ac:	0801ac50 	.word	0x0801ac50
 80169b0:	0801a578 	.word	0x0801a578
 80169b4:	0801a664 	.word	0x0801a664
 80169b8:	0801a62c 	.word	0x0801a62c
 80169bc:	20001a28 	.word	0x20001a28
 80169c0:	20001a3c 	.word	0x20001a3c
            break;
 80169c4:	bf00      	nop
 80169c6:	e006      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 80169c8:	bf00      	nop
 80169ca:	e004      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 80169cc:	bf00      	nop
 80169ce:	e002      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 80169d0:	bf00      	nop
 80169d2:	e000      	b.n	80169d6 <Zigbee_CallBackProcessing+0x16de>
            break;
 80169d4:	bf00      	nop
    }

    if (info != NULL) {
 80169d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d003      	beq.n	80169e6 <Zigbee_CallBackProcessing+0x16ee>
        zb_ipc_m4_cb_info_free(info);
 80169de:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80169e2:	f7fd f9a4 	bl	8013d2e <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 80169e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80169ea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80169ee:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 80169f0:	f7fc fa9e 	bl	8012f30 <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 80169f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a02:	bf00      	nop

08016a04 <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 8016a04:	b590      	push	{r4, r7, lr}
 8016a06:	b089      	sub	sp, #36	; 0x24
 8016a08:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 8016a0e:	f7f5 fdb7 	bl	800c580 <ZIGBEE_Get_M0RequestPayloadBuffer>
 8016a12:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	2b09      	cmp	r3, #9
 8016a1a:	d046      	beq.n	8016aaa <Zigbee_M0RequestProcessing+0xa6>
 8016a1c:	2b09      	cmp	r3, #9
 8016a1e:	d864      	bhi.n	8016aea <Zigbee_M0RequestProcessing+0xe6>
 8016a20:	2b07      	cmp	r3, #7
 8016a22:	d002      	beq.n	8016a2a <Zigbee_M0RequestProcessing+0x26>
 8016a24:	2b08      	cmp	r3, #8
 8016a26:	d01e      	beq.n	8016a66 <Zigbee_M0RequestProcessing+0x62>
 8016a28:	e05f      	b.n	8016aea <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	685b      	ldr	r3, [r3, #4]
 8016a2e:	2b01      	cmp	r3, #1
 8016a30:	d006      	beq.n	8016a40 <Zigbee_M0RequestProcessing+0x3c>
 8016a32:	4b33      	ldr	r3, [pc, #204]	; (8016b00 <Zigbee_M0RequestProcessing+0xfc>)
 8016a34:	4a33      	ldr	r2, [pc, #204]	; (8016b04 <Zigbee_M0RequestProcessing+0x100>)
 8016a36:	f241 01f4 	movw	r1, #4340	; 0x10f4
 8016a3a:	4833      	ldr	r0, [pc, #204]	; (8016b08 <Zigbee_M0RequestProcessing+0x104>)
 8016a3c:	f001 f812 	bl	8017a64 <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	689b      	ldr	r3, [r3, #8]
 8016a44:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 8016a46:	4b31      	ldr	r3, [pc, #196]	; (8016b0c <Zigbee_M0RequestProcessing+0x108>)
 8016a48:	685b      	ldr	r3, [r3, #4]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d050      	beq.n	8016af0 <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 8016a4e:	4b2f      	ldr	r3, [pc, #188]	; (8016b0c <Zigbee_M0RequestProcessing+0x108>)
 8016a50:	685c      	ldr	r4, [r3, #4]
 8016a52:	4b2e      	ldr	r3, [pc, #184]	; (8016b0c <Zigbee_M0RequestProcessing+0x108>)
 8016a54:	6818      	ldr	r0, [r3, #0]
 8016a56:	4b2e      	ldr	r3, [pc, #184]	; (8016b10 <Zigbee_M0RequestProcessing+0x10c>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	9300      	str	r3, [sp, #0]
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	2200      	movs	r2, #0
 8016a60:	2100      	movs	r1, #0
 8016a62:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 8016a64:	e044      	b.n	8016af0 <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	2b01      	cmp	r3, #1
 8016a6c:	d006      	beq.n	8016a7c <Zigbee_M0RequestProcessing+0x78>
 8016a6e:	4b24      	ldr	r3, [pc, #144]	; (8016b00 <Zigbee_M0RequestProcessing+0xfc>)
 8016a70:	4a24      	ldr	r2, [pc, #144]	; (8016b04 <Zigbee_M0RequestProcessing+0x100>)
 8016a72:	f241 1104 	movw	r1, #4356	; 0x1104
 8016a76:	4824      	ldr	r0, [pc, #144]	; (8016b08 <Zigbee_M0RequestProcessing+0x104>)
 8016a78:	f000 fff4 	bl	8017a64 <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	689b      	ldr	r3, [r3, #8]
 8016a80:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	3304      	adds	r3, #4
 8016a86:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f001 f845 	bl	8017b18 <malloc>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 8016a92:	693b      	ldr	r3, [r7, #16]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d004      	beq.n	8016aa2 <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 8016a98:	6879      	ldr	r1, [r7, #4]
 8016a9a:	6938      	ldr	r0, [r7, #16]
 8016a9c:	f000 f83c 	bl	8016b18 <zb_malloc_track>
 8016aa0:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 8016aa2:	693a      	ldr	r2, [r7, #16]
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	60da      	str	r2, [r3, #12]
            break;
 8016aa8:	e023      	b.n	8016af2 <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	685b      	ldr	r3, [r3, #4]
 8016aae:	2b01      	cmp	r3, #1
 8016ab0:	d006      	beq.n	8016ac0 <Zigbee_M0RequestProcessing+0xbc>
 8016ab2:	4b13      	ldr	r3, [pc, #76]	; (8016b00 <Zigbee_M0RequestProcessing+0xfc>)
 8016ab4:	4a13      	ldr	r2, [pc, #76]	; (8016b04 <Zigbee_M0RequestProcessing+0x100>)
 8016ab6:	f241 1118 	movw	r1, #4376	; 0x1118
 8016aba:	4813      	ldr	r0, [pc, #76]	; (8016b08 <Zigbee_M0RequestProcessing+0x104>)
 8016abc:	f000 ffd2 	bl	8017a64 <__assert_func>
            ptr = (void *)p_logging->Data[0];
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	689b      	ldr	r3, [r3, #8]
 8016ac4:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d106      	bne.n	8016ada <Zigbee_M0RequestProcessing+0xd6>
 8016acc:	4b11      	ldr	r3, [pc, #68]	; (8016b14 <Zigbee_M0RequestProcessing+0x110>)
 8016ace:	4a0d      	ldr	r2, [pc, #52]	; (8016b04 <Zigbee_M0RequestProcessing+0x100>)
 8016ad0:	f241 111a 	movw	r1, #4378	; 0x111a
 8016ad4:	480c      	ldr	r0, [pc, #48]	; (8016b08 <Zigbee_M0RequestProcessing+0x104>)
 8016ad6:	f000 ffc5 	bl	8017a64 <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 8016ada:	68b8      	ldr	r0, [r7, #8]
 8016adc:	f000 f838 	bl	8016b50 <zb_malloc_untrack>
 8016ae0:	60b8      	str	r0, [r7, #8]
            free(ptr);
 8016ae2:	68b8      	ldr	r0, [r7, #8]
 8016ae4:	f001 f820 	bl	8017b28 <free>
            break;
 8016ae8:	e003      	b.n	8016af2 <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 8016aea:	2301      	movs	r3, #1
 8016aec:	75fb      	strb	r3, [r7, #23]
            break;
 8016aee:	e000      	b.n	8016af2 <Zigbee_M0RequestProcessing+0xee>
            break;
 8016af0:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 8016af2:	f7fc fa37 	bl	8012f64 <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 8016af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	371c      	adds	r7, #28
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd90      	pop	{r4, r7, pc}
 8016b00:	0801a680 	.word	0x0801a680
 8016b04:	0801ac6c 	.word	0x0801ac6c
 8016b08:	0801a578 	.word	0x0801a578
 8016b0c:	20001a3c 	.word	0x20001a3c
 8016b10:	0801aa08 	.word	0x0801aa08
 8016b14:	0801a698 	.word	0x0801a698

08016b18 <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 8016b18:	b480      	push	{r7}
 8016b1a:	b085      	sub	sp, #20
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	683a      	ldr	r2, [r7, #0]
 8016b26:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	3304      	adds	r3, #4
 8016b2c:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 8016b2e:	4b07      	ldr	r3, [pc, #28]	; (8016b4c <zb_malloc_track+0x34>)
 8016b30:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	4413      	add	r3, r2
 8016b38:	4a04      	ldr	r2, [pc, #16]	; (8016b4c <zb_malloc_track+0x34>)
 8016b3a:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3714      	adds	r7, #20
 8016b44:	46bd      	mov	sp, r7
 8016b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4a:	4770      	bx	lr
 8016b4c:	20001a3c 	.word	0x20001a3c

08016b50 <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 8016b50:	b480      	push	{r7}
 8016b52:	b085      	sub	sp, #20
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	3b04      	subs	r3, #4
 8016b5c:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 8016b64:	4b07      	ldr	r3, [pc, #28]	; (8016b84 <zb_malloc_untrack+0x34>)
 8016b66:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8016b6a:	68bb      	ldr	r3, [r7, #8]
 8016b6c:	1ad3      	subs	r3, r2, r3
 8016b6e:	4a05      	ldr	r2, [pc, #20]	; (8016b84 <zb_malloc_untrack+0x34>)
 8016b70:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8016b74:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8016b76:	4618      	mov	r0, r3
 8016b78:	3714      	adds	r7, #20
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b80:	4770      	bx	lr
 8016b82:	bf00      	nop
 8016b84:	20001a3c 	.word	0x20001a3c

08016b88 <EE_Init>:
EE_var_t EE_var[CFG_EE_BANK1_SIZE ? 2 : 1];

/*****************************************************************************/

int EE_Init( int format, uint32_t base_address )
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	6039      	str	r1, [r7, #0]
  int status;
  uint16_t total_nb_pages;

  /* Reset global variables of both banks */

  EE_Reset( &EE_var[0],
 8016b92:	2208      	movs	r2, #8
 8016b94:	6839      	ldr	r1, [r7, #0]
 8016b96:	4815      	ldr	r0, [pc, #84]	; (8016bec <EE_Init+0x64>)
 8016b98:	f000 f8de 	bl	8016d58 <EE_Reset>
              CFG_EE_BANK1_SIZE / (2 * HW_FLASH_PAGE_SIZE) );
  }

  /* If format mode is set, start from scratch */

  if ( format )
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d01b      	beq.n	8016bda <EE_Init+0x52>
  {
    /* Force erase of all pages */
    total_nb_pages =
      2 * (EE_var[0].nb_pages + (CFG_EE_BANK1_SIZE ? EE_var[1].nb_pages : 0));
 8016ba2:	4b12      	ldr	r3, [pc, #72]	; (8016bec <EE_Init+0x64>)
 8016ba4:	791b      	ldrb	r3, [r3, #4]
    total_nb_pages =
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	005b      	lsls	r3, r3, #1
 8016baa:	817b      	strh	r3, [r7, #10]

    if ( HW_FLASH_Erase( EE_FLASH_PAGE( EE_var, 0 ), total_nb_pages, 0 ) != 0 )
 8016bac:	4b0f      	ldr	r3, [pc, #60]	; (8016bec <EE_Init+0x64>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8016bb4:	0b1b      	lsrs	r3, r3, #12
 8016bb6:	8979      	ldrh	r1, [r7, #10]
 8016bb8:	2200      	movs	r2, #0
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f000 fc8c 	bl	80174d8 <HW_FLASH_Erase>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d001      	beq.n	8016bca <EE_Init+0x42>
    {
      return EE_ERASE_ERROR;
 8016bc6:	2303      	movs	r3, #3
 8016bc8:	e00c      	b.n	8016be4 <EE_Init+0x5c>
    }

    /* Set first page of each pool in ACTIVE State */
    status = EE_SetState( &EE_var[0], 0, EE_STATE_ACTIVE );
 8016bca:	2202      	movs	r2, #2
 8016bcc:	2100      	movs	r1, #0
 8016bce:	4807      	ldr	r0, [pc, #28]	; (8016bec <EE_Init+0x64>)
 8016bd0:	f000 fb40 	bl	8017254 <EE_SetState>
 8016bd4:	60f8      	str	r0, [r7, #12]
    if ( CFG_EE_BANK1_SIZE && (status == EE_OK) )
    {
      status = EE_SetState( &EE_var[1], 0, EE_STATE_ACTIVE );
    }

    return status;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	e004      	b.n	8016be4 <EE_Init+0x5c>
  }

  /* else, try to recover the EEPROM emulation state from flash */

  status = EE_Recovery( &EE_var[0] );
 8016bda:	4804      	ldr	r0, [pc, #16]	; (8016bec <EE_Init+0x64>)
 8016bdc:	f000 f8d8 	bl	8016d90 <EE_Recovery>
 8016be0:	60f8      	str	r0, [r7, #12]
  if ( CFG_EE_BANK1_SIZE && (status == EE_OK) )
  {
    status = EE_Recovery( &EE_var[1] );
  }

  return status;
 8016be2:	68fb      	ldr	r3, [r7, #12]
}
 8016be4:	4618      	mov	r0, r3
 8016be6:	3710      	adds	r7, #16
 8016be8:	46bd      	mov	sp, r7
 8016bea:	bd80      	pop	{r7, pc}
 8016bec:	20001c30 	.word	0x20001c30

08016bf0 <EE_Read>:

/*****************************************************************************/

int EE_Read( int bank, uint16_t addr, uint32_t* data )
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b086      	sub	sp, #24
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	60f8      	str	r0, [r7, #12]
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	607a      	str	r2, [r7, #4]
 8016bfc:	817b      	strh	r3, [r7, #10]
  EE_var_t *pv = &EE_var[CFG_EE_BANK1_SIZE && bank];;
 8016bfe:	4b07      	ldr	r3, [pc, #28]	; (8016c1c <EE_Read+0x2c>)
 8016c00:	617b      	str	r3, [r7, #20]

  /* Read element starting from active page */
  return EE_ReadEl( pv, addr, data, pv->current_write_page );
 8016c02:	697b      	ldr	r3, [r7, #20]
 8016c04:	795b      	ldrb	r3, [r3, #5]
 8016c06:	8979      	ldrh	r1, [r7, #10]
 8016c08:	687a      	ldr	r2, [r7, #4]
 8016c0a:	6978      	ldr	r0, [r7, #20]
 8016c0c:	f000 fab8 	bl	8017180 <EE_ReadEl>
 8016c10:	4603      	mov	r3, r0
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3718      	adds	r7, #24
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	20001c30 	.word	0x20001c30

08016c20 <EE_Write>:

/*****************************************************************************/

int EE_Write( int bank, uint16_t addr, uint32_t data )
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b086      	sub	sp, #24
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	60f8      	str	r0, [r7, #12]
 8016c28:	460b      	mov	r3, r1
 8016c2a:	607a      	str	r2, [r7, #4]
 8016c2c:	817b      	strh	r3, [r7, #10]
  EE_var_t *pv = &EE_var[CFG_EE_BANK1_SIZE && bank];;
 8016c2e:	4b2e      	ldr	r3, [pc, #184]	; (8016ce8 <EE_Write+0xc8>)
 8016c30:	617b      	str	r3, [r7, #20]
  uint32_t page;

  /* Check if current pool is full */
  if ( pv->nb_written_elements < EE_NB_MAX_ELT * pv->nb_pages )
 8016c32:	697b      	ldr	r3, [r7, #20]
 8016c34:	88db      	ldrh	r3, [r3, #6]
 8016c36:	4619      	mov	r1, r3
 8016c38:	697b      	ldr	r3, [r7, #20]
 8016c3a:	791b      	ldrb	r3, [r3, #4]
 8016c3c:	461a      	mov	r2, r3
 8016c3e:	4613      	mov	r3, r2
 8016c40:	01db      	lsls	r3, r3, #7
 8016c42:	1a9b      	subs	r3, r3, r2
 8016c44:	009b      	lsls	r3, r3, #2
 8016c46:	4299      	cmp	r1, r3
 8016c48:	d207      	bcs.n	8016c5a <EE_Write+0x3a>
  {
    /* If not full, write the virtual address and value in the EEPROM */
    return EE_WriteEl( pv, addr, data );
 8016c4a:	897b      	ldrh	r3, [r7, #10]
 8016c4c:	687a      	ldr	r2, [r7, #4]
 8016c4e:	4619      	mov	r1, r3
 8016c50:	6978      	ldr	r0, [r7, #20]
 8016c52:	f000 f9ff 	bl	8017054 <EE_WriteEl>
 8016c56:	4603      	mov	r3, r0
 8016c58:	e042      	b.n	8016ce0 <EE_Write+0xc0>
  }

  EE_DBG( EE_2 );

  /* If full, we need to write in other pool and perform pool transfer */
  page = EE_NEXT_POOL( pv );
 8016c5a:	697b      	ldr	r3, [r7, #20]
 8016c5c:	795a      	ldrb	r2, [r3, #5]
 8016c5e:	697b      	ldr	r3, [r7, #20]
 8016c60:	791b      	ldrb	r3, [r3, #4]
 8016c62:	429a      	cmp	r2, r3
 8016c64:	d202      	bcs.n	8016c6c <EE_Write+0x4c>
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	791b      	ldrb	r3, [r3, #4]
 8016c6a:	e000      	b.n	8016c6e <EE_Write+0x4e>
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	613b      	str	r3, [r7, #16]

  /* Check next page state: it must be ERASED */
  if ( EE_GetState( pv, page ) != EE_STATE_ERASED )
 8016c70:	6939      	ldr	r1, [r7, #16]
 8016c72:	6978      	ldr	r0, [r7, #20]
 8016c74:	f000 fb0f 	bl	8017296 <EE_GetState>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d001      	beq.n	8016c82 <EE_Write+0x62>
  {
    return EE_STATE_ERROR;
 8016c7e:	2305      	movs	r3, #5
 8016c80:	e02e      	b.n	8016ce0 <EE_Write+0xc0>
  }

  /* Mark the ERASED page at RECEIVE state */
  if ( EE_SetState( pv, page, EE_STATE_RECEIVE ) != EE_OK )
 8016c82:	2201      	movs	r2, #1
 8016c84:	6939      	ldr	r1, [r7, #16]
 8016c86:	6978      	ldr	r0, [r7, #20]
 8016c88:	f000 fae4 	bl	8017254 <EE_SetState>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d001      	beq.n	8016c96 <EE_Write+0x76>
  {
    return EE_WRITE_ERROR;
 8016c92:	2304      	movs	r3, #4
 8016c94:	e024      	b.n	8016ce0 <EE_Write+0xc0>
  }

  EE_DBG( EE_3 );

  /* Reset global variables */
  pv->current_write_page = page;
 8016c96:	693b      	ldr	r3, [r7, #16]
 8016c98:	b2da      	uxtb	r2, r3
 8016c9a:	697b      	ldr	r3, [r7, #20]
 8016c9c:	715a      	strb	r2, [r3, #5]
  pv->nb_written_elements = 0;
 8016c9e:	697b      	ldr	r3, [r7, #20]
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	80da      	strh	r2, [r3, #6]
  pv->next_write_offset = EE_HEADER_SIZE;
 8016ca4:	697b      	ldr	r3, [r7, #20]
 8016ca6:	2220      	movs	r2, #32
 8016ca8:	811a      	strh	r2, [r3, #8]

  /* Write the variable passed as parameter in the new active page */
  if ( EE_WriteEl( pv, addr, data ) != EE_OK )
 8016caa:	897b      	ldrh	r3, [r7, #10]
 8016cac:	687a      	ldr	r2, [r7, #4]
 8016cae:	4619      	mov	r1, r3
 8016cb0:	6978      	ldr	r0, [r7, #20]
 8016cb2:	f000 f9cf 	bl	8017054 <EE_WriteEl>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d001      	beq.n	8016cc0 <EE_Write+0xa0>
  {
    return EE_WRITE_ERROR;
 8016cbc:	2304      	movs	r3, #4
 8016cbe:	e00f      	b.n	8016ce0 <EE_Write+0xc0>

  EE_DBG( EE_4 );

  /* Set the previous ACTIVE pool to ERASING and copy the latest written
     values to the new pool */
  if ( EE_Transfer( pv, addr, page ) != EE_OK )
 8016cc0:	897b      	ldrh	r3, [r7, #10]
 8016cc2:	693a      	ldr	r2, [r7, #16]
 8016cc4:	4619      	mov	r1, r3
 8016cc6:	6978      	ldr	r0, [r7, #20]
 8016cc8:	f000 f93e 	bl	8016f48 <EE_Transfer>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d001      	beq.n	8016cd6 <EE_Write+0xb6>
  {
    return EE_WRITE_ERROR;
 8016cd2:	2304      	movs	r3, #4
 8016cd4:	e004      	b.n	8016ce0 <EE_Write+0xc0>
  /* A clean is required */
  return EE_CLEAN_NEEDED;

#else /* CFG_EE_AUTO_CLEAN */

  return EE_Clean( bank, 0 );
 8016cd6:	2100      	movs	r1, #0
 8016cd8:	68f8      	ldr	r0, [r7, #12]
 8016cda:	f000 f807 	bl	8016cec <EE_Clean>
 8016cde:	4603      	mov	r3, r0

#endif /* CFG_EE_AUTO_CLEAN */
}
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	3718      	adds	r7, #24
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}
 8016ce8:	20001c30 	.word	0x20001c30

08016cec <EE_Clean>:

/*****************************************************************************/

int EE_Clean( int bank, int interrupt )
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b084      	sub	sp, #16
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
 8016cf4:	6039      	str	r1, [r7, #0]
  EE_var_t *pv = &EE_var[CFG_EE_BANK1_SIZE && bank];
 8016cf6:	4b17      	ldr	r3, [pc, #92]	; (8016d54 <EE_Clean+0x68>)
 8016cf8:	60fb      	str	r3, [r7, #12]
  uint32_t page;

  /* Get first page of unused pool */
  page = EE_NEXT_POOL( pv );
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	795a      	ldrb	r2, [r3, #5]
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	791b      	ldrb	r3, [r3, #4]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d202      	bcs.n	8016d0c <EE_Clean+0x20>
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	791b      	ldrb	r3, [r3, #4]
 8016d0a:	e000      	b.n	8016d0e <EE_Clean+0x22>
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	60bb      	str	r3, [r7, #8]

  /* At least, the first page of the pool should be in ERASING state */
  if ( EE_GetState( pv, page ) != EE_STATE_ERASING )
 8016d10:	68b9      	ldr	r1, [r7, #8]
 8016d12:	68f8      	ldr	r0, [r7, #12]
 8016d14:	f000 fabf 	bl	8017296 <EE_GetState>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	2b04      	cmp	r3, #4
 8016d1c:	d001      	beq.n	8016d22 <EE_Clean+0x36>
  {
    return EE_STATE_ERROR;
 8016d1e:	2305      	movs	r3, #5
 8016d20:	e013      	b.n	8016d4a <EE_Clean+0x5e>
  }

  EE_DBG( EE_1 );

  /* Erase all the pages of the pool */
  if ( HW_FLASH_Erase( EE_FLASH_PAGE( pv, page ), pv->nb_pages, interrupt )
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8016d2a:	0b1a      	lsrs	r2, r3, #12
 8016d2c:	68bb      	ldr	r3, [r7, #8]
 8016d2e:	18d0      	adds	r0, r2, r3
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	791b      	ldrb	r3, [r3, #4]
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	683a      	ldr	r2, [r7, #0]
 8016d38:	4619      	mov	r1, r3
 8016d3a:	f000 fbcd 	bl	80174d8 <HW_FLASH_Erase>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d001      	beq.n	8016d48 <EE_Clean+0x5c>
       != 0 )
  {
    return EE_ERASE_ERROR;
 8016d44:	2303      	movs	r3, #3
 8016d46:	e000      	b.n	8016d4a <EE_Clean+0x5e>
  }

  return EE_OK;
 8016d48:	2300      	movs	r3, #0
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	3710      	adds	r7, #16
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}
 8016d52:	bf00      	nop
 8016d54:	20001c30 	.word	0x20001c30

08016d58 <EE_Reset>:
}

/*****************************************************************************/

static void EE_Reset( EE_var_t* pv, uint32_t address, uint8_t nb_pages )
{
 8016d58:	b480      	push	{r7}
 8016d5a:	b085      	sub	sp, #20
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	60f8      	str	r0, [r7, #12]
 8016d60:	60b9      	str	r1, [r7, #8]
 8016d62:	4613      	mov	r3, r2
 8016d64:	71fb      	strb	r3, [r7, #7]
  /* Reset global variables of the bank */
  pv->address = address;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	68ba      	ldr	r2, [r7, #8]
 8016d6a:	601a      	str	r2, [r3, #0]
  pv->nb_pages = nb_pages;
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	79fa      	ldrb	r2, [r7, #7]
 8016d70:	711a      	strb	r2, [r3, #4]
  pv->current_write_page = 0;
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	2200      	movs	r2, #0
 8016d76:	715a      	strb	r2, [r3, #5]
  pv->nb_written_elements = 0;
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	80da      	strh	r2, [r3, #6]
  pv->next_write_offset = EE_HEADER_SIZE;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	2220      	movs	r2, #32
 8016d82:	811a      	strh	r2, [r3, #8]
}
 8016d84:	bf00      	nop
 8016d86:	3714      	adds	r7, #20
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8e:	4770      	bx	lr

08016d90 <EE_Recovery>:

/*****************************************************************************/

static int EE_Recovery( EE_var_t* pv )
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b088      	sub	sp, #32
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
  uint32_t page, first_page, state, prev_state, flash_addr, i;

  /* Search all pages for a reliable RECEIVE page then ACTIVE page */
  for ( state = EE_STATE_RECEIVE; state <= EE_STATE_ACTIVE; state++ )
 8016d98:	2301      	movs	r3, #1
 8016d9a:	61bb      	str	r3, [r7, #24]
 8016d9c:	e0cb      	b.n	8016f36 <EE_Recovery+0x1a6>
  {
    for ( page = 0; page < 2UL * pv->nb_pages; page++ )
 8016d9e:	2300      	movs	r3, #0
 8016da0:	61fb      	str	r3, [r7, #28]
 8016da2:	e0be      	b.n	8016f22 <EE_Recovery+0x192>
    {
      if ( state != EE_GetState( pv, page ) )
 8016da4:	69f9      	ldr	r1, [r7, #28]
 8016da6:	6878      	ldr	r0, [r7, #4]
 8016da8:	f000 fa75 	bl	8017296 <EE_GetState>
 8016dac:	4602      	mov	r2, r0
 8016dae:	69bb      	ldr	r3, [r7, #24]
 8016db0:	4293      	cmp	r3, r2
 8016db2:	f040 80b2 	bne.w	8016f1a <EE_Recovery+0x18a>
        continue;

      if ( (page == 0) || (page == pv->nb_pages) )
 8016db6:	69fb      	ldr	r3, [r7, #28]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d005      	beq.n	8016dc8 <EE_Recovery+0x38>
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	791b      	ldrb	r3, [r3, #4]
 8016dc0:	461a      	mov	r2, r3
 8016dc2:	69fb      	ldr	r3, [r7, #28]
 8016dc4:	4293      	cmp	r3, r2
 8016dc6:	d109      	bne.n	8016ddc <EE_Recovery+0x4c>
      {
        /* Check if state is reliable by checking state of next page */
        if ( EE_GetState( pv, page + 1 ) != EE_STATE_ERASED )
 8016dc8:	69fb      	ldr	r3, [r7, #28]
 8016dca:	3301      	adds	r3, #1
 8016dcc:	4619      	mov	r1, r3
 8016dce:	6878      	ldr	r0, [r7, #4]
 8016dd0:	f000 fa61 	bl	8017296 <EE_GetState>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d01b      	beq.n	8016e12 <EE_Recovery+0x82>
          continue;
 8016dda:	e09f      	b.n	8016f1c <EE_Recovery+0x18c>
      }
      else
      {
        prev_state = EE_GetState( pv, page - 1 );
 8016ddc:	69fb      	ldr	r3, [r7, #28]
 8016dde:	3b01      	subs	r3, #1
 8016de0:	4619      	mov	r1, r3
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	f000 fa57 	bl	8017296 <EE_GetState>
 8016de8:	60f8      	str	r0, [r7, #12]

        if ( prev_state != state )
 8016dea:	68fa      	ldr	r2, [r7, #12]
 8016dec:	69bb      	ldr	r3, [r7, #24]
 8016dee:	429a      	cmp	r2, r3
 8016df0:	d003      	beq.n	8016dfa <EE_Recovery+0x6a>
        {
          /* Check if state is reliable by checking state of previous page */
          if ( prev_state != EE_STATE_VALID )
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	2b03      	cmp	r3, #3
 8016df6:	d00c      	beq.n	8016e12 <EE_Recovery+0x82>
            continue;
 8016df8:	e090      	b.n	8016f1c <EE_Recovery+0x18c>
        }
        else
        {
          /* If page and previous page are the same, mark previous as VALID */
          if ( EE_SetState( pv, page - 1, EE_STATE_VALID ) != EE_OK )
 8016dfa:	69fb      	ldr	r3, [r7, #28]
 8016dfc:	3b01      	subs	r3, #1
 8016dfe:	2203      	movs	r2, #3
 8016e00:	4619      	mov	r1, r3
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f000 fa26 	bl	8017254 <EE_SetState>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d001      	beq.n	8016e12 <EE_Recovery+0x82>
          {
            return EE_WRITE_ERROR;
 8016e0e:	2304      	movs	r3, #4
 8016e10:	e096      	b.n	8016f40 <EE_Recovery+0x1b0>
          }
        }
      }

      /* Update write page */
      pv->current_write_page = page;
 8016e12:	69fb      	ldr	r3, [r7, #28]
 8016e14:	b2da      	uxtb	r2, r3
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	715a      	strb	r2, [r3, #5]

      /* Count elements already in ACTIVE or RECEIVE page */
      flash_addr = EE_FLASH_ADDR( pv, page ) + EE_HEADER_SIZE;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681a      	ldr	r2, [r3, #0]
 8016e1e:	69fb      	ldr	r3, [r7, #28]
 8016e20:	031b      	lsls	r3, r3, #12
 8016e22:	4413      	add	r3, r2
 8016e24:	3320      	adds	r3, #32
 8016e26:	617b      	str	r3, [r7, #20]
      for ( i = 0; i < EE_NB_MAX_ELT; i++ )
 8016e28:	2300      	movs	r3, #0
 8016e2a:	613b      	str	r3, [r7, #16]
 8016e2c:	e01a      	b.n	8016e64 <EE_Recovery+0xd4>
      {
        /* Check if current element is valid */
        if ( *EE_PTR( flash_addr ) == EE_ERASED )
 8016e2e:	697b      	ldr	r3, [r7, #20]
 8016e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e38:	bf08      	it	eq
 8016e3a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8016e3e:	d016      	beq.n	8016e6e <EE_Recovery+0xde>
          break;

        /* Update global variables accordingly */
        pv->nb_written_elements++;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	88db      	ldrh	r3, [r3, #6]
 8016e44:	3301      	adds	r3, #1
 8016e46:	b29a      	uxth	r2, r3
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	80da      	strh	r2, [r3, #6]
        pv->next_write_offset += HW_FLASH_WIDTH;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	891b      	ldrh	r3, [r3, #8]
 8016e50:	3308      	adds	r3, #8
 8016e52:	b29a      	uxth	r2, r3
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	811a      	strh	r2, [r3, #8]

        /* Next element address */
        flash_addr += HW_FLASH_WIDTH;
 8016e58:	697b      	ldr	r3, [r7, #20]
 8016e5a:	3308      	adds	r3, #8
 8016e5c:	617b      	str	r3, [r7, #20]
      for ( i = 0; i < EE_NB_MAX_ELT; i++ )
 8016e5e:	693b      	ldr	r3, [r7, #16]
 8016e60:	3301      	adds	r3, #1
 8016e62:	613b      	str	r3, [r7, #16]
 8016e64:	693b      	ldr	r3, [r7, #16]
 8016e66:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8016e6a:	d3e0      	bcc.n	8016e2e <EE_Recovery+0x9e>
 8016e6c:	e00b      	b.n	8016e86 <EE_Recovery+0xf6>
          break;
 8016e6e:	bf00      	nop
      }

      /* Count elements already transferred in previous pool pages */
      while ( !((page == 0) || (page == pv->nb_pages)) )
 8016e70:	e009      	b.n	8016e86 <EE_Recovery+0xf6>
      {
        /* Update number of elements written in pool */
        pv->nb_written_elements += EE_NB_MAX_ELT;
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	88db      	ldrh	r3, [r3, #6]
 8016e76:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8016e7a:	b29a      	uxth	r2, r3
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	80da      	strh	r2, [r3, #6]

        page--;
 8016e80:	69fb      	ldr	r3, [r7, #28]
 8016e82:	3b01      	subs	r3, #1
 8016e84:	61fb      	str	r3, [r7, #28]
      while ( !((page == 0) || (page == pv->nb_pages)) )
 8016e86:	69fb      	ldr	r3, [r7, #28]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d005      	beq.n	8016e98 <EE_Recovery+0x108>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	791b      	ldrb	r3, [r3, #4]
 8016e90:	461a      	mov	r2, r3
 8016e92:	69fb      	ldr	r3, [r7, #28]
 8016e94:	4293      	cmp	r3, r2
 8016e96:	d1ec      	bne.n	8016e72 <EE_Recovery+0xe2>
      }

      /* If we have found a RECEIVE page, it means that pool transfer
         has been interrupted by reset */
      if ( state == EE_STATE_RECEIVE )
 8016e98:	69bb      	ldr	r3, [r7, #24]
 8016e9a:	2b01      	cmp	r3, #1
 8016e9c:	d10a      	bne.n	8016eb4 <EE_Recovery+0x124>
      {
        /* Resume pool transfer */
        if ( EE_Transfer( pv, EE_TAG, page ) != EE_OK )
 8016e9e:	69fa      	ldr	r2, [r7, #28]
 8016ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f000 f84f 	bl	8016f48 <EE_Transfer>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d001      	beq.n	8016eb4 <EE_Recovery+0x124>
        {
          return EE_WRITE_ERROR;
 8016eb0:	2304      	movs	r3, #4
 8016eb2:	e045      	b.n	8016f40 <EE_Recovery+0x1b0>
      }

      /* RECEIVE/ACTIVE page found, check if some erasing is needed */

      /* Get first page of unused pool */
      first_page = EE_NEXT_POOL( pv );
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	795a      	ldrb	r2, [r3, #5]
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	791b      	ldrb	r3, [r3, #4]
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d202      	bcs.n	8016ec6 <EE_Recovery+0x136>
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	791b      	ldrb	r3, [r3, #4]
 8016ec4:	e000      	b.n	8016ec8 <EE_Recovery+0x138>
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	60bb      	str	r3, [r7, #8]

      /* Erase all the pages not already erased in the pool */
      for ( page = first_page; page < first_page + pv->nb_pages; page++ )
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	61fb      	str	r3, [r7, #28]
 8016ece:	e01a      	b.n	8016f06 <EE_Recovery+0x176>
      {
        if ( EE_GetState( pv, page ) != EE_STATE_ERASED )
 8016ed0:	69f9      	ldr	r1, [r7, #28]
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f000 f9df 	bl	8017296 <EE_GetState>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d010      	beq.n	8016f00 <EE_Recovery+0x170>
        {
          if ( HW_FLASH_Erase( EE_FLASH_PAGE( pv, page ), 1, 0 ) != 0 )
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8016ee6:	0b1a      	lsrs	r2, r3, #12
 8016ee8:	69fb      	ldr	r3, [r7, #28]
 8016eea:	4413      	add	r3, r2
 8016eec:	2200      	movs	r2, #0
 8016eee:	2101      	movs	r1, #1
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f000 faf1 	bl	80174d8 <HW_FLASH_Erase>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d001      	beq.n	8016f00 <EE_Recovery+0x170>
          {
            return EE_ERASE_ERROR;
 8016efc:	2303      	movs	r3, #3
 8016efe:	e01f      	b.n	8016f40 <EE_Recovery+0x1b0>
      for ( page = first_page; page < first_page + pv->nb_pages; page++ )
 8016f00:	69fb      	ldr	r3, [r7, #28]
 8016f02:	3301      	adds	r3, #1
 8016f04:	61fb      	str	r3, [r7, #28]
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	791b      	ldrb	r3, [r3, #4]
 8016f0a:	461a      	mov	r2, r3
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	4413      	add	r3, r2
 8016f10:	69fa      	ldr	r2, [r7, #28]
 8016f12:	429a      	cmp	r2, r3
 8016f14:	d3dc      	bcc.n	8016ed0 <EE_Recovery+0x140>
          }
        }
      }

      return EE_OK;
 8016f16:	2300      	movs	r3, #0
 8016f18:	e012      	b.n	8016f40 <EE_Recovery+0x1b0>
        continue;
 8016f1a:	bf00      	nop
    for ( page = 0; page < 2UL * pv->nb_pages; page++ )
 8016f1c:	69fb      	ldr	r3, [r7, #28]
 8016f1e:	3301      	adds	r3, #1
 8016f20:	61fb      	str	r3, [r7, #28]
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	791b      	ldrb	r3, [r3, #4]
 8016f26:	005b      	lsls	r3, r3, #1
 8016f28:	69fa      	ldr	r2, [r7, #28]
 8016f2a:	429a      	cmp	r2, r3
 8016f2c:	f4ff af3a 	bcc.w	8016da4 <EE_Recovery+0x14>
  for ( state = EE_STATE_RECEIVE; state <= EE_STATE_ACTIVE; state++ )
 8016f30:	69bb      	ldr	r3, [r7, #24]
 8016f32:	3301      	adds	r3, #1
 8016f34:	61bb      	str	r3, [r7, #24]
 8016f36:	69bb      	ldr	r3, [r7, #24]
 8016f38:	2b02      	cmp	r3, #2
 8016f3a:	f67f af30 	bls.w	8016d9e <EE_Recovery+0xe>
    }
  }

  /* No true RECEIVE or ACTIVE page has been found */
  return EE_STATE_ERROR;
 8016f3e:	2305      	movs	r3, #5
}
 8016f40:	4618      	mov	r0, r3
 8016f42:	3720      	adds	r7, #32
 8016f44:	46bd      	mov	sp, r7
 8016f46:	bd80      	pop	{r7, pc}

08016f48 <EE_Transfer>:

/*****************************************************************************/

static int EE_Transfer( EE_var_t* pv, uint16_t addr, uint32_t page )
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b088      	sub	sp, #32
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	60f8      	str	r0, [r7, #12]
 8016f50:	460b      	mov	r3, r1
 8016f52:	607a      	str	r2, [r7, #4]
 8016f54:	817b      	strh	r3, [r7, #10]
     or ACTIVE, except in case of recovery, where some pages may be already
     in ERASING state.
     However, in case of recovery, we do not not need to set ERASING,
     as initialization phase erases the unactive pool. */
  last_page =
    (page < pv->nb_pages) ? (2 * pv->nb_pages - 1) : (pv->nb_pages - 1);
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	791b      	ldrb	r3, [r3, #4]
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	4293      	cmp	r3, r2
 8016f60:	d204      	bcs.n	8016f6c <EE_Transfer+0x24>
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	791b      	ldrb	r3, [r3, #4]
 8016f66:	005b      	lsls	r3, r3, #1
 8016f68:	3b01      	subs	r3, #1
 8016f6a:	e002      	b.n	8016f72 <EE_Transfer+0x2a>
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	791b      	ldrb	r3, [r3, #4]
 8016f70:	3b01      	subs	r3, #1
  last_page =
 8016f72:	61bb      	str	r3, [r7, #24]

  if ( addr != EE_TAG )
 8016f74:	897b      	ldrh	r3, [r7, #10]
 8016f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016f7a:	d023      	beq.n	8016fc4 <EE_Transfer+0x7c>
  {
    /* Loop on all old pool pages in descending order */
    page = last_page;
 8016f7c:	69bb      	ldr	r3, [r7, #24]
 8016f7e:	607b      	str	r3, [r7, #4]
    while ( 1 )
    {
      state = EE_GetState( pv, page );
 8016f80:	6879      	ldr	r1, [r7, #4]
 8016f82:	68f8      	ldr	r0, [r7, #12]
 8016f84:	f000 f987 	bl	8017296 <EE_GetState>
 8016f88:	6178      	str	r0, [r7, #20]

      if ( (state == EE_STATE_ACTIVE) || (state == EE_STATE_VALID) )
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	2b02      	cmp	r3, #2
 8016f8e:	d002      	beq.n	8016f96 <EE_Transfer+0x4e>
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	2b03      	cmp	r3, #3
 8016f94:	d109      	bne.n	8016faa <EE_Transfer+0x62>
      {
        /* Set page state to ERASING */
        if ( EE_SetState( pv, page, EE_STATE_ERASING ) != EE_OK )
 8016f96:	2204      	movs	r2, #4
 8016f98:	6879      	ldr	r1, [r7, #4]
 8016f9a:	68f8      	ldr	r0, [r7, #12]
 8016f9c:	f000 f95a 	bl	8017254 <EE_SetState>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d001      	beq.n	8016faa <EE_Transfer+0x62>
        {
          return EE_WRITE_ERROR;
 8016fa6:	2304      	movs	r3, #4
 8016fa8:	e050      	b.n	801704c <EE_Transfer+0x104>
      }

      EE_DBG( EE_6 );

      /* Check if start of pool is reached */
      if ( (page == 0) || (page == pv->nb_pages) )
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d009      	beq.n	8016fc4 <EE_Transfer+0x7c>
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	791b      	ldrb	r3, [r3, #4]
 8016fb4:	461a      	mov	r2, r3
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	4293      	cmp	r3, r2
 8016fba:	d003      	beq.n	8016fc4 <EE_Transfer+0x7c>
        break;

      page--;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	3b01      	subs	r3, #1
 8016fc0:	607b      	str	r3, [r7, #4]
      state = EE_GetState( pv, page );
 8016fc2:	e7dd      	b.n	8016f80 <EE_Transfer+0x38>
    }
  }

  /* Now, we can copy variables from one pool to the other */

  for ( var = 0; var < EE_NB_MAX_ELT * pv->nb_pages; var++ )
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	61fb      	str	r3, [r7, #28]
 8016fc8:	e02d      	b.n	8017026 <EE_Transfer+0xde>
  {
    /* Check each variable except the one passed as parameter
       (and except the ones already transferred in case of recovery) */
    if  ( (var != addr) &&
 8016fca:	897b      	ldrh	r3, [r7, #10]
 8016fcc:	69fa      	ldr	r2, [r7, #28]
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	d026      	beq.n	8017020 <EE_Transfer+0xd8>
 8016fd2:	897b      	ldrh	r3, [r7, #10]
 8016fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016fd8:	d10b      	bne.n	8016ff2 <EE_Transfer+0xaa>
          ((addr != EE_TAG) ||
           (EE_ReadEl( pv, var, &data, pv->current_write_page ) != EE_OK)) )
 8016fda:	69fb      	ldr	r3, [r7, #28]
 8016fdc:	b299      	uxth	r1, r3
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	795b      	ldrb	r3, [r3, #5]
 8016fe2:	f107 0210 	add.w	r2, r7, #16
 8016fe6:	68f8      	ldr	r0, [r7, #12]
 8016fe8:	f000 f8ca 	bl	8017180 <EE_ReadEl>
 8016fec:	4603      	mov	r3, r0
          ((addr != EE_TAG) ||
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d016      	beq.n	8017020 <EE_Transfer+0xd8>
    {
      /* Read the last variable update */
      if ( EE_ReadEl( pv, var, &data, last_page ) == EE_OK )
 8016ff2:	69fb      	ldr	r3, [r7, #28]
 8016ff4:	b299      	uxth	r1, r3
 8016ff6:	f107 0210 	add.w	r2, r7, #16
 8016ffa:	69bb      	ldr	r3, [r7, #24]
 8016ffc:	68f8      	ldr	r0, [r7, #12]
 8016ffe:	f000 f8bf 	bl	8017180 <EE_ReadEl>
 8017002:	4603      	mov	r3, r0
 8017004:	2b00      	cmp	r3, #0
 8017006:	d10b      	bne.n	8017020 <EE_Transfer+0xd8>
      {
        EE_DBG( EE_7 );

        /* In case variable corresponding to the virtual address was found,
           copy the variable to the new active page */
        if ( EE_WriteEl( pv, var, data ) != EE_OK )
 8017008:	69fb      	ldr	r3, [r7, #28]
 801700a:	b29b      	uxth	r3, r3
 801700c:	693a      	ldr	r2, [r7, #16]
 801700e:	4619      	mov	r1, r3
 8017010:	68f8      	ldr	r0, [r7, #12]
 8017012:	f000 f81f 	bl	8017054 <EE_WriteEl>
 8017016:	4603      	mov	r3, r0
 8017018:	2b00      	cmp	r3, #0
 801701a:	d001      	beq.n	8017020 <EE_Transfer+0xd8>
        {
          return EE_WRITE_ERROR;
 801701c:	2304      	movs	r3, #4
 801701e:	e015      	b.n	801704c <EE_Transfer+0x104>
  for ( var = 0; var < EE_NB_MAX_ELT * pv->nb_pages; var++ )
 8017020:	69fb      	ldr	r3, [r7, #28]
 8017022:	3301      	adds	r3, #1
 8017024:	61fb      	str	r3, [r7, #28]
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	791b      	ldrb	r3, [r3, #4]
 801702a:	461a      	mov	r2, r3
 801702c:	4613      	mov	r3, r2
 801702e:	01db      	lsls	r3, r3, #7
 8017030:	1a9b      	subs	r3, r3, r2
 8017032:	009b      	lsls	r3, r3, #2
 8017034:	461a      	mov	r2, r3
 8017036:	69fb      	ldr	r3, [r7, #28]
 8017038:	4293      	cmp	r3, r2
 801703a:	d3c6      	bcc.n	8016fca <EE_Transfer+0x82>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  return EE_SetState( pv, pv->current_write_page, EE_STATE_ACTIVE );
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	795b      	ldrb	r3, [r3, #5]
 8017040:	2202      	movs	r2, #2
 8017042:	4619      	mov	r1, r3
 8017044:	68f8      	ldr	r0, [r7, #12]
 8017046:	f000 f905 	bl	8017254 <EE_SetState>
 801704a:	4603      	mov	r3, r0
}
 801704c:	4618      	mov	r0, r3
 801704e:	3720      	adds	r7, #32
 8017050:	46bd      	mov	sp, r7
 8017052:	bd80      	pop	{r7, pc}

08017054 <EE_WriteEl>:

/*****************************************************************************/

static int EE_WriteEl( EE_var_t* pv, uint16_t addr, uint32_t data )
{
 8017054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017058:	b08d      	sub	sp, #52	; 0x34
 801705a:	af00      	add	r7, sp, #0
 801705c:	61f8      	str	r0, [r7, #28]
 801705e:	460b      	mov	r3, r1
 8017060:	617a      	str	r2, [r7, #20]
 8017062:	837b      	strh	r3, [r7, #26]

  /* It is assumed here that the current pool is not full
     and that free pages in this pool are in ERASED state */

  /* Check if active page is full */
  if ( pv->next_write_offset >= HW_FLASH_PAGE_SIZE )
 8017064:	69fb      	ldr	r3, [r7, #28]
 8017066:	891b      	ldrh	r3, [r3, #8]
 8017068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801706c:	d326      	bcc.n	80170bc <EE_WriteEl+0x68>
  {
    /* Get current active page */
    page = pv->current_write_page;
 801706e:	69fb      	ldr	r3, [r7, #28]
 8017070:	795b      	ldrb	r3, [r3, #5]
 8017072:	627b      	str	r3, [r7, #36]	; 0x24

    /* Set new page as was previous one (active or receive) */
    if ( EE_SetState( pv, page + 1, EE_GetState( pv, page ) ) != EE_OK )
 8017074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017076:	1c5e      	adds	r6, r3, #1
 8017078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801707a:	69f8      	ldr	r0, [r7, #28]
 801707c:	f000 f90b 	bl	8017296 <EE_GetState>
 8017080:	4603      	mov	r3, r0
 8017082:	461a      	mov	r2, r3
 8017084:	4631      	mov	r1, r6
 8017086:	69f8      	ldr	r0, [r7, #28]
 8017088:	f000 f8e4 	bl	8017254 <EE_SetState>
 801708c:	4603      	mov	r3, r0
 801708e:	2b00      	cmp	r3, #0
 8017090:	d001      	beq.n	8017096 <EE_WriteEl+0x42>
    {
      return EE_WRITE_ERROR;
 8017092:	2304      	movs	r3, #4
 8017094:	e06d      	b.n	8017172 <EE_WriteEl+0x11e>
    }

    EE_DBG( EE_8 );

    /* Set current page in valid state */
    if ( EE_SetState( pv, page, EE_STATE_VALID ) != EE_OK )
 8017096:	2203      	movs	r2, #3
 8017098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801709a:	69f8      	ldr	r0, [r7, #28]
 801709c:	f000 f8da 	bl	8017254 <EE_SetState>
 80170a0:	4603      	mov	r3, r0
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d001      	beq.n	80170aa <EE_WriteEl+0x56>
    {
      return EE_WRITE_ERROR;
 80170a6:	2304      	movs	r3, #4
 80170a8:	e063      	b.n	8017172 <EE_WriteEl+0x11e>
    }

    /* Update global variables to use next page */
    pv->current_write_page = page + 1;
 80170aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ac:	b2db      	uxtb	r3, r3
 80170ae:	3301      	adds	r3, #1
 80170b0:	b2da      	uxtb	r2, r3
 80170b2:	69fb      	ldr	r3, [r7, #28]
 80170b4:	715a      	strb	r2, [r3, #5]
    pv->next_write_offset = EE_HEADER_SIZE;
 80170b6:	69fb      	ldr	r3, [r7, #28]
 80170b8:	2220      	movs	r2, #32
 80170ba:	811a      	strh	r2, [r3, #8]
  }

  /* Build element to be written in flash */
  if ( addr == EE_TAG )
 80170bc:	8b7b      	ldrh	r3, [r7, #26]
 80170be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80170c2:	d106      	bne.n	80170d2 <EE_WriteEl+0x7e>
  {
    el = 0ULL;
 80170c4:	f04f 0200 	mov.w	r2, #0
 80170c8:	f04f 0300 	mov.w	r3, #0
 80170cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80170d0:	e02e      	b.n	8017130 <EE_WriteEl+0xdc>
  }
  else
  {
    /* Build element from virtual addr and data, plus CRC */
    el = ((((uint64_t)data) << 32) | ((EE_TAG | (addr & 0x3FFFUL)) << 16));
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	2200      	movs	r2, #0
 80170d6:	60bb      	str	r3, [r7, #8]
 80170d8:	60fa      	str	r2, [r7, #12]
 80170da:	f04f 0200 	mov.w	r2, #0
 80170de:	f04f 0300 	mov.w	r3, #0
 80170e2:	68b9      	ldr	r1, [r7, #8]
 80170e4:	000b      	movs	r3, r1
 80170e6:	2200      	movs	r2, #0
 80170e8:	8b79      	ldrh	r1, [r7, #26]
 80170ea:	0408      	lsls	r0, r1, #16
 80170ec:	4923      	ldr	r1, [pc, #140]	; (801717c <EE_WriteEl+0x128>)
 80170ee:	4001      	ands	r1, r0
 80170f0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80170f4:	2000      	movs	r0, #0
 80170f6:	4688      	mov	r8, r1
 80170f8:	4681      	mov	r9, r0
 80170fa:	ea42 0108 	orr.w	r1, r2, r8
 80170fe:	6039      	str	r1, [r7, #0]
 8017100:	ea43 0309 	orr.w	r3, r3, r9
 8017104:	607b      	str	r3, [r7, #4]
 8017106:	e9d7 2300 	ldrd	r2, r3, [r7]
 801710a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    el |= EE_Crc( el );
 801710e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8017112:	f000 f8ea 	bl	80172ea <EE_Crc>
 8017116:	4603      	mov	r3, r0
 8017118:	b29b      	uxth	r3, r3
 801711a:	2200      	movs	r2, #0
 801711c:	461c      	mov	r4, r3
 801711e:	4615      	mov	r5, r2
 8017120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8017124:	ea42 0a04 	orr.w	sl, r2, r4
 8017128:	ea43 0b05 	orr.w	fp, r3, r5
 801712c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
  }

  /* Compute write address */
  flash_addr =
    EE_FLASH_ADDR( pv, pv->current_write_page ) + pv->next_write_offset;
 8017130:	69fb      	ldr	r3, [r7, #28]
 8017132:	681a      	ldr	r2, [r3, #0]
 8017134:	69fb      	ldr	r3, [r7, #28]
 8017136:	795b      	ldrb	r3, [r3, #5]
 8017138:	031b      	lsls	r3, r3, #12
 801713a:	4413      	add	r3, r2
 801713c:	69fa      	ldr	r2, [r7, #28]
 801713e:	8912      	ldrh	r2, [r2, #8]
  flash_addr =
 8017140:	4413      	add	r3, r2
 8017142:	623b      	str	r3, [r7, #32]

  /* Write element in flash */
  if ( HW_FLASH_Write( flash_addr, el ) != 0 )
 8017144:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8017148:	6a38      	ldr	r0, [r7, #32]
 801714a:	f000 f995 	bl	8017478 <HW_FLASH_Write>
 801714e:	4603      	mov	r3, r0
 8017150:	2b00      	cmp	r3, #0
 8017152:	d001      	beq.n	8017158 <EE_WriteEl+0x104>
  {
    return EE_WRITE_ERROR;
 8017154:	2304      	movs	r3, #4
 8017156:	e00c      	b.n	8017172 <EE_WriteEl+0x11e>
  }

  /* Increment global variables relative to write operation done */
  pv->next_write_offset += HW_FLASH_WIDTH;
 8017158:	69fb      	ldr	r3, [r7, #28]
 801715a:	891b      	ldrh	r3, [r3, #8]
 801715c:	3308      	adds	r3, #8
 801715e:	b29a      	uxth	r2, r3
 8017160:	69fb      	ldr	r3, [r7, #28]
 8017162:	811a      	strh	r2, [r3, #8]
  pv->nb_written_elements++;
 8017164:	69fb      	ldr	r3, [r7, #28]
 8017166:	88db      	ldrh	r3, [r3, #6]
 8017168:	3301      	adds	r3, #1
 801716a:	b29a      	uxth	r2, r3
 801716c:	69fb      	ldr	r3, [r7, #28]
 801716e:	80da      	strh	r2, [r3, #6]

  return EE_OK;
 8017170:	2300      	movs	r3, #0
}
 8017172:	4618      	mov	r0, r3
 8017174:	3734      	adds	r7, #52	; 0x34
 8017176:	46bd      	mov	sp, r7
 8017178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801717c:	3fff0000 	.word	0x3fff0000

08017180 <EE_ReadEl>:

/*****************************************************************************/

static int EE_ReadEl( const EE_var_t* pv,
                      uint16_t addr, uint32_t* data, uint32_t page )
{
 8017180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017184:	b088      	sub	sp, #32
 8017186:	af00      	add	r7, sp, #0
 8017188:	60f8      	str	r0, [r7, #12]
 801718a:	607a      	str	r2, [r7, #4]
 801718c:	603b      	str	r3, [r7, #0]
 801718e:	460b      	mov	r3, r1
 8017190:	817b      	strh	r3, [r7, #10]

  /* Search variable in the pool (in decreasing page order from "page") */
  while ( 1 )
  {
    /* Check each page address starting from end */
    flash_addr = EE_FLASH_ADDR( pv, page );
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	681a      	ldr	r2, [r3, #0]
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	031b      	lsls	r3, r3, #12
 801719a:	4413      	add	r3, r2
 801719c:	61bb      	str	r3, [r7, #24]
    for ( offset = HW_FLASH_PAGE_SIZE - HW_FLASH_WIDTH;
 801719e:	f640 73f8 	movw	r3, #4088	; 0xff8
 80171a2:	61fb      	str	r3, [r7, #28]
 80171a4:	e03f      	b.n	8017226 <EE_ReadEl+0xa6>
          offset >= EE_HEADER_SIZE; offset -= HW_FLASH_WIDTH )
    {
      /* Read one element from flash */
      el = *EE_PTR( flash_addr + offset );
 80171a6:	69ba      	ldr	r2, [r7, #24]
 80171a8:	69fb      	ldr	r3, [r7, #28]
 80171aa:	4413      	add	r3, r2
 80171ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b0:	e9c7 2304 	strd	r2, r3, [r7, #16]

      /* Compare the read address with the input address and check CRC:
         in case of failed CRC, data is corrupted and has to be skipped */
      if ( (el != EE_ERASED) && (el != 0ULL) &&
 80171b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80171b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171bc:	bf08      	it	eq
 80171be:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80171c2:	d02d      	beq.n	8017220 <EE_ReadEl+0xa0>
 80171c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80171c8:	4313      	orrs	r3, r2
 80171ca:	d029      	beq.n	8017220 <EE_ReadEl+0xa0>
           (((el & 0x3FFFFFFFUL) >> 16) == addr) &&
 80171cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80171d0:	f04f 0200 	mov.w	r2, #0
 80171d4:	f04f 0300 	mov.w	r3, #0
 80171d8:	0c02      	lsrs	r2, r0, #16
 80171da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80171de:	0c0b      	lsrs	r3, r1, #16
 80171e0:	f3c2 040d 	ubfx	r4, r2, #0, #14
 80171e4:	2500      	movs	r5, #0
 80171e6:	897b      	ldrh	r3, [r7, #10]
 80171e8:	2200      	movs	r2, #0
 80171ea:	4698      	mov	r8, r3
 80171ec:	4691      	mov	r9, r2
      if ( (el != EE_ERASED) && (el != 0ULL) &&
 80171ee:	454d      	cmp	r5, r9
 80171f0:	bf08      	it	eq
 80171f2:	4544      	cmpeq	r4, r8
 80171f4:	d114      	bne.n	8017220 <EE_ReadEl+0xa0>
           (EE_Crc( el ) == (uint16_t)el) )
 80171f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80171fa:	f000 f876 	bl	80172ea <EE_Crc>
 80171fe:	4603      	mov	r3, r0
 8017200:	461a      	mov	r2, r3
 8017202:	8a3b      	ldrh	r3, [r7, #16]
           (((el & 0x3FFFFFFFUL) >> 16) == addr) &&
 8017204:	429a      	cmp	r2, r3
 8017206:	d10b      	bne.n	8017220 <EE_ReadEl+0xa0>
      {
        /* Get variable data */
        *data = (uint32_t)(el >> 32);
 8017208:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801720c:	f04f 0200 	mov.w	r2, #0
 8017210:	f04f 0300 	mov.w	r3, #0
 8017214:	000a      	movs	r2, r1
 8017216:	2300      	movs	r3, #0
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	601a      	str	r2, [r3, #0]

        /* Variable is found */
        return EE_OK;
 801721c:	2300      	movs	r3, #0
 801721e:	e014      	b.n	801724a <EE_ReadEl+0xca>
          offset >= EE_HEADER_SIZE; offset -= HW_FLASH_WIDTH )
 8017220:	69fb      	ldr	r3, [r7, #28]
 8017222:	3b08      	subs	r3, #8
 8017224:	61fb      	str	r3, [r7, #28]
    for ( offset = HW_FLASH_PAGE_SIZE - HW_FLASH_WIDTH;
 8017226:	69fb      	ldr	r3, [r7, #28]
 8017228:	2b1f      	cmp	r3, #31
 801722a:	d8bc      	bhi.n	80171a6 <EE_ReadEl+0x26>
      }
    }

    /* Check if start of pool is reached */
    if ( (page == 0) || (page == pv->nb_pages) )
 801722c:	683b      	ldr	r3, [r7, #0]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d005      	beq.n	801723e <EE_ReadEl+0xbe>
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	791b      	ldrb	r3, [r3, #4]
 8017236:	461a      	mov	r2, r3
 8017238:	683b      	ldr	r3, [r7, #0]
 801723a:	4293      	cmp	r3, r2
 801723c:	d101      	bne.n	8017242 <EE_ReadEl+0xc2>
    {
      /* Variable is not found */
      return EE_NOT_FOUND;
 801723e:	2301      	movs	r3, #1
 8017240:	e003      	b.n	801724a <EE_ReadEl+0xca>
    }

    page--;
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	3b01      	subs	r3, #1
 8017246:	603b      	str	r3, [r7, #0]
    flash_addr = EE_FLASH_ADDR( pv, page );
 8017248:	e7a3      	b.n	8017192 <EE_ReadEl+0x12>
  }
}
 801724a:	4618      	mov	r0, r3
 801724c:	3720      	adds	r7, #32
 801724e:	46bd      	mov	sp, r7
 8017250:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08017254 <EE_SetState>:

/*****************************************************************************/

static int EE_SetState( const EE_var_t* pv, uint32_t page, uint32_t state )
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b086      	sub	sp, #24
 8017258:	af00      	add	r7, sp, #0
 801725a:	60f8      	str	r0, [r7, #12]
 801725c:	60b9      	str	r1, [r7, #8]
 801725e:	607a      	str	r2, [r7, #4]
  uint32_t flash_addr;

  flash_addr = EE_FLASH_ADDR( pv, page ) + ((state - 1) * HW_FLASH_WIDTH);
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	681a      	ldr	r2, [r3, #0]
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	0259      	lsls	r1, r3, #9
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	440b      	add	r3, r1
 801726c:	3b01      	subs	r3, #1
 801726e:	00db      	lsls	r3, r3, #3
 8017270:	4413      	add	r3, r2
 8017272:	617b      	str	r3, [r7, #20]

  EE_DBG( EE_0 );

  /* Set new page state inside page header */
  if ( HW_FLASH_Write( flash_addr, EE_PROGRAMMED ) != 0 )
 8017274:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8017278:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 801727c:	6978      	ldr	r0, [r7, #20]
 801727e:	f000 f8fb 	bl	8017478 <HW_FLASH_Write>
 8017282:	4603      	mov	r3, r0
 8017284:	2b00      	cmp	r3, #0
 8017286:	d001      	beq.n	801728c <EE_SetState+0x38>
  {
    return EE_WRITE_ERROR;
 8017288:	2304      	movs	r3, #4
 801728a:	e000      	b.n	801728e <EE_SetState+0x3a>
  }

  return EE_OK;
 801728c:	2300      	movs	r3, #0
}
 801728e:	4618      	mov	r0, r3
 8017290:	3718      	adds	r7, #24
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}

08017296 <EE_GetState>:

/*****************************************************************************/

static uint32_t EE_GetState( const EE_var_t* pv, uint32_t page )
{
 8017296:	b480      	push	{r7}
 8017298:	b085      	sub	sp, #20
 801729a:	af00      	add	r7, sp, #0
 801729c:	6078      	str	r0, [r7, #4]
 801729e:	6039      	str	r1, [r7, #0]
  uint32_t state, flash_addr;

  flash_addr = EE_FLASH_ADDR( pv, page ) + EE_HEADER_SIZE;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	681a      	ldr	r2, [r3, #0]
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	031b      	lsls	r3, r3, #12
 80172a8:	4413      	add	r3, r2
 80172aa:	3320      	adds	r3, #32
 80172ac:	60bb      	str	r3, [r7, #8]

  for ( state = EE_STATE_ERASING; state > EE_STATE_ERASED; state-- )
 80172ae:	2304      	movs	r3, #4
 80172b0:	60fb      	str	r3, [r7, #12]
 80172b2:	e00e      	b.n	80172d2 <EE_GetState+0x3c>
  {
    flash_addr -= HW_FLASH_WIDTH;
 80172b4:	68bb      	ldr	r3, [r7, #8]
 80172b6:	3b08      	subs	r3, #8
 80172b8:	60bb      	str	r3, [r7, #8]

    /* If page header word is not ERASED, return word index as page state */
    if ( *EE_PTR( flash_addr ) != EE_ERASED )
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172c4:	bf08      	it	eq
 80172c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80172ca:	d106      	bne.n	80172da <EE_GetState+0x44>
  for ( state = EE_STATE_ERASING; state > EE_STATE_ERASED; state-- )
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	3b01      	subs	r3, #1
 80172d0:	60fb      	str	r3, [r7, #12]
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d1ed      	bne.n	80172b4 <EE_GetState+0x1e>
 80172d8:	e000      	b.n	80172dc <EE_GetState+0x46>
      break;
 80172da:	bf00      	nop
  }

  return state;
 80172dc:	68fb      	ldr	r3, [r7, #12]
}
 80172de:	4618      	mov	r0, r3
 80172e0:	3714      	adds	r7, #20
 80172e2:	46bd      	mov	sp, r7
 80172e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e8:	4770      	bx	lr

080172ea <EE_Crc>:

/*****************************************************************************/

static uint16_t EE_Crc( uint64_t v )
{
 80172ea:	b490      	push	{r4, r7}
 80172ec:	b084      	sub	sp, #16
 80172ee:	af00      	add	r7, sp, #0
 80172f0:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t x, crc = 0;
 80172f4:	2300      	movs	r3, #0
 80172f6:	60fb      	str	r3, [r7, #12]

#define EE_CRC_STEP( n ) x = ((crc >> 8) ^ (uint8_t)(v >> n)) & 0xFFUL; \
                         x ^= x >> 4; \
                         crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ x

  EE_CRC_STEP( 16 );
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	0a1c      	lsrs	r4, r3, #8
 80172fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017300:	f04f 0200 	mov.w	r2, #0
 8017304:	f04f 0300 	mov.w	r3, #0
 8017308:	0c02      	lsrs	r2, r0, #16
 801730a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801730e:	0c0b      	lsrs	r3, r1, #16
 8017310:	b2d3      	uxtb	r3, r2
 8017312:	4063      	eors	r3, r4
 8017314:	b2db      	uxtb	r3, r3
 8017316:	60bb      	str	r3, [r7, #8]
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	091b      	lsrs	r3, r3, #4
 801731c:	68ba      	ldr	r2, [r7, #8]
 801731e:	4053      	eors	r3, r2
 8017320:	60bb      	str	r3, [r7, #8]
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	021a      	lsls	r2, r3, #8
 8017326:	68bb      	ldr	r3, [r7, #8]
 8017328:	031b      	lsls	r3, r3, #12
 801732a:	405a      	eors	r2, r3
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	015b      	lsls	r3, r3, #5
 8017330:	4053      	eors	r3, r2
 8017332:	68ba      	ldr	r2, [r7, #8]
 8017334:	4053      	eors	r3, r2
 8017336:	60fb      	str	r3, [r7, #12]
  EE_CRC_STEP( 24 );
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	0a1c      	lsrs	r4, r3, #8
 801733c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017340:	f04f 0200 	mov.w	r2, #0
 8017344:	f04f 0300 	mov.w	r3, #0
 8017348:	0e02      	lsrs	r2, r0, #24
 801734a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801734e:	0e0b      	lsrs	r3, r1, #24
 8017350:	b2d3      	uxtb	r3, r2
 8017352:	4063      	eors	r3, r4
 8017354:	b2db      	uxtb	r3, r3
 8017356:	60bb      	str	r3, [r7, #8]
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	091b      	lsrs	r3, r3, #4
 801735c:	68ba      	ldr	r2, [r7, #8]
 801735e:	4053      	eors	r3, r2
 8017360:	60bb      	str	r3, [r7, #8]
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	021a      	lsls	r2, r3, #8
 8017366:	68bb      	ldr	r3, [r7, #8]
 8017368:	031b      	lsls	r3, r3, #12
 801736a:	405a      	eors	r2, r3
 801736c:	68bb      	ldr	r3, [r7, #8]
 801736e:	015b      	lsls	r3, r3, #5
 8017370:	4053      	eors	r3, r2
 8017372:	68ba      	ldr	r2, [r7, #8]
 8017374:	4053      	eors	r3, r2
 8017376:	60fb      	str	r3, [r7, #12]
  EE_CRC_STEP( 32 );
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	0a1c      	lsrs	r4, r3, #8
 801737c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017380:	f04f 0200 	mov.w	r2, #0
 8017384:	f04f 0300 	mov.w	r3, #0
 8017388:	000a      	movs	r2, r1
 801738a:	2300      	movs	r3, #0
 801738c:	b2d3      	uxtb	r3, r2
 801738e:	4063      	eors	r3, r4
 8017390:	b2db      	uxtb	r3, r3
 8017392:	60bb      	str	r3, [r7, #8]
 8017394:	68bb      	ldr	r3, [r7, #8]
 8017396:	091b      	lsrs	r3, r3, #4
 8017398:	68ba      	ldr	r2, [r7, #8]
 801739a:	4053      	eors	r3, r2
 801739c:	60bb      	str	r3, [r7, #8]
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	021a      	lsls	r2, r3, #8
 80173a2:	68bb      	ldr	r3, [r7, #8]
 80173a4:	031b      	lsls	r3, r3, #12
 80173a6:	405a      	eors	r2, r3
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	015b      	lsls	r3, r3, #5
 80173ac:	4053      	eors	r3, r2
 80173ae:	68ba      	ldr	r2, [r7, #8]
 80173b0:	4053      	eors	r3, r2
 80173b2:	60fb      	str	r3, [r7, #12]
  EE_CRC_STEP( 40 );
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	0a1c      	lsrs	r4, r3, #8
 80173b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80173bc:	f04f 0200 	mov.w	r2, #0
 80173c0:	f04f 0300 	mov.w	r3, #0
 80173c4:	0a0a      	lsrs	r2, r1, #8
 80173c6:	2300      	movs	r3, #0
 80173c8:	b2d3      	uxtb	r3, r2
 80173ca:	4063      	eors	r3, r4
 80173cc:	b2db      	uxtb	r3, r3
 80173ce:	60bb      	str	r3, [r7, #8]
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	091b      	lsrs	r3, r3, #4
 80173d4:	68ba      	ldr	r2, [r7, #8]
 80173d6:	4053      	eors	r3, r2
 80173d8:	60bb      	str	r3, [r7, #8]
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	021a      	lsls	r2, r3, #8
 80173de:	68bb      	ldr	r3, [r7, #8]
 80173e0:	031b      	lsls	r3, r3, #12
 80173e2:	405a      	eors	r2, r3
 80173e4:	68bb      	ldr	r3, [r7, #8]
 80173e6:	015b      	lsls	r3, r3, #5
 80173e8:	4053      	eors	r3, r2
 80173ea:	68ba      	ldr	r2, [r7, #8]
 80173ec:	4053      	eors	r3, r2
 80173ee:	60fb      	str	r3, [r7, #12]
  EE_CRC_STEP( 48 );
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	0a1c      	lsrs	r4, r3, #8
 80173f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80173f8:	f04f 0200 	mov.w	r2, #0
 80173fc:	f04f 0300 	mov.w	r3, #0
 8017400:	0c0a      	lsrs	r2, r1, #16
 8017402:	2300      	movs	r3, #0
 8017404:	b2d3      	uxtb	r3, r2
 8017406:	4063      	eors	r3, r4
 8017408:	b2db      	uxtb	r3, r3
 801740a:	60bb      	str	r3, [r7, #8]
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	091b      	lsrs	r3, r3, #4
 8017410:	68ba      	ldr	r2, [r7, #8]
 8017412:	4053      	eors	r3, r2
 8017414:	60bb      	str	r3, [r7, #8]
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	021a      	lsls	r2, r3, #8
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	031b      	lsls	r3, r3, #12
 801741e:	405a      	eors	r2, r3
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	015b      	lsls	r3, r3, #5
 8017424:	4053      	eors	r3, r2
 8017426:	68ba      	ldr	r2, [r7, #8]
 8017428:	4053      	eors	r3, r2
 801742a:	60fb      	str	r3, [r7, #12]
  EE_CRC_STEP( 56 );
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	0a1c      	lsrs	r4, r3, #8
 8017430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017434:	f04f 0200 	mov.w	r2, #0
 8017438:	f04f 0300 	mov.w	r3, #0
 801743c:	0e0a      	lsrs	r2, r1, #24
 801743e:	2300      	movs	r3, #0
 8017440:	b2d3      	uxtb	r3, r2
 8017442:	4063      	eors	r3, r4
 8017444:	b2db      	uxtb	r3, r3
 8017446:	60bb      	str	r3, [r7, #8]
 8017448:	68bb      	ldr	r3, [r7, #8]
 801744a:	091b      	lsrs	r3, r3, #4
 801744c:	68ba      	ldr	r2, [r7, #8]
 801744e:	4053      	eors	r3, r2
 8017450:	60bb      	str	r3, [r7, #8]
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	021a      	lsls	r2, r3, #8
 8017456:	68bb      	ldr	r3, [r7, #8]
 8017458:	031b      	lsls	r3, r3, #12
 801745a:	405a      	eors	r2, r3
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	015b      	lsls	r3, r3, #5
 8017460:	4053      	eors	r3, r2
 8017462:	68ba      	ldr	r2, [r7, #8]
 8017464:	4053      	eors	r3, r2
 8017466:	60fb      	str	r3, [r7, #12]

  return (uint16_t)crc;
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	b29b      	uxth	r3, r3
}
 801746c:	4618      	mov	r0, r3
 801746e:	3710      	adds	r7, #16
 8017470:	46bd      	mov	sp, r7
 8017472:	bc90      	pop	{r4, r7}
 8017474:	4770      	bx	lr
	...

08017478 <HW_FLASH_Write>:
//static void HW_FLASH_WaitEndOfOperation(void);

/*****************************************************************************/

int HW_FLASH_Write(uint32_t address, uint64_t data)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b084      	sub	sp, #16
 801747c:	af00      	add	r7, sp, #0
 801747e:	60f8      	str	r0, [r7, #12]
 8017480:	e9c7 2300 	strd	r2, r3, [r7]
  /* Enable EOP interrupt */
  HAL_FLASH_Unlock();
 8017484:	f7f6 fd42 	bl	800df0c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR |FLASH_FLAG_PGSERR | FLASH_FLAG_OPTVERR); 
 8017488:	4b12      	ldr	r3, [pc, #72]	; (80174d4 <HW_FLASH_Write+0x5c>)
 801748a:	f248 0291 	movw	r2, #32913	; 0x8091
 801748e:	611a      	str	r2, [r3, #16]

  /*Enable EOP interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 8017490:	4b10      	ldr	r3, [pc, #64]	; (80174d4 <HW_FLASH_Write+0x5c>)
 8017492:	695b      	ldr	r3, [r3, #20]
 8017494:	4a0f      	ldr	r2, [pc, #60]	; (80174d4 <HW_FLASH_Write+0x5c>)
 8017496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801749a:	6153      	str	r3, [r2, #20]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801749c:	4b0d      	ldr	r3, [pc, #52]	; (80174d4 <HW_FLASH_Write+0x5c>)
 801749e:	2201      	movs	r2, #1
 80174a0:	611a      	str	r2, [r3, #16]
  
  HW_FLASH_Program_DoubleWord(address, data);
 80174a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80174a6:	68f8      	ldr	r0, [r7, #12]
 80174a8:	f000 f85a 	bl	8017560 <HW_FLASH_Program_DoubleWord>

  /* Disable EOP interrupt */
  __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80174ac:	4b09      	ldr	r3, [pc, #36]	; (80174d4 <HW_FLASH_Write+0x5c>)
 80174ae:	695b      	ldr	r3, [r3, #20]
 80174b0:	4a08      	ldr	r2, [pc, #32]	; (80174d4 <HW_FLASH_Write+0x5c>)
 80174b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80174b6:	6153      	str	r3, [r2, #20]
  
  /* Clear the PG bit once data has been written */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80174b8:	4b06      	ldr	r3, [pc, #24]	; (80174d4 <HW_FLASH_Write+0x5c>)
 80174ba:	695b      	ldr	r3, [r3, #20]
 80174bc:	4a05      	ldr	r2, [pc, #20]	; (80174d4 <HW_FLASH_Write+0x5c>)
 80174be:	f023 0301 	bic.w	r3, r3, #1
 80174c2:	6153      	str	r3, [r2, #20]
  HAL_FLASH_Lock();
 80174c4:	f7f6 fd44 	bl	800df50 <HAL_FLASH_Lock>
  return (HW_OK);
 80174c8:	2300      	movs	r3, #0
}
 80174ca:	4618      	mov	r0, r3
 80174cc:	3710      	adds	r7, #16
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}
 80174d2:	bf00      	nop
 80174d4:	58004000 	.word	0x58004000

080174d8 <HW_FLASH_Erase>:

/*****************************************************************************/

int HW_FLASH_Erase(uint32_t page, uint16_t n, int interrupt)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b086      	sub	sp, #24
 80174dc:	af00      	add	r7, sp, #0
 80174de:	60f8      	str	r0, [r7, #12]
 80174e0:	460b      	mov	r3, r1
 80174e2:	607a      	str	r2, [r7, #4]
 80174e4:	817b      	strh	r3, [r7, #10]
  UNUSED(interrupt);
 
  uint32_t loop;
 
   HAL_FLASH_Unlock();
 80174e6:	f7f6 fd11 	bl	800df0c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP |FLASH_FLAG_ALL_ERRORS); 
 80174ea:	4b1c      	ldr	r3, [pc, #112]	; (801755c <HW_FLASH_Erase+0x84>)
 80174ec:	699b      	ldr	r3, [r3, #24]
 80174ee:	4a1b      	ldr	r2, [pc, #108]	; (801755c <HW_FLASH_Erase+0x84>)
 80174f0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80174f4:	6193      	str	r3, [r2, #24]
 80174f6:	4b19      	ldr	r3, [pc, #100]	; (801755c <HW_FLASH_Erase+0x84>)
 80174f8:	f24c 32fb 	movw	r2, #50171	; 0xc3fb
 80174fc:	611a      	str	r2, [r3, #16]
  /* Enable EOP interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 80174fe:	4b17      	ldr	r3, [pc, #92]	; (801755c <HW_FLASH_Erase+0x84>)
 8017500:	695b      	ldr	r3, [r3, #20]
 8017502:	4a16      	ldr	r2, [pc, #88]	; (801755c <HW_FLASH_Erase+0x84>)
 8017504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017508:	6153      	str	r3, [r2, #20]

  for( loop = 0;  loop < n ; loop++)
 801750a:	2300      	movs	r3, #0
 801750c:	617b      	str	r3, [r7, #20]
 801750e:	e00b      	b.n	8017528 <HW_FLASH_Erase+0x50>
  {
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8017510:	4b12      	ldr	r3, [pc, #72]	; (801755c <HW_FLASH_Erase+0x84>)
 8017512:	2201      	movs	r2, #1
 8017514:	611a      	str	r2, [r3, #16]

    HW_FLASH_PageErase(page+loop);
 8017516:	68fa      	ldr	r2, [r7, #12]
 8017518:	697b      	ldr	r3, [r7, #20]
 801751a:	4413      	add	r3, r2
 801751c:	4618      	mov	r0, r3
 801751e:	f000 f845 	bl	80175ac <HW_FLASH_PageErase>
  for( loop = 0;  loop < n ; loop++)
 8017522:	697b      	ldr	r3, [r7, #20]
 8017524:	3301      	adds	r3, #1
 8017526:	617b      	str	r3, [r7, #20]
 8017528:	897b      	ldrh	r3, [r7, #10]
 801752a:	697a      	ldr	r2, [r7, #20]
 801752c:	429a      	cmp	r2, r3
 801752e:	d3ef      	bcc.n	8017510 <HW_FLASH_Erase+0x38>
  }

  /* Disable EOP interrupt */
  __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8017530:	4b0a      	ldr	r3, [pc, #40]	; (801755c <HW_FLASH_Erase+0x84>)
 8017532:	695b      	ldr	r3, [r3, #20]
 8017534:	4a09      	ldr	r2, [pc, #36]	; (801755c <HW_FLASH_Erase+0x84>)
 8017536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801753a:	6153      	str	r3, [r2, #20]

  /* Clear the page erase bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801753c:	4b07      	ldr	r3, [pc, #28]	; (801755c <HW_FLASH_Erase+0x84>)
 801753e:	695b      	ldr	r3, [r3, #20]
 8017540:	4a06      	ldr	r2, [pc, #24]	; (801755c <HW_FLASH_Erase+0x84>)
 8017542:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8017546:	f023 0302 	bic.w	r3, r3, #2
 801754a:	6153      	str	r3, [r2, #20]
  HAL_FLASH_Lock();
 801754c:	f7f6 fd00 	bl	800df50 <HAL_FLASH_Lock>
  return (HW_OK);
 8017550:	2300      	movs	r3, #0
}
 8017552:	4618      	mov	r0, r3
 8017554:	3718      	adds	r7, #24
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}
 801755a:	bf00      	nop
 801755c:	58004000 	.word	0x58004000

08017560 <HW_FLASH_Program_DoubleWord>:

/**
 * This is a copy of FLASH_Program_DoubleWord() from the HAL
 */
static void HW_FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8017560:	b480      	push	{r7}
 8017562:	b085      	sub	sp, #20
 8017564:	af00      	add	r7, sp, #0
 8017566:	60f8      	str	r0, [r7, #12]
 8017568:	e9c7 2300 	strd	r2, r3, [r7]
//  DBG_GPIO_Gr2Set(DBG_GPIO_GR2_FLASH_WRITE);

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801756c:	4b0e      	ldr	r3, [pc, #56]	; (80175a8 <HW_FLASH_Program_DoubleWord+0x48>)
 801756e:	695b      	ldr	r3, [r3, #20]
 8017570:	4a0d      	ldr	r2, [pc, #52]	; (80175a8 <HW_FLASH_Program_DoubleWord+0x48>)
 8017572:	f043 0301 	orr.w	r3, r3, #1
 8017576:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	683a      	ldr	r2, [r7, #0]
 801757c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801757e:	f3bf 8f6f 	isb	sy
}
 8017582:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8017584:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017588:	f04f 0200 	mov.w	r2, #0
 801758c:	f04f 0300 	mov.w	r3, #0
 8017590:	000a      	movs	r2, r1
 8017592:	2300      	movs	r3, #0
 8017594:	68f9      	ldr	r1, [r7, #12]
 8017596:	3104      	adds	r1, #4
 8017598:	4613      	mov	r3, r2
 801759a:	600b      	str	r3, [r1, #0]

//  DBG_GPIO_Gr2Reset(DBG_GPIO_GR2_FLASH_WRITE);
}
 801759c:	bf00      	nop
 801759e:	3714      	adds	r7, #20
 80175a0:	46bd      	mov	sp, r7
 80175a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a6:	4770      	bx	lr
 80175a8:	58004000 	.word	0x58004000

080175ac <HW_FLASH_PageErase>:

/**
 * This is a copy of LASH_PageErase() from the HAL
 */
static void HW_FLASH_PageErase(uint32_t Page)
{
 80175ac:	b480      	push	{r7}
 80175ae:	b083      	sub	sp, #12
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80175b4:	4b09      	ldr	r3, [pc, #36]	; (80175dc <HW_FLASH_PageErase+0x30>)
 80175b6:	695b      	ldr	r3, [r3, #20]
 80175b8:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	00db      	lsls	r3, r3, #3
 80175c0:	4313      	orrs	r3, r2
 80175c2:	4a06      	ldr	r2, [pc, #24]	; (80175dc <HW_FLASH_PageErase+0x30>)
 80175c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80175c8:	f043 0302 	orr.w	r3, r3, #2
 80175cc:	6153      	str	r3, [r2, #20]
 
//  DBG_GPIO_Gr2Set(DBG_GPIO_GR2_FLASH_ERASE);
}
 80175ce:	bf00      	nop
 80175d0:	370c      	adds	r7, #12
 80175d2:	46bd      	mov	sp, r7
 80175d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d8:	4770      	bx	lr
 80175da:	bf00      	nop
 80175dc:	58004000 	.word	0x58004000

080175e0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80175e0:	b480      	push	{r7}
 80175e2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80175e4:	4b05      	ldr	r3, [pc, #20]	; (80175fc <UTIL_LPM_Init+0x1c>)
 80175e6:	2200      	movs	r2, #0
 80175e8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80175ea:	4b05      	ldr	r3, [pc, #20]	; (8017600 <UTIL_LPM_Init+0x20>)
 80175ec:	2200      	movs	r2, #0
 80175ee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80175f0:	bf00      	nop
 80175f2:	46bd      	mov	sp, r7
 80175f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f8:	4770      	bx	lr
 80175fa:	bf00      	nop
 80175fc:	20001c3c 	.word	0x20001c3c
 8017600:	20001c40 	.word	0x20001c40

08017604 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8017604:	b480      	push	{r7}
 8017606:	b087      	sub	sp, #28
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
 801760c:	460b      	mov	r3, r1
 801760e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017610:	f3ef 8310 	mrs	r3, PRIMASK
 8017614:	613b      	str	r3, [r7, #16]
  return(result);
 8017616:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8017618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801761a:	b672      	cpsid	i
}
 801761c:	bf00      	nop
  
  switch(state)
 801761e:	78fb      	ldrb	r3, [r7, #3]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d008      	beq.n	8017636 <UTIL_LPM_SetOffMode+0x32>
 8017624:	2b01      	cmp	r3, #1
 8017626:	d10e      	bne.n	8017646 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8017628:	4b0d      	ldr	r3, [pc, #52]	; (8017660 <UTIL_LPM_SetOffMode+0x5c>)
 801762a:	681a      	ldr	r2, [r3, #0]
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	4313      	orrs	r3, r2
 8017630:	4a0b      	ldr	r2, [pc, #44]	; (8017660 <UTIL_LPM_SetOffMode+0x5c>)
 8017632:	6013      	str	r3, [r2, #0]
      break;
 8017634:	e008      	b.n	8017648 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	43da      	mvns	r2, r3
 801763a:	4b09      	ldr	r3, [pc, #36]	; (8017660 <UTIL_LPM_SetOffMode+0x5c>)
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	4013      	ands	r3, r2
 8017640:	4a07      	ldr	r2, [pc, #28]	; (8017660 <UTIL_LPM_SetOffMode+0x5c>)
 8017642:	6013      	str	r3, [r2, #0]
      break;
 8017644:	e000      	b.n	8017648 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8017646:	bf00      	nop
 8017648:	697b      	ldr	r3, [r7, #20]
 801764a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	f383 8810 	msr	PRIMASK, r3
}
 8017652:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8017654:	bf00      	nop
 8017656:	371c      	adds	r7, #28
 8017658:	46bd      	mov	sp, r7
 801765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765e:	4770      	bx	lr
 8017660:	20001c40 	.word	0x20001c40

08017664 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b090      	sub	sp, #64	; 0x40
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801766c:	4b73      	ldr	r3, [pc, #460]	; (801783c <UTIL_SEQ_Run+0x1d8>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8017672:	4b72      	ldr	r3, [pc, #456]	; (801783c <UTIL_SEQ_Run+0x1d8>)
 8017674:	681a      	ldr	r2, [r3, #0]
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	4013      	ands	r3, r2
 801767a:	4a70      	ldr	r2, [pc, #448]	; (801783c <UTIL_SEQ_Run+0x1d8>)
 801767c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801767e:	4b70      	ldr	r3, [pc, #448]	; (8017840 <UTIL_SEQ_Run+0x1dc>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8017684:	4b6f      	ldr	r3, [pc, #444]	; (8017844 <UTIL_SEQ_Run+0x1e0>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801768a:	4b6f      	ldr	r3, [pc, #444]	; (8017848 <UTIL_SEQ_Run+0x1e4>)
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8017690:	4b6e      	ldr	r3, [pc, #440]	; (801784c <UTIL_SEQ_Run+0x1e8>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8017696:	e08d      	b.n	80177b4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8017698:	2300      	movs	r3, #0
 801769a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801769c:	e002      	b.n	80176a4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801769e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176a0:	3301      	adds	r3, #1
 80176a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80176a4:	4a6a      	ldr	r2, [pc, #424]	; (8017850 <UTIL_SEQ_Run+0x1ec>)
 80176a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80176ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ae:	401a      	ands	r2, r3
 80176b0:	4b62      	ldr	r3, [pc, #392]	; (801783c <UTIL_SEQ_Run+0x1d8>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	4013      	ands	r3, r2
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d0f1      	beq.n	801769e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80176ba:	4a65      	ldr	r2, [pc, #404]	; (8017850 <UTIL_SEQ_Run+0x1ec>)
 80176bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80176c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176c4:	401a      	ands	r2, r3
 80176c6:	4b5d      	ldr	r3, [pc, #372]	; (801783c <UTIL_SEQ_Run+0x1d8>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	4013      	ands	r3, r2
 80176cc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80176ce:	4a60      	ldr	r2, [pc, #384]	; (8017850 <UTIL_SEQ_Run+0x1ec>)
 80176d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176d2:	00db      	lsls	r3, r3, #3
 80176d4:	4413      	add	r3, r2
 80176d6:	685a      	ldr	r2, [r3, #4]
 80176d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176da:	4013      	ands	r3, r2
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d106      	bne.n	80176ee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80176e0:	4a5b      	ldr	r2, [pc, #364]	; (8017850 <UTIL_SEQ_Run+0x1ec>)
 80176e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176e4:	00db      	lsls	r3, r3, #3
 80176e6:	4413      	add	r3, r2
 80176e8:	f04f 32ff 	mov.w	r2, #4294967295
 80176ec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80176ee:	4a58      	ldr	r2, [pc, #352]	; (8017850 <UTIL_SEQ_Run+0x1ec>)
 80176f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176f2:	00db      	lsls	r3, r3, #3
 80176f4:	4413      	add	r3, r2
 80176f6:	685a      	ldr	r2, [r3, #4]
 80176f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176fa:	4013      	ands	r3, r2
 80176fc:	4618      	mov	r0, r3
 80176fe:	f000 f973 	bl	80179e8 <SEQ_BitPosition>
 8017702:	4603      	mov	r3, r0
 8017704:	461a      	mov	r2, r3
 8017706:	4b53      	ldr	r3, [pc, #332]	; (8017854 <UTIL_SEQ_Run+0x1f0>)
 8017708:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801770a:	4a51      	ldr	r2, [pc, #324]	; (8017850 <UTIL_SEQ_Run+0x1ec>)
 801770c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801770e:	00db      	lsls	r3, r3, #3
 8017710:	4413      	add	r3, r2
 8017712:	685a      	ldr	r2, [r3, #4]
 8017714:	4b4f      	ldr	r3, [pc, #316]	; (8017854 <UTIL_SEQ_Run+0x1f0>)
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	2101      	movs	r1, #1
 801771a:	fa01 f303 	lsl.w	r3, r1, r3
 801771e:	43db      	mvns	r3, r3
 8017720:	401a      	ands	r2, r3
 8017722:	494b      	ldr	r1, [pc, #300]	; (8017850 <UTIL_SEQ_Run+0x1ec>)
 8017724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017726:	00db      	lsls	r3, r3, #3
 8017728:	440b      	add	r3, r1
 801772a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801772c:	f3ef 8310 	mrs	r3, PRIMASK
 8017730:	61bb      	str	r3, [r7, #24]
  return(result);
 8017732:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017734:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8017736:	b672      	cpsid	i
}
 8017738:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801773a:	4b46      	ldr	r3, [pc, #280]	; (8017854 <UTIL_SEQ_Run+0x1f0>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	2201      	movs	r2, #1
 8017740:	fa02 f303 	lsl.w	r3, r2, r3
 8017744:	43da      	mvns	r2, r3
 8017746:	4b3e      	ldr	r3, [pc, #248]	; (8017840 <UTIL_SEQ_Run+0x1dc>)
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	4013      	ands	r3, r2
 801774c:	4a3c      	ldr	r2, [pc, #240]	; (8017840 <UTIL_SEQ_Run+0x1dc>)
 801774e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8017750:	2302      	movs	r3, #2
 8017752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017754:	e013      	b.n	801777e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8017756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017758:	3b01      	subs	r3, #1
 801775a:	4a3d      	ldr	r2, [pc, #244]	; (8017850 <UTIL_SEQ_Run+0x1ec>)
 801775c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8017760:	4b3c      	ldr	r3, [pc, #240]	; (8017854 <UTIL_SEQ_Run+0x1f0>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	2201      	movs	r2, #1
 8017766:	fa02 f303 	lsl.w	r3, r2, r3
 801776a:	43da      	mvns	r2, r3
 801776c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801776e:	3b01      	subs	r3, #1
 8017770:	400a      	ands	r2, r1
 8017772:	4937      	ldr	r1, [pc, #220]	; (8017850 <UTIL_SEQ_Run+0x1ec>)
 8017774:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8017778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801777a:	3b01      	subs	r3, #1
 801777c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801777e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017780:	2b00      	cmp	r3, #0
 8017782:	d1e8      	bne.n	8017756 <UTIL_SEQ_Run+0xf2>
 8017784:	6a3b      	ldr	r3, [r7, #32]
 8017786:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017788:	697b      	ldr	r3, [r7, #20]
 801778a:	f383 8810 	msr	PRIMASK, r3
}
 801778e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8017790:	4b30      	ldr	r3, [pc, #192]	; (8017854 <UTIL_SEQ_Run+0x1f0>)
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	4a30      	ldr	r2, [pc, #192]	; (8017858 <UTIL_SEQ_Run+0x1f4>)
 8017796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801779a:	4798      	blx	r3

    local_taskset = TaskSet;
 801779c:	4b28      	ldr	r3, [pc, #160]	; (8017840 <UTIL_SEQ_Run+0x1dc>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80177a2:	4b28      	ldr	r3, [pc, #160]	; (8017844 <UTIL_SEQ_Run+0x1e0>)
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80177a8:	4b27      	ldr	r3, [pc, #156]	; (8017848 <UTIL_SEQ_Run+0x1e4>)
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80177ae:	4b27      	ldr	r3, [pc, #156]	; (801784c <UTIL_SEQ_Run+0x1e8>)
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80177b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80177b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177b8:	401a      	ands	r2, r3
 80177ba:	4b20      	ldr	r3, [pc, #128]	; (801783c <UTIL_SEQ_Run+0x1d8>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	4013      	ands	r3, r2
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d005      	beq.n	80177d0 <UTIL_SEQ_Run+0x16c>
 80177c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80177c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c8:	4013      	ands	r3, r2
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	f43f af64 	beq.w	8017698 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80177d0:	4b20      	ldr	r3, [pc, #128]	; (8017854 <UTIL_SEQ_Run+0x1f0>)
 80177d2:	f04f 32ff 	mov.w	r2, #4294967295
 80177d6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80177d8:	f000 f8f8 	bl	80179cc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177dc:	f3ef 8310 	mrs	r3, PRIMASK
 80177e0:	613b      	str	r3, [r7, #16]
  return(result);
 80177e2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80177e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80177e6:	b672      	cpsid	i
}
 80177e8:	bf00      	nop
  local_taskset = TaskSet;
 80177ea:	4b15      	ldr	r3, [pc, #84]	; (8017840 <UTIL_SEQ_Run+0x1dc>)
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80177f0:	4b14      	ldr	r3, [pc, #80]	; (8017844 <UTIL_SEQ_Run+0x1e0>)
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80177f6:	4b14      	ldr	r3, [pc, #80]	; (8017848 <UTIL_SEQ_Run+0x1e4>)
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80177fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80177fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017800:	401a      	ands	r2, r3
 8017802:	4b0e      	ldr	r3, [pc, #56]	; (801783c <UTIL_SEQ_Run+0x1d8>)
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	4013      	ands	r3, r2
 8017808:	2b00      	cmp	r3, #0
 801780a:	d107      	bne.n	801781c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801780c:	4b0f      	ldr	r3, [pc, #60]	; (801784c <UTIL_SEQ_Run+0x1e8>)
 801780e:	681a      	ldr	r2, [r3, #0]
 8017810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017812:	4013      	ands	r3, r2
 8017814:	2b00      	cmp	r3, #0
 8017816:	d101      	bne.n	801781c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8017818:	f7f1 f93f 	bl	8008a9a <UTIL_SEQ_Idle>
 801781c:	69fb      	ldr	r3, [r7, #28]
 801781e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	f383 8810 	msr	PRIMASK, r3
}
 8017826:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8017828:	f000 f8d7 	bl	80179da <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801782c:	4a03      	ldr	r2, [pc, #12]	; (801783c <UTIL_SEQ_Run+0x1d8>)
 801782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017830:	6013      	str	r3, [r2, #0]

  return;
 8017832:	bf00      	nop
}
 8017834:	3740      	adds	r7, #64	; 0x40
 8017836:	46bd      	mov	sp, r7
 8017838:	bd80      	pop	{r7, pc}
 801783a:	bf00      	nop
 801783c:	200000cc 	.word	0x200000cc
 8017840:	20001c44 	.word	0x20001c44
 8017844:	20001c48 	.word	0x20001c48
 8017848:	200000c8 	.word	0x200000c8
 801784c:	20001c4c 	.word	0x20001c4c
 8017850:	20001cd4 	.word	0x20001cd4
 8017854:	20001c50 	.word	0x20001c50
 8017858:	20001c54 	.word	0x20001c54

0801785c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b088      	sub	sp, #32
 8017860:	af00      	add	r7, sp, #0
 8017862:	60f8      	str	r0, [r7, #12]
 8017864:	60b9      	str	r1, [r7, #8]
 8017866:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017868:	f3ef 8310 	mrs	r3, PRIMASK
 801786c:	617b      	str	r3, [r7, #20]
  return(result);
 801786e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8017870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8017872:	b672      	cpsid	i
}
 8017874:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8017876:	68f8      	ldr	r0, [r7, #12]
 8017878:	f000 f8b6 	bl	80179e8 <SEQ_BitPosition>
 801787c:	4603      	mov	r3, r0
 801787e:	4619      	mov	r1, r3
 8017880:	4a06      	ldr	r2, [pc, #24]	; (801789c <UTIL_SEQ_RegTask+0x40>)
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8017888:	69fb      	ldr	r3, [r7, #28]
 801788a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801788c:	69bb      	ldr	r3, [r7, #24]
 801788e:	f383 8810 	msr	PRIMASK, r3
}
 8017892:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8017894:	bf00      	nop
}
 8017896:	3720      	adds	r7, #32
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}
 801789c:	20001c54 	.word	0x20001c54

080178a0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80178a0:	b480      	push	{r7}
 80178a2:	b087      	sub	sp, #28
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178aa:	f3ef 8310 	mrs	r3, PRIMASK
 80178ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80178b0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80178b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80178b4:	b672      	cpsid	i
}
 80178b6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80178b8:	4b0d      	ldr	r3, [pc, #52]	; (80178f0 <UTIL_SEQ_SetTask+0x50>)
 80178ba:	681a      	ldr	r2, [r3, #0]
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	4313      	orrs	r3, r2
 80178c0:	4a0b      	ldr	r2, [pc, #44]	; (80178f0 <UTIL_SEQ_SetTask+0x50>)
 80178c2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80178c4:	4a0b      	ldr	r2, [pc, #44]	; (80178f4 <UTIL_SEQ_SetTask+0x54>)
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	431a      	orrs	r2, r3
 80178d0:	4908      	ldr	r1, [pc, #32]	; (80178f4 <UTIL_SEQ_SetTask+0x54>)
 80178d2:	683b      	ldr	r3, [r7, #0]
 80178d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80178d8:	697b      	ldr	r3, [r7, #20]
 80178da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178dc:	693b      	ldr	r3, [r7, #16]
 80178de:	f383 8810 	msr	PRIMASK, r3
}
 80178e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80178e4:	bf00      	nop
}
 80178e6:	371c      	adds	r7, #28
 80178e8:	46bd      	mov	sp, r7
 80178ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ee:	4770      	bx	lr
 80178f0:	20001c44 	.word	0x20001c44
 80178f4:	20001cd4 	.word	0x20001cd4

080178f8 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80178f8:	b480      	push	{r7}
 80178fa:	b087      	sub	sp, #28
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017900:	f3ef 8310 	mrs	r3, PRIMASK
 8017904:	60fb      	str	r3, [r7, #12]
  return(result);
 8017906:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017908:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801790a:	b672      	cpsid	i
}
 801790c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801790e:	4b09      	ldr	r3, [pc, #36]	; (8017934 <UTIL_SEQ_SetEvt+0x3c>)
 8017910:	681a      	ldr	r2, [r3, #0]
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	4313      	orrs	r3, r2
 8017916:	4a07      	ldr	r2, [pc, #28]	; (8017934 <UTIL_SEQ_SetEvt+0x3c>)
 8017918:	6013      	str	r3, [r2, #0]
 801791a:	697b      	ldr	r3, [r7, #20]
 801791c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801791e:	693b      	ldr	r3, [r7, #16]
 8017920:	f383 8810 	msr	PRIMASK, r3
}
 8017924:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8017926:	bf00      	nop
}
 8017928:	371c      	adds	r7, #28
 801792a:	46bd      	mov	sp, r7
 801792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017930:	4770      	bx	lr
 8017932:	bf00      	nop
 8017934:	20001c48 	.word	0x20001c48

08017938 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b088      	sub	sp, #32
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8017940:	4b1f      	ldr	r3, [pc, #124]	; (80179c0 <UTIL_SEQ_WaitEvt+0x88>)
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8017946:	4b1e      	ldr	r3, [pc, #120]	; (80179c0 <UTIL_SEQ_WaitEvt+0x88>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801794e:	d102      	bne.n	8017956 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8017950:	2300      	movs	r3, #0
 8017952:	61fb      	str	r3, [r7, #28]
 8017954:	e005      	b.n	8017962 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8017956:	4b1a      	ldr	r3, [pc, #104]	; (80179c0 <UTIL_SEQ_WaitEvt+0x88>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	2201      	movs	r2, #1
 801795c:	fa02 f303 	lsl.w	r3, r2, r3
 8017960:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8017962:	4b18      	ldr	r3, [pc, #96]	; (80179c4 <UTIL_SEQ_WaitEvt+0x8c>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8017968:	4a16      	ldr	r2, [pc, #88]	; (80179c4 <UTIL_SEQ_WaitEvt+0x8c>)
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801796e:	e003      	b.n	8017978 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8017970:	6879      	ldr	r1, [r7, #4]
 8017972:	69f8      	ldr	r0, [r7, #28]
 8017974:	f7f1 f898 	bl	8008aa8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8017978:	4b13      	ldr	r3, [pc, #76]	; (80179c8 <UTIL_SEQ_WaitEvt+0x90>)
 801797a:	681a      	ldr	r2, [r3, #0]
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	4013      	ands	r3, r2
 8017980:	2b00      	cmp	r3, #0
 8017982:	d0f5      	beq.n	8017970 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8017984:	4a0e      	ldr	r2, [pc, #56]	; (80179c0 <UTIL_SEQ_WaitEvt+0x88>)
 8017986:	69bb      	ldr	r3, [r7, #24]
 8017988:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801798a:	f3ef 8310 	mrs	r3, PRIMASK
 801798e:	60bb      	str	r3, [r7, #8]
  return(result);
 8017990:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017994:	b672      	cpsid	i
}
 8017996:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	43da      	mvns	r2, r3
 801799c:	4b0a      	ldr	r3, [pc, #40]	; (80179c8 <UTIL_SEQ_WaitEvt+0x90>)
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	4013      	ands	r3, r2
 80179a2:	4a09      	ldr	r2, [pc, #36]	; (80179c8 <UTIL_SEQ_WaitEvt+0x90>)
 80179a4:	6013      	str	r3, [r2, #0]
 80179a6:	693b      	ldr	r3, [r7, #16]
 80179a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	f383 8810 	msr	PRIMASK, r3
}
 80179b0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80179b2:	4a04      	ldr	r2, [pc, #16]	; (80179c4 <UTIL_SEQ_WaitEvt+0x8c>)
 80179b4:	697b      	ldr	r3, [r7, #20]
 80179b6:	6013      	str	r3, [r2, #0]
  return;
 80179b8:	bf00      	nop
}
 80179ba:	3720      	adds	r7, #32
 80179bc:	46bd      	mov	sp, r7
 80179be:	bd80      	pop	{r7, pc}
 80179c0:	20001c50 	.word	0x20001c50
 80179c4:	20001c4c 	.word	0x20001c4c
 80179c8:	20001c48 	.word	0x20001c48

080179cc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80179cc:	b480      	push	{r7}
 80179ce:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80179d0:	bf00      	nop
}
 80179d2:	46bd      	mov	sp, r7
 80179d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d8:	4770      	bx	lr

080179da <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80179da:	b480      	push	{r7}
 80179dc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80179de:	bf00      	nop
}
 80179e0:	46bd      	mov	sp, r7
 80179e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e6:	4770      	bx	lr

080179e8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80179e8:	b480      	push	{r7}
 80179ea:	b085      	sub	sp, #20
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80179f0:	2300      	movs	r3, #0
 80179f2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80179f8:	68bb      	ldr	r3, [r7, #8]
 80179fa:	0c1b      	lsrs	r3, r3, #16
 80179fc:	041b      	lsls	r3, r3, #16
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d104      	bne.n	8017a0c <SEQ_BitPosition+0x24>
 8017a02:	2310      	movs	r3, #16
 8017a04:	73fb      	strb	r3, [r7, #15]
 8017a06:	68bb      	ldr	r3, [r7, #8]
 8017a08:	041b      	lsls	r3, r3, #16
 8017a0a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8017a0c:	68bb      	ldr	r3, [r7, #8]
 8017a0e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d105      	bne.n	8017a22 <SEQ_BitPosition+0x3a>
 8017a16:	7bfb      	ldrb	r3, [r7, #15]
 8017a18:	3308      	adds	r3, #8
 8017a1a:	73fb      	strb	r3, [r7, #15]
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	021b      	lsls	r3, r3, #8
 8017a20:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8017a22:	68bb      	ldr	r3, [r7, #8]
 8017a24:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d105      	bne.n	8017a38 <SEQ_BitPosition+0x50>
 8017a2c:	7bfb      	ldrb	r3, [r7, #15]
 8017a2e:	3304      	adds	r3, #4
 8017a30:	73fb      	strb	r3, [r7, #15]
 8017a32:	68bb      	ldr	r3, [r7, #8]
 8017a34:	011b      	lsls	r3, r3, #4
 8017a36:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	0f1b      	lsrs	r3, r3, #28
 8017a3c:	4a07      	ldr	r2, [pc, #28]	; (8017a5c <SEQ_BitPosition+0x74>)
 8017a3e:	5cd2      	ldrb	r2, [r2, r3]
 8017a40:	7bfb      	ldrb	r3, [r7, #15]
 8017a42:	4413      	add	r3, r2
 8017a44:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8017a46:	7bfb      	ldrb	r3, [r7, #15]
 8017a48:	f1c3 031f 	rsb	r3, r3, #31
 8017a4c:	b2db      	uxtb	r3, r3
}
 8017a4e:	4618      	mov	r0, r3
 8017a50:	3714      	adds	r7, #20
 8017a52:	46bd      	mov	sp, r7
 8017a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a58:	4770      	bx	lr
 8017a5a:	bf00      	nop
 8017a5c:	0801ac88 	.word	0x0801ac88

08017a60 <__aeabi_memcpy>:
 8017a60:	f000 b86a 	b.w	8017b38 <memcpy>

08017a64 <__assert_func>:
 8017a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017a66:	4614      	mov	r4, r2
 8017a68:	461a      	mov	r2, r3
 8017a6a:	4b09      	ldr	r3, [pc, #36]	; (8017a90 <__assert_func+0x2c>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	4605      	mov	r5, r0
 8017a70:	68d8      	ldr	r0, [r3, #12]
 8017a72:	b14c      	cbz	r4, 8017a88 <__assert_func+0x24>
 8017a74:	4b07      	ldr	r3, [pc, #28]	; (8017a94 <__assert_func+0x30>)
 8017a76:	9100      	str	r1, [sp, #0]
 8017a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017a7c:	4906      	ldr	r1, [pc, #24]	; (8017a98 <__assert_func+0x34>)
 8017a7e:	462b      	mov	r3, r5
 8017a80:	f000 f814 	bl	8017aac <fiprintf>
 8017a84:	f000 fdfc 	bl	8018680 <abort>
 8017a88:	4b04      	ldr	r3, [pc, #16]	; (8017a9c <__assert_func+0x38>)
 8017a8a:	461c      	mov	r4, r3
 8017a8c:	e7f3      	b.n	8017a76 <__assert_func+0x12>
 8017a8e:	bf00      	nop
 8017a90:	200000d0 	.word	0x200000d0
 8017a94:	0801ac98 	.word	0x0801ac98
 8017a98:	0801aca5 	.word	0x0801aca5
 8017a9c:	0801acd3 	.word	0x0801acd3

08017aa0 <__errno>:
 8017aa0:	4b01      	ldr	r3, [pc, #4]	; (8017aa8 <__errno+0x8>)
 8017aa2:	6818      	ldr	r0, [r3, #0]
 8017aa4:	4770      	bx	lr
 8017aa6:	bf00      	nop
 8017aa8:	200000d0 	.word	0x200000d0

08017aac <fiprintf>:
 8017aac:	b40e      	push	{r1, r2, r3}
 8017aae:	b503      	push	{r0, r1, lr}
 8017ab0:	4601      	mov	r1, r0
 8017ab2:	ab03      	add	r3, sp, #12
 8017ab4:	4805      	ldr	r0, [pc, #20]	; (8017acc <fiprintf+0x20>)
 8017ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017aba:	6800      	ldr	r0, [r0, #0]
 8017abc:	9301      	str	r3, [sp, #4]
 8017abe:	f000 f95b 	bl	8017d78 <_vfiprintf_r>
 8017ac2:	b002      	add	sp, #8
 8017ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ac8:	b003      	add	sp, #12
 8017aca:	4770      	bx	lr
 8017acc:	200000d0 	.word	0x200000d0

08017ad0 <__libc_init_array>:
 8017ad0:	b570      	push	{r4, r5, r6, lr}
 8017ad2:	4d0d      	ldr	r5, [pc, #52]	; (8017b08 <__libc_init_array+0x38>)
 8017ad4:	4c0d      	ldr	r4, [pc, #52]	; (8017b0c <__libc_init_array+0x3c>)
 8017ad6:	1b64      	subs	r4, r4, r5
 8017ad8:	10a4      	asrs	r4, r4, #2
 8017ada:	2600      	movs	r6, #0
 8017adc:	42a6      	cmp	r6, r4
 8017ade:	d109      	bne.n	8017af4 <__libc_init_array+0x24>
 8017ae0:	4d0b      	ldr	r5, [pc, #44]	; (8017b10 <__libc_init_array+0x40>)
 8017ae2:	4c0c      	ldr	r4, [pc, #48]	; (8017b14 <__libc_init_array+0x44>)
 8017ae4:	f001 fa9c 	bl	8019020 <_init>
 8017ae8:	1b64      	subs	r4, r4, r5
 8017aea:	10a4      	asrs	r4, r4, #2
 8017aec:	2600      	movs	r6, #0
 8017aee:	42a6      	cmp	r6, r4
 8017af0:	d105      	bne.n	8017afe <__libc_init_array+0x2e>
 8017af2:	bd70      	pop	{r4, r5, r6, pc}
 8017af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017af8:	4798      	blx	r3
 8017afa:	3601      	adds	r6, #1
 8017afc:	e7ee      	b.n	8017adc <__libc_init_array+0xc>
 8017afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b02:	4798      	blx	r3
 8017b04:	3601      	adds	r6, #1
 8017b06:	e7f2      	b.n	8017aee <__libc_init_array+0x1e>
 8017b08:	0801ade8 	.word	0x0801ade8
 8017b0c:	0801ade8 	.word	0x0801ade8
 8017b10:	0801ade8 	.word	0x0801ade8
 8017b14:	0801adec 	.word	0x0801adec

08017b18 <malloc>:
 8017b18:	4b02      	ldr	r3, [pc, #8]	; (8017b24 <malloc+0xc>)
 8017b1a:	4601      	mov	r1, r0
 8017b1c:	6818      	ldr	r0, [r3, #0]
 8017b1e:	f000 b88d 	b.w	8017c3c <_malloc_r>
 8017b22:	bf00      	nop
 8017b24:	200000d0 	.word	0x200000d0

08017b28 <free>:
 8017b28:	4b02      	ldr	r3, [pc, #8]	; (8017b34 <free+0xc>)
 8017b2a:	4601      	mov	r1, r0
 8017b2c:	6818      	ldr	r0, [r3, #0]
 8017b2e:	f000 b819 	b.w	8017b64 <_free_r>
 8017b32:	bf00      	nop
 8017b34:	200000d0 	.word	0x200000d0

08017b38 <memcpy>:
 8017b38:	440a      	add	r2, r1
 8017b3a:	4291      	cmp	r1, r2
 8017b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017b40:	d100      	bne.n	8017b44 <memcpy+0xc>
 8017b42:	4770      	bx	lr
 8017b44:	b510      	push	{r4, lr}
 8017b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b4e:	4291      	cmp	r1, r2
 8017b50:	d1f9      	bne.n	8017b46 <memcpy+0xe>
 8017b52:	bd10      	pop	{r4, pc}

08017b54 <memset>:
 8017b54:	4402      	add	r2, r0
 8017b56:	4603      	mov	r3, r0
 8017b58:	4293      	cmp	r3, r2
 8017b5a:	d100      	bne.n	8017b5e <memset+0xa>
 8017b5c:	4770      	bx	lr
 8017b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8017b62:	e7f9      	b.n	8017b58 <memset+0x4>

08017b64 <_free_r>:
 8017b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b66:	2900      	cmp	r1, #0
 8017b68:	d044      	beq.n	8017bf4 <_free_r+0x90>
 8017b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b6e:	9001      	str	r0, [sp, #4]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	f1a1 0404 	sub.w	r4, r1, #4
 8017b76:	bfb8      	it	lt
 8017b78:	18e4      	addlt	r4, r4, r3
 8017b7a:	f000 ffc3 	bl	8018b04 <__malloc_lock>
 8017b7e:	4a1e      	ldr	r2, [pc, #120]	; (8017bf8 <_free_r+0x94>)
 8017b80:	9801      	ldr	r0, [sp, #4]
 8017b82:	6813      	ldr	r3, [r2, #0]
 8017b84:	b933      	cbnz	r3, 8017b94 <_free_r+0x30>
 8017b86:	6063      	str	r3, [r4, #4]
 8017b88:	6014      	str	r4, [r2, #0]
 8017b8a:	b003      	add	sp, #12
 8017b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b90:	f000 bfbe 	b.w	8018b10 <__malloc_unlock>
 8017b94:	42a3      	cmp	r3, r4
 8017b96:	d908      	bls.n	8017baa <_free_r+0x46>
 8017b98:	6825      	ldr	r5, [r4, #0]
 8017b9a:	1961      	adds	r1, r4, r5
 8017b9c:	428b      	cmp	r3, r1
 8017b9e:	bf01      	itttt	eq
 8017ba0:	6819      	ldreq	r1, [r3, #0]
 8017ba2:	685b      	ldreq	r3, [r3, #4]
 8017ba4:	1949      	addeq	r1, r1, r5
 8017ba6:	6021      	streq	r1, [r4, #0]
 8017ba8:	e7ed      	b.n	8017b86 <_free_r+0x22>
 8017baa:	461a      	mov	r2, r3
 8017bac:	685b      	ldr	r3, [r3, #4]
 8017bae:	b10b      	cbz	r3, 8017bb4 <_free_r+0x50>
 8017bb0:	42a3      	cmp	r3, r4
 8017bb2:	d9fa      	bls.n	8017baa <_free_r+0x46>
 8017bb4:	6811      	ldr	r1, [r2, #0]
 8017bb6:	1855      	adds	r5, r2, r1
 8017bb8:	42a5      	cmp	r5, r4
 8017bba:	d10b      	bne.n	8017bd4 <_free_r+0x70>
 8017bbc:	6824      	ldr	r4, [r4, #0]
 8017bbe:	4421      	add	r1, r4
 8017bc0:	1854      	adds	r4, r2, r1
 8017bc2:	42a3      	cmp	r3, r4
 8017bc4:	6011      	str	r1, [r2, #0]
 8017bc6:	d1e0      	bne.n	8017b8a <_free_r+0x26>
 8017bc8:	681c      	ldr	r4, [r3, #0]
 8017bca:	685b      	ldr	r3, [r3, #4]
 8017bcc:	6053      	str	r3, [r2, #4]
 8017bce:	4421      	add	r1, r4
 8017bd0:	6011      	str	r1, [r2, #0]
 8017bd2:	e7da      	b.n	8017b8a <_free_r+0x26>
 8017bd4:	d902      	bls.n	8017bdc <_free_r+0x78>
 8017bd6:	230c      	movs	r3, #12
 8017bd8:	6003      	str	r3, [r0, #0]
 8017bda:	e7d6      	b.n	8017b8a <_free_r+0x26>
 8017bdc:	6825      	ldr	r5, [r4, #0]
 8017bde:	1961      	adds	r1, r4, r5
 8017be0:	428b      	cmp	r3, r1
 8017be2:	bf04      	itt	eq
 8017be4:	6819      	ldreq	r1, [r3, #0]
 8017be6:	685b      	ldreq	r3, [r3, #4]
 8017be8:	6063      	str	r3, [r4, #4]
 8017bea:	bf04      	itt	eq
 8017bec:	1949      	addeq	r1, r1, r5
 8017bee:	6021      	streq	r1, [r4, #0]
 8017bf0:	6054      	str	r4, [r2, #4]
 8017bf2:	e7ca      	b.n	8017b8a <_free_r+0x26>
 8017bf4:	b003      	add	sp, #12
 8017bf6:	bd30      	pop	{r4, r5, pc}
 8017bf8:	20001ce4 	.word	0x20001ce4

08017bfc <sbrk_aligned>:
 8017bfc:	b570      	push	{r4, r5, r6, lr}
 8017bfe:	4e0e      	ldr	r6, [pc, #56]	; (8017c38 <sbrk_aligned+0x3c>)
 8017c00:	460c      	mov	r4, r1
 8017c02:	6831      	ldr	r1, [r6, #0]
 8017c04:	4605      	mov	r5, r0
 8017c06:	b911      	cbnz	r1, 8017c0e <sbrk_aligned+0x12>
 8017c08:	f000 fbd0 	bl	80183ac <_sbrk_r>
 8017c0c:	6030      	str	r0, [r6, #0]
 8017c0e:	4621      	mov	r1, r4
 8017c10:	4628      	mov	r0, r5
 8017c12:	f000 fbcb 	bl	80183ac <_sbrk_r>
 8017c16:	1c43      	adds	r3, r0, #1
 8017c18:	d00a      	beq.n	8017c30 <sbrk_aligned+0x34>
 8017c1a:	1cc4      	adds	r4, r0, #3
 8017c1c:	f024 0403 	bic.w	r4, r4, #3
 8017c20:	42a0      	cmp	r0, r4
 8017c22:	d007      	beq.n	8017c34 <sbrk_aligned+0x38>
 8017c24:	1a21      	subs	r1, r4, r0
 8017c26:	4628      	mov	r0, r5
 8017c28:	f000 fbc0 	bl	80183ac <_sbrk_r>
 8017c2c:	3001      	adds	r0, #1
 8017c2e:	d101      	bne.n	8017c34 <sbrk_aligned+0x38>
 8017c30:	f04f 34ff 	mov.w	r4, #4294967295
 8017c34:	4620      	mov	r0, r4
 8017c36:	bd70      	pop	{r4, r5, r6, pc}
 8017c38:	20001ce8 	.word	0x20001ce8

08017c3c <_malloc_r>:
 8017c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c40:	1ccd      	adds	r5, r1, #3
 8017c42:	f025 0503 	bic.w	r5, r5, #3
 8017c46:	3508      	adds	r5, #8
 8017c48:	2d0c      	cmp	r5, #12
 8017c4a:	bf38      	it	cc
 8017c4c:	250c      	movcc	r5, #12
 8017c4e:	2d00      	cmp	r5, #0
 8017c50:	4607      	mov	r7, r0
 8017c52:	db01      	blt.n	8017c58 <_malloc_r+0x1c>
 8017c54:	42a9      	cmp	r1, r5
 8017c56:	d905      	bls.n	8017c64 <_malloc_r+0x28>
 8017c58:	230c      	movs	r3, #12
 8017c5a:	603b      	str	r3, [r7, #0]
 8017c5c:	2600      	movs	r6, #0
 8017c5e:	4630      	mov	r0, r6
 8017c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c64:	4e2e      	ldr	r6, [pc, #184]	; (8017d20 <_malloc_r+0xe4>)
 8017c66:	f000 ff4d 	bl	8018b04 <__malloc_lock>
 8017c6a:	6833      	ldr	r3, [r6, #0]
 8017c6c:	461c      	mov	r4, r3
 8017c6e:	bb34      	cbnz	r4, 8017cbe <_malloc_r+0x82>
 8017c70:	4629      	mov	r1, r5
 8017c72:	4638      	mov	r0, r7
 8017c74:	f7ff ffc2 	bl	8017bfc <sbrk_aligned>
 8017c78:	1c43      	adds	r3, r0, #1
 8017c7a:	4604      	mov	r4, r0
 8017c7c:	d14d      	bne.n	8017d1a <_malloc_r+0xde>
 8017c7e:	6834      	ldr	r4, [r6, #0]
 8017c80:	4626      	mov	r6, r4
 8017c82:	2e00      	cmp	r6, #0
 8017c84:	d140      	bne.n	8017d08 <_malloc_r+0xcc>
 8017c86:	6823      	ldr	r3, [r4, #0]
 8017c88:	4631      	mov	r1, r6
 8017c8a:	4638      	mov	r0, r7
 8017c8c:	eb04 0803 	add.w	r8, r4, r3
 8017c90:	f000 fb8c 	bl	80183ac <_sbrk_r>
 8017c94:	4580      	cmp	r8, r0
 8017c96:	d13a      	bne.n	8017d0e <_malloc_r+0xd2>
 8017c98:	6821      	ldr	r1, [r4, #0]
 8017c9a:	3503      	adds	r5, #3
 8017c9c:	1a6d      	subs	r5, r5, r1
 8017c9e:	f025 0503 	bic.w	r5, r5, #3
 8017ca2:	3508      	adds	r5, #8
 8017ca4:	2d0c      	cmp	r5, #12
 8017ca6:	bf38      	it	cc
 8017ca8:	250c      	movcc	r5, #12
 8017caa:	4629      	mov	r1, r5
 8017cac:	4638      	mov	r0, r7
 8017cae:	f7ff ffa5 	bl	8017bfc <sbrk_aligned>
 8017cb2:	3001      	adds	r0, #1
 8017cb4:	d02b      	beq.n	8017d0e <_malloc_r+0xd2>
 8017cb6:	6823      	ldr	r3, [r4, #0]
 8017cb8:	442b      	add	r3, r5
 8017cba:	6023      	str	r3, [r4, #0]
 8017cbc:	e00e      	b.n	8017cdc <_malloc_r+0xa0>
 8017cbe:	6822      	ldr	r2, [r4, #0]
 8017cc0:	1b52      	subs	r2, r2, r5
 8017cc2:	d41e      	bmi.n	8017d02 <_malloc_r+0xc6>
 8017cc4:	2a0b      	cmp	r2, #11
 8017cc6:	d916      	bls.n	8017cf6 <_malloc_r+0xba>
 8017cc8:	1961      	adds	r1, r4, r5
 8017cca:	42a3      	cmp	r3, r4
 8017ccc:	6025      	str	r5, [r4, #0]
 8017cce:	bf18      	it	ne
 8017cd0:	6059      	strne	r1, [r3, #4]
 8017cd2:	6863      	ldr	r3, [r4, #4]
 8017cd4:	bf08      	it	eq
 8017cd6:	6031      	streq	r1, [r6, #0]
 8017cd8:	5162      	str	r2, [r4, r5]
 8017cda:	604b      	str	r3, [r1, #4]
 8017cdc:	4638      	mov	r0, r7
 8017cde:	f104 060b 	add.w	r6, r4, #11
 8017ce2:	f000 ff15 	bl	8018b10 <__malloc_unlock>
 8017ce6:	f026 0607 	bic.w	r6, r6, #7
 8017cea:	1d23      	adds	r3, r4, #4
 8017cec:	1af2      	subs	r2, r6, r3
 8017cee:	d0b6      	beq.n	8017c5e <_malloc_r+0x22>
 8017cf0:	1b9b      	subs	r3, r3, r6
 8017cf2:	50a3      	str	r3, [r4, r2]
 8017cf4:	e7b3      	b.n	8017c5e <_malloc_r+0x22>
 8017cf6:	6862      	ldr	r2, [r4, #4]
 8017cf8:	42a3      	cmp	r3, r4
 8017cfa:	bf0c      	ite	eq
 8017cfc:	6032      	streq	r2, [r6, #0]
 8017cfe:	605a      	strne	r2, [r3, #4]
 8017d00:	e7ec      	b.n	8017cdc <_malloc_r+0xa0>
 8017d02:	4623      	mov	r3, r4
 8017d04:	6864      	ldr	r4, [r4, #4]
 8017d06:	e7b2      	b.n	8017c6e <_malloc_r+0x32>
 8017d08:	4634      	mov	r4, r6
 8017d0a:	6876      	ldr	r6, [r6, #4]
 8017d0c:	e7b9      	b.n	8017c82 <_malloc_r+0x46>
 8017d0e:	230c      	movs	r3, #12
 8017d10:	603b      	str	r3, [r7, #0]
 8017d12:	4638      	mov	r0, r7
 8017d14:	f000 fefc 	bl	8018b10 <__malloc_unlock>
 8017d18:	e7a1      	b.n	8017c5e <_malloc_r+0x22>
 8017d1a:	6025      	str	r5, [r4, #0]
 8017d1c:	e7de      	b.n	8017cdc <_malloc_r+0xa0>
 8017d1e:	bf00      	nop
 8017d20:	20001ce4 	.word	0x20001ce4

08017d24 <__sfputc_r>:
 8017d24:	6893      	ldr	r3, [r2, #8]
 8017d26:	3b01      	subs	r3, #1
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	b410      	push	{r4}
 8017d2c:	6093      	str	r3, [r2, #8]
 8017d2e:	da08      	bge.n	8017d42 <__sfputc_r+0x1e>
 8017d30:	6994      	ldr	r4, [r2, #24]
 8017d32:	42a3      	cmp	r3, r4
 8017d34:	db01      	blt.n	8017d3a <__sfputc_r+0x16>
 8017d36:	290a      	cmp	r1, #10
 8017d38:	d103      	bne.n	8017d42 <__sfputc_r+0x1e>
 8017d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d3e:	f000 bbdf 	b.w	8018500 <__swbuf_r>
 8017d42:	6813      	ldr	r3, [r2, #0]
 8017d44:	1c58      	adds	r0, r3, #1
 8017d46:	6010      	str	r0, [r2, #0]
 8017d48:	7019      	strb	r1, [r3, #0]
 8017d4a:	4608      	mov	r0, r1
 8017d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d50:	4770      	bx	lr

08017d52 <__sfputs_r>:
 8017d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d54:	4606      	mov	r6, r0
 8017d56:	460f      	mov	r7, r1
 8017d58:	4614      	mov	r4, r2
 8017d5a:	18d5      	adds	r5, r2, r3
 8017d5c:	42ac      	cmp	r4, r5
 8017d5e:	d101      	bne.n	8017d64 <__sfputs_r+0x12>
 8017d60:	2000      	movs	r0, #0
 8017d62:	e007      	b.n	8017d74 <__sfputs_r+0x22>
 8017d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d68:	463a      	mov	r2, r7
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	f7ff ffda 	bl	8017d24 <__sfputc_r>
 8017d70:	1c43      	adds	r3, r0, #1
 8017d72:	d1f3      	bne.n	8017d5c <__sfputs_r+0xa>
 8017d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d78 <_vfiprintf_r>:
 8017d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d7c:	460d      	mov	r5, r1
 8017d7e:	b09d      	sub	sp, #116	; 0x74
 8017d80:	4614      	mov	r4, r2
 8017d82:	4698      	mov	r8, r3
 8017d84:	4606      	mov	r6, r0
 8017d86:	b118      	cbz	r0, 8017d90 <_vfiprintf_r+0x18>
 8017d88:	6983      	ldr	r3, [r0, #24]
 8017d8a:	b90b      	cbnz	r3, 8017d90 <_vfiprintf_r+0x18>
 8017d8c:	f000 fd9a 	bl	80188c4 <__sinit>
 8017d90:	4b89      	ldr	r3, [pc, #548]	; (8017fb8 <_vfiprintf_r+0x240>)
 8017d92:	429d      	cmp	r5, r3
 8017d94:	d11b      	bne.n	8017dce <_vfiprintf_r+0x56>
 8017d96:	6875      	ldr	r5, [r6, #4]
 8017d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d9a:	07d9      	lsls	r1, r3, #31
 8017d9c:	d405      	bmi.n	8017daa <_vfiprintf_r+0x32>
 8017d9e:	89ab      	ldrh	r3, [r5, #12]
 8017da0:	059a      	lsls	r2, r3, #22
 8017da2:	d402      	bmi.n	8017daa <_vfiprintf_r+0x32>
 8017da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017da6:	f000 fe2b 	bl	8018a00 <__retarget_lock_acquire_recursive>
 8017daa:	89ab      	ldrh	r3, [r5, #12]
 8017dac:	071b      	lsls	r3, r3, #28
 8017dae:	d501      	bpl.n	8017db4 <_vfiprintf_r+0x3c>
 8017db0:	692b      	ldr	r3, [r5, #16]
 8017db2:	b9eb      	cbnz	r3, 8017df0 <_vfiprintf_r+0x78>
 8017db4:	4629      	mov	r1, r5
 8017db6:	4630      	mov	r0, r6
 8017db8:	f000 fbf4 	bl	80185a4 <__swsetup_r>
 8017dbc:	b1c0      	cbz	r0, 8017df0 <_vfiprintf_r+0x78>
 8017dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017dc0:	07dc      	lsls	r4, r3, #31
 8017dc2:	d50e      	bpl.n	8017de2 <_vfiprintf_r+0x6a>
 8017dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc8:	b01d      	add	sp, #116	; 0x74
 8017dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dce:	4b7b      	ldr	r3, [pc, #492]	; (8017fbc <_vfiprintf_r+0x244>)
 8017dd0:	429d      	cmp	r5, r3
 8017dd2:	d101      	bne.n	8017dd8 <_vfiprintf_r+0x60>
 8017dd4:	68b5      	ldr	r5, [r6, #8]
 8017dd6:	e7df      	b.n	8017d98 <_vfiprintf_r+0x20>
 8017dd8:	4b79      	ldr	r3, [pc, #484]	; (8017fc0 <_vfiprintf_r+0x248>)
 8017dda:	429d      	cmp	r5, r3
 8017ddc:	bf08      	it	eq
 8017dde:	68f5      	ldreq	r5, [r6, #12]
 8017de0:	e7da      	b.n	8017d98 <_vfiprintf_r+0x20>
 8017de2:	89ab      	ldrh	r3, [r5, #12]
 8017de4:	0598      	lsls	r0, r3, #22
 8017de6:	d4ed      	bmi.n	8017dc4 <_vfiprintf_r+0x4c>
 8017de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017dea:	f000 fe0a 	bl	8018a02 <__retarget_lock_release_recursive>
 8017dee:	e7e9      	b.n	8017dc4 <_vfiprintf_r+0x4c>
 8017df0:	2300      	movs	r3, #0
 8017df2:	9309      	str	r3, [sp, #36]	; 0x24
 8017df4:	2320      	movs	r3, #32
 8017df6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8017dfe:	2330      	movs	r3, #48	; 0x30
 8017e00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017fc4 <_vfiprintf_r+0x24c>
 8017e04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e08:	f04f 0901 	mov.w	r9, #1
 8017e0c:	4623      	mov	r3, r4
 8017e0e:	469a      	mov	sl, r3
 8017e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e14:	b10a      	cbz	r2, 8017e1a <_vfiprintf_r+0xa2>
 8017e16:	2a25      	cmp	r2, #37	; 0x25
 8017e18:	d1f9      	bne.n	8017e0e <_vfiprintf_r+0x96>
 8017e1a:	ebba 0b04 	subs.w	fp, sl, r4
 8017e1e:	d00b      	beq.n	8017e38 <_vfiprintf_r+0xc0>
 8017e20:	465b      	mov	r3, fp
 8017e22:	4622      	mov	r2, r4
 8017e24:	4629      	mov	r1, r5
 8017e26:	4630      	mov	r0, r6
 8017e28:	f7ff ff93 	bl	8017d52 <__sfputs_r>
 8017e2c:	3001      	adds	r0, #1
 8017e2e:	f000 80aa 	beq.w	8017f86 <_vfiprintf_r+0x20e>
 8017e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e34:	445a      	add	r2, fp
 8017e36:	9209      	str	r2, [sp, #36]	; 0x24
 8017e38:	f89a 3000 	ldrb.w	r3, [sl]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	f000 80a2 	beq.w	8017f86 <_vfiprintf_r+0x20e>
 8017e42:	2300      	movs	r3, #0
 8017e44:	f04f 32ff 	mov.w	r2, #4294967295
 8017e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e4c:	f10a 0a01 	add.w	sl, sl, #1
 8017e50:	9304      	str	r3, [sp, #16]
 8017e52:	9307      	str	r3, [sp, #28]
 8017e54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e58:	931a      	str	r3, [sp, #104]	; 0x68
 8017e5a:	4654      	mov	r4, sl
 8017e5c:	2205      	movs	r2, #5
 8017e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e62:	4858      	ldr	r0, [pc, #352]	; (8017fc4 <_vfiprintf_r+0x24c>)
 8017e64:	f7ef fd94 	bl	8007990 <memchr>
 8017e68:	9a04      	ldr	r2, [sp, #16]
 8017e6a:	b9d8      	cbnz	r0, 8017ea4 <_vfiprintf_r+0x12c>
 8017e6c:	06d1      	lsls	r1, r2, #27
 8017e6e:	bf44      	itt	mi
 8017e70:	2320      	movmi	r3, #32
 8017e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e76:	0713      	lsls	r3, r2, #28
 8017e78:	bf44      	itt	mi
 8017e7a:	232b      	movmi	r3, #43	; 0x2b
 8017e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e80:	f89a 3000 	ldrb.w	r3, [sl]
 8017e84:	2b2a      	cmp	r3, #42	; 0x2a
 8017e86:	d015      	beq.n	8017eb4 <_vfiprintf_r+0x13c>
 8017e88:	9a07      	ldr	r2, [sp, #28]
 8017e8a:	4654      	mov	r4, sl
 8017e8c:	2000      	movs	r0, #0
 8017e8e:	f04f 0c0a 	mov.w	ip, #10
 8017e92:	4621      	mov	r1, r4
 8017e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e98:	3b30      	subs	r3, #48	; 0x30
 8017e9a:	2b09      	cmp	r3, #9
 8017e9c:	d94e      	bls.n	8017f3c <_vfiprintf_r+0x1c4>
 8017e9e:	b1b0      	cbz	r0, 8017ece <_vfiprintf_r+0x156>
 8017ea0:	9207      	str	r2, [sp, #28]
 8017ea2:	e014      	b.n	8017ece <_vfiprintf_r+0x156>
 8017ea4:	eba0 0308 	sub.w	r3, r0, r8
 8017ea8:	fa09 f303 	lsl.w	r3, r9, r3
 8017eac:	4313      	orrs	r3, r2
 8017eae:	9304      	str	r3, [sp, #16]
 8017eb0:	46a2      	mov	sl, r4
 8017eb2:	e7d2      	b.n	8017e5a <_vfiprintf_r+0xe2>
 8017eb4:	9b03      	ldr	r3, [sp, #12]
 8017eb6:	1d19      	adds	r1, r3, #4
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	9103      	str	r1, [sp, #12]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	bfbb      	ittet	lt
 8017ec0:	425b      	neglt	r3, r3
 8017ec2:	f042 0202 	orrlt.w	r2, r2, #2
 8017ec6:	9307      	strge	r3, [sp, #28]
 8017ec8:	9307      	strlt	r3, [sp, #28]
 8017eca:	bfb8      	it	lt
 8017ecc:	9204      	strlt	r2, [sp, #16]
 8017ece:	7823      	ldrb	r3, [r4, #0]
 8017ed0:	2b2e      	cmp	r3, #46	; 0x2e
 8017ed2:	d10c      	bne.n	8017eee <_vfiprintf_r+0x176>
 8017ed4:	7863      	ldrb	r3, [r4, #1]
 8017ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8017ed8:	d135      	bne.n	8017f46 <_vfiprintf_r+0x1ce>
 8017eda:	9b03      	ldr	r3, [sp, #12]
 8017edc:	1d1a      	adds	r2, r3, #4
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	9203      	str	r2, [sp, #12]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	bfb8      	it	lt
 8017ee6:	f04f 33ff 	movlt.w	r3, #4294967295
 8017eea:	3402      	adds	r4, #2
 8017eec:	9305      	str	r3, [sp, #20]
 8017eee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017fd4 <_vfiprintf_r+0x25c>
 8017ef2:	7821      	ldrb	r1, [r4, #0]
 8017ef4:	2203      	movs	r2, #3
 8017ef6:	4650      	mov	r0, sl
 8017ef8:	f7ef fd4a 	bl	8007990 <memchr>
 8017efc:	b140      	cbz	r0, 8017f10 <_vfiprintf_r+0x198>
 8017efe:	2340      	movs	r3, #64	; 0x40
 8017f00:	eba0 000a 	sub.w	r0, r0, sl
 8017f04:	fa03 f000 	lsl.w	r0, r3, r0
 8017f08:	9b04      	ldr	r3, [sp, #16]
 8017f0a:	4303      	orrs	r3, r0
 8017f0c:	3401      	adds	r4, #1
 8017f0e:	9304      	str	r3, [sp, #16]
 8017f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f14:	482c      	ldr	r0, [pc, #176]	; (8017fc8 <_vfiprintf_r+0x250>)
 8017f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017f1a:	2206      	movs	r2, #6
 8017f1c:	f7ef fd38 	bl	8007990 <memchr>
 8017f20:	2800      	cmp	r0, #0
 8017f22:	d03f      	beq.n	8017fa4 <_vfiprintf_r+0x22c>
 8017f24:	4b29      	ldr	r3, [pc, #164]	; (8017fcc <_vfiprintf_r+0x254>)
 8017f26:	bb1b      	cbnz	r3, 8017f70 <_vfiprintf_r+0x1f8>
 8017f28:	9b03      	ldr	r3, [sp, #12]
 8017f2a:	3307      	adds	r3, #7
 8017f2c:	f023 0307 	bic.w	r3, r3, #7
 8017f30:	3308      	adds	r3, #8
 8017f32:	9303      	str	r3, [sp, #12]
 8017f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f36:	443b      	add	r3, r7
 8017f38:	9309      	str	r3, [sp, #36]	; 0x24
 8017f3a:	e767      	b.n	8017e0c <_vfiprintf_r+0x94>
 8017f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f40:	460c      	mov	r4, r1
 8017f42:	2001      	movs	r0, #1
 8017f44:	e7a5      	b.n	8017e92 <_vfiprintf_r+0x11a>
 8017f46:	2300      	movs	r3, #0
 8017f48:	3401      	adds	r4, #1
 8017f4a:	9305      	str	r3, [sp, #20]
 8017f4c:	4619      	mov	r1, r3
 8017f4e:	f04f 0c0a 	mov.w	ip, #10
 8017f52:	4620      	mov	r0, r4
 8017f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f58:	3a30      	subs	r2, #48	; 0x30
 8017f5a:	2a09      	cmp	r2, #9
 8017f5c:	d903      	bls.n	8017f66 <_vfiprintf_r+0x1ee>
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d0c5      	beq.n	8017eee <_vfiprintf_r+0x176>
 8017f62:	9105      	str	r1, [sp, #20]
 8017f64:	e7c3      	b.n	8017eee <_vfiprintf_r+0x176>
 8017f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f6a:	4604      	mov	r4, r0
 8017f6c:	2301      	movs	r3, #1
 8017f6e:	e7f0      	b.n	8017f52 <_vfiprintf_r+0x1da>
 8017f70:	ab03      	add	r3, sp, #12
 8017f72:	9300      	str	r3, [sp, #0]
 8017f74:	462a      	mov	r2, r5
 8017f76:	4b16      	ldr	r3, [pc, #88]	; (8017fd0 <_vfiprintf_r+0x258>)
 8017f78:	a904      	add	r1, sp, #16
 8017f7a:	4630      	mov	r0, r6
 8017f7c:	f3af 8000 	nop.w
 8017f80:	4607      	mov	r7, r0
 8017f82:	1c78      	adds	r0, r7, #1
 8017f84:	d1d6      	bne.n	8017f34 <_vfiprintf_r+0x1bc>
 8017f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f88:	07d9      	lsls	r1, r3, #31
 8017f8a:	d405      	bmi.n	8017f98 <_vfiprintf_r+0x220>
 8017f8c:	89ab      	ldrh	r3, [r5, #12]
 8017f8e:	059a      	lsls	r2, r3, #22
 8017f90:	d402      	bmi.n	8017f98 <_vfiprintf_r+0x220>
 8017f92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f94:	f000 fd35 	bl	8018a02 <__retarget_lock_release_recursive>
 8017f98:	89ab      	ldrh	r3, [r5, #12]
 8017f9a:	065b      	lsls	r3, r3, #25
 8017f9c:	f53f af12 	bmi.w	8017dc4 <_vfiprintf_r+0x4c>
 8017fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017fa2:	e711      	b.n	8017dc8 <_vfiprintf_r+0x50>
 8017fa4:	ab03      	add	r3, sp, #12
 8017fa6:	9300      	str	r3, [sp, #0]
 8017fa8:	462a      	mov	r2, r5
 8017faa:	4b09      	ldr	r3, [pc, #36]	; (8017fd0 <_vfiprintf_r+0x258>)
 8017fac:	a904      	add	r1, sp, #16
 8017fae:	4630      	mov	r0, r6
 8017fb0:	f000 f880 	bl	80180b4 <_printf_i>
 8017fb4:	e7e4      	b.n	8017f80 <_vfiprintf_r+0x208>
 8017fb6:	bf00      	nop
 8017fb8:	0801ada0 	.word	0x0801ada0
 8017fbc:	0801adc0 	.word	0x0801adc0
 8017fc0:	0801ad80 	.word	0x0801ad80
 8017fc4:	0801acd8 	.word	0x0801acd8
 8017fc8:	0801ace2 	.word	0x0801ace2
 8017fcc:	00000000 	.word	0x00000000
 8017fd0:	08017d53 	.word	0x08017d53
 8017fd4:	0801acde 	.word	0x0801acde

08017fd8 <_printf_common>:
 8017fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fdc:	4616      	mov	r6, r2
 8017fde:	4699      	mov	r9, r3
 8017fe0:	688a      	ldr	r2, [r1, #8]
 8017fe2:	690b      	ldr	r3, [r1, #16]
 8017fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017fe8:	4293      	cmp	r3, r2
 8017fea:	bfb8      	it	lt
 8017fec:	4613      	movlt	r3, r2
 8017fee:	6033      	str	r3, [r6, #0]
 8017ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017ff4:	4607      	mov	r7, r0
 8017ff6:	460c      	mov	r4, r1
 8017ff8:	b10a      	cbz	r2, 8017ffe <_printf_common+0x26>
 8017ffa:	3301      	adds	r3, #1
 8017ffc:	6033      	str	r3, [r6, #0]
 8017ffe:	6823      	ldr	r3, [r4, #0]
 8018000:	0699      	lsls	r1, r3, #26
 8018002:	bf42      	ittt	mi
 8018004:	6833      	ldrmi	r3, [r6, #0]
 8018006:	3302      	addmi	r3, #2
 8018008:	6033      	strmi	r3, [r6, #0]
 801800a:	6825      	ldr	r5, [r4, #0]
 801800c:	f015 0506 	ands.w	r5, r5, #6
 8018010:	d106      	bne.n	8018020 <_printf_common+0x48>
 8018012:	f104 0a19 	add.w	sl, r4, #25
 8018016:	68e3      	ldr	r3, [r4, #12]
 8018018:	6832      	ldr	r2, [r6, #0]
 801801a:	1a9b      	subs	r3, r3, r2
 801801c:	42ab      	cmp	r3, r5
 801801e:	dc26      	bgt.n	801806e <_printf_common+0x96>
 8018020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018024:	1e13      	subs	r3, r2, #0
 8018026:	6822      	ldr	r2, [r4, #0]
 8018028:	bf18      	it	ne
 801802a:	2301      	movne	r3, #1
 801802c:	0692      	lsls	r2, r2, #26
 801802e:	d42b      	bmi.n	8018088 <_printf_common+0xb0>
 8018030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018034:	4649      	mov	r1, r9
 8018036:	4638      	mov	r0, r7
 8018038:	47c0      	blx	r8
 801803a:	3001      	adds	r0, #1
 801803c:	d01e      	beq.n	801807c <_printf_common+0xa4>
 801803e:	6823      	ldr	r3, [r4, #0]
 8018040:	68e5      	ldr	r5, [r4, #12]
 8018042:	6832      	ldr	r2, [r6, #0]
 8018044:	f003 0306 	and.w	r3, r3, #6
 8018048:	2b04      	cmp	r3, #4
 801804a:	bf08      	it	eq
 801804c:	1aad      	subeq	r5, r5, r2
 801804e:	68a3      	ldr	r3, [r4, #8]
 8018050:	6922      	ldr	r2, [r4, #16]
 8018052:	bf0c      	ite	eq
 8018054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018058:	2500      	movne	r5, #0
 801805a:	4293      	cmp	r3, r2
 801805c:	bfc4      	itt	gt
 801805e:	1a9b      	subgt	r3, r3, r2
 8018060:	18ed      	addgt	r5, r5, r3
 8018062:	2600      	movs	r6, #0
 8018064:	341a      	adds	r4, #26
 8018066:	42b5      	cmp	r5, r6
 8018068:	d11a      	bne.n	80180a0 <_printf_common+0xc8>
 801806a:	2000      	movs	r0, #0
 801806c:	e008      	b.n	8018080 <_printf_common+0xa8>
 801806e:	2301      	movs	r3, #1
 8018070:	4652      	mov	r2, sl
 8018072:	4649      	mov	r1, r9
 8018074:	4638      	mov	r0, r7
 8018076:	47c0      	blx	r8
 8018078:	3001      	adds	r0, #1
 801807a:	d103      	bne.n	8018084 <_printf_common+0xac>
 801807c:	f04f 30ff 	mov.w	r0, #4294967295
 8018080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018084:	3501      	adds	r5, #1
 8018086:	e7c6      	b.n	8018016 <_printf_common+0x3e>
 8018088:	18e1      	adds	r1, r4, r3
 801808a:	1c5a      	adds	r2, r3, #1
 801808c:	2030      	movs	r0, #48	; 0x30
 801808e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018092:	4422      	add	r2, r4
 8018094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801809c:	3302      	adds	r3, #2
 801809e:	e7c7      	b.n	8018030 <_printf_common+0x58>
 80180a0:	2301      	movs	r3, #1
 80180a2:	4622      	mov	r2, r4
 80180a4:	4649      	mov	r1, r9
 80180a6:	4638      	mov	r0, r7
 80180a8:	47c0      	blx	r8
 80180aa:	3001      	adds	r0, #1
 80180ac:	d0e6      	beq.n	801807c <_printf_common+0xa4>
 80180ae:	3601      	adds	r6, #1
 80180b0:	e7d9      	b.n	8018066 <_printf_common+0x8e>
	...

080180b4 <_printf_i>:
 80180b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80180b8:	7e0f      	ldrb	r7, [r1, #24]
 80180ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80180bc:	2f78      	cmp	r7, #120	; 0x78
 80180be:	4691      	mov	r9, r2
 80180c0:	4680      	mov	r8, r0
 80180c2:	460c      	mov	r4, r1
 80180c4:	469a      	mov	sl, r3
 80180c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80180ca:	d807      	bhi.n	80180dc <_printf_i+0x28>
 80180cc:	2f62      	cmp	r7, #98	; 0x62
 80180ce:	d80a      	bhi.n	80180e6 <_printf_i+0x32>
 80180d0:	2f00      	cmp	r7, #0
 80180d2:	f000 80d8 	beq.w	8018286 <_printf_i+0x1d2>
 80180d6:	2f58      	cmp	r7, #88	; 0x58
 80180d8:	f000 80a3 	beq.w	8018222 <_printf_i+0x16e>
 80180dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80180e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80180e4:	e03a      	b.n	801815c <_printf_i+0xa8>
 80180e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80180ea:	2b15      	cmp	r3, #21
 80180ec:	d8f6      	bhi.n	80180dc <_printf_i+0x28>
 80180ee:	a101      	add	r1, pc, #4	; (adr r1, 80180f4 <_printf_i+0x40>)
 80180f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80180f4:	0801814d 	.word	0x0801814d
 80180f8:	08018161 	.word	0x08018161
 80180fc:	080180dd 	.word	0x080180dd
 8018100:	080180dd 	.word	0x080180dd
 8018104:	080180dd 	.word	0x080180dd
 8018108:	080180dd 	.word	0x080180dd
 801810c:	08018161 	.word	0x08018161
 8018110:	080180dd 	.word	0x080180dd
 8018114:	080180dd 	.word	0x080180dd
 8018118:	080180dd 	.word	0x080180dd
 801811c:	080180dd 	.word	0x080180dd
 8018120:	0801826d 	.word	0x0801826d
 8018124:	08018191 	.word	0x08018191
 8018128:	0801824f 	.word	0x0801824f
 801812c:	080180dd 	.word	0x080180dd
 8018130:	080180dd 	.word	0x080180dd
 8018134:	0801828f 	.word	0x0801828f
 8018138:	080180dd 	.word	0x080180dd
 801813c:	08018191 	.word	0x08018191
 8018140:	080180dd 	.word	0x080180dd
 8018144:	080180dd 	.word	0x080180dd
 8018148:	08018257 	.word	0x08018257
 801814c:	682b      	ldr	r3, [r5, #0]
 801814e:	1d1a      	adds	r2, r3, #4
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	602a      	str	r2, [r5, #0]
 8018154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801815c:	2301      	movs	r3, #1
 801815e:	e0a3      	b.n	80182a8 <_printf_i+0x1f4>
 8018160:	6820      	ldr	r0, [r4, #0]
 8018162:	6829      	ldr	r1, [r5, #0]
 8018164:	0606      	lsls	r6, r0, #24
 8018166:	f101 0304 	add.w	r3, r1, #4
 801816a:	d50a      	bpl.n	8018182 <_printf_i+0xce>
 801816c:	680e      	ldr	r6, [r1, #0]
 801816e:	602b      	str	r3, [r5, #0]
 8018170:	2e00      	cmp	r6, #0
 8018172:	da03      	bge.n	801817c <_printf_i+0xc8>
 8018174:	232d      	movs	r3, #45	; 0x2d
 8018176:	4276      	negs	r6, r6
 8018178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801817c:	485e      	ldr	r0, [pc, #376]	; (80182f8 <_printf_i+0x244>)
 801817e:	230a      	movs	r3, #10
 8018180:	e019      	b.n	80181b6 <_printf_i+0x102>
 8018182:	680e      	ldr	r6, [r1, #0]
 8018184:	602b      	str	r3, [r5, #0]
 8018186:	f010 0f40 	tst.w	r0, #64	; 0x40
 801818a:	bf18      	it	ne
 801818c:	b236      	sxthne	r6, r6
 801818e:	e7ef      	b.n	8018170 <_printf_i+0xbc>
 8018190:	682b      	ldr	r3, [r5, #0]
 8018192:	6820      	ldr	r0, [r4, #0]
 8018194:	1d19      	adds	r1, r3, #4
 8018196:	6029      	str	r1, [r5, #0]
 8018198:	0601      	lsls	r1, r0, #24
 801819a:	d501      	bpl.n	80181a0 <_printf_i+0xec>
 801819c:	681e      	ldr	r6, [r3, #0]
 801819e:	e002      	b.n	80181a6 <_printf_i+0xf2>
 80181a0:	0646      	lsls	r6, r0, #25
 80181a2:	d5fb      	bpl.n	801819c <_printf_i+0xe8>
 80181a4:	881e      	ldrh	r6, [r3, #0]
 80181a6:	4854      	ldr	r0, [pc, #336]	; (80182f8 <_printf_i+0x244>)
 80181a8:	2f6f      	cmp	r7, #111	; 0x6f
 80181aa:	bf0c      	ite	eq
 80181ac:	2308      	moveq	r3, #8
 80181ae:	230a      	movne	r3, #10
 80181b0:	2100      	movs	r1, #0
 80181b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80181b6:	6865      	ldr	r5, [r4, #4]
 80181b8:	60a5      	str	r5, [r4, #8]
 80181ba:	2d00      	cmp	r5, #0
 80181bc:	bfa2      	ittt	ge
 80181be:	6821      	ldrge	r1, [r4, #0]
 80181c0:	f021 0104 	bicge.w	r1, r1, #4
 80181c4:	6021      	strge	r1, [r4, #0]
 80181c6:	b90e      	cbnz	r6, 80181cc <_printf_i+0x118>
 80181c8:	2d00      	cmp	r5, #0
 80181ca:	d04d      	beq.n	8018268 <_printf_i+0x1b4>
 80181cc:	4615      	mov	r5, r2
 80181ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80181d2:	fb03 6711 	mls	r7, r3, r1, r6
 80181d6:	5dc7      	ldrb	r7, [r0, r7]
 80181d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80181dc:	4637      	mov	r7, r6
 80181de:	42bb      	cmp	r3, r7
 80181e0:	460e      	mov	r6, r1
 80181e2:	d9f4      	bls.n	80181ce <_printf_i+0x11a>
 80181e4:	2b08      	cmp	r3, #8
 80181e6:	d10b      	bne.n	8018200 <_printf_i+0x14c>
 80181e8:	6823      	ldr	r3, [r4, #0]
 80181ea:	07de      	lsls	r6, r3, #31
 80181ec:	d508      	bpl.n	8018200 <_printf_i+0x14c>
 80181ee:	6923      	ldr	r3, [r4, #16]
 80181f0:	6861      	ldr	r1, [r4, #4]
 80181f2:	4299      	cmp	r1, r3
 80181f4:	bfde      	ittt	le
 80181f6:	2330      	movle	r3, #48	; 0x30
 80181f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80181fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018200:	1b52      	subs	r2, r2, r5
 8018202:	6122      	str	r2, [r4, #16]
 8018204:	f8cd a000 	str.w	sl, [sp]
 8018208:	464b      	mov	r3, r9
 801820a:	aa03      	add	r2, sp, #12
 801820c:	4621      	mov	r1, r4
 801820e:	4640      	mov	r0, r8
 8018210:	f7ff fee2 	bl	8017fd8 <_printf_common>
 8018214:	3001      	adds	r0, #1
 8018216:	d14c      	bne.n	80182b2 <_printf_i+0x1fe>
 8018218:	f04f 30ff 	mov.w	r0, #4294967295
 801821c:	b004      	add	sp, #16
 801821e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018222:	4835      	ldr	r0, [pc, #212]	; (80182f8 <_printf_i+0x244>)
 8018224:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018228:	6829      	ldr	r1, [r5, #0]
 801822a:	6823      	ldr	r3, [r4, #0]
 801822c:	f851 6b04 	ldr.w	r6, [r1], #4
 8018230:	6029      	str	r1, [r5, #0]
 8018232:	061d      	lsls	r5, r3, #24
 8018234:	d514      	bpl.n	8018260 <_printf_i+0x1ac>
 8018236:	07df      	lsls	r7, r3, #31
 8018238:	bf44      	itt	mi
 801823a:	f043 0320 	orrmi.w	r3, r3, #32
 801823e:	6023      	strmi	r3, [r4, #0]
 8018240:	b91e      	cbnz	r6, 801824a <_printf_i+0x196>
 8018242:	6823      	ldr	r3, [r4, #0]
 8018244:	f023 0320 	bic.w	r3, r3, #32
 8018248:	6023      	str	r3, [r4, #0]
 801824a:	2310      	movs	r3, #16
 801824c:	e7b0      	b.n	80181b0 <_printf_i+0xfc>
 801824e:	6823      	ldr	r3, [r4, #0]
 8018250:	f043 0320 	orr.w	r3, r3, #32
 8018254:	6023      	str	r3, [r4, #0]
 8018256:	2378      	movs	r3, #120	; 0x78
 8018258:	4828      	ldr	r0, [pc, #160]	; (80182fc <_printf_i+0x248>)
 801825a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801825e:	e7e3      	b.n	8018228 <_printf_i+0x174>
 8018260:	0659      	lsls	r1, r3, #25
 8018262:	bf48      	it	mi
 8018264:	b2b6      	uxthmi	r6, r6
 8018266:	e7e6      	b.n	8018236 <_printf_i+0x182>
 8018268:	4615      	mov	r5, r2
 801826a:	e7bb      	b.n	80181e4 <_printf_i+0x130>
 801826c:	682b      	ldr	r3, [r5, #0]
 801826e:	6826      	ldr	r6, [r4, #0]
 8018270:	6961      	ldr	r1, [r4, #20]
 8018272:	1d18      	adds	r0, r3, #4
 8018274:	6028      	str	r0, [r5, #0]
 8018276:	0635      	lsls	r5, r6, #24
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	d501      	bpl.n	8018280 <_printf_i+0x1cc>
 801827c:	6019      	str	r1, [r3, #0]
 801827e:	e002      	b.n	8018286 <_printf_i+0x1d2>
 8018280:	0670      	lsls	r0, r6, #25
 8018282:	d5fb      	bpl.n	801827c <_printf_i+0x1c8>
 8018284:	8019      	strh	r1, [r3, #0]
 8018286:	2300      	movs	r3, #0
 8018288:	6123      	str	r3, [r4, #16]
 801828a:	4615      	mov	r5, r2
 801828c:	e7ba      	b.n	8018204 <_printf_i+0x150>
 801828e:	682b      	ldr	r3, [r5, #0]
 8018290:	1d1a      	adds	r2, r3, #4
 8018292:	602a      	str	r2, [r5, #0]
 8018294:	681d      	ldr	r5, [r3, #0]
 8018296:	6862      	ldr	r2, [r4, #4]
 8018298:	2100      	movs	r1, #0
 801829a:	4628      	mov	r0, r5
 801829c:	f7ef fb78 	bl	8007990 <memchr>
 80182a0:	b108      	cbz	r0, 80182a6 <_printf_i+0x1f2>
 80182a2:	1b40      	subs	r0, r0, r5
 80182a4:	6060      	str	r0, [r4, #4]
 80182a6:	6863      	ldr	r3, [r4, #4]
 80182a8:	6123      	str	r3, [r4, #16]
 80182aa:	2300      	movs	r3, #0
 80182ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182b0:	e7a8      	b.n	8018204 <_printf_i+0x150>
 80182b2:	6923      	ldr	r3, [r4, #16]
 80182b4:	462a      	mov	r2, r5
 80182b6:	4649      	mov	r1, r9
 80182b8:	4640      	mov	r0, r8
 80182ba:	47d0      	blx	sl
 80182bc:	3001      	adds	r0, #1
 80182be:	d0ab      	beq.n	8018218 <_printf_i+0x164>
 80182c0:	6823      	ldr	r3, [r4, #0]
 80182c2:	079b      	lsls	r3, r3, #30
 80182c4:	d413      	bmi.n	80182ee <_printf_i+0x23a>
 80182c6:	68e0      	ldr	r0, [r4, #12]
 80182c8:	9b03      	ldr	r3, [sp, #12]
 80182ca:	4298      	cmp	r0, r3
 80182cc:	bfb8      	it	lt
 80182ce:	4618      	movlt	r0, r3
 80182d0:	e7a4      	b.n	801821c <_printf_i+0x168>
 80182d2:	2301      	movs	r3, #1
 80182d4:	4632      	mov	r2, r6
 80182d6:	4649      	mov	r1, r9
 80182d8:	4640      	mov	r0, r8
 80182da:	47d0      	blx	sl
 80182dc:	3001      	adds	r0, #1
 80182de:	d09b      	beq.n	8018218 <_printf_i+0x164>
 80182e0:	3501      	adds	r5, #1
 80182e2:	68e3      	ldr	r3, [r4, #12]
 80182e4:	9903      	ldr	r1, [sp, #12]
 80182e6:	1a5b      	subs	r3, r3, r1
 80182e8:	42ab      	cmp	r3, r5
 80182ea:	dcf2      	bgt.n	80182d2 <_printf_i+0x21e>
 80182ec:	e7eb      	b.n	80182c6 <_printf_i+0x212>
 80182ee:	2500      	movs	r5, #0
 80182f0:	f104 0619 	add.w	r6, r4, #25
 80182f4:	e7f5      	b.n	80182e2 <_printf_i+0x22e>
 80182f6:	bf00      	nop
 80182f8:	0801ace9 	.word	0x0801ace9
 80182fc:	0801acfa 	.word	0x0801acfa

08018300 <iprintf>:
 8018300:	b40f      	push	{r0, r1, r2, r3}
 8018302:	4b0a      	ldr	r3, [pc, #40]	; (801832c <iprintf+0x2c>)
 8018304:	b513      	push	{r0, r1, r4, lr}
 8018306:	681c      	ldr	r4, [r3, #0]
 8018308:	b124      	cbz	r4, 8018314 <iprintf+0x14>
 801830a:	69a3      	ldr	r3, [r4, #24]
 801830c:	b913      	cbnz	r3, 8018314 <iprintf+0x14>
 801830e:	4620      	mov	r0, r4
 8018310:	f000 fad8 	bl	80188c4 <__sinit>
 8018314:	ab05      	add	r3, sp, #20
 8018316:	9a04      	ldr	r2, [sp, #16]
 8018318:	68a1      	ldr	r1, [r4, #8]
 801831a:	9301      	str	r3, [sp, #4]
 801831c:	4620      	mov	r0, r4
 801831e:	f7ff fd2b 	bl	8017d78 <_vfiprintf_r>
 8018322:	b002      	add	sp, #8
 8018324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018328:	b004      	add	sp, #16
 801832a:	4770      	bx	lr
 801832c:	200000d0 	.word	0x200000d0

08018330 <rand>:
 8018330:	4b16      	ldr	r3, [pc, #88]	; (801838c <rand+0x5c>)
 8018332:	b510      	push	{r4, lr}
 8018334:	681c      	ldr	r4, [r3, #0]
 8018336:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018338:	b9b3      	cbnz	r3, 8018368 <rand+0x38>
 801833a:	2018      	movs	r0, #24
 801833c:	f7ff fbec 	bl	8017b18 <malloc>
 8018340:	63a0      	str	r0, [r4, #56]	; 0x38
 8018342:	b928      	cbnz	r0, 8018350 <rand+0x20>
 8018344:	4602      	mov	r2, r0
 8018346:	4b12      	ldr	r3, [pc, #72]	; (8018390 <rand+0x60>)
 8018348:	4812      	ldr	r0, [pc, #72]	; (8018394 <rand+0x64>)
 801834a:	214e      	movs	r1, #78	; 0x4e
 801834c:	f7ff fb8a 	bl	8017a64 <__assert_func>
 8018350:	4a11      	ldr	r2, [pc, #68]	; (8018398 <rand+0x68>)
 8018352:	4b12      	ldr	r3, [pc, #72]	; (801839c <rand+0x6c>)
 8018354:	e9c0 2300 	strd	r2, r3, [r0]
 8018358:	4b11      	ldr	r3, [pc, #68]	; (80183a0 <rand+0x70>)
 801835a:	6083      	str	r3, [r0, #8]
 801835c:	230b      	movs	r3, #11
 801835e:	8183      	strh	r3, [r0, #12]
 8018360:	2201      	movs	r2, #1
 8018362:	2300      	movs	r3, #0
 8018364:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018368:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801836a:	4a0e      	ldr	r2, [pc, #56]	; (80183a4 <rand+0x74>)
 801836c:	6920      	ldr	r0, [r4, #16]
 801836e:	6963      	ldr	r3, [r4, #20]
 8018370:	490d      	ldr	r1, [pc, #52]	; (80183a8 <rand+0x78>)
 8018372:	4342      	muls	r2, r0
 8018374:	fb01 2203 	mla	r2, r1, r3, r2
 8018378:	fba0 0101 	umull	r0, r1, r0, r1
 801837c:	1c43      	adds	r3, r0, #1
 801837e:	eb42 0001 	adc.w	r0, r2, r1
 8018382:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8018386:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801838a:	bd10      	pop	{r4, pc}
 801838c:	200000d0 	.word	0x200000d0
 8018390:	0801ad0b 	.word	0x0801ad0b
 8018394:	0801ad22 	.word	0x0801ad22
 8018398:	abcd330e 	.word	0xabcd330e
 801839c:	e66d1234 	.word	0xe66d1234
 80183a0:	0005deec 	.word	0x0005deec
 80183a4:	5851f42d 	.word	0x5851f42d
 80183a8:	4c957f2d 	.word	0x4c957f2d

080183ac <_sbrk_r>:
 80183ac:	b538      	push	{r3, r4, r5, lr}
 80183ae:	4d06      	ldr	r5, [pc, #24]	; (80183c8 <_sbrk_r+0x1c>)
 80183b0:	2300      	movs	r3, #0
 80183b2:	4604      	mov	r4, r0
 80183b4:	4608      	mov	r0, r1
 80183b6:	602b      	str	r3, [r5, #0]
 80183b8:	f7f2 fb4a 	bl	800aa50 <_sbrk>
 80183bc:	1c43      	adds	r3, r0, #1
 80183be:	d102      	bne.n	80183c6 <_sbrk_r+0x1a>
 80183c0:	682b      	ldr	r3, [r5, #0]
 80183c2:	b103      	cbz	r3, 80183c6 <_sbrk_r+0x1a>
 80183c4:	6023      	str	r3, [r4, #0]
 80183c6:	bd38      	pop	{r3, r4, r5, pc}
 80183c8:	20001cf0 	.word	0x20001cf0

080183cc <sniprintf>:
 80183cc:	b40c      	push	{r2, r3}
 80183ce:	b530      	push	{r4, r5, lr}
 80183d0:	4b17      	ldr	r3, [pc, #92]	; (8018430 <sniprintf+0x64>)
 80183d2:	1e0c      	subs	r4, r1, #0
 80183d4:	681d      	ldr	r5, [r3, #0]
 80183d6:	b09d      	sub	sp, #116	; 0x74
 80183d8:	da08      	bge.n	80183ec <sniprintf+0x20>
 80183da:	238b      	movs	r3, #139	; 0x8b
 80183dc:	602b      	str	r3, [r5, #0]
 80183de:	f04f 30ff 	mov.w	r0, #4294967295
 80183e2:	b01d      	add	sp, #116	; 0x74
 80183e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80183e8:	b002      	add	sp, #8
 80183ea:	4770      	bx	lr
 80183ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80183f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80183f4:	bf14      	ite	ne
 80183f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80183fa:	4623      	moveq	r3, r4
 80183fc:	9304      	str	r3, [sp, #16]
 80183fe:	9307      	str	r3, [sp, #28]
 8018400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018404:	9002      	str	r0, [sp, #8]
 8018406:	9006      	str	r0, [sp, #24]
 8018408:	f8ad 3016 	strh.w	r3, [sp, #22]
 801840c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801840e:	ab21      	add	r3, sp, #132	; 0x84
 8018410:	a902      	add	r1, sp, #8
 8018412:	4628      	mov	r0, r5
 8018414:	9301      	str	r3, [sp, #4]
 8018416:	f000 fc0b 	bl	8018c30 <_svfiprintf_r>
 801841a:	1c43      	adds	r3, r0, #1
 801841c:	bfbc      	itt	lt
 801841e:	238b      	movlt	r3, #139	; 0x8b
 8018420:	602b      	strlt	r3, [r5, #0]
 8018422:	2c00      	cmp	r4, #0
 8018424:	d0dd      	beq.n	80183e2 <sniprintf+0x16>
 8018426:	9b02      	ldr	r3, [sp, #8]
 8018428:	2200      	movs	r2, #0
 801842a:	701a      	strb	r2, [r3, #0]
 801842c:	e7d9      	b.n	80183e2 <sniprintf+0x16>
 801842e:	bf00      	nop
 8018430:	200000d0 	.word	0x200000d0

08018434 <siprintf>:
 8018434:	b40e      	push	{r1, r2, r3}
 8018436:	b500      	push	{lr}
 8018438:	b09c      	sub	sp, #112	; 0x70
 801843a:	ab1d      	add	r3, sp, #116	; 0x74
 801843c:	9002      	str	r0, [sp, #8]
 801843e:	9006      	str	r0, [sp, #24]
 8018440:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018444:	4809      	ldr	r0, [pc, #36]	; (801846c <siprintf+0x38>)
 8018446:	9107      	str	r1, [sp, #28]
 8018448:	9104      	str	r1, [sp, #16]
 801844a:	4909      	ldr	r1, [pc, #36]	; (8018470 <siprintf+0x3c>)
 801844c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018450:	9105      	str	r1, [sp, #20]
 8018452:	6800      	ldr	r0, [r0, #0]
 8018454:	9301      	str	r3, [sp, #4]
 8018456:	a902      	add	r1, sp, #8
 8018458:	f000 fbea 	bl	8018c30 <_svfiprintf_r>
 801845c:	9b02      	ldr	r3, [sp, #8]
 801845e:	2200      	movs	r2, #0
 8018460:	701a      	strb	r2, [r3, #0]
 8018462:	b01c      	add	sp, #112	; 0x70
 8018464:	f85d eb04 	ldr.w	lr, [sp], #4
 8018468:	b003      	add	sp, #12
 801846a:	4770      	bx	lr
 801846c:	200000d0 	.word	0x200000d0
 8018470:	ffff0208 	.word	0xffff0208

08018474 <strchr>:
 8018474:	b2c9      	uxtb	r1, r1
 8018476:	4603      	mov	r3, r0
 8018478:	f810 2b01 	ldrb.w	r2, [r0], #1
 801847c:	b11a      	cbz	r2, 8018486 <strchr+0x12>
 801847e:	428a      	cmp	r2, r1
 8018480:	d1f9      	bne.n	8018476 <strchr+0x2>
 8018482:	4618      	mov	r0, r3
 8018484:	4770      	bx	lr
 8018486:	2900      	cmp	r1, #0
 8018488:	bf18      	it	ne
 801848a:	2300      	movne	r3, #0
 801848c:	e7f9      	b.n	8018482 <strchr+0xe>

0801848e <_vsniprintf_r>:
 801848e:	b530      	push	{r4, r5, lr}
 8018490:	4614      	mov	r4, r2
 8018492:	2c00      	cmp	r4, #0
 8018494:	b09b      	sub	sp, #108	; 0x6c
 8018496:	4605      	mov	r5, r0
 8018498:	461a      	mov	r2, r3
 801849a:	da05      	bge.n	80184a8 <_vsniprintf_r+0x1a>
 801849c:	238b      	movs	r3, #139	; 0x8b
 801849e:	6003      	str	r3, [r0, #0]
 80184a0:	f04f 30ff 	mov.w	r0, #4294967295
 80184a4:	b01b      	add	sp, #108	; 0x6c
 80184a6:	bd30      	pop	{r4, r5, pc}
 80184a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80184ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80184b0:	bf14      	ite	ne
 80184b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80184b6:	4623      	moveq	r3, r4
 80184b8:	9302      	str	r3, [sp, #8]
 80184ba:	9305      	str	r3, [sp, #20]
 80184bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80184c0:	9100      	str	r1, [sp, #0]
 80184c2:	9104      	str	r1, [sp, #16]
 80184c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80184c8:	4669      	mov	r1, sp
 80184ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80184cc:	f000 fbb0 	bl	8018c30 <_svfiprintf_r>
 80184d0:	1c43      	adds	r3, r0, #1
 80184d2:	bfbc      	itt	lt
 80184d4:	238b      	movlt	r3, #139	; 0x8b
 80184d6:	602b      	strlt	r3, [r5, #0]
 80184d8:	2c00      	cmp	r4, #0
 80184da:	d0e3      	beq.n	80184a4 <_vsniprintf_r+0x16>
 80184dc:	9b00      	ldr	r3, [sp, #0]
 80184de:	2200      	movs	r2, #0
 80184e0:	701a      	strb	r2, [r3, #0]
 80184e2:	e7df      	b.n	80184a4 <_vsniprintf_r+0x16>

080184e4 <vsniprintf>:
 80184e4:	b507      	push	{r0, r1, r2, lr}
 80184e6:	9300      	str	r3, [sp, #0]
 80184e8:	4613      	mov	r3, r2
 80184ea:	460a      	mov	r2, r1
 80184ec:	4601      	mov	r1, r0
 80184ee:	4803      	ldr	r0, [pc, #12]	; (80184fc <vsniprintf+0x18>)
 80184f0:	6800      	ldr	r0, [r0, #0]
 80184f2:	f7ff ffcc 	bl	801848e <_vsniprintf_r>
 80184f6:	b003      	add	sp, #12
 80184f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80184fc:	200000d0 	.word	0x200000d0

08018500 <__swbuf_r>:
 8018500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018502:	460e      	mov	r6, r1
 8018504:	4614      	mov	r4, r2
 8018506:	4605      	mov	r5, r0
 8018508:	b118      	cbz	r0, 8018512 <__swbuf_r+0x12>
 801850a:	6983      	ldr	r3, [r0, #24]
 801850c:	b90b      	cbnz	r3, 8018512 <__swbuf_r+0x12>
 801850e:	f000 f9d9 	bl	80188c4 <__sinit>
 8018512:	4b21      	ldr	r3, [pc, #132]	; (8018598 <__swbuf_r+0x98>)
 8018514:	429c      	cmp	r4, r3
 8018516:	d12b      	bne.n	8018570 <__swbuf_r+0x70>
 8018518:	686c      	ldr	r4, [r5, #4]
 801851a:	69a3      	ldr	r3, [r4, #24]
 801851c:	60a3      	str	r3, [r4, #8]
 801851e:	89a3      	ldrh	r3, [r4, #12]
 8018520:	071a      	lsls	r2, r3, #28
 8018522:	d52f      	bpl.n	8018584 <__swbuf_r+0x84>
 8018524:	6923      	ldr	r3, [r4, #16]
 8018526:	b36b      	cbz	r3, 8018584 <__swbuf_r+0x84>
 8018528:	6923      	ldr	r3, [r4, #16]
 801852a:	6820      	ldr	r0, [r4, #0]
 801852c:	1ac0      	subs	r0, r0, r3
 801852e:	6963      	ldr	r3, [r4, #20]
 8018530:	b2f6      	uxtb	r6, r6
 8018532:	4283      	cmp	r3, r0
 8018534:	4637      	mov	r7, r6
 8018536:	dc04      	bgt.n	8018542 <__swbuf_r+0x42>
 8018538:	4621      	mov	r1, r4
 801853a:	4628      	mov	r0, r5
 801853c:	f000 f92e 	bl	801879c <_fflush_r>
 8018540:	bb30      	cbnz	r0, 8018590 <__swbuf_r+0x90>
 8018542:	68a3      	ldr	r3, [r4, #8]
 8018544:	3b01      	subs	r3, #1
 8018546:	60a3      	str	r3, [r4, #8]
 8018548:	6823      	ldr	r3, [r4, #0]
 801854a:	1c5a      	adds	r2, r3, #1
 801854c:	6022      	str	r2, [r4, #0]
 801854e:	701e      	strb	r6, [r3, #0]
 8018550:	6963      	ldr	r3, [r4, #20]
 8018552:	3001      	adds	r0, #1
 8018554:	4283      	cmp	r3, r0
 8018556:	d004      	beq.n	8018562 <__swbuf_r+0x62>
 8018558:	89a3      	ldrh	r3, [r4, #12]
 801855a:	07db      	lsls	r3, r3, #31
 801855c:	d506      	bpl.n	801856c <__swbuf_r+0x6c>
 801855e:	2e0a      	cmp	r6, #10
 8018560:	d104      	bne.n	801856c <__swbuf_r+0x6c>
 8018562:	4621      	mov	r1, r4
 8018564:	4628      	mov	r0, r5
 8018566:	f000 f919 	bl	801879c <_fflush_r>
 801856a:	b988      	cbnz	r0, 8018590 <__swbuf_r+0x90>
 801856c:	4638      	mov	r0, r7
 801856e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018570:	4b0a      	ldr	r3, [pc, #40]	; (801859c <__swbuf_r+0x9c>)
 8018572:	429c      	cmp	r4, r3
 8018574:	d101      	bne.n	801857a <__swbuf_r+0x7a>
 8018576:	68ac      	ldr	r4, [r5, #8]
 8018578:	e7cf      	b.n	801851a <__swbuf_r+0x1a>
 801857a:	4b09      	ldr	r3, [pc, #36]	; (80185a0 <__swbuf_r+0xa0>)
 801857c:	429c      	cmp	r4, r3
 801857e:	bf08      	it	eq
 8018580:	68ec      	ldreq	r4, [r5, #12]
 8018582:	e7ca      	b.n	801851a <__swbuf_r+0x1a>
 8018584:	4621      	mov	r1, r4
 8018586:	4628      	mov	r0, r5
 8018588:	f000 f80c 	bl	80185a4 <__swsetup_r>
 801858c:	2800      	cmp	r0, #0
 801858e:	d0cb      	beq.n	8018528 <__swbuf_r+0x28>
 8018590:	f04f 37ff 	mov.w	r7, #4294967295
 8018594:	e7ea      	b.n	801856c <__swbuf_r+0x6c>
 8018596:	bf00      	nop
 8018598:	0801ada0 	.word	0x0801ada0
 801859c:	0801adc0 	.word	0x0801adc0
 80185a0:	0801ad80 	.word	0x0801ad80

080185a4 <__swsetup_r>:
 80185a4:	4b32      	ldr	r3, [pc, #200]	; (8018670 <__swsetup_r+0xcc>)
 80185a6:	b570      	push	{r4, r5, r6, lr}
 80185a8:	681d      	ldr	r5, [r3, #0]
 80185aa:	4606      	mov	r6, r0
 80185ac:	460c      	mov	r4, r1
 80185ae:	b125      	cbz	r5, 80185ba <__swsetup_r+0x16>
 80185b0:	69ab      	ldr	r3, [r5, #24]
 80185b2:	b913      	cbnz	r3, 80185ba <__swsetup_r+0x16>
 80185b4:	4628      	mov	r0, r5
 80185b6:	f000 f985 	bl	80188c4 <__sinit>
 80185ba:	4b2e      	ldr	r3, [pc, #184]	; (8018674 <__swsetup_r+0xd0>)
 80185bc:	429c      	cmp	r4, r3
 80185be:	d10f      	bne.n	80185e0 <__swsetup_r+0x3c>
 80185c0:	686c      	ldr	r4, [r5, #4]
 80185c2:	89a3      	ldrh	r3, [r4, #12]
 80185c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80185c8:	0719      	lsls	r1, r3, #28
 80185ca:	d42c      	bmi.n	8018626 <__swsetup_r+0x82>
 80185cc:	06dd      	lsls	r5, r3, #27
 80185ce:	d411      	bmi.n	80185f4 <__swsetup_r+0x50>
 80185d0:	2309      	movs	r3, #9
 80185d2:	6033      	str	r3, [r6, #0]
 80185d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80185d8:	81a3      	strh	r3, [r4, #12]
 80185da:	f04f 30ff 	mov.w	r0, #4294967295
 80185de:	e03e      	b.n	801865e <__swsetup_r+0xba>
 80185e0:	4b25      	ldr	r3, [pc, #148]	; (8018678 <__swsetup_r+0xd4>)
 80185e2:	429c      	cmp	r4, r3
 80185e4:	d101      	bne.n	80185ea <__swsetup_r+0x46>
 80185e6:	68ac      	ldr	r4, [r5, #8]
 80185e8:	e7eb      	b.n	80185c2 <__swsetup_r+0x1e>
 80185ea:	4b24      	ldr	r3, [pc, #144]	; (801867c <__swsetup_r+0xd8>)
 80185ec:	429c      	cmp	r4, r3
 80185ee:	bf08      	it	eq
 80185f0:	68ec      	ldreq	r4, [r5, #12]
 80185f2:	e7e6      	b.n	80185c2 <__swsetup_r+0x1e>
 80185f4:	0758      	lsls	r0, r3, #29
 80185f6:	d512      	bpl.n	801861e <__swsetup_r+0x7a>
 80185f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80185fa:	b141      	cbz	r1, 801860e <__swsetup_r+0x6a>
 80185fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018600:	4299      	cmp	r1, r3
 8018602:	d002      	beq.n	801860a <__swsetup_r+0x66>
 8018604:	4630      	mov	r0, r6
 8018606:	f7ff faad 	bl	8017b64 <_free_r>
 801860a:	2300      	movs	r3, #0
 801860c:	6363      	str	r3, [r4, #52]	; 0x34
 801860e:	89a3      	ldrh	r3, [r4, #12]
 8018610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018614:	81a3      	strh	r3, [r4, #12]
 8018616:	2300      	movs	r3, #0
 8018618:	6063      	str	r3, [r4, #4]
 801861a:	6923      	ldr	r3, [r4, #16]
 801861c:	6023      	str	r3, [r4, #0]
 801861e:	89a3      	ldrh	r3, [r4, #12]
 8018620:	f043 0308 	orr.w	r3, r3, #8
 8018624:	81a3      	strh	r3, [r4, #12]
 8018626:	6923      	ldr	r3, [r4, #16]
 8018628:	b94b      	cbnz	r3, 801863e <__swsetup_r+0x9a>
 801862a:	89a3      	ldrh	r3, [r4, #12]
 801862c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018634:	d003      	beq.n	801863e <__swsetup_r+0x9a>
 8018636:	4621      	mov	r1, r4
 8018638:	4630      	mov	r0, r6
 801863a:	f000 fa09 	bl	8018a50 <__smakebuf_r>
 801863e:	89a0      	ldrh	r0, [r4, #12]
 8018640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018644:	f010 0301 	ands.w	r3, r0, #1
 8018648:	d00a      	beq.n	8018660 <__swsetup_r+0xbc>
 801864a:	2300      	movs	r3, #0
 801864c:	60a3      	str	r3, [r4, #8]
 801864e:	6963      	ldr	r3, [r4, #20]
 8018650:	425b      	negs	r3, r3
 8018652:	61a3      	str	r3, [r4, #24]
 8018654:	6923      	ldr	r3, [r4, #16]
 8018656:	b943      	cbnz	r3, 801866a <__swsetup_r+0xc6>
 8018658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801865c:	d1ba      	bne.n	80185d4 <__swsetup_r+0x30>
 801865e:	bd70      	pop	{r4, r5, r6, pc}
 8018660:	0781      	lsls	r1, r0, #30
 8018662:	bf58      	it	pl
 8018664:	6963      	ldrpl	r3, [r4, #20]
 8018666:	60a3      	str	r3, [r4, #8]
 8018668:	e7f4      	b.n	8018654 <__swsetup_r+0xb0>
 801866a:	2000      	movs	r0, #0
 801866c:	e7f7      	b.n	801865e <__swsetup_r+0xba>
 801866e:	bf00      	nop
 8018670:	200000d0 	.word	0x200000d0
 8018674:	0801ada0 	.word	0x0801ada0
 8018678:	0801adc0 	.word	0x0801adc0
 801867c:	0801ad80 	.word	0x0801ad80

08018680 <abort>:
 8018680:	b508      	push	{r3, lr}
 8018682:	2006      	movs	r0, #6
 8018684:	f000 fbfc 	bl	8018e80 <raise>
 8018688:	2001      	movs	r0, #1
 801868a:	f7f2 f985 	bl	800a998 <_exit>
	...

08018690 <__sflush_r>:
 8018690:	898a      	ldrh	r2, [r1, #12]
 8018692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018696:	4605      	mov	r5, r0
 8018698:	0710      	lsls	r0, r2, #28
 801869a:	460c      	mov	r4, r1
 801869c:	d458      	bmi.n	8018750 <__sflush_r+0xc0>
 801869e:	684b      	ldr	r3, [r1, #4]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	dc05      	bgt.n	80186b0 <__sflush_r+0x20>
 80186a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	dc02      	bgt.n	80186b0 <__sflush_r+0x20>
 80186aa:	2000      	movs	r0, #0
 80186ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80186b2:	2e00      	cmp	r6, #0
 80186b4:	d0f9      	beq.n	80186aa <__sflush_r+0x1a>
 80186b6:	2300      	movs	r3, #0
 80186b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80186bc:	682f      	ldr	r7, [r5, #0]
 80186be:	602b      	str	r3, [r5, #0]
 80186c0:	d032      	beq.n	8018728 <__sflush_r+0x98>
 80186c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80186c4:	89a3      	ldrh	r3, [r4, #12]
 80186c6:	075a      	lsls	r2, r3, #29
 80186c8:	d505      	bpl.n	80186d6 <__sflush_r+0x46>
 80186ca:	6863      	ldr	r3, [r4, #4]
 80186cc:	1ac0      	subs	r0, r0, r3
 80186ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80186d0:	b10b      	cbz	r3, 80186d6 <__sflush_r+0x46>
 80186d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80186d4:	1ac0      	subs	r0, r0, r3
 80186d6:	2300      	movs	r3, #0
 80186d8:	4602      	mov	r2, r0
 80186da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80186dc:	6a21      	ldr	r1, [r4, #32]
 80186de:	4628      	mov	r0, r5
 80186e0:	47b0      	blx	r6
 80186e2:	1c43      	adds	r3, r0, #1
 80186e4:	89a3      	ldrh	r3, [r4, #12]
 80186e6:	d106      	bne.n	80186f6 <__sflush_r+0x66>
 80186e8:	6829      	ldr	r1, [r5, #0]
 80186ea:	291d      	cmp	r1, #29
 80186ec:	d82c      	bhi.n	8018748 <__sflush_r+0xb8>
 80186ee:	4a2a      	ldr	r2, [pc, #168]	; (8018798 <__sflush_r+0x108>)
 80186f0:	40ca      	lsrs	r2, r1
 80186f2:	07d6      	lsls	r6, r2, #31
 80186f4:	d528      	bpl.n	8018748 <__sflush_r+0xb8>
 80186f6:	2200      	movs	r2, #0
 80186f8:	6062      	str	r2, [r4, #4]
 80186fa:	04d9      	lsls	r1, r3, #19
 80186fc:	6922      	ldr	r2, [r4, #16]
 80186fe:	6022      	str	r2, [r4, #0]
 8018700:	d504      	bpl.n	801870c <__sflush_r+0x7c>
 8018702:	1c42      	adds	r2, r0, #1
 8018704:	d101      	bne.n	801870a <__sflush_r+0x7a>
 8018706:	682b      	ldr	r3, [r5, #0]
 8018708:	b903      	cbnz	r3, 801870c <__sflush_r+0x7c>
 801870a:	6560      	str	r0, [r4, #84]	; 0x54
 801870c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801870e:	602f      	str	r7, [r5, #0]
 8018710:	2900      	cmp	r1, #0
 8018712:	d0ca      	beq.n	80186aa <__sflush_r+0x1a>
 8018714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018718:	4299      	cmp	r1, r3
 801871a:	d002      	beq.n	8018722 <__sflush_r+0x92>
 801871c:	4628      	mov	r0, r5
 801871e:	f7ff fa21 	bl	8017b64 <_free_r>
 8018722:	2000      	movs	r0, #0
 8018724:	6360      	str	r0, [r4, #52]	; 0x34
 8018726:	e7c1      	b.n	80186ac <__sflush_r+0x1c>
 8018728:	6a21      	ldr	r1, [r4, #32]
 801872a:	2301      	movs	r3, #1
 801872c:	4628      	mov	r0, r5
 801872e:	47b0      	blx	r6
 8018730:	1c41      	adds	r1, r0, #1
 8018732:	d1c7      	bne.n	80186c4 <__sflush_r+0x34>
 8018734:	682b      	ldr	r3, [r5, #0]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d0c4      	beq.n	80186c4 <__sflush_r+0x34>
 801873a:	2b1d      	cmp	r3, #29
 801873c:	d001      	beq.n	8018742 <__sflush_r+0xb2>
 801873e:	2b16      	cmp	r3, #22
 8018740:	d101      	bne.n	8018746 <__sflush_r+0xb6>
 8018742:	602f      	str	r7, [r5, #0]
 8018744:	e7b1      	b.n	80186aa <__sflush_r+0x1a>
 8018746:	89a3      	ldrh	r3, [r4, #12]
 8018748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801874c:	81a3      	strh	r3, [r4, #12]
 801874e:	e7ad      	b.n	80186ac <__sflush_r+0x1c>
 8018750:	690f      	ldr	r7, [r1, #16]
 8018752:	2f00      	cmp	r7, #0
 8018754:	d0a9      	beq.n	80186aa <__sflush_r+0x1a>
 8018756:	0793      	lsls	r3, r2, #30
 8018758:	680e      	ldr	r6, [r1, #0]
 801875a:	bf08      	it	eq
 801875c:	694b      	ldreq	r3, [r1, #20]
 801875e:	600f      	str	r7, [r1, #0]
 8018760:	bf18      	it	ne
 8018762:	2300      	movne	r3, #0
 8018764:	eba6 0807 	sub.w	r8, r6, r7
 8018768:	608b      	str	r3, [r1, #8]
 801876a:	f1b8 0f00 	cmp.w	r8, #0
 801876e:	dd9c      	ble.n	80186aa <__sflush_r+0x1a>
 8018770:	6a21      	ldr	r1, [r4, #32]
 8018772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018774:	4643      	mov	r3, r8
 8018776:	463a      	mov	r2, r7
 8018778:	4628      	mov	r0, r5
 801877a:	47b0      	blx	r6
 801877c:	2800      	cmp	r0, #0
 801877e:	dc06      	bgt.n	801878e <__sflush_r+0xfe>
 8018780:	89a3      	ldrh	r3, [r4, #12]
 8018782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018786:	81a3      	strh	r3, [r4, #12]
 8018788:	f04f 30ff 	mov.w	r0, #4294967295
 801878c:	e78e      	b.n	80186ac <__sflush_r+0x1c>
 801878e:	4407      	add	r7, r0
 8018790:	eba8 0800 	sub.w	r8, r8, r0
 8018794:	e7e9      	b.n	801876a <__sflush_r+0xda>
 8018796:	bf00      	nop
 8018798:	20400001 	.word	0x20400001

0801879c <_fflush_r>:
 801879c:	b538      	push	{r3, r4, r5, lr}
 801879e:	690b      	ldr	r3, [r1, #16]
 80187a0:	4605      	mov	r5, r0
 80187a2:	460c      	mov	r4, r1
 80187a4:	b913      	cbnz	r3, 80187ac <_fflush_r+0x10>
 80187a6:	2500      	movs	r5, #0
 80187a8:	4628      	mov	r0, r5
 80187aa:	bd38      	pop	{r3, r4, r5, pc}
 80187ac:	b118      	cbz	r0, 80187b6 <_fflush_r+0x1a>
 80187ae:	6983      	ldr	r3, [r0, #24]
 80187b0:	b90b      	cbnz	r3, 80187b6 <_fflush_r+0x1a>
 80187b2:	f000 f887 	bl	80188c4 <__sinit>
 80187b6:	4b14      	ldr	r3, [pc, #80]	; (8018808 <_fflush_r+0x6c>)
 80187b8:	429c      	cmp	r4, r3
 80187ba:	d11b      	bne.n	80187f4 <_fflush_r+0x58>
 80187bc:	686c      	ldr	r4, [r5, #4]
 80187be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d0ef      	beq.n	80187a6 <_fflush_r+0xa>
 80187c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80187c8:	07d0      	lsls	r0, r2, #31
 80187ca:	d404      	bmi.n	80187d6 <_fflush_r+0x3a>
 80187cc:	0599      	lsls	r1, r3, #22
 80187ce:	d402      	bmi.n	80187d6 <_fflush_r+0x3a>
 80187d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80187d2:	f000 f915 	bl	8018a00 <__retarget_lock_acquire_recursive>
 80187d6:	4628      	mov	r0, r5
 80187d8:	4621      	mov	r1, r4
 80187da:	f7ff ff59 	bl	8018690 <__sflush_r>
 80187de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80187e0:	07da      	lsls	r2, r3, #31
 80187e2:	4605      	mov	r5, r0
 80187e4:	d4e0      	bmi.n	80187a8 <_fflush_r+0xc>
 80187e6:	89a3      	ldrh	r3, [r4, #12]
 80187e8:	059b      	lsls	r3, r3, #22
 80187ea:	d4dd      	bmi.n	80187a8 <_fflush_r+0xc>
 80187ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80187ee:	f000 f908 	bl	8018a02 <__retarget_lock_release_recursive>
 80187f2:	e7d9      	b.n	80187a8 <_fflush_r+0xc>
 80187f4:	4b05      	ldr	r3, [pc, #20]	; (801880c <_fflush_r+0x70>)
 80187f6:	429c      	cmp	r4, r3
 80187f8:	d101      	bne.n	80187fe <_fflush_r+0x62>
 80187fa:	68ac      	ldr	r4, [r5, #8]
 80187fc:	e7df      	b.n	80187be <_fflush_r+0x22>
 80187fe:	4b04      	ldr	r3, [pc, #16]	; (8018810 <_fflush_r+0x74>)
 8018800:	429c      	cmp	r4, r3
 8018802:	bf08      	it	eq
 8018804:	68ec      	ldreq	r4, [r5, #12]
 8018806:	e7da      	b.n	80187be <_fflush_r+0x22>
 8018808:	0801ada0 	.word	0x0801ada0
 801880c:	0801adc0 	.word	0x0801adc0
 8018810:	0801ad80 	.word	0x0801ad80

08018814 <std>:
 8018814:	2300      	movs	r3, #0
 8018816:	b510      	push	{r4, lr}
 8018818:	4604      	mov	r4, r0
 801881a:	e9c0 3300 	strd	r3, r3, [r0]
 801881e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018822:	6083      	str	r3, [r0, #8]
 8018824:	8181      	strh	r1, [r0, #12]
 8018826:	6643      	str	r3, [r0, #100]	; 0x64
 8018828:	81c2      	strh	r2, [r0, #14]
 801882a:	6183      	str	r3, [r0, #24]
 801882c:	4619      	mov	r1, r3
 801882e:	2208      	movs	r2, #8
 8018830:	305c      	adds	r0, #92	; 0x5c
 8018832:	f7ff f98f 	bl	8017b54 <memset>
 8018836:	4b05      	ldr	r3, [pc, #20]	; (801884c <std+0x38>)
 8018838:	6263      	str	r3, [r4, #36]	; 0x24
 801883a:	4b05      	ldr	r3, [pc, #20]	; (8018850 <std+0x3c>)
 801883c:	62a3      	str	r3, [r4, #40]	; 0x28
 801883e:	4b05      	ldr	r3, [pc, #20]	; (8018854 <std+0x40>)
 8018840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018842:	4b05      	ldr	r3, [pc, #20]	; (8018858 <std+0x44>)
 8018844:	6224      	str	r4, [r4, #32]
 8018846:	6323      	str	r3, [r4, #48]	; 0x30
 8018848:	bd10      	pop	{r4, pc}
 801884a:	bf00      	nop
 801884c:	08018eb9 	.word	0x08018eb9
 8018850:	08018edb 	.word	0x08018edb
 8018854:	08018f13 	.word	0x08018f13
 8018858:	08018f37 	.word	0x08018f37

0801885c <_cleanup_r>:
 801885c:	4901      	ldr	r1, [pc, #4]	; (8018864 <_cleanup_r+0x8>)
 801885e:	f000 b8af 	b.w	80189c0 <_fwalk_reent>
 8018862:	bf00      	nop
 8018864:	0801879d 	.word	0x0801879d

08018868 <__sfmoreglue>:
 8018868:	b570      	push	{r4, r5, r6, lr}
 801886a:	2268      	movs	r2, #104	; 0x68
 801886c:	1e4d      	subs	r5, r1, #1
 801886e:	4355      	muls	r5, r2
 8018870:	460e      	mov	r6, r1
 8018872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018876:	f7ff f9e1 	bl	8017c3c <_malloc_r>
 801887a:	4604      	mov	r4, r0
 801887c:	b140      	cbz	r0, 8018890 <__sfmoreglue+0x28>
 801887e:	2100      	movs	r1, #0
 8018880:	e9c0 1600 	strd	r1, r6, [r0]
 8018884:	300c      	adds	r0, #12
 8018886:	60a0      	str	r0, [r4, #8]
 8018888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801888c:	f7ff f962 	bl	8017b54 <memset>
 8018890:	4620      	mov	r0, r4
 8018892:	bd70      	pop	{r4, r5, r6, pc}

08018894 <__sfp_lock_acquire>:
 8018894:	4801      	ldr	r0, [pc, #4]	; (801889c <__sfp_lock_acquire+0x8>)
 8018896:	f000 b8b3 	b.w	8018a00 <__retarget_lock_acquire_recursive>
 801889a:	bf00      	nop
 801889c:	20001ced 	.word	0x20001ced

080188a0 <__sfp_lock_release>:
 80188a0:	4801      	ldr	r0, [pc, #4]	; (80188a8 <__sfp_lock_release+0x8>)
 80188a2:	f000 b8ae 	b.w	8018a02 <__retarget_lock_release_recursive>
 80188a6:	bf00      	nop
 80188a8:	20001ced 	.word	0x20001ced

080188ac <__sinit_lock_acquire>:
 80188ac:	4801      	ldr	r0, [pc, #4]	; (80188b4 <__sinit_lock_acquire+0x8>)
 80188ae:	f000 b8a7 	b.w	8018a00 <__retarget_lock_acquire_recursive>
 80188b2:	bf00      	nop
 80188b4:	20001cee 	.word	0x20001cee

080188b8 <__sinit_lock_release>:
 80188b8:	4801      	ldr	r0, [pc, #4]	; (80188c0 <__sinit_lock_release+0x8>)
 80188ba:	f000 b8a2 	b.w	8018a02 <__retarget_lock_release_recursive>
 80188be:	bf00      	nop
 80188c0:	20001cee 	.word	0x20001cee

080188c4 <__sinit>:
 80188c4:	b510      	push	{r4, lr}
 80188c6:	4604      	mov	r4, r0
 80188c8:	f7ff fff0 	bl	80188ac <__sinit_lock_acquire>
 80188cc:	69a3      	ldr	r3, [r4, #24]
 80188ce:	b11b      	cbz	r3, 80188d8 <__sinit+0x14>
 80188d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188d4:	f7ff bff0 	b.w	80188b8 <__sinit_lock_release>
 80188d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80188dc:	6523      	str	r3, [r4, #80]	; 0x50
 80188de:	4b13      	ldr	r3, [pc, #76]	; (801892c <__sinit+0x68>)
 80188e0:	4a13      	ldr	r2, [pc, #76]	; (8018930 <__sinit+0x6c>)
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80188e6:	42a3      	cmp	r3, r4
 80188e8:	bf04      	itt	eq
 80188ea:	2301      	moveq	r3, #1
 80188ec:	61a3      	streq	r3, [r4, #24]
 80188ee:	4620      	mov	r0, r4
 80188f0:	f000 f820 	bl	8018934 <__sfp>
 80188f4:	6060      	str	r0, [r4, #4]
 80188f6:	4620      	mov	r0, r4
 80188f8:	f000 f81c 	bl	8018934 <__sfp>
 80188fc:	60a0      	str	r0, [r4, #8]
 80188fe:	4620      	mov	r0, r4
 8018900:	f000 f818 	bl	8018934 <__sfp>
 8018904:	2200      	movs	r2, #0
 8018906:	60e0      	str	r0, [r4, #12]
 8018908:	2104      	movs	r1, #4
 801890a:	6860      	ldr	r0, [r4, #4]
 801890c:	f7ff ff82 	bl	8018814 <std>
 8018910:	68a0      	ldr	r0, [r4, #8]
 8018912:	2201      	movs	r2, #1
 8018914:	2109      	movs	r1, #9
 8018916:	f7ff ff7d 	bl	8018814 <std>
 801891a:	68e0      	ldr	r0, [r4, #12]
 801891c:	2202      	movs	r2, #2
 801891e:	2112      	movs	r1, #18
 8018920:	f7ff ff78 	bl	8018814 <std>
 8018924:	2301      	movs	r3, #1
 8018926:	61a3      	str	r3, [r4, #24]
 8018928:	e7d2      	b.n	80188d0 <__sinit+0xc>
 801892a:	bf00      	nop
 801892c:	0801acd4 	.word	0x0801acd4
 8018930:	0801885d 	.word	0x0801885d

08018934 <__sfp>:
 8018934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018936:	4607      	mov	r7, r0
 8018938:	f7ff ffac 	bl	8018894 <__sfp_lock_acquire>
 801893c:	4b1e      	ldr	r3, [pc, #120]	; (80189b8 <__sfp+0x84>)
 801893e:	681e      	ldr	r6, [r3, #0]
 8018940:	69b3      	ldr	r3, [r6, #24]
 8018942:	b913      	cbnz	r3, 801894a <__sfp+0x16>
 8018944:	4630      	mov	r0, r6
 8018946:	f7ff ffbd 	bl	80188c4 <__sinit>
 801894a:	3648      	adds	r6, #72	; 0x48
 801894c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018950:	3b01      	subs	r3, #1
 8018952:	d503      	bpl.n	801895c <__sfp+0x28>
 8018954:	6833      	ldr	r3, [r6, #0]
 8018956:	b30b      	cbz	r3, 801899c <__sfp+0x68>
 8018958:	6836      	ldr	r6, [r6, #0]
 801895a:	e7f7      	b.n	801894c <__sfp+0x18>
 801895c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018960:	b9d5      	cbnz	r5, 8018998 <__sfp+0x64>
 8018962:	4b16      	ldr	r3, [pc, #88]	; (80189bc <__sfp+0x88>)
 8018964:	60e3      	str	r3, [r4, #12]
 8018966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801896a:	6665      	str	r5, [r4, #100]	; 0x64
 801896c:	f000 f847 	bl	80189fe <__retarget_lock_init_recursive>
 8018970:	f7ff ff96 	bl	80188a0 <__sfp_lock_release>
 8018974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801897c:	6025      	str	r5, [r4, #0]
 801897e:	61a5      	str	r5, [r4, #24]
 8018980:	2208      	movs	r2, #8
 8018982:	4629      	mov	r1, r5
 8018984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018988:	f7ff f8e4 	bl	8017b54 <memset>
 801898c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018994:	4620      	mov	r0, r4
 8018996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018998:	3468      	adds	r4, #104	; 0x68
 801899a:	e7d9      	b.n	8018950 <__sfp+0x1c>
 801899c:	2104      	movs	r1, #4
 801899e:	4638      	mov	r0, r7
 80189a0:	f7ff ff62 	bl	8018868 <__sfmoreglue>
 80189a4:	4604      	mov	r4, r0
 80189a6:	6030      	str	r0, [r6, #0]
 80189a8:	2800      	cmp	r0, #0
 80189aa:	d1d5      	bne.n	8018958 <__sfp+0x24>
 80189ac:	f7ff ff78 	bl	80188a0 <__sfp_lock_release>
 80189b0:	230c      	movs	r3, #12
 80189b2:	603b      	str	r3, [r7, #0]
 80189b4:	e7ee      	b.n	8018994 <__sfp+0x60>
 80189b6:	bf00      	nop
 80189b8:	0801acd4 	.word	0x0801acd4
 80189bc:	ffff0001 	.word	0xffff0001

080189c0 <_fwalk_reent>:
 80189c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189c4:	4606      	mov	r6, r0
 80189c6:	4688      	mov	r8, r1
 80189c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80189cc:	2700      	movs	r7, #0
 80189ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80189d2:	f1b9 0901 	subs.w	r9, r9, #1
 80189d6:	d505      	bpl.n	80189e4 <_fwalk_reent+0x24>
 80189d8:	6824      	ldr	r4, [r4, #0]
 80189da:	2c00      	cmp	r4, #0
 80189dc:	d1f7      	bne.n	80189ce <_fwalk_reent+0xe>
 80189de:	4638      	mov	r0, r7
 80189e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189e4:	89ab      	ldrh	r3, [r5, #12]
 80189e6:	2b01      	cmp	r3, #1
 80189e8:	d907      	bls.n	80189fa <_fwalk_reent+0x3a>
 80189ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80189ee:	3301      	adds	r3, #1
 80189f0:	d003      	beq.n	80189fa <_fwalk_reent+0x3a>
 80189f2:	4629      	mov	r1, r5
 80189f4:	4630      	mov	r0, r6
 80189f6:	47c0      	blx	r8
 80189f8:	4307      	orrs	r7, r0
 80189fa:	3568      	adds	r5, #104	; 0x68
 80189fc:	e7e9      	b.n	80189d2 <_fwalk_reent+0x12>

080189fe <__retarget_lock_init_recursive>:
 80189fe:	4770      	bx	lr

08018a00 <__retarget_lock_acquire_recursive>:
 8018a00:	4770      	bx	lr

08018a02 <__retarget_lock_release_recursive>:
 8018a02:	4770      	bx	lr

08018a04 <__swhatbuf_r>:
 8018a04:	b570      	push	{r4, r5, r6, lr}
 8018a06:	460e      	mov	r6, r1
 8018a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a0c:	2900      	cmp	r1, #0
 8018a0e:	b096      	sub	sp, #88	; 0x58
 8018a10:	4614      	mov	r4, r2
 8018a12:	461d      	mov	r5, r3
 8018a14:	da08      	bge.n	8018a28 <__swhatbuf_r+0x24>
 8018a16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	602a      	str	r2, [r5, #0]
 8018a1e:	061a      	lsls	r2, r3, #24
 8018a20:	d410      	bmi.n	8018a44 <__swhatbuf_r+0x40>
 8018a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018a26:	e00e      	b.n	8018a46 <__swhatbuf_r+0x42>
 8018a28:	466a      	mov	r2, sp
 8018a2a:	f000 faab 	bl	8018f84 <_fstat_r>
 8018a2e:	2800      	cmp	r0, #0
 8018a30:	dbf1      	blt.n	8018a16 <__swhatbuf_r+0x12>
 8018a32:	9a01      	ldr	r2, [sp, #4]
 8018a34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018a38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018a3c:	425a      	negs	r2, r3
 8018a3e:	415a      	adcs	r2, r3
 8018a40:	602a      	str	r2, [r5, #0]
 8018a42:	e7ee      	b.n	8018a22 <__swhatbuf_r+0x1e>
 8018a44:	2340      	movs	r3, #64	; 0x40
 8018a46:	2000      	movs	r0, #0
 8018a48:	6023      	str	r3, [r4, #0]
 8018a4a:	b016      	add	sp, #88	; 0x58
 8018a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018a50 <__smakebuf_r>:
 8018a50:	898b      	ldrh	r3, [r1, #12]
 8018a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018a54:	079d      	lsls	r5, r3, #30
 8018a56:	4606      	mov	r6, r0
 8018a58:	460c      	mov	r4, r1
 8018a5a:	d507      	bpl.n	8018a6c <__smakebuf_r+0x1c>
 8018a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018a60:	6023      	str	r3, [r4, #0]
 8018a62:	6123      	str	r3, [r4, #16]
 8018a64:	2301      	movs	r3, #1
 8018a66:	6163      	str	r3, [r4, #20]
 8018a68:	b002      	add	sp, #8
 8018a6a:	bd70      	pop	{r4, r5, r6, pc}
 8018a6c:	ab01      	add	r3, sp, #4
 8018a6e:	466a      	mov	r2, sp
 8018a70:	f7ff ffc8 	bl	8018a04 <__swhatbuf_r>
 8018a74:	9900      	ldr	r1, [sp, #0]
 8018a76:	4605      	mov	r5, r0
 8018a78:	4630      	mov	r0, r6
 8018a7a:	f7ff f8df 	bl	8017c3c <_malloc_r>
 8018a7e:	b948      	cbnz	r0, 8018a94 <__smakebuf_r+0x44>
 8018a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a84:	059a      	lsls	r2, r3, #22
 8018a86:	d4ef      	bmi.n	8018a68 <__smakebuf_r+0x18>
 8018a88:	f023 0303 	bic.w	r3, r3, #3
 8018a8c:	f043 0302 	orr.w	r3, r3, #2
 8018a90:	81a3      	strh	r3, [r4, #12]
 8018a92:	e7e3      	b.n	8018a5c <__smakebuf_r+0xc>
 8018a94:	4b0d      	ldr	r3, [pc, #52]	; (8018acc <__smakebuf_r+0x7c>)
 8018a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8018a98:	89a3      	ldrh	r3, [r4, #12]
 8018a9a:	6020      	str	r0, [r4, #0]
 8018a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018aa0:	81a3      	strh	r3, [r4, #12]
 8018aa2:	9b00      	ldr	r3, [sp, #0]
 8018aa4:	6163      	str	r3, [r4, #20]
 8018aa6:	9b01      	ldr	r3, [sp, #4]
 8018aa8:	6120      	str	r0, [r4, #16]
 8018aaa:	b15b      	cbz	r3, 8018ac4 <__smakebuf_r+0x74>
 8018aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ab0:	4630      	mov	r0, r6
 8018ab2:	f000 fa79 	bl	8018fa8 <_isatty_r>
 8018ab6:	b128      	cbz	r0, 8018ac4 <__smakebuf_r+0x74>
 8018ab8:	89a3      	ldrh	r3, [r4, #12]
 8018aba:	f023 0303 	bic.w	r3, r3, #3
 8018abe:	f043 0301 	orr.w	r3, r3, #1
 8018ac2:	81a3      	strh	r3, [r4, #12]
 8018ac4:	89a0      	ldrh	r0, [r4, #12]
 8018ac6:	4305      	orrs	r5, r0
 8018ac8:	81a5      	strh	r5, [r4, #12]
 8018aca:	e7cd      	b.n	8018a68 <__smakebuf_r+0x18>
 8018acc:	0801885d 	.word	0x0801885d

08018ad0 <memmove>:
 8018ad0:	4288      	cmp	r0, r1
 8018ad2:	b510      	push	{r4, lr}
 8018ad4:	eb01 0402 	add.w	r4, r1, r2
 8018ad8:	d902      	bls.n	8018ae0 <memmove+0x10>
 8018ada:	4284      	cmp	r4, r0
 8018adc:	4623      	mov	r3, r4
 8018ade:	d807      	bhi.n	8018af0 <memmove+0x20>
 8018ae0:	1e43      	subs	r3, r0, #1
 8018ae2:	42a1      	cmp	r1, r4
 8018ae4:	d008      	beq.n	8018af8 <memmove+0x28>
 8018ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018aee:	e7f8      	b.n	8018ae2 <memmove+0x12>
 8018af0:	4402      	add	r2, r0
 8018af2:	4601      	mov	r1, r0
 8018af4:	428a      	cmp	r2, r1
 8018af6:	d100      	bne.n	8018afa <memmove+0x2a>
 8018af8:	bd10      	pop	{r4, pc}
 8018afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018b02:	e7f7      	b.n	8018af4 <memmove+0x24>

08018b04 <__malloc_lock>:
 8018b04:	4801      	ldr	r0, [pc, #4]	; (8018b0c <__malloc_lock+0x8>)
 8018b06:	f7ff bf7b 	b.w	8018a00 <__retarget_lock_acquire_recursive>
 8018b0a:	bf00      	nop
 8018b0c:	20001cec 	.word	0x20001cec

08018b10 <__malloc_unlock>:
 8018b10:	4801      	ldr	r0, [pc, #4]	; (8018b18 <__malloc_unlock+0x8>)
 8018b12:	f7ff bf76 	b.w	8018a02 <__retarget_lock_release_recursive>
 8018b16:	bf00      	nop
 8018b18:	20001cec 	.word	0x20001cec

08018b1c <_realloc_r>:
 8018b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b20:	4680      	mov	r8, r0
 8018b22:	4614      	mov	r4, r2
 8018b24:	460e      	mov	r6, r1
 8018b26:	b921      	cbnz	r1, 8018b32 <_realloc_r+0x16>
 8018b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b2c:	4611      	mov	r1, r2
 8018b2e:	f7ff b885 	b.w	8017c3c <_malloc_r>
 8018b32:	b92a      	cbnz	r2, 8018b40 <_realloc_r+0x24>
 8018b34:	f7ff f816 	bl	8017b64 <_free_r>
 8018b38:	4625      	mov	r5, r4
 8018b3a:	4628      	mov	r0, r5
 8018b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b40:	f000 fa54 	bl	8018fec <_malloc_usable_size_r>
 8018b44:	4284      	cmp	r4, r0
 8018b46:	4607      	mov	r7, r0
 8018b48:	d802      	bhi.n	8018b50 <_realloc_r+0x34>
 8018b4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018b4e:	d812      	bhi.n	8018b76 <_realloc_r+0x5a>
 8018b50:	4621      	mov	r1, r4
 8018b52:	4640      	mov	r0, r8
 8018b54:	f7ff f872 	bl	8017c3c <_malloc_r>
 8018b58:	4605      	mov	r5, r0
 8018b5a:	2800      	cmp	r0, #0
 8018b5c:	d0ed      	beq.n	8018b3a <_realloc_r+0x1e>
 8018b5e:	42bc      	cmp	r4, r7
 8018b60:	4622      	mov	r2, r4
 8018b62:	4631      	mov	r1, r6
 8018b64:	bf28      	it	cs
 8018b66:	463a      	movcs	r2, r7
 8018b68:	f7fe ffe6 	bl	8017b38 <memcpy>
 8018b6c:	4631      	mov	r1, r6
 8018b6e:	4640      	mov	r0, r8
 8018b70:	f7fe fff8 	bl	8017b64 <_free_r>
 8018b74:	e7e1      	b.n	8018b3a <_realloc_r+0x1e>
 8018b76:	4635      	mov	r5, r6
 8018b78:	e7df      	b.n	8018b3a <_realloc_r+0x1e>

08018b7a <__ssputs_r>:
 8018b7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b7e:	688e      	ldr	r6, [r1, #8]
 8018b80:	429e      	cmp	r6, r3
 8018b82:	4682      	mov	sl, r0
 8018b84:	460c      	mov	r4, r1
 8018b86:	4690      	mov	r8, r2
 8018b88:	461f      	mov	r7, r3
 8018b8a:	d838      	bhi.n	8018bfe <__ssputs_r+0x84>
 8018b8c:	898a      	ldrh	r2, [r1, #12]
 8018b8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018b92:	d032      	beq.n	8018bfa <__ssputs_r+0x80>
 8018b94:	6825      	ldr	r5, [r4, #0]
 8018b96:	6909      	ldr	r1, [r1, #16]
 8018b98:	eba5 0901 	sub.w	r9, r5, r1
 8018b9c:	6965      	ldr	r5, [r4, #20]
 8018b9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018ba2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018ba6:	3301      	adds	r3, #1
 8018ba8:	444b      	add	r3, r9
 8018baa:	106d      	asrs	r5, r5, #1
 8018bac:	429d      	cmp	r5, r3
 8018bae:	bf38      	it	cc
 8018bb0:	461d      	movcc	r5, r3
 8018bb2:	0553      	lsls	r3, r2, #21
 8018bb4:	d531      	bpl.n	8018c1a <__ssputs_r+0xa0>
 8018bb6:	4629      	mov	r1, r5
 8018bb8:	f7ff f840 	bl	8017c3c <_malloc_r>
 8018bbc:	4606      	mov	r6, r0
 8018bbe:	b950      	cbnz	r0, 8018bd6 <__ssputs_r+0x5c>
 8018bc0:	230c      	movs	r3, #12
 8018bc2:	f8ca 3000 	str.w	r3, [sl]
 8018bc6:	89a3      	ldrh	r3, [r4, #12]
 8018bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bcc:	81a3      	strh	r3, [r4, #12]
 8018bce:	f04f 30ff 	mov.w	r0, #4294967295
 8018bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bd6:	6921      	ldr	r1, [r4, #16]
 8018bd8:	464a      	mov	r2, r9
 8018bda:	f7fe ffad 	bl	8017b38 <memcpy>
 8018bde:	89a3      	ldrh	r3, [r4, #12]
 8018be0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018be8:	81a3      	strh	r3, [r4, #12]
 8018bea:	6126      	str	r6, [r4, #16]
 8018bec:	6165      	str	r5, [r4, #20]
 8018bee:	444e      	add	r6, r9
 8018bf0:	eba5 0509 	sub.w	r5, r5, r9
 8018bf4:	6026      	str	r6, [r4, #0]
 8018bf6:	60a5      	str	r5, [r4, #8]
 8018bf8:	463e      	mov	r6, r7
 8018bfa:	42be      	cmp	r6, r7
 8018bfc:	d900      	bls.n	8018c00 <__ssputs_r+0x86>
 8018bfe:	463e      	mov	r6, r7
 8018c00:	6820      	ldr	r0, [r4, #0]
 8018c02:	4632      	mov	r2, r6
 8018c04:	4641      	mov	r1, r8
 8018c06:	f7ff ff63 	bl	8018ad0 <memmove>
 8018c0a:	68a3      	ldr	r3, [r4, #8]
 8018c0c:	1b9b      	subs	r3, r3, r6
 8018c0e:	60a3      	str	r3, [r4, #8]
 8018c10:	6823      	ldr	r3, [r4, #0]
 8018c12:	4433      	add	r3, r6
 8018c14:	6023      	str	r3, [r4, #0]
 8018c16:	2000      	movs	r0, #0
 8018c18:	e7db      	b.n	8018bd2 <__ssputs_r+0x58>
 8018c1a:	462a      	mov	r2, r5
 8018c1c:	f7ff ff7e 	bl	8018b1c <_realloc_r>
 8018c20:	4606      	mov	r6, r0
 8018c22:	2800      	cmp	r0, #0
 8018c24:	d1e1      	bne.n	8018bea <__ssputs_r+0x70>
 8018c26:	6921      	ldr	r1, [r4, #16]
 8018c28:	4650      	mov	r0, sl
 8018c2a:	f7fe ff9b 	bl	8017b64 <_free_r>
 8018c2e:	e7c7      	b.n	8018bc0 <__ssputs_r+0x46>

08018c30 <_svfiprintf_r>:
 8018c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c34:	4698      	mov	r8, r3
 8018c36:	898b      	ldrh	r3, [r1, #12]
 8018c38:	061b      	lsls	r3, r3, #24
 8018c3a:	b09d      	sub	sp, #116	; 0x74
 8018c3c:	4607      	mov	r7, r0
 8018c3e:	460d      	mov	r5, r1
 8018c40:	4614      	mov	r4, r2
 8018c42:	d50e      	bpl.n	8018c62 <_svfiprintf_r+0x32>
 8018c44:	690b      	ldr	r3, [r1, #16]
 8018c46:	b963      	cbnz	r3, 8018c62 <_svfiprintf_r+0x32>
 8018c48:	2140      	movs	r1, #64	; 0x40
 8018c4a:	f7fe fff7 	bl	8017c3c <_malloc_r>
 8018c4e:	6028      	str	r0, [r5, #0]
 8018c50:	6128      	str	r0, [r5, #16]
 8018c52:	b920      	cbnz	r0, 8018c5e <_svfiprintf_r+0x2e>
 8018c54:	230c      	movs	r3, #12
 8018c56:	603b      	str	r3, [r7, #0]
 8018c58:	f04f 30ff 	mov.w	r0, #4294967295
 8018c5c:	e0d1      	b.n	8018e02 <_svfiprintf_r+0x1d2>
 8018c5e:	2340      	movs	r3, #64	; 0x40
 8018c60:	616b      	str	r3, [r5, #20]
 8018c62:	2300      	movs	r3, #0
 8018c64:	9309      	str	r3, [sp, #36]	; 0x24
 8018c66:	2320      	movs	r3, #32
 8018c68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018c70:	2330      	movs	r3, #48	; 0x30
 8018c72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018e1c <_svfiprintf_r+0x1ec>
 8018c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018c7a:	f04f 0901 	mov.w	r9, #1
 8018c7e:	4623      	mov	r3, r4
 8018c80:	469a      	mov	sl, r3
 8018c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c86:	b10a      	cbz	r2, 8018c8c <_svfiprintf_r+0x5c>
 8018c88:	2a25      	cmp	r2, #37	; 0x25
 8018c8a:	d1f9      	bne.n	8018c80 <_svfiprintf_r+0x50>
 8018c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8018c90:	d00b      	beq.n	8018caa <_svfiprintf_r+0x7a>
 8018c92:	465b      	mov	r3, fp
 8018c94:	4622      	mov	r2, r4
 8018c96:	4629      	mov	r1, r5
 8018c98:	4638      	mov	r0, r7
 8018c9a:	f7ff ff6e 	bl	8018b7a <__ssputs_r>
 8018c9e:	3001      	adds	r0, #1
 8018ca0:	f000 80aa 	beq.w	8018df8 <_svfiprintf_r+0x1c8>
 8018ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ca6:	445a      	add	r2, fp
 8018ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8018caa:	f89a 3000 	ldrb.w	r3, [sl]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	f000 80a2 	beq.w	8018df8 <_svfiprintf_r+0x1c8>
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8018cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018cbe:	f10a 0a01 	add.w	sl, sl, #1
 8018cc2:	9304      	str	r3, [sp, #16]
 8018cc4:	9307      	str	r3, [sp, #28]
 8018cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018cca:	931a      	str	r3, [sp, #104]	; 0x68
 8018ccc:	4654      	mov	r4, sl
 8018cce:	2205      	movs	r2, #5
 8018cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cd4:	4851      	ldr	r0, [pc, #324]	; (8018e1c <_svfiprintf_r+0x1ec>)
 8018cd6:	f7ee fe5b 	bl	8007990 <memchr>
 8018cda:	9a04      	ldr	r2, [sp, #16]
 8018cdc:	b9d8      	cbnz	r0, 8018d16 <_svfiprintf_r+0xe6>
 8018cde:	06d0      	lsls	r0, r2, #27
 8018ce0:	bf44      	itt	mi
 8018ce2:	2320      	movmi	r3, #32
 8018ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ce8:	0711      	lsls	r1, r2, #28
 8018cea:	bf44      	itt	mi
 8018cec:	232b      	movmi	r3, #43	; 0x2b
 8018cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8018cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8018cf8:	d015      	beq.n	8018d26 <_svfiprintf_r+0xf6>
 8018cfa:	9a07      	ldr	r2, [sp, #28]
 8018cfc:	4654      	mov	r4, sl
 8018cfe:	2000      	movs	r0, #0
 8018d00:	f04f 0c0a 	mov.w	ip, #10
 8018d04:	4621      	mov	r1, r4
 8018d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d0a:	3b30      	subs	r3, #48	; 0x30
 8018d0c:	2b09      	cmp	r3, #9
 8018d0e:	d94e      	bls.n	8018dae <_svfiprintf_r+0x17e>
 8018d10:	b1b0      	cbz	r0, 8018d40 <_svfiprintf_r+0x110>
 8018d12:	9207      	str	r2, [sp, #28]
 8018d14:	e014      	b.n	8018d40 <_svfiprintf_r+0x110>
 8018d16:	eba0 0308 	sub.w	r3, r0, r8
 8018d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8018d1e:	4313      	orrs	r3, r2
 8018d20:	9304      	str	r3, [sp, #16]
 8018d22:	46a2      	mov	sl, r4
 8018d24:	e7d2      	b.n	8018ccc <_svfiprintf_r+0x9c>
 8018d26:	9b03      	ldr	r3, [sp, #12]
 8018d28:	1d19      	adds	r1, r3, #4
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	9103      	str	r1, [sp, #12]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	bfbb      	ittet	lt
 8018d32:	425b      	neglt	r3, r3
 8018d34:	f042 0202 	orrlt.w	r2, r2, #2
 8018d38:	9307      	strge	r3, [sp, #28]
 8018d3a:	9307      	strlt	r3, [sp, #28]
 8018d3c:	bfb8      	it	lt
 8018d3e:	9204      	strlt	r2, [sp, #16]
 8018d40:	7823      	ldrb	r3, [r4, #0]
 8018d42:	2b2e      	cmp	r3, #46	; 0x2e
 8018d44:	d10c      	bne.n	8018d60 <_svfiprintf_r+0x130>
 8018d46:	7863      	ldrb	r3, [r4, #1]
 8018d48:	2b2a      	cmp	r3, #42	; 0x2a
 8018d4a:	d135      	bne.n	8018db8 <_svfiprintf_r+0x188>
 8018d4c:	9b03      	ldr	r3, [sp, #12]
 8018d4e:	1d1a      	adds	r2, r3, #4
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	9203      	str	r2, [sp, #12]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	bfb8      	it	lt
 8018d58:	f04f 33ff 	movlt.w	r3, #4294967295
 8018d5c:	3402      	adds	r4, #2
 8018d5e:	9305      	str	r3, [sp, #20]
 8018d60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018e2c <_svfiprintf_r+0x1fc>
 8018d64:	7821      	ldrb	r1, [r4, #0]
 8018d66:	2203      	movs	r2, #3
 8018d68:	4650      	mov	r0, sl
 8018d6a:	f7ee fe11 	bl	8007990 <memchr>
 8018d6e:	b140      	cbz	r0, 8018d82 <_svfiprintf_r+0x152>
 8018d70:	2340      	movs	r3, #64	; 0x40
 8018d72:	eba0 000a 	sub.w	r0, r0, sl
 8018d76:	fa03 f000 	lsl.w	r0, r3, r0
 8018d7a:	9b04      	ldr	r3, [sp, #16]
 8018d7c:	4303      	orrs	r3, r0
 8018d7e:	3401      	adds	r4, #1
 8018d80:	9304      	str	r3, [sp, #16]
 8018d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d86:	4826      	ldr	r0, [pc, #152]	; (8018e20 <_svfiprintf_r+0x1f0>)
 8018d88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018d8c:	2206      	movs	r2, #6
 8018d8e:	f7ee fdff 	bl	8007990 <memchr>
 8018d92:	2800      	cmp	r0, #0
 8018d94:	d038      	beq.n	8018e08 <_svfiprintf_r+0x1d8>
 8018d96:	4b23      	ldr	r3, [pc, #140]	; (8018e24 <_svfiprintf_r+0x1f4>)
 8018d98:	bb1b      	cbnz	r3, 8018de2 <_svfiprintf_r+0x1b2>
 8018d9a:	9b03      	ldr	r3, [sp, #12]
 8018d9c:	3307      	adds	r3, #7
 8018d9e:	f023 0307 	bic.w	r3, r3, #7
 8018da2:	3308      	adds	r3, #8
 8018da4:	9303      	str	r3, [sp, #12]
 8018da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018da8:	4433      	add	r3, r6
 8018daa:	9309      	str	r3, [sp, #36]	; 0x24
 8018dac:	e767      	b.n	8018c7e <_svfiprintf_r+0x4e>
 8018dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8018db2:	460c      	mov	r4, r1
 8018db4:	2001      	movs	r0, #1
 8018db6:	e7a5      	b.n	8018d04 <_svfiprintf_r+0xd4>
 8018db8:	2300      	movs	r3, #0
 8018dba:	3401      	adds	r4, #1
 8018dbc:	9305      	str	r3, [sp, #20]
 8018dbe:	4619      	mov	r1, r3
 8018dc0:	f04f 0c0a 	mov.w	ip, #10
 8018dc4:	4620      	mov	r0, r4
 8018dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018dca:	3a30      	subs	r2, #48	; 0x30
 8018dcc:	2a09      	cmp	r2, #9
 8018dce:	d903      	bls.n	8018dd8 <_svfiprintf_r+0x1a8>
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d0c5      	beq.n	8018d60 <_svfiprintf_r+0x130>
 8018dd4:	9105      	str	r1, [sp, #20]
 8018dd6:	e7c3      	b.n	8018d60 <_svfiprintf_r+0x130>
 8018dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ddc:	4604      	mov	r4, r0
 8018dde:	2301      	movs	r3, #1
 8018de0:	e7f0      	b.n	8018dc4 <_svfiprintf_r+0x194>
 8018de2:	ab03      	add	r3, sp, #12
 8018de4:	9300      	str	r3, [sp, #0]
 8018de6:	462a      	mov	r2, r5
 8018de8:	4b0f      	ldr	r3, [pc, #60]	; (8018e28 <_svfiprintf_r+0x1f8>)
 8018dea:	a904      	add	r1, sp, #16
 8018dec:	4638      	mov	r0, r7
 8018dee:	f3af 8000 	nop.w
 8018df2:	1c42      	adds	r2, r0, #1
 8018df4:	4606      	mov	r6, r0
 8018df6:	d1d6      	bne.n	8018da6 <_svfiprintf_r+0x176>
 8018df8:	89ab      	ldrh	r3, [r5, #12]
 8018dfa:	065b      	lsls	r3, r3, #25
 8018dfc:	f53f af2c 	bmi.w	8018c58 <_svfiprintf_r+0x28>
 8018e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e02:	b01d      	add	sp, #116	; 0x74
 8018e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e08:	ab03      	add	r3, sp, #12
 8018e0a:	9300      	str	r3, [sp, #0]
 8018e0c:	462a      	mov	r2, r5
 8018e0e:	4b06      	ldr	r3, [pc, #24]	; (8018e28 <_svfiprintf_r+0x1f8>)
 8018e10:	a904      	add	r1, sp, #16
 8018e12:	4638      	mov	r0, r7
 8018e14:	f7ff f94e 	bl	80180b4 <_printf_i>
 8018e18:	e7eb      	b.n	8018df2 <_svfiprintf_r+0x1c2>
 8018e1a:	bf00      	nop
 8018e1c:	0801acd8 	.word	0x0801acd8
 8018e20:	0801ace2 	.word	0x0801ace2
 8018e24:	00000000 	.word	0x00000000
 8018e28:	08018b7b 	.word	0x08018b7b
 8018e2c:	0801acde 	.word	0x0801acde

08018e30 <_raise_r>:
 8018e30:	291f      	cmp	r1, #31
 8018e32:	b538      	push	{r3, r4, r5, lr}
 8018e34:	4604      	mov	r4, r0
 8018e36:	460d      	mov	r5, r1
 8018e38:	d904      	bls.n	8018e44 <_raise_r+0x14>
 8018e3a:	2316      	movs	r3, #22
 8018e3c:	6003      	str	r3, [r0, #0]
 8018e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8018e42:	bd38      	pop	{r3, r4, r5, pc}
 8018e44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018e46:	b112      	cbz	r2, 8018e4e <_raise_r+0x1e>
 8018e48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018e4c:	b94b      	cbnz	r3, 8018e62 <_raise_r+0x32>
 8018e4e:	4620      	mov	r0, r4
 8018e50:	f000 f830 	bl	8018eb4 <_getpid_r>
 8018e54:	462a      	mov	r2, r5
 8018e56:	4601      	mov	r1, r0
 8018e58:	4620      	mov	r0, r4
 8018e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018e5e:	f000 b817 	b.w	8018e90 <_kill_r>
 8018e62:	2b01      	cmp	r3, #1
 8018e64:	d00a      	beq.n	8018e7c <_raise_r+0x4c>
 8018e66:	1c59      	adds	r1, r3, #1
 8018e68:	d103      	bne.n	8018e72 <_raise_r+0x42>
 8018e6a:	2316      	movs	r3, #22
 8018e6c:	6003      	str	r3, [r0, #0]
 8018e6e:	2001      	movs	r0, #1
 8018e70:	e7e7      	b.n	8018e42 <_raise_r+0x12>
 8018e72:	2400      	movs	r4, #0
 8018e74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018e78:	4628      	mov	r0, r5
 8018e7a:	4798      	blx	r3
 8018e7c:	2000      	movs	r0, #0
 8018e7e:	e7e0      	b.n	8018e42 <_raise_r+0x12>

08018e80 <raise>:
 8018e80:	4b02      	ldr	r3, [pc, #8]	; (8018e8c <raise+0xc>)
 8018e82:	4601      	mov	r1, r0
 8018e84:	6818      	ldr	r0, [r3, #0]
 8018e86:	f7ff bfd3 	b.w	8018e30 <_raise_r>
 8018e8a:	bf00      	nop
 8018e8c:	200000d0 	.word	0x200000d0

08018e90 <_kill_r>:
 8018e90:	b538      	push	{r3, r4, r5, lr}
 8018e92:	4d07      	ldr	r5, [pc, #28]	; (8018eb0 <_kill_r+0x20>)
 8018e94:	2300      	movs	r3, #0
 8018e96:	4604      	mov	r4, r0
 8018e98:	4608      	mov	r0, r1
 8018e9a:	4611      	mov	r1, r2
 8018e9c:	602b      	str	r3, [r5, #0]
 8018e9e:	f7f1 fd6b 	bl	800a978 <_kill>
 8018ea2:	1c43      	adds	r3, r0, #1
 8018ea4:	d102      	bne.n	8018eac <_kill_r+0x1c>
 8018ea6:	682b      	ldr	r3, [r5, #0]
 8018ea8:	b103      	cbz	r3, 8018eac <_kill_r+0x1c>
 8018eaa:	6023      	str	r3, [r4, #0]
 8018eac:	bd38      	pop	{r3, r4, r5, pc}
 8018eae:	bf00      	nop
 8018eb0:	20001cf0 	.word	0x20001cf0

08018eb4 <_getpid_r>:
 8018eb4:	f7f1 bd58 	b.w	800a968 <_getpid>

08018eb8 <__sread>:
 8018eb8:	b510      	push	{r4, lr}
 8018eba:	460c      	mov	r4, r1
 8018ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ec0:	f000 f89c 	bl	8018ffc <_read_r>
 8018ec4:	2800      	cmp	r0, #0
 8018ec6:	bfab      	itete	ge
 8018ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018eca:	89a3      	ldrhlt	r3, [r4, #12]
 8018ecc:	181b      	addge	r3, r3, r0
 8018ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018ed2:	bfac      	ite	ge
 8018ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8018ed6:	81a3      	strhlt	r3, [r4, #12]
 8018ed8:	bd10      	pop	{r4, pc}

08018eda <__swrite>:
 8018eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ede:	461f      	mov	r7, r3
 8018ee0:	898b      	ldrh	r3, [r1, #12]
 8018ee2:	05db      	lsls	r3, r3, #23
 8018ee4:	4605      	mov	r5, r0
 8018ee6:	460c      	mov	r4, r1
 8018ee8:	4616      	mov	r6, r2
 8018eea:	d505      	bpl.n	8018ef8 <__swrite+0x1e>
 8018eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ef0:	2302      	movs	r3, #2
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	f000 f868 	bl	8018fc8 <_lseek_r>
 8018ef8:	89a3      	ldrh	r3, [r4, #12]
 8018efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018f02:	81a3      	strh	r3, [r4, #12]
 8018f04:	4632      	mov	r2, r6
 8018f06:	463b      	mov	r3, r7
 8018f08:	4628      	mov	r0, r5
 8018f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f0e:	f000 b817 	b.w	8018f40 <_write_r>

08018f12 <__sseek>:
 8018f12:	b510      	push	{r4, lr}
 8018f14:	460c      	mov	r4, r1
 8018f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f1a:	f000 f855 	bl	8018fc8 <_lseek_r>
 8018f1e:	1c43      	adds	r3, r0, #1
 8018f20:	89a3      	ldrh	r3, [r4, #12]
 8018f22:	bf15      	itete	ne
 8018f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8018f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018f2e:	81a3      	strheq	r3, [r4, #12]
 8018f30:	bf18      	it	ne
 8018f32:	81a3      	strhne	r3, [r4, #12]
 8018f34:	bd10      	pop	{r4, pc}

08018f36 <__sclose>:
 8018f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f3a:	f000 b813 	b.w	8018f64 <_close_r>
	...

08018f40 <_write_r>:
 8018f40:	b538      	push	{r3, r4, r5, lr}
 8018f42:	4d07      	ldr	r5, [pc, #28]	; (8018f60 <_write_r+0x20>)
 8018f44:	4604      	mov	r4, r0
 8018f46:	4608      	mov	r0, r1
 8018f48:	4611      	mov	r1, r2
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	602a      	str	r2, [r5, #0]
 8018f4e:	461a      	mov	r2, r3
 8018f50:	f7fa f962 	bl	8013218 <_write>
 8018f54:	1c43      	adds	r3, r0, #1
 8018f56:	d102      	bne.n	8018f5e <_write_r+0x1e>
 8018f58:	682b      	ldr	r3, [r5, #0]
 8018f5a:	b103      	cbz	r3, 8018f5e <_write_r+0x1e>
 8018f5c:	6023      	str	r3, [r4, #0]
 8018f5e:	bd38      	pop	{r3, r4, r5, pc}
 8018f60:	20001cf0 	.word	0x20001cf0

08018f64 <_close_r>:
 8018f64:	b538      	push	{r3, r4, r5, lr}
 8018f66:	4d06      	ldr	r5, [pc, #24]	; (8018f80 <_close_r+0x1c>)
 8018f68:	2300      	movs	r3, #0
 8018f6a:	4604      	mov	r4, r0
 8018f6c:	4608      	mov	r0, r1
 8018f6e:	602b      	str	r3, [r5, #0]
 8018f70:	f7f1 fd39 	bl	800a9e6 <_close>
 8018f74:	1c43      	adds	r3, r0, #1
 8018f76:	d102      	bne.n	8018f7e <_close_r+0x1a>
 8018f78:	682b      	ldr	r3, [r5, #0]
 8018f7a:	b103      	cbz	r3, 8018f7e <_close_r+0x1a>
 8018f7c:	6023      	str	r3, [r4, #0]
 8018f7e:	bd38      	pop	{r3, r4, r5, pc}
 8018f80:	20001cf0 	.word	0x20001cf0

08018f84 <_fstat_r>:
 8018f84:	b538      	push	{r3, r4, r5, lr}
 8018f86:	4d07      	ldr	r5, [pc, #28]	; (8018fa4 <_fstat_r+0x20>)
 8018f88:	2300      	movs	r3, #0
 8018f8a:	4604      	mov	r4, r0
 8018f8c:	4608      	mov	r0, r1
 8018f8e:	4611      	mov	r1, r2
 8018f90:	602b      	str	r3, [r5, #0]
 8018f92:	f7f1 fd34 	bl	800a9fe <_fstat>
 8018f96:	1c43      	adds	r3, r0, #1
 8018f98:	d102      	bne.n	8018fa0 <_fstat_r+0x1c>
 8018f9a:	682b      	ldr	r3, [r5, #0]
 8018f9c:	b103      	cbz	r3, 8018fa0 <_fstat_r+0x1c>
 8018f9e:	6023      	str	r3, [r4, #0]
 8018fa0:	bd38      	pop	{r3, r4, r5, pc}
 8018fa2:	bf00      	nop
 8018fa4:	20001cf0 	.word	0x20001cf0

08018fa8 <_isatty_r>:
 8018fa8:	b538      	push	{r3, r4, r5, lr}
 8018faa:	4d06      	ldr	r5, [pc, #24]	; (8018fc4 <_isatty_r+0x1c>)
 8018fac:	2300      	movs	r3, #0
 8018fae:	4604      	mov	r4, r0
 8018fb0:	4608      	mov	r0, r1
 8018fb2:	602b      	str	r3, [r5, #0]
 8018fb4:	f7f1 fd33 	bl	800aa1e <_isatty>
 8018fb8:	1c43      	adds	r3, r0, #1
 8018fba:	d102      	bne.n	8018fc2 <_isatty_r+0x1a>
 8018fbc:	682b      	ldr	r3, [r5, #0]
 8018fbe:	b103      	cbz	r3, 8018fc2 <_isatty_r+0x1a>
 8018fc0:	6023      	str	r3, [r4, #0]
 8018fc2:	bd38      	pop	{r3, r4, r5, pc}
 8018fc4:	20001cf0 	.word	0x20001cf0

08018fc8 <_lseek_r>:
 8018fc8:	b538      	push	{r3, r4, r5, lr}
 8018fca:	4d07      	ldr	r5, [pc, #28]	; (8018fe8 <_lseek_r+0x20>)
 8018fcc:	4604      	mov	r4, r0
 8018fce:	4608      	mov	r0, r1
 8018fd0:	4611      	mov	r1, r2
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	602a      	str	r2, [r5, #0]
 8018fd6:	461a      	mov	r2, r3
 8018fd8:	f7f1 fd2c 	bl	800aa34 <_lseek>
 8018fdc:	1c43      	adds	r3, r0, #1
 8018fde:	d102      	bne.n	8018fe6 <_lseek_r+0x1e>
 8018fe0:	682b      	ldr	r3, [r5, #0]
 8018fe2:	b103      	cbz	r3, 8018fe6 <_lseek_r+0x1e>
 8018fe4:	6023      	str	r3, [r4, #0]
 8018fe6:	bd38      	pop	{r3, r4, r5, pc}
 8018fe8:	20001cf0 	.word	0x20001cf0

08018fec <_malloc_usable_size_r>:
 8018fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ff0:	1f18      	subs	r0, r3, #4
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	bfbc      	itt	lt
 8018ff6:	580b      	ldrlt	r3, [r1, r0]
 8018ff8:	18c0      	addlt	r0, r0, r3
 8018ffa:	4770      	bx	lr

08018ffc <_read_r>:
 8018ffc:	b538      	push	{r3, r4, r5, lr}
 8018ffe:	4d07      	ldr	r5, [pc, #28]	; (801901c <_read_r+0x20>)
 8019000:	4604      	mov	r4, r0
 8019002:	4608      	mov	r0, r1
 8019004:	4611      	mov	r1, r2
 8019006:	2200      	movs	r2, #0
 8019008:	602a      	str	r2, [r5, #0]
 801900a:	461a      	mov	r2, r3
 801900c:	f7f1 fcce 	bl	800a9ac <_read>
 8019010:	1c43      	adds	r3, r0, #1
 8019012:	d102      	bne.n	801901a <_read_r+0x1e>
 8019014:	682b      	ldr	r3, [r5, #0]
 8019016:	b103      	cbz	r3, 801901a <_read_r+0x1e>
 8019018:	6023      	str	r3, [r4, #0]
 801901a:	bd38      	pop	{r3, r4, r5, pc}
 801901c:	20001cf0 	.word	0x20001cf0

08019020 <_init>:
 8019020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019022:	bf00      	nop
 8019024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019026:	bc08      	pop	{r3}
 8019028:	469e      	mov	lr, r3
 801902a:	4770      	bx	lr

0801902c <_fini>:
 801902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801902e:	bf00      	nop
 8019030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019032:	bc08      	pop	{r3}
 8019034:	469e      	mov	lr, r3
 8019036:	4770      	bx	lr

Disassembly of section .RamFunc:

08019038 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8019038:	b480      	push	{r7}
 801903a:	b089      	sub	sp, #36	; 0x24
 801903c:	af00      	add	r7, sp, #0
 801903e:	6078      	str	r0, [r7, #4]
 8019040:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8019042:	2380      	movs	r3, #128	; 0x80
 8019044:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801904e:	4b18      	ldr	r3, [pc, #96]	; (80190b0 <FLASH_Program_Fast+0x78>)
 8019050:	695b      	ldr	r3, [r3, #20]
 8019052:	4a17      	ldr	r2, [pc, #92]	; (80190b0 <FLASH_Program_Fast+0x78>)
 8019054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019058:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801905a:	f3ef 8310 	mrs	r3, PRIMASK
 801905e:	60fb      	str	r3, [r7, #12]
  return(result);
 8019060:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8019062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019064:	b672      	cpsid	i
}
 8019066:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8019068:	697b      	ldr	r3, [r7, #20]
 801906a:	681a      	ldr	r2, [r3, #0]
 801906c:	69bb      	ldr	r3, [r7, #24]
 801906e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8019070:	69bb      	ldr	r3, [r7, #24]
 8019072:	3304      	adds	r3, #4
 8019074:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	3304      	adds	r3, #4
 801907a:	617b      	str	r3, [r7, #20]
    row_index--;
 801907c:	7ffb      	ldrb	r3, [r7, #31]
 801907e:	3b01      	subs	r3, #1
 8019080:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8019082:	7ffb      	ldrb	r3, [r7, #31]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d1ef      	bne.n	8019068 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8019088:	bf00      	nop
 801908a:	4b09      	ldr	r3, [pc, #36]	; (80190b0 <FLASH_Program_Fast+0x78>)
 801908c:	691b      	ldr	r3, [r3, #16]
 801908e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019096:	d0f8      	beq.n	801908a <FLASH_Program_Fast+0x52>
 8019098:	693b      	ldr	r3, [r7, #16]
 801909a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801909c:	68bb      	ldr	r3, [r7, #8]
 801909e:	f383 8810 	msr	PRIMASK, r3
}
 80190a2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80190a4:	bf00      	nop
 80190a6:	3724      	adds	r7, #36	; 0x24
 80190a8:	46bd      	mov	sp, r7
 80190aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ae:	4770      	bx	lr
 80190b0:	58004000 	.word	0x58004000
